"use strict";
(function() {

Error.stackTraceLimit = Infinity;

var $global, $module;
if (typeof window !== "undefined") { /* web page */
  $global = window;
} else if (typeof self !== "undefined") { /* web worker */
  $global = self;
} else if (typeof global !== "undefined") { /* Node.js */
  $global = global;
  $global.require = require;
} else { /* others (e.g. Nashorn) */
  $global = this;
}

if ($global === undefined || $global.Array === undefined) {
  throw new Error("no global object found");
}
if (typeof module !== "undefined") {
  $module = module;
}

var $packages = {}, $idCounter = 0;
var $keys = function(m) { return m ? Object.keys(m) : []; };
var $flushConsole = function() {};
var $throwRuntimeError; /* set by package "runtime" */
var $throwNilPointerError = function() { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $call = function(fn, rcvr, args) { return fn.apply(rcvr, args); };
var $makeFunc = function(fn) { return function() { return $externalize(fn(this, new ($sliceType($jsObjectPtr))($global.Array.prototype.slice.call(arguments, []))), $emptyInterface); }; };
var $unused = function(v) {};

var $mapArray = function(array, f) {
  var newArray = new array.constructor(array.length);
  for (var i = 0; i < array.length; i++) {
    newArray[i] = f(array[i]);
  }
  return newArray;
};

var $methodVal = function(recv, name) {
  var vals = recv.$methodVals || {};
  recv.$methodVals = vals; /* noop for primitives */
  var f = vals[name];
  if (f !== undefined) {
    return f;
  }
  var method = recv[name];
  f = function() {
    $stackDepthOffset--;
    try {
      return method.apply(recv, arguments);
    } finally {
      $stackDepthOffset++;
    }
  };
  vals[name] = f;
  return f;
};

var $methodExpr = function(typ, name) {
  var method = typ.prototype[name];
  if (method.$expr === undefined) {
    method.$expr = function() {
      $stackDepthOffset--;
      try {
        if (typ.wrapped) {
          arguments[0] = new typ(arguments[0]);
        }
        return Function.call.apply(method, arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return method.$expr;
};

var $ifaceMethodExprs = {};
var $ifaceMethodExpr = function(name) {
  var expr = $ifaceMethodExprs["$" + name];
  if (expr === undefined) {
    expr = $ifaceMethodExprs["$" + name] = function() {
      $stackDepthOffset--;
      try {
        return Function.call.apply(arguments[0][name], arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return expr;
};

var $subslice = function(slice, low, high, max) {
  if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
    $throwRuntimeError("slice bounds out of range");
  }
  var s = new slice.constructor(slice.$array);
  s.$offset = slice.$offset + low;
  s.$length = slice.$length - low;
  s.$capacity = slice.$capacity - low;
  if (high !== undefined) {
    s.$length = high - low;
  }
  if (max !== undefined) {
    s.$capacity = max - low;
  }
  return s;
};

var $substring = function(str, low, high) {
  if (low < 0 || high < low || high > str.length) {
    $throwRuntimeError("slice bounds out of range");
  }
  return str.substring(low, high);
};

var $sliceToArray = function(slice) {
  if (slice.$array.constructor !== Array) {
    return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
  }
  return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
};

var $decodeRune = function(str, pos) {
  var c0 = str.charCodeAt(pos);

  if (c0 < 0x80) {
    return [c0, 1];
  }

  if (c0 !== c0 || c0 < 0xC0) {
    return [0xFFFD, 1];
  }

  var c1 = str.charCodeAt(pos + 1);
  if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xE0) {
    var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
    if (r <= 0x7F) {
      return [0xFFFD, 1];
    }
    return [r, 2];
  }

  var c2 = str.charCodeAt(pos + 2);
  if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF0) {
    var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
    if (r <= 0x7FF) {
      return [0xFFFD, 1];
    }
    if (0xD800 <= r && r <= 0xDFFF) {
      return [0xFFFD, 1];
    }
    return [r, 3];
  }

  var c3 = str.charCodeAt(pos + 3);
  if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF8) {
    var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
    if (r <= 0xFFFF || 0x10FFFF < r) {
      return [0xFFFD, 1];
    }
    return [r, 4];
  }

  return [0xFFFD, 1];
};

var $encodeRune = function(r) {
  if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
    r = 0xFFFD;
  }
  if (r <= 0x7F) {
    return String.fromCharCode(r);
  }
  if (r <= 0x7FF) {
    return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
  }
  if (r <= 0xFFFF) {
    return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
  }
  return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = function(str) {
  var array = new Uint8Array(str.length);
  for (var i = 0; i < str.length; i++) {
    array[i] = str.charCodeAt(i);
  }
  return array;
};

var $bytesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i += 10000) {
    str += String.fromCharCode.apply(undefined, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
  }
  return str;
};

var $stringToRunes = function(str) {
  var array = new Int32Array(str.length);
  var rune, j = 0;
  for (var i = 0; i < str.length; i += rune[1], j++) {
    rune = $decodeRune(str, i);
    array[j] = rune[0];
  }
  return array.subarray(0, j);
};

var $runesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i++) {
    str += $encodeRune(slice.$array[slice.$offset + i]);
  }
  return str;
};

var $copyString = function(dst, src) {
  var n = Math.min(src.length, dst.$length);
  for (var i = 0; i < n; i++) {
    dst.$array[dst.$offset + i] = src.charCodeAt(i);
  }
  return n;
};

var $copySlice = function(dst, src) {
  var n = Math.min(src.$length, dst.$length);
  $copyArray(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
  return n;
};

var $copyArray = function(dst, src, dstOffset, srcOffset, n, elem) {
  if (n === 0 || (dst === src && dstOffset === srcOffset)) {
    return;
  }

  if (src.subarray) {
    dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
    return;
  }

  switch (elem.kind) {
  case $kindArray:
  case $kindStruct:
    if (dst === src && dstOffset > srcOffset) {
      for (var i = n - 1; i >= 0; i--) {
        elem.copy(dst[dstOffset + i], src[srcOffset + i]);
      }
      return;
    }
    for (var i = 0; i < n; i++) {
      elem.copy(dst[dstOffset + i], src[srcOffset + i]);
    }
    return;
  }

  if (dst === src && dstOffset > srcOffset) {
    for (var i = n - 1; i >= 0; i--) {
      dst[dstOffset + i] = src[srcOffset + i];
    }
    return;
  }
  for (var i = 0; i < n; i++) {
    dst[dstOffset + i] = src[srcOffset + i];
  }
};

var $clone = function(src, type) {
  var clone = type.zero();
  type.copy(clone, src);
  return clone;
};

var $pointerOfStructConversion = function(obj, type) {
  if(obj.$proxies === undefined) {
    obj.$proxies = {};
    obj.$proxies[obj.constructor.string] = obj;
  }
  var proxy = obj.$proxies[type.string];
  if (proxy === undefined) {
    var properties = {};
    for (var i = 0; i < type.elem.fields.length; i++) {
      (function(fieldProp) {
        properties[fieldProp] = {
          get: function() { return obj[fieldProp]; },
          set: function(value) { obj[fieldProp] = value; }
        };
      })(type.elem.fields[i].prop);
    }
    proxy = Object.create(type.prototype, properties);
    proxy.$val = proxy;
    obj.$proxies[type.string] = proxy;
    proxy.$proxies = obj.$proxies;
  }
  return proxy;
};

var $append = function(slice) {
  return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = function(slice, toAppend) {
  if (toAppend.constructor === String) {
    var bytes = $stringToBytes(toAppend);
    return $internalAppend(slice, bytes, 0, bytes.length);
  }
  return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
};

var $internalAppend = function(slice, array, offset, length) {
  if (length === 0) {
    return slice;
  }

  var newArray = slice.$array;
  var newOffset = slice.$offset;
  var newLength = slice.$length + length;
  var newCapacity = slice.$capacity;

  if (newLength > newCapacity) {
    newOffset = 0;
    newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

    if (slice.$array.constructor === Array) {
      newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
      newArray.length = newCapacity;
      var zero = slice.constructor.elem.zero;
      for (var i = slice.$length; i < newCapacity; i++) {
        newArray[i] = zero();
      }
    } else {
      newArray = new slice.$array.constructor(newCapacity);
      newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
    }
  }

  $copyArray(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

  var newSlice = new slice.constructor(newArray);
  newSlice.$offset = newOffset;
  newSlice.$length = newLength;
  newSlice.$capacity = newCapacity;
  return newSlice;
};

var $equal = function(a, b, type) {
  if (type === $jsObjectPtr) {
    return a === b;
  }
  switch (type.kind) {
  case $kindComplex64:
  case $kindComplex128:
    return a.$real === b.$real && a.$imag === b.$imag;
  case $kindInt64:
  case $kindUint64:
    return a.$high === b.$high && a.$low === b.$low;
  case $kindArray:
    if (a.length !== b.length) {
      return false;
    }
    for (var i = 0; i < a.length; i++) {
      if (!$equal(a[i], b[i], type.elem)) {
        return false;
      }
    }
    return true;
  case $kindStruct:
    for (var i = 0; i < type.fields.length; i++) {
      var f = type.fields[i];
      if (!$equal(a[f.prop], b[f.prop], f.typ)) {
        return false;
      }
    }
    return true;
  case $kindInterface:
    return $interfaceIsEqual(a, b);
  default:
    return a === b;
  }
};

var $interfaceIsEqual = function(a, b) {
  if (a === $ifaceNil || b === $ifaceNil) {
    return a === b;
  }
  if (a.constructor !== b.constructor) {
    return false;
  }
  if (a.constructor === $jsObjectPtr) {
    return a.object === b.object;
  }
  if (!a.constructor.comparable) {
    $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
  }
  return $equal(a.$val, b.$val, a.constructor);
};

var $min = Math.min;
var $mod = function(x, y) { return x % y; };
var $parseInt = parseInt;
var $parseFloat = function(f) {
  if (f !== undefined && f !== null && f.constructor === Number) {
    return f;
  }
  return parseFloat(f);
};

var $froundBuf = new Float32Array(1);
var $fround = Math.fround || function(f) {
  $froundBuf[0] = f;
  return $froundBuf[0];
};

var $imul = Math.imul || function(a, b) {
  var ah = (a >>> 16) & 0xffff;
  var al = a & 0xffff;
  var bh = (b >>> 16) & 0xffff;
  var bl = b & 0xffff;
  return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) >> 0);
};

var $floatKey = function(f) {
  if (f !== f) {
    $idCounter++;
    return "NaN$" + $idCounter;
  }
  return String(f);
};

var $flatten64 = function(x) {
  return x.$high * 4294967296 + x.$low;
};

var $shiftLeft64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$low << (y - 32), 0);
  }
  return new x.constructor(0, 0);
};

var $shiftRightInt64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
  }
  if (x.$high < 0) {
    return new x.constructor(-1, 4294967295);
  }
  return new x.constructor(0, 0);
};

var $shiftRightUint64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(0, x.$high >>> (y - 32));
  }
  return new x.constructor(0, 0);
};

var $mul64 = function(x, y) {
  var high = 0, low = 0;
  if ((y.$low & 1) !== 0) {
    high = x.$high;
    low = x.$low;
  }
  for (var i = 1; i < 32; i++) {
    if ((y.$low & 1<<i) !== 0) {
      high += x.$high << i | x.$low >>> (32 - i);
      low += (x.$low << i) >>> 0;
    }
  }
  for (var i = 0; i < 32; i++) {
    if ((y.$high & 1<<i) !== 0) {
      high += x.$low << i;
    }
  }
  return new x.constructor(high, low);
};

var $div64 = function(x, y, returnRemainder) {
  if (y.$high === 0 && y.$low === 0) {
    $throwRuntimeError("integer divide by zero");
  }

  var s = 1;
  var rs = 1;

  var xHigh = x.$high;
  var xLow = x.$low;
  if (xHigh < 0) {
    s = -1;
    rs = -1;
    xHigh = -xHigh;
    if (xLow !== 0) {
      xHigh--;
      xLow = 4294967296 - xLow;
    }
  }

  var yHigh = y.$high;
  var yLow = y.$low;
  if (y.$high < 0) {
    s *= -1;
    yHigh = -yHigh;
    if (yLow !== 0) {
      yHigh--;
      yLow = 4294967296 - yLow;
    }
  }

  var high = 0, low = 0, n = 0;
  while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
    yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
    yLow = (yLow << 1) >>> 0;
    n++;
  }
  for (var i = 0; i <= n; i++) {
    high = high << 1 | low >>> 31;
    low = (low << 1) >>> 0;
    if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
      xHigh = xHigh - yHigh;
      xLow = xLow - yLow;
      if (xLow < 0) {
        xHigh--;
        xLow += 4294967296;
      }
      low++;
      if (low === 4294967296) {
        high++;
        low = 0;
      }
    }
    yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
    yHigh = yHigh >>> 1;
  }

  if (returnRemainder) {
    return new x.constructor(xHigh * rs, xLow * rs);
  }
  return new x.constructor(high * s, low * s);
};

var $divComplex = function(n, d) {
  var ninf = n.$real === Infinity || n.$real === -Infinity || n.$imag === Infinity || n.$imag === -Infinity;
  var dinf = d.$real === Infinity || d.$real === -Infinity || d.$imag === Infinity || d.$imag === -Infinity;
  var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);
  var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);
  if(nnan || dnan) {
    return new n.constructor(NaN, NaN);
  }
  if (ninf && !dinf) {
    return new n.constructor(Infinity, Infinity);
  }
  if (!ninf && dinf) {
    return new n.constructor(0, 0);
  }
  if (d.$real === 0 && d.$imag === 0) {
    if (n.$real === 0 && n.$imag === 0) {
      return new n.constructor(NaN, NaN);
    }
    return new n.constructor(Infinity, Infinity);
  }
  var a = Math.abs(d.$real);
  var b = Math.abs(d.$imag);
  if (a <= b) {
    var ratio = d.$real / d.$imag;
    var denom = d.$real * ratio + d.$imag;
    return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);
  }
  var ratio = d.$imag / d.$real;
  var denom = d.$imag * ratio + d.$real;
  return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);
};

var $kindBool = 1;
var $kindInt = 2;
var $kindInt8 = 3;
var $kindInt16 = 4;
var $kindInt32 = 5;
var $kindInt64 = 6;
var $kindUint = 7;
var $kindUint8 = 8;
var $kindUint16 = 9;
var $kindUint32 = 10;
var $kindUint64 = 11;
var $kindUintptr = 12;
var $kindFloat32 = 13;
var $kindFloat64 = 14;
var $kindComplex64 = 15;
var $kindComplex128 = 16;
var $kindArray = 17;
var $kindChan = 18;
var $kindFunc = 19;
var $kindInterface = 20;
var $kindMap = 21;
var $kindPtr = 22;
var $kindSlice = 23;
var $kindString = 24;
var $kindStruct = 25;
var $kindUnsafePointer = 26;

var $methodSynthesizers = [];
var $addMethodSynthesizer = function(f) {
  if ($methodSynthesizers === null) {
    f();
    return;
  }
  $methodSynthesizers.push(f);
};
var $synthesizeMethods = function() {
  $methodSynthesizers.forEach(function(f) { f(); });
  $methodSynthesizers = null;
};

var $ifaceKeyFor = function(x) {
  if (x === $ifaceNil) {
    return 'nil';
  }
  var c = x.constructor;
  return c.string + '$' + c.keyFor(x.$val);
};

var $identity = function(x) { return x; };

var $typeIDCounter = 0;

var $idKey = function(x) {
  if (x.$id === undefined) {
    $idCounter++;
    x.$id = $idCounter;
  }
  return String(x.$id);
};

var $newType = function(size, kind, string, named, pkg, exported, constructor) {
  var typ;
  switch(kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $identity;
    break;

  case $kindString:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return "$" + x; };
    break;

  case $kindFloat32:
  case $kindFloat64:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return $floatKey(x); };
    break;

  case $kindInt64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindUint64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindComplex64:
    typ = function(real, imag) {
      this.$real = $fround(real);
      this.$imag = $fround(imag);
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindComplex128:
    typ = function(real, imag) {
      this.$real = real;
      this.$imag = imag;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindArray:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, false, "", false, function(array) {
      this.$get = function() { return array; };
      this.$set = function(v) { typ.copy(this, v); };
      this.$val = array;
    });
    typ.init = function(elem, len) {
      typ.elem = elem;
      typ.len = len;
      typ.comparable = elem.comparable;
      typ.keyFor = function(x) {
        return Array.prototype.join.call($mapArray(x, function(e) {
          return String(elem.keyFor(e)).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }), "$");
      };
      typ.copy = function(dst, src) {
        $copyArray(dst, src, 0, 0, src.length, elem);
      };
      typ.ptr.init(typ);
      Object.defineProperty(typ.ptr.nil, "nilCheck", { get: $throwNilPointerError });
    };
    break;

  case $kindChan:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $idKey;
    typ.init = function(elem, sendOnly, recvOnly) {
      typ.elem = elem;
      typ.sendOnly = sendOnly;
      typ.recvOnly = recvOnly;
    };
    break;

  case $kindFunc:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(params, results, variadic) {
      typ.params = params;
      typ.results = results;
      typ.variadic = variadic;
      typ.comparable = false;
    };
    break;

  case $kindInterface:
    typ = { implementedBy: {}, missingMethodFor: {} };
    typ.keyFor = $ifaceKeyFor;
    typ.init = function(methods) {
      typ.methods = methods;
      methods.forEach(function(m) {
        $ifaceNil[m.prop] = $throwNilPointerError;
      });
    };
    break;

  case $kindMap:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(key, elem) {
      typ.key = key;
      typ.elem = elem;
      typ.comparable = false;
    };
    break;

  case $kindPtr:
    typ = constructor || function(getter, setter, target) {
      this.$get = getter;
      this.$set = setter;
      this.$target = target;
      this.$val = this;
    };
    typ.keyFor = $idKey;
    typ.init = function(elem) {
      typ.elem = elem;
      typ.wrapped = (elem.kind === $kindArray);
      typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
    };
    break;

  case $kindSlice:
    typ = function(array) {
      if (array.constructor !== typ.nativeArray) {
        array = new typ.nativeArray(array);
      }
      this.$array = array;
      this.$offset = 0;
      this.$length = array.length;
      this.$capacity = array.length;
      this.$val = this;
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.comparable = false;
      typ.nativeArray = $nativeArray(elem.kind);
      typ.nil = new typ([]);
    };
    break;

  case $kindStruct:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, false, pkg, exported, constructor);
    typ.ptr.elem = typ;
    typ.ptr.prototype.$get = function() { return this; };
    typ.ptr.prototype.$set = function(v) { typ.copy(this, v); };
    typ.init = function(pkgPath, fields) {
      typ.pkgPath = pkgPath;
      typ.fields = fields;
      fields.forEach(function(f) {
        if (!f.typ.comparable) {
          typ.comparable = false;
        }
      });
      typ.keyFor = function(x) {
        var val = x.$val;
        return $mapArray(fields, function(f) {
          return String(f.typ.keyFor(val[f.prop])).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }).join("$");
      };
      typ.copy = function(dst, src) {
        for (var i = 0; i < fields.length; i++) {
          var f = fields[i];
          switch (f.typ.kind) {
          case $kindArray:
          case $kindStruct:
            f.typ.copy(dst[f.prop], src[f.prop]);
            continue;
          default:
            dst[f.prop] = src[f.prop];
            continue;
          }
        }
      };
      /* nil value */
      var properties = {};
      fields.forEach(function(f) {
        properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };
      });
      typ.ptr.nil = Object.create(constructor.prototype, properties);
      typ.ptr.nil.$val = typ.ptr.nil;
      /* methods for embedded fields */
      $addMethodSynthesizer(function() {
        var synthesizeMethod = function(target, m, f) {
          if (target.prototype[m.prop] !== undefined) { return; }
          target.prototype[m.prop] = function() {
            var v = this.$val[f.prop];
            if (f.typ === $jsObjectPtr) {
              v = new $jsObjectPtr(v);
            }
            if (v.$val === undefined) {
              v = new f.typ(v);
            }
            return v[m.prop].apply(v, arguments);
          };
        };
        fields.forEach(function(f) {
          if (f.anonymous) {
            $methodSet(f.typ).forEach(function(m) {
              synthesizeMethod(typ, m, f);
              synthesizeMethod(typ.ptr, m, f);
            });
            $methodSet($ptrType(f.typ)).forEach(function(m) {
              synthesizeMethod(typ.ptr, m, f);
            });
          }
        });
      });
    };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  switch (kind) {
  case $kindBool:
  case $kindMap:
    typ.zero = function() { return false; };
    break;

  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8 :
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
  case $kindFloat32:
  case $kindFloat64:
    typ.zero = function() { return 0; };
    break;

  case $kindString:
    typ.zero = function() { return ""; };
    break;

  case $kindInt64:
  case $kindUint64:
  case $kindComplex64:
  case $kindComplex128:
    var zero = new typ(0, 0);
    typ.zero = function() { return zero; };
    break;

  case $kindPtr:
  case $kindSlice:
    typ.zero = function() { return typ.nil; };
    break;

  case $kindChan:
    typ.zero = function() { return $chanNil; };
    break;

  case $kindFunc:
    typ.zero = function() { return $throwNilPointerError; };
    break;

  case $kindInterface:
    typ.zero = function() { return $ifaceNil; };
    break;

  case $kindArray:
    typ.zero = function() {
      var arrayClass = $nativeArray(typ.elem.kind);
      if (arrayClass !== Array) {
        return new arrayClass(typ.len);
      }
      var array = new Array(typ.len);
      for (var i = 0; i < typ.len; i++) {
        array[i] = typ.elem.zero();
      }
      return array;
    };
    break;

  case $kindStruct:
    typ.zero = function() { return new typ.ptr(); };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  typ.id = $typeIDCounter;
  $typeIDCounter++;
  typ.size = size;
  typ.kind = kind;
  typ.string = string;
  typ.named = named;
  typ.pkg = pkg;
  typ.exported = exported;
  typ.methods = [];
  typ.methodSetCache = null;
  typ.comparable = true;
  return typ;
};

var $methodSet = function(typ) {
  if (typ.methodSetCache !== null) {
    return typ.methodSetCache;
  }
  var base = {};

  var isPtr = (typ.kind === $kindPtr);
  if (isPtr && typ.elem.kind === $kindInterface) {
    typ.methodSetCache = [];
    return [];
  }

  var current = [{typ: isPtr ? typ.elem : typ, indirect: isPtr}];

  var seen = {};

  while (current.length > 0) {
    var next = [];
    var mset = [];

    current.forEach(function(e) {
      if (seen[e.typ.string]) {
        return;
      }
      seen[e.typ.string] = true;

      if (e.typ.named) {
        mset = mset.concat(e.typ.methods);
        if (e.indirect) {
          mset = mset.concat($ptrType(e.typ).methods);
        }
      }

      switch (e.typ.kind) {
      case $kindStruct:
        e.typ.fields.forEach(function(f) {
          if (f.anonymous) {
            var fTyp = f.typ;
            var fIsPtr = (fTyp.kind === $kindPtr);
            next.push({typ: fIsPtr ? fTyp.elem : fTyp, indirect: e.indirect || fIsPtr});
          }
        });
        break;

      case $kindInterface:
        mset = mset.concat(e.typ.methods);
        break;
      }
    });

    mset.forEach(function(m) {
      if (base[m.name] === undefined) {
        base[m.name] = m;
      }
    });

    current = next;
  }

  typ.methodSetCache = [];
  Object.keys(base).sort().forEach(function(name) {
    typ.methodSetCache.push(base[name]);
  });
  return typ.methodSetCache;
};

var $Bool          = $newType( 1, $kindBool,          "bool",           true, "", false, null);
var $Int           = $newType( 4, $kindInt,           "int",            true, "", false, null);
var $Int8          = $newType( 1, $kindInt8,          "int8",           true, "", false, null);
var $Int16         = $newType( 2, $kindInt16,         "int16",          true, "", false, null);
var $Int32         = $newType( 4, $kindInt32,         "int32",          true, "", false, null);
var $Int64         = $newType( 8, $kindInt64,         "int64",          true, "", false, null);
var $Uint          = $newType( 4, $kindUint,          "uint",           true, "", false, null);
var $Uint8         = $newType( 1, $kindUint8,         "uint8",          true, "", false, null);
var $Uint16        = $newType( 2, $kindUint16,        "uint16",         true, "", false, null);
var $Uint32        = $newType( 4, $kindUint32,        "uint32",         true, "", false, null);
var $Uint64        = $newType( 8, $kindUint64,        "uint64",         true, "", false, null);
var $Uintptr       = $newType( 4, $kindUintptr,       "uintptr",        true, "", false, null);
var $Float32       = $newType( 4, $kindFloat32,       "float32",        true, "", false, null);
var $Float64       = $newType( 8, $kindFloat64,       "float64",        true, "", false, null);
var $Complex64     = $newType( 8, $kindComplex64,     "complex64",      true, "", false, null);
var $Complex128    = $newType(16, $kindComplex128,    "complex128",     true, "", false, null);
var $String        = $newType( 8, $kindString,        "string",         true, "", false, null);
var $UnsafePointer = $newType( 4, $kindUnsafePointer, "unsafe.Pointer", true, "", false, null);

var $nativeArray = function(elemKind) {
  switch (elemKind) {
  case $kindInt:
    return Int32Array;
  case $kindInt8:
    return Int8Array;
  case $kindInt16:
    return Int16Array;
  case $kindInt32:
    return Int32Array;
  case $kindUint:
    return Uint32Array;
  case $kindUint8:
    return Uint8Array;
  case $kindUint16:
    return Uint16Array;
  case $kindUint32:
    return Uint32Array;
  case $kindUintptr:
    return Uint32Array;
  case $kindFloat32:
    return Float32Array;
  case $kindFloat64:
    return Float64Array;
  default:
    return Array;
  }
};
var $toNativeArray = function(elemKind, array) {
  var nativeArray = $nativeArray(elemKind);
  if (nativeArray === Array) {
    return array;
  }
  return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = function(elem, len) {
  var typeKey = elem.id + "$" + len;
  var typ = $arrayTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(12, $kindArray, "[" + len + "]" + elem.string, false, "", false, null);
    $arrayTypes[typeKey] = typ;
    typ.init(elem, len);
  }
  return typ;
};

var $chanType = function(elem, sendOnly, recvOnly) {
  var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
  var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
  var typ = elem[field];
  if (typ === undefined) {
    typ = $newType(4, $kindChan, string, false, "", false, null);
    elem[field] = typ;
    typ.init(elem, sendOnly, recvOnly);
  }
  return typ;
};
var $Chan = function(elem, capacity) {
  if (capacity < 0 || capacity > 2147483647) {
    $throwRuntimeError("makechan: size out of range");
  }
  this.$elem = elem;
  this.$capacity = capacity;
  this.$buffer = [];
  this.$sendQueue = [];
  this.$recvQueue = [];
  this.$closed = false;
};
var $chanNil = new $Chan(null, 0);
$chanNil.$sendQueue = $chanNil.$recvQueue = { length: 0, push: function() {}, shift: function() { return undefined; }, indexOf: function() { return -1; } };

var $funcTypes = {};
var $funcType = function(params, results, variadic) {
  var typeKey = $mapArray(params, function(p) { return p.id; }).join(",") + "$" + $mapArray(results, function(r) { return r.id; }).join(",") + "$" + variadic;
  var typ = $funcTypes[typeKey];
  if (typ === undefined) {
    var paramTypes = $mapArray(params, function(p) { return p.string; });
    if (variadic) {
      paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
    }
    var string = "func(" + paramTypes.join(", ") + ")";
    if (results.length === 1) {
      string += " " + results[0].string;
    } else if (results.length > 1) {
      string += " (" + $mapArray(results, function(r) { return r.string; }).join(", ") + ")";
    }
    typ = $newType(4, $kindFunc, string, false, "", false, null);
    $funcTypes[typeKey] = typ;
    typ.init(params, results, variadic);
  }
  return typ;
};

var $interfaceTypes = {};
var $interfaceType = function(methods) {
  var typeKey = $mapArray(methods, function(m) { return m.pkg + "," + m.name + "," + m.typ.id; }).join("$");
  var typ = $interfaceTypes[typeKey];
  if (typ === undefined) {
    var string = "interface {}";
    if (methods.length !== 0) {
      string = "interface { " + $mapArray(methods, function(m) {
        return (m.pkg !== "" ? m.pkg + "." : "") + m.name + m.typ.string.substr(4);
      }).join("; ") + " }";
    }
    typ = $newType(8, $kindInterface, string, false, "", false, null);
    $interfaceTypes[typeKey] = typ;
    typ.init(methods);
  }
  return typ;
};
var $emptyInterface = $interfaceType([]);
var $ifaceNil = {};
var $error = $newType(8, $kindInterface, "error", true, "", false, null);
$error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}]);

var $mapTypes = {};
var $mapType = function(key, elem) {
  var typeKey = key.id + "$" + elem.id;
  var typ = $mapTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(4, $kindMap, "map[" + key.string + "]" + elem.string, false, "", false, null);
    $mapTypes[typeKey] = typ;
    typ.init(key, elem);
  }
  return typ;
};
var $makeMap = function(keyForFunc, entries) {
  var m = {};
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i];
    m[keyForFunc(e.k)] = e;
  }
  return m;
};

var $ptrType = function(elem) {
  var typ = elem.ptr;
  if (typ === undefined) {
    typ = $newType(4, $kindPtr, "*" + elem.string, false, "", elem.exported, null);
    elem.ptr = typ;
    typ.init(elem);
  }
  return typ;
};

var $newDataPointer = function(data, constructor) {
  if (constructor.elem.kind === $kindStruct) {
    return data;
  }
  return new constructor(function() { return data; }, function(v) { data = v; });
};

var $indexPtr = function(array, index, constructor) {
  array.$ptr = array.$ptr || {};
  return array.$ptr[index] || (array.$ptr[index] = new constructor(function() { return array[index]; }, function(v) { array[index] = v; }));
};

var $sliceType = function(elem) {
  var typ = elem.slice;
  if (typ === undefined) {
    typ = $newType(12, $kindSlice, "[]" + elem.string, false, "", false, null);
    elem.slice = typ;
    typ.init(elem);
  }
  return typ;
};
var $makeSlice = function(typ, length, capacity) {
  capacity = capacity || length;
  if (length < 0 || length > 2147483647) {
    $throwRuntimeError("makeslice: len out of range");
  }
  if (capacity < 0 || capacity < length || capacity > 2147483647) {
    $throwRuntimeError("makeslice: cap out of range");
  }
  var array = new typ.nativeArray(capacity);
  if (typ.nativeArray === Array) {
    for (var i = 0; i < capacity; i++) {
      array[i] = typ.elem.zero();
    }
  }
  var slice = new typ(array);
  slice.$length = length;
  return slice;
};

var $structTypes = {};
var $structType = function(pkgPath, fields) {
  var typeKey = $mapArray(fields, function(f) { return f.name + "," + f.typ.id + "," + f.tag; }).join("$");
  var typ = $structTypes[typeKey];
  if (typ === undefined) {
    var string = "struct { " + $mapArray(fields, function(f) {
      return f.name + " " + f.typ.string + (f.tag !== "" ? (" \"" + f.tag.replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
    }).join("; ") + " }";
    if (fields.length === 0) {
      string = "struct {}";
    }
    typ = $newType(0, $kindStruct, string, false, "", false, function() {
      this.$val = this;
      for (var i = 0; i < fields.length; i++) {
        var f = fields[i];
        var arg = arguments[i];
        this[f.prop] = arg !== undefined ? arg : f.typ.zero();
      }
    });
    $structTypes[typeKey] = typ;
    typ.init(pkgPath, fields);
  }
  return typ;
};

var $assertType = function(value, type, returnTuple) {
  var isInterface = (type.kind === $kindInterface), ok, missingMethod = "";
  if (value === $ifaceNil) {
    ok = false;
  } else if (!isInterface) {
    ok = value.constructor === type;
  } else {
    var valueTypeString = value.constructor.string;
    ok = type.implementedBy[valueTypeString];
    if (ok === undefined) {
      ok = true;
      var valueMethodSet = $methodSet(value.constructor);
      var interfaceMethods = type.methods;
      for (var i = 0; i < interfaceMethods.length; i++) {
        var tm = interfaceMethods[i];
        var found = false;
        for (var j = 0; j < valueMethodSet.length; j++) {
          var vm = valueMethodSet[j];
          if (vm.name === tm.name && vm.pkg === tm.pkg && vm.typ === tm.typ) {
            found = true;
            break;
          }
        }
        if (!found) {
          ok = false;
          type.missingMethodFor[valueTypeString] = tm.name;
          break;
        }
      }
      type.implementedBy[valueTypeString] = ok;
    }
    if (!ok) {
      missingMethod = type.missingMethodFor[valueTypeString];
    }
  }

  if (!ok) {
    if (returnTuple) {
      return [type.zero(), false];
    }
    $panic(new $packages["runtime"].TypeAssertionError.ptr("", (value === $ifaceNil ? "" : value.constructor.string), type.string, missingMethod));
  }

  if (!isInterface) {
    value = value.$val;
  }
  if (type === $jsObjectPtr) {
    value = value.object;
  }
  return returnTuple ? [value, true] : value;
};

var $stackDepthOffset = 0;
var $getStackDepth = function() {
  var err = new Error();
  if (err.stack === undefined) {
    return undefined;
  }
  return $stackDepthOffset + err.stack.split("\n").length;
};

var $panicStackDepth = null, $panicValue;
var $callDeferred = function(deferred, jsErr, fromPanic) {
  if (!fromPanic && deferred !== null && deferred.index >= $curGoroutine.deferStack.length) {
    throw jsErr;
  }
  if (jsErr !== null) {
    var newErr = null;
    try {
      $curGoroutine.deferStack.push(deferred);
      $panic(new $jsErrorPtr(jsErr));
    } catch (err) {
      newErr = err;
    }
    $curGoroutine.deferStack.pop();
    $callDeferred(deferred, newErr);
    return;
  }
  if ($curGoroutine.asleep) {
    return;
  }

  $stackDepthOffset--;
  var outerPanicStackDepth = $panicStackDepth;
  var outerPanicValue = $panicValue;

  var localPanicValue = $curGoroutine.panicStack.pop();
  if (localPanicValue !== undefined) {
    $panicStackDepth = $getStackDepth();
    $panicValue = localPanicValue;
  }

  try {
    while (true) {
      if (deferred === null) {
        deferred = $curGoroutine.deferStack[$curGoroutine.deferStack.length - 1];
        if (deferred === undefined) {
          /* The panic reached the top of the stack. Clear it and throw it as a JavaScript error. */
          $panicStackDepth = null;
          if (localPanicValue.Object instanceof Error) {
            throw localPanicValue.Object;
          }
          var msg;
          if (localPanicValue.constructor === $String) {
            msg = localPanicValue.$val;
          } else if (localPanicValue.Error !== undefined) {
            msg = localPanicValue.Error();
          } else if (localPanicValue.String !== undefined) {
            msg = localPanicValue.String();
          } else {
            msg = localPanicValue;
          }
          throw new Error(msg);
        }
      }
      var call = deferred.pop();
      if (call === undefined) {
        $curGoroutine.deferStack.pop();
        if (localPanicValue !== undefined) {
          deferred = null;
          continue;
        }
        return;
      }
      var r = call[0].apply(call[2], call[1]);
      if (r && r.$blk !== undefined) {
        deferred.push([r.$blk, [], r]);
        if (fromPanic) {
          throw null;
        }
        return;
      }

      if (localPanicValue !== undefined && $panicStackDepth === null) {
        throw null; /* error was recovered */
      }
    }
  } finally {
    if (localPanicValue !== undefined) {
      if ($panicStackDepth !== null) {
        $curGoroutine.panicStack.push(localPanicValue);
      }
      $panicStackDepth = outerPanicStackDepth;
      $panicValue = outerPanicValue;
    }
    $stackDepthOffset++;
  }
};

var $panic = function(value) {
  $curGoroutine.panicStack.push(value);
  $callDeferred(null, null, true);
};
var $recover = function() {
  if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
    return $ifaceNil;
  }
  $panicStackDepth = null;
  return $panicValue;
};
var $throw = function(err) { throw err; };

var $noGoroutine = { asleep: false, exit: false, deferStack: [], panicStack: [] };
var $curGoroutine = $noGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true;
var $mainFinished = false;
var $go = function(fun, args, direct) {
  $totalGoroutines++;
  $awakeGoroutines++;
  var $goroutine = function() {
    try {
      $curGoroutine = $goroutine;
      var r = fun.apply(undefined, args);
      if (r && r.$blk !== undefined) {
        fun = function() { return r.$blk(); };
        args = [];
        return;
      }
      $goroutine.exit = true;
    } catch (err) {
      if (!$goroutine.exit) {
        throw err;
      }
    } finally {
      $curGoroutine = $noGoroutine;
      if ($goroutine.exit) { /* also set by runtime.Goexit() */
        $totalGoroutines--;
        $goroutine.asleep = true;
      }
      if ($goroutine.asleep) {
        $awakeGoroutines--;
        if (!$mainFinished && $awakeGoroutines === 0 && $checkForDeadlock) {
          console.error("fatal error: all goroutines are asleep - deadlock!");
          if ($global.process !== undefined) {
            $global.process.exit(2);
          }
        }
      }
    }
  };
  $goroutine.asleep = false;
  $goroutine.exit = false;
  $goroutine.deferStack = [];
  $goroutine.panicStack = [];
  $schedule($goroutine);
};

var $scheduled = [];
var $runScheduled = function() {
  try {
    var r;
    while ((r = $scheduled.shift()) !== undefined) {
      r();
    }
  } finally {
    if ($scheduled.length > 0) {
      setTimeout($runScheduled, 0);
    }
  }
};

var $schedule = function(goroutine) {
  if (goroutine.asleep) {
    goroutine.asleep = false;
    $awakeGoroutines++;
  }
  $scheduled.push(goroutine);
  if ($curGoroutine === $noGoroutine) {
    $runScheduled();
  }
};

var $setTimeout = function(f, t) {
  $awakeGoroutines++;
  return setTimeout(function() {
    $awakeGoroutines--;
    f();
  }, t);
};

var $block = function() {
  if ($curGoroutine === $noGoroutine) {
    $throwRuntimeError("cannot block in JavaScript callback, fix by wrapping code in goroutine");
  }
  $curGoroutine.asleep = true;
};

var $send = function(chan, value) {
  if (chan.$closed) {
    $throwRuntimeError("send on closed channel");
  }
  var queuedRecv = chan.$recvQueue.shift();
  if (queuedRecv !== undefined) {
    queuedRecv([value, true]);
    return;
  }
  if (chan.$buffer.length < chan.$capacity) {
    chan.$buffer.push(value);
    return;
  }

  var thisGoroutine = $curGoroutine;
  var closedDuringSend;
  chan.$sendQueue.push(function(closed) {
    closedDuringSend = closed;
    $schedule(thisGoroutine);
    return value;
  });
  $block();
  return {
    $blk: function() {
      if (closedDuringSend) {
        $throwRuntimeError("send on closed channel");
      }
    }
  };
};
var $recv = function(chan) {
  var queuedSend = chan.$sendQueue.shift();
  if (queuedSend !== undefined) {
    chan.$buffer.push(queuedSend(false));
  }
  var bufferedValue = chan.$buffer.shift();
  if (bufferedValue !== undefined) {
    return [bufferedValue, true];
  }
  if (chan.$closed) {
    return [chan.$elem.zero(), false];
  }

  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.value; } };
  var queueEntry = function(v) {
    f.value = v;
    $schedule(thisGoroutine);
  };
  chan.$recvQueue.push(queueEntry);
  $block();
  return f;
};
var $close = function(chan) {
  if (chan.$closed) {
    $throwRuntimeError("close of closed channel");
  }
  chan.$closed = true;
  while (true) {
    var queuedSend = chan.$sendQueue.shift();
    if (queuedSend === undefined) {
      break;
    }
    queuedSend(true); /* will panic */
  }
  while (true) {
    var queuedRecv = chan.$recvQueue.shift();
    if (queuedRecv === undefined) {
      break;
    }
    queuedRecv([chan.$elem.zero(), false]);
  }
};
var $select = function(comms) {
  var ready = [];
  var selection = -1;
  for (var i = 0; i < comms.length; i++) {
    var comm = comms[i];
    var chan = comm[0];
    switch (comm.length) {
    case 0: /* default */
      selection = i;
      break;
    case 1: /* recv */
      if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
        ready.push(i);
      }
      break;
    case 2: /* send */
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
        ready.push(i);
      }
      break;
    }
  }

  if (ready.length !== 0) {
    selection = ready[Math.floor(Math.random() * ready.length)];
  }
  if (selection !== -1) {
    var comm = comms[selection];
    switch (comm.length) {
    case 0: /* default */
      return [selection];
    case 1: /* recv */
      return [selection, $recv(comm[0])];
    case 2: /* send */
      $send(comm[0], comm[1]);
      return [selection];
    }
  }

  var entries = [];
  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.selection; } };
  var removeFromQueues = function() {
    for (var i = 0; i < entries.length; i++) {
      var entry = entries[i];
      var queue = entry[0];
      var index = queue.indexOf(entry[1]);
      if (index !== -1) {
        queue.splice(index, 1);
      }
    }
  };
  for (var i = 0; i < comms.length; i++) {
    (function(i) {
      var comm = comms[i];
      switch (comm.length) {
      case 1: /* recv */
        var queueEntry = function(value) {
          f.selection = [i, value];
          removeFromQueues();
          $schedule(thisGoroutine);
        };
        entries.push([comm[0].$recvQueue, queueEntry]);
        comm[0].$recvQueue.push(queueEntry);
        break;
      case 2: /* send */
        var queueEntry = function() {
          if (comm[0].$closed) {
            $throwRuntimeError("send on closed channel");
          }
          f.selection = [i];
          removeFromQueues();
          $schedule(thisGoroutine);
          return comm[1];
        };
        entries.push([comm[0].$sendQueue, queueEntry]);
        comm[0].$sendQueue.push(queueEntry);
        break;
      }
    })(i);
  }
  $block();
  return f;
};

var $jsObjectPtr, $jsErrorPtr;

var $needsExternalization = function(t) {
  switch (t.kind) {
    case $kindBool:
    case $kindInt:
    case $kindInt8:
    case $kindInt16:
    case $kindInt32:
    case $kindUint:
    case $kindUint8:
    case $kindUint16:
    case $kindUint32:
    case $kindUintptr:
    case $kindFloat32:
    case $kindFloat64:
      return false;
    default:
      return t !== $jsObjectPtr;
  }
};

var $externalize = function(v, t) {
  if (t === $jsObjectPtr) {
    return v;
  }
  switch (t.kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindFloat32:
  case $kindFloat64:
    return v;
  case $kindInt64:
  case $kindUint64:
    return $flatten64(v);
  case $kindArray:
    if ($needsExternalization(t.elem)) {
      return $mapArray(v, function(e) { return $externalize(e, t.elem); });
    }
    return v;
  case $kindFunc:
    return $externalizeFunction(v, t, false);
  case $kindInterface:
    if (v === $ifaceNil) {
      return null;
    }
    if (v.constructor === $jsObjectPtr) {
      return v.$val.object;
    }
    return $externalize(v.$val, v.constructor);
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var entry = v[keys[i]];
      m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);
    }
    return m;
  case $kindPtr:
    if (v === t.nil) {
      return null;
    }
    return $externalize(v.$get(), t.elem);
  case $kindSlice:
    if ($needsExternalization(t.elem)) {
      return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });
    }
    return $sliceToArray(v);
  case $kindString:
    if ($isASCII(v)) {
      return v;
    }
    var s = "", r;
    for (var i = 0; i < v.length; i += r[1]) {
      r = $decodeRune(v, i);
      var c = r[0];
      if (c > 0xFFFF) {
        var h = Math.floor((c - 0x10000) / 0x400) + 0xD800;
        var l = (c - 0x10000) % 0x400 + 0xDC00;
        s += String.fromCharCode(h, l);
        continue;
      }
      s += String.fromCharCode(c);
    }
    return s;
  case $kindStruct:
    var timePkg = $packages["time"];
    if (timePkg !== undefined && v.constructor === timePkg.Time.ptr) {
      var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
      return new Date($flatten64(milli));
    }

    var noJsObject = {};
    var searchJsObject = function(v, t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      switch (t.kind) {
      case $kindPtr:
        if (v === t.nil) {
          return noJsObject;
        }
        return searchJsObject(v.$get(), t.elem);
      case $kindStruct:
        var f = t.fields[0];
        return searchJsObject(v[f.prop], f.typ);
      case $kindInterface:
        return searchJsObject(v.$val, v.constructor);
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(v, t);
    if (o !== noJsObject) {
      return o;
    }

    o = {};
    for (var i = 0; i < t.fields.length; i++) {
      var f = t.fields[i];
      if (!f.exported) {
        continue;
      }
      o[f.name] = $externalize(v[f.prop], f.typ);
    }
    return o;
  }
  $throwRuntimeError("cannot externalize " + t.string);
};

var $externalizeFunction = function(v, t, passThis) {
  if (v === $throwNilPointerError) {
    return null;
  }
  if (v.$externalizeWrapper === undefined) {
    $checkForDeadlock = false;
    v.$externalizeWrapper = function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = [];
          for (var j = i; j < arguments.length; j++) {
            varargs.push($internalize(arguments[j], vt));
          }
          args.push(new (t.params[i])(varargs));
          break;
        }
        args.push($internalize(arguments[i], t.params[i]));
      }
      var canBlock = $curGoroutine.canBlock;
      $curGoroutine.canBlock = false;
      try {
        var result = v.apply(passThis ? this : undefined, args);
      } finally {
        $curGoroutine.canBlock = canBlock;
      }
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $externalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $externalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  }
  return v.$externalizeWrapper;
};

var $internalize = function(v, t, recv) {
  if (t === $jsObjectPtr) {
    return v;
  }
  if (t === $jsObjectPtr.elem) {
    $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
  }
  if (v && v.__internal_object__ !== undefined) {
    return $assertType(v.__internal_object__, t, false);
  }
  var timePkg = $packages["time"];
  if (timePkg !== undefined && t === timePkg.Time) {
    if (!(v !== null && v !== undefined && v.constructor === Date)) {
      $throwRuntimeError("cannot internalize time.Time from " + typeof v + ", must be Date");
    }
    return timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000));
  }
  switch (t.kind) {
  case $kindBool:
    return !!v;
  case $kindInt:
    return parseInt(v);
  case $kindInt8:
    return parseInt(v) << 24 >> 24;
  case $kindInt16:
    return parseInt(v) << 16 >> 16;
  case $kindInt32:
    return parseInt(v) >> 0;
  case $kindUint:
    return parseInt(v);
  case $kindUint8:
    return parseInt(v) << 24 >>> 24;
  case $kindUint16:
    return parseInt(v) << 16 >>> 16;
  case $kindUint32:
  case $kindUintptr:
    return parseInt(v) >>> 0;
  case $kindInt64:
  case $kindUint64:
    return new t(0, v);
  case $kindFloat32:
  case $kindFloat64:
    return parseFloat(v);
  case $kindArray:
    if (v.length !== t.len) {
      $throwRuntimeError("got array with wrong size from JavaScript native");
    }
    return $mapArray(v, function(e) { return $internalize(e, t.elem); });
  case $kindFunc:
    return function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = arguments[i];
          for (var j = 0; j < varargs.$length; j++) {
            args.push($externalize(varargs.$array[varargs.$offset + j], vt));
          }
          break;
        }
        args.push($externalize(arguments[i], t.params[i]));
      }
      var result = v.apply(recv, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $internalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $internalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  case $kindInterface:
    if (t.methods.length !== 0) {
      $throwRuntimeError("cannot internalize " + t.string);
    }
    if (v === null) {
      return $ifaceNil;
    }
    if (v === undefined) {
      return new $jsObjectPtr(undefined);
    }
    switch (v.constructor) {
    case Int8Array:
      return new ($sliceType($Int8))(v);
    case Int16Array:
      return new ($sliceType($Int16))(v);
    case Int32Array:
      return new ($sliceType($Int))(v);
    case Uint8Array:
      return new ($sliceType($Uint8))(v);
    case Uint16Array:
      return new ($sliceType($Uint16))(v);
    case Uint32Array:
      return new ($sliceType($Uint))(v);
    case Float32Array:
      return new ($sliceType($Float32))(v);
    case Float64Array:
      return new ($sliceType($Float64))(v);
    case Array:
      return $internalize(v, $sliceType($emptyInterface));
    case Boolean:
      return new $Bool(!!v);
    case Date:
      if (timePkg === undefined) {
        /* time package is not present, internalize as &js.Object{Date} so it can be externalized into original Date. */
        return new $jsObjectPtr(v);
      }
      return new timePkg.Time($internalize(v, timePkg.Time));
    case Function:
      var funcType = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], true);
      return new funcType($internalize(v, funcType));
    case Number:
      return new $Float64(parseFloat(v));
    case String:
      return new $String($internalize(v, $String));
    default:
      if ($global.Node && v instanceof $global.Node) {
        return new $jsObjectPtr(v);
      }
      var mapType = $mapType($String, $emptyInterface);
      return new mapType($internalize(v, mapType));
    }
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var k = $internalize(keys[i], t.key);
      m[t.key.keyFor(k)] = { k: k, v: $internalize(v[keys[i]], t.elem) };
    }
    return m;
  case $kindPtr:
    if (t.elem.kind === $kindStruct) {
      return $internalize(v, t.elem);
    }
  case $kindSlice:
    return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));
  case $kindString:
    v = String(v);
    if ($isASCII(v)) {
      return v;
    }
    var s = "";
    var i = 0;
    while (i < v.length) {
      var h = v.charCodeAt(i);
      if (0xD800 <= h && h <= 0xDBFF) {
        var l = v.charCodeAt(i + 1);
        var c = (h - 0xD800) * 0x400 + l - 0xDC00 + 0x10000;
        s += $encodeRune(c);
        i += 2;
        continue;
      }
      s += $encodeRune(h);
      i++;
    }
    return s;
  case $kindStruct:
    var noJsObject = {};
    var searchJsObject = function(t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      if (t === $jsObjectPtr.elem) {
        $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
      }
      switch (t.kind) {
      case $kindPtr:
        return searchJsObject(t.elem);
      case $kindStruct:
        var f = t.fields[0];
        var o = searchJsObject(f.typ);
        if (o !== noJsObject) {
          var n = new t.ptr();
          n[f.prop] = o;
          return n;
        }
        return noJsObject;
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(t);
    if (o !== noJsObject) {
      return o;
    }
  }
  $throwRuntimeError("cannot internalize " + t.string);
};

/* $isASCII reports whether string s contains only ASCII characters. */
var $isASCII = function(s) {
  for (var i = 0; i < s.length; i++) {
    if (s.charCodeAt(i) >= 128) {
      return false;
    }
  }
  return true;
};

$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, $init, Object, Error, sliceType, ptrType, ptrType$1, MakeFunc, init;
	Object = $pkg.Object = $newType(0, $kindStruct, "js.Object", true, "github.com/gopherjs/gopherjs/js", true, function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = null;
			return;
		}
		this.object = object_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", true, "github.com/gopherjs/gopherjs/js", true, function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Object);
	ptrType$1 = $ptrType(Error);
	Object.ptr.prototype.Get = function(key) {
		var key, o;
		o = this;
		return o.object[$externalize(key, $String)];
	};
	Object.prototype.Get = function(key) { return this.$val.Get(key); };
	Object.ptr.prototype.Set = function(key, value) {
		var key, o, value;
		o = this;
		o.object[$externalize(key, $String)] = $externalize(value, $emptyInterface);
	};
	Object.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
	Object.ptr.prototype.Delete = function(key) {
		var key, o;
		o = this;
		delete o.object[$externalize(key, $String)];
	};
	Object.prototype.Delete = function(key) { return this.$val.Delete(key); };
	Object.ptr.prototype.Length = function() {
		var o;
		o = this;
		return $parseInt(o.object.length);
	};
	Object.prototype.Length = function() { return this.$val.Length(); };
	Object.ptr.prototype.Index = function(i) {
		var i, o;
		o = this;
		return o.object[i];
	};
	Object.prototype.Index = function(i) { return this.$val.Index(i); };
	Object.ptr.prototype.SetIndex = function(i, value) {
		var i, o, value;
		o = this;
		o.object[i] = $externalize(value, $emptyInterface);
	};
	Object.prototype.SetIndex = function(i, value) { return this.$val.SetIndex(i, value); };
	Object.ptr.prototype.Call = function(name, args) {
		var args, name, o, obj;
		o = this;
		return (obj = o.object, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType)));
	};
	Object.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
	Object.ptr.prototype.Invoke = function(args) {
		var args, o;
		o = this;
		return o.object.apply(undefined, $externalize(args, sliceType));
	};
	Object.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Object.ptr.prototype.New = function(args) {
		var args, o;
		o = this;
		return new ($global.Function.prototype.bind.apply(o.object, [undefined].concat($externalize(args, sliceType))));
	};
	Object.prototype.New = function(args) { return this.$val.New(args); };
	Object.ptr.prototype.Bool = function() {
		var o;
		o = this;
		return !!(o.object);
	};
	Object.prototype.Bool = function() { return this.$val.Bool(); };
	Object.ptr.prototype.String = function() {
		var o;
		o = this;
		return $internalize(o.object, $String);
	};
	Object.prototype.String = function() { return this.$val.String(); };
	Object.ptr.prototype.Int = function() {
		var o;
		o = this;
		return $parseInt(o.object) >> 0;
	};
	Object.prototype.Int = function() { return this.$val.Int(); };
	Object.ptr.prototype.Int64 = function() {
		var o;
		o = this;
		return $internalize(o.object, $Int64);
	};
	Object.prototype.Int64 = function() { return this.$val.Int64(); };
	Object.ptr.prototype.Uint64 = function() {
		var o;
		o = this;
		return $internalize(o.object, $Uint64);
	};
	Object.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Object.ptr.prototype.Float = function() {
		var o;
		o = this;
		return $parseFloat(o.object);
	};
	Object.prototype.Float = function() { return this.$val.Float(); };
	Object.ptr.prototype.Interface = function() {
		var o;
		o = this;
		return $internalize(o.object, $emptyInterface);
	};
	Object.prototype.Interface = function() { return this.$val.Interface(); };
	Object.ptr.prototype.Unsafe = function() {
		var o;
		o = this;
		return o.object;
	};
	Object.prototype.Unsafe = function() { return this.$val.Unsafe(); };
	Error.ptr.prototype.Error = function() {
		var err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Stack = function() {
		var err;
		err = this;
		return $internalize(err.Object.stack, $String);
	};
	Error.prototype.Stack = function() { return this.$val.Stack(); };
	MakeFunc = function(fn) {
		var fn;
		return $makeFunc(fn);
	};
	$pkg.MakeFunc = MakeFunc;
	init = function() {
		var e;
		e = new Error.ptr(null);
		$unused(e);
	};
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [ptrType], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType], [ptrType], true)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", typ: $funcType([], [$Uintptr], false)}];
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Stack", name: "Stack", pkg: "", typ: $funcType([], [$String], false)}];
	Object.init("github.com/gopherjs/gopherjs/js", [{prop: "object", name: "object", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	Error.init("", [{prop: "Object", name: "Object", anonymous: true, exported: true, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime/internal/sys"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, $init, js, sys, TypeAssertionError, errorString, ptrType$4, init, Goexit, SetFinalizer, KeepAlive, throw$1;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	sys = $packages["runtime/internal/sys"];
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", true, "runtime", true, function(interfaceString_, concreteString_, assertedString_, missingMethod_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.interfaceString = "";
			this.concreteString = "";
			this.assertedString = "";
			this.missingMethod = "";
			return;
		}
		this.interfaceString = interfaceString_;
		this.concreteString = concreteString_;
		this.assertedString = assertedString_;
		this.missingMethod = missingMethod_;
	});
	errorString = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", true, "runtime", false, null);
	ptrType$4 = $ptrType(TypeAssertionError);
	init = function() {
		var e, jsPkg;
		jsPkg = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
		$jsObjectPtr = jsPkg.Object.ptr;
		$jsErrorPtr = jsPkg.Error.ptr;
		$throwRuntimeError = throw$1;
		e = $ifaceNil;
		e = new TypeAssertionError.ptr("", "", "", "");
		$unused(e);
	};
	Goexit = function() {
		$curGoroutine.exit = $externalize(true, $Bool);
		$throw(null);
	};
	$pkg.Goexit = Goexit;
	SetFinalizer = function(x, f) {
		var f, x;
	};
	$pkg.SetFinalizer = SetFinalizer;
	KeepAlive = function(param) {
		var param;
	};
	$pkg.KeepAlive = KeepAlive;
	throw$1 = function(s) {
		var s;
		$panic(new errorString((s)));
	};
	TypeAssertionError.ptr.prototype.RuntimeError = function() {
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.ptr.prototype.Error = function() {
		var e, inter;
		e = this;
		inter = e.interfaceString;
		if (inter === "") {
			inter = "interface";
		}
		if (e.concreteString === "") {
			return "interface conversion: " + inter + " is nil, not " + e.assertedString;
		}
		if (e.missingMethod === "") {
			return "interface conversion: " + inter + " is " + e.concreteString + ", not " + e.assertedString;
		}
		return "interface conversion: " + e.concreteString + " is not " + e.assertedString + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	errorString.prototype.RuntimeError = function() {
		var e;
		e = this.$val;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var e;
		e = this.$val;
		return "runtime error: " + (e);
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	ptrType$4.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	TypeAssertionError.init("runtime", [{prop: "interfaceString", name: "interfaceString", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "concreteString", name: "concreteString", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "assertedString", name: "assertedString", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "missingMethod", name: "missingMethod", anonymous: false, exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sys.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, $init, errorString, ptrType, New;
	errorString = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", true, "errors", false, function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			return;
		}
		this.s = s_;
	});
	ptrType = $ptrType(errorString);
	New = function(text) {
		var text;
		return new errorString.ptr(text);
	};
	$pkg.New = New;
	errorString.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.init("errors", [{prop: "s", name: "s", anonymous: false, exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/race"] = (function() {
	var $pkg = {}, $init, Acquire, Release, ReleaseMerge, Disable, Enable, ReadRange, WriteRange;
	Acquire = function(addr) {
		var addr;
	};
	$pkg.Acquire = Acquire;
	Release = function(addr) {
		var addr;
	};
	$pkg.Release = Release;
	ReleaseMerge = function(addr) {
		var addr;
	};
	$pkg.ReleaseMerge = ReleaseMerge;
	Disable = function() {
	};
	$pkg.Disable = Disable;
	Enable = function() {
	};
	$pkg.Enable = Enable;
	ReadRange = function(addr, len) {
		var addr, len;
	};
	$pkg.ReadRange = ReadRange;
	WriteRange = function(addr, len) {
		var addr, len;
	};
	$pkg.WriteRange = WriteRange;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, $init, js, Value, noCopy, ptrType, ptrType$1, CompareAndSwapInt32, CompareAndSwapUint64, CompareAndSwapPointer, AddInt32, LoadUint64, LoadPointer, StorePointer;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	Value = $pkg.Value = $newType(0, $kindStruct, "atomic.Value", true, "sync/atomic", true, function(noCopy_, v_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.noCopy = new noCopy.ptr();
			this.v = $ifaceNil;
			return;
		}
		this.noCopy = noCopy_;
		this.v = v_;
	});
	noCopy = $pkg.noCopy = $newType(0, $kindStruct, "atomic.noCopy", true, "sync/atomic", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	ptrType = $ptrType(Value);
	ptrType$1 = $ptrType(noCopy);
	CompareAndSwapInt32 = function(addr, old, new$1) {
		var addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapInt32 = CompareAndSwapInt32;
	CompareAndSwapUint64 = function(addr, old, new$1) {
		var addr, new$1, old, x;
		if ((x = addr.$get(), (x.$high === old.$high && x.$low === old.$low))) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapUint64 = CompareAndSwapUint64;
	CompareAndSwapPointer = function(addr, old, new$1) {
		var addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapPointer = CompareAndSwapPointer;
	AddInt32 = function(addr, delta) {
		var addr, delta, new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	$pkg.AddInt32 = AddInt32;
	LoadUint64 = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadUint64 = LoadUint64;
	LoadPointer = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadPointer = LoadPointer;
	StorePointer = function(addr, val) {
		var addr, val;
		addr.$set(val);
	};
	$pkg.StorePointer = StorePointer;
	Value.ptr.prototype.Load = function() {
		var v, x;
		x = $ifaceNil;
		v = this;
		x = v.v;
		return x;
	};
	Value.prototype.Load = function() { return this.$val.Load(); };
	Value.ptr.prototype.Store = function(x) {
		var v, x;
		v = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			$panic(new $String("sync/atomic: store of nil value into Value"));
		}
		if (!($interfaceIsEqual(v.v, $ifaceNil)) && !(x.constructor === v.v.constructor)) {
			$panic(new $String("sync/atomic: store of inconsistently typed value into Value"));
		}
		v.v = x;
	};
	Value.prototype.Store = function(x) { return this.$val.Store(x); };
	noCopy.ptr.prototype.Lock = function() {
	};
	noCopy.prototype.Lock = function() { return this.$val.Lock(); };
	ptrType.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Store", name: "Store", pkg: "", typ: $funcType([$emptyInterface], [], false)}];
	ptrType$1.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}];
	Value.init("sync/atomic", [{prop: "noCopy", name: "noCopy", anonymous: false, exported: false, typ: noCopy, tag: ""}, {prop: "v", name: "v", anonymous: false, exported: false, typ: $emptyInterface, tag: ""}]);
	noCopy.init("", []);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, $init, js, race, runtime, atomic, Pool, Map, readOnly, entry, Mutex, Locker, poolLocalInternal, poolLocal, notifyList, RWMutex, rlocker, ptrType, sliceType, ptrType$1, chanType, sliceType$1, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, sliceType$4, ptrType$8, ptrType$9, funcType, funcType$1, ptrType$15, mapType, ptrType$16, arrayType$2, semWaiters, expunged, allPools, runtime_registerPoolCleanup, runtime_Semacquire, runtime_SemacquireMutex, runtime_Semrelease, runtime_notifyListCheck, runtime_canSpin, runtime_nanotime, newEntry, throw$1, poolCleanup, init, indexLocal, init$1, runtime_doSpin;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	atomic = $packages["sync/atomic"];
	Pool = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", true, "sync", true, function(local_, localSize_, store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.local = 0;
			this.localSize = 0;
			this.store = sliceType$4.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.local = local_;
		this.localSize = localSize_;
		this.store = store_;
		this.New = New_;
	});
	Map = $pkg.Map = $newType(0, $kindStruct, "sync.Map", true, "sync", true, function(mu_, read_, dirty_, misses_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mu = new Mutex.ptr(0, 0);
			this.read = new atomic.Value.ptr(new atomic.noCopy.ptr(), $ifaceNil);
			this.dirty = false;
			this.misses = 0;
			return;
		}
		this.mu = mu_;
		this.read = read_;
		this.dirty = dirty_;
		this.misses = misses_;
	});
	readOnly = $pkg.readOnly = $newType(0, $kindStruct, "sync.readOnly", true, "sync", false, function(m_, amended_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = false;
			this.amended = false;
			return;
		}
		this.m = m_;
		this.amended = amended_;
	});
	entry = $pkg.entry = $newType(0, $kindStruct, "sync.entry", true, "sync", false, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = 0;
			return;
		}
		this.p = p_;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", true, "sync", true, function(state_, sema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = 0;
			this.sema = 0;
			return;
		}
		this.state = state_;
		this.sema = sema_;
	});
	Locker = $pkg.Locker = $newType(8, $kindInterface, "sync.Locker", true, "sync", true, null);
	poolLocalInternal = $pkg.poolLocalInternal = $newType(0, $kindStruct, "sync.poolLocalInternal", true, "sync", false, function(private$0_, shared_, Mutex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.private$0 = $ifaceNil;
			this.shared = sliceType$4.nil;
			this.Mutex = new Mutex.ptr(0, 0);
			return;
		}
		this.private$0 = private$0_;
		this.shared = shared_;
		this.Mutex = Mutex_;
	});
	poolLocal = $pkg.poolLocal = $newType(0, $kindStruct, "sync.poolLocal", true, "sync", false, function(poolLocalInternal_, pad_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.poolLocalInternal = new poolLocalInternal.ptr($ifaceNil, sliceType$4.nil, new Mutex.ptr(0, 0));
			this.pad = arrayType$2.zero();
			return;
		}
		this.poolLocalInternal = poolLocalInternal_;
		this.pad = pad_;
	});
	notifyList = $pkg.notifyList = $newType(0, $kindStruct, "sync.notifyList", true, "sync", false, function(wait_, notify_, lock_, head_, tail_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wait = 0;
			this.notify = 0;
			this.lock = 0;
			this.head = 0;
			this.tail = 0;
			return;
		}
		this.wait = wait_;
		this.notify = notify_;
		this.lock = lock_;
		this.head = head_;
		this.tail = tail_;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "sync.RWMutex", true, "sync", true, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	rlocker = $pkg.rlocker = $newType(0, $kindStruct, "sync.rlocker", true, "sync", false, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	ptrType = $ptrType(Pool);
	sliceType = $sliceType(ptrType);
	ptrType$1 = $ptrType($Uint32);
	chanType = $chanType($Bool, false, false);
	sliceType$1 = $sliceType(chanType);
	ptrType$3 = $ptrType($emptyInterface);
	ptrType$4 = $ptrType(entry);
	ptrType$5 = $ptrType($UnsafePointer);
	ptrType$6 = $ptrType($Int32);
	ptrType$7 = $ptrType(poolLocal);
	sliceType$4 = $sliceType($emptyInterface);
	ptrType$8 = $ptrType(rlocker);
	ptrType$9 = $ptrType(RWMutex);
	funcType = $funcType([], [$emptyInterface], false);
	funcType$1 = $funcType([$emptyInterface, $emptyInterface], [$Bool], false);
	ptrType$15 = $ptrType(Map);
	mapType = $mapType($emptyInterface, ptrType$4);
	ptrType$16 = $ptrType(Mutex);
	arrayType$2 = $arrayType($Uint8, 100);
	Pool.ptr.prototype.Get = function() {
		var _r, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 4:
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		$s = -1; return x$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pool.ptr.prototype.Get }; } $f._r = _r; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	runtime_registerPoolCleanup = function(cleanup) {
		var cleanup;
	};
	runtime_Semacquire = function(s) {
		var _entry, _key, _r, ch, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _r = $f._r; ch = $f.ch; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (s.$get() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.$get() === 0) { */ case 1:
			ch = new $Chan($Bool, 0);
			_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: $append((_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil), ch) };
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semacquire }; } $f._entry = _entry; $f._key = _key; $f._r = _r; $f.ch = ch; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_SemacquireMutex = function(s, lifo) {
		var lifo, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; lifo = $f.lifo; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = runtime_Semacquire(s); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_SemacquireMutex }; } $f.lifo = lifo; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_Semrelease = function(s, handoff) {
		var _entry, _key, ch, handoff, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; ch = $f.ch; handoff = $f.handoff; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil);
		if (w.$length === 0) {
			$s = -1; return;
		}
		ch = (0 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: w };
		if (w.$length === 0) {
			delete semWaiters[ptrType$1.keyFor(s)];
		}
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f._entry = _entry; $f._key = _key; $f.ch = ch; $f.handoff = handoff; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_notifyListCheck = function(size) {
		var size;
	};
	runtime_canSpin = function(i) {
		var i;
		return false;
	};
	runtime_nanotime = function() {
		return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
	};
	newEntry = function(i) {
		var i, i$24ptr;
		return new entry.ptr(((i$24ptr || (i$24ptr = new ptrType$3(function() { return i; }, function($v) { i = $v; })))));
	};
	Map.ptr.prototype.Load = function(key) {
		var _entry, _entry$1, _entry$2, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, e, key, m, ok, read, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; e = $f.e; key = $f.key; m = $f.m; ok = $f.ok; read = $f.read; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $ifaceNil;
		ok = false;
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = read.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (!ok && read.amended) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok && read.amended) { */ case 1:
			$r = m.mu.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$2 = $assertType(m.read.Load(), readOnly, true);
			readOnly.copy(read, _tuple$2[0]);
			_tuple$3 = (_entry$1 = read.m[$emptyInterface.keyFor(key)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
			e = _tuple$3[0];
			ok = _tuple$3[1];
			if (!ok && read.amended) {
				_tuple$4 = (_entry$2 = m.dirty[$emptyInterface.keyFor(key)], _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType$4.nil, false]);
				e = _tuple$4[0];
				ok = _tuple$4[1];
				m.missLocked();
			}
			$r = m.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (!ok) {
			_tmp = $ifaceNil;
			_tmp$1 = false;
			value = _tmp;
			ok = _tmp$1;
			$s = -1; return [value, ok];
		}
		_tuple$5 = e.load();
		value = _tuple$5[0];
		ok = _tuple$5[1];
		$s = -1; return [value, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Load }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.e = e; $f.key = key; $f.m = m; $f.ok = ok; $f.read = read; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Load = function(key) { return this.$val.Load(key); };
	entry.ptr.prototype.load = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, e, ok, p, value;
		value = $ifaceNil;
		ok = false;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		if (p === 0 || p === expunged) {
			_tmp = $ifaceNil;
			_tmp$1 = false;
			value = _tmp;
			ok = _tmp$1;
			return [value, ok];
		}
		_tmp$2 = (p).$get();
		_tmp$3 = true;
		value = _tmp$2;
		ok = _tmp$3;
		return [value, ok];
	};
	entry.prototype.load = function() { return this.$val.load(); };
	Map.ptr.prototype.Store = function(key, value) {
		var _entry, _entry$1, _entry$2, _key, _key$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, e, e$1, e$2, key, m, ok, ok$1, ok$2, read, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _key = $f._key; _key$1 = $f._key$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; e = $f.e; e$1 = $f.e$1; e$2 = $f.e$2; key = $f.key; m = $f.m; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; read = $f.read; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = [value];
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = read.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok && e.tryStore((value.$ptr || (value.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value))))) {
			$s = -1; return;
		}
		$r = m.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple$2 = $assertType(m.read.Load(), readOnly, true);
		readOnly.copy(read, _tuple$2[0]);
		_tuple$3 = (_entry$1 = read.m[$emptyInterface.keyFor(key)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
		e$1 = _tuple$3[0];
		ok$1 = _tuple$3[1];
		if (ok$1) {
			if (e$1.unexpungeLocked()) {
				_key = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: e$1 };
			}
			e$1.storeLocked((value.$ptr || (value.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value))));
		} else {
			_tuple$4 = (_entry$2 = m.dirty[$emptyInterface.keyFor(key)], _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType$4.nil, false]);
			e$2 = _tuple$4[0];
			ok$2 = _tuple$4[1];
			if (ok$2) {
				e$2.storeLocked((value.$ptr || (value.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value))));
			} else {
				if (!read.amended) {
					m.dirtyLocked();
					m.read.Store((x = new readOnly.ptr(read.m, true), new x.constructor.elem(x)));
				}
				_key$1 = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key$1)] = { k: _key$1, v: newEntry(value[0]) };
			}
		}
		$r = m.mu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Store }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._key = _key; $f._key$1 = _key$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.e = e; $f.e$1 = e$1; $f.e$2 = e$2; $f.key = key; $f.m = m; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.read = read; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Store = function(key, value) { return this.$val.Store(key, value); };
	entry.ptr.prototype.tryStore = function(i) {
		var e, i, p;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		if (p === expunged) {
			return false;
		}
		while (true) {
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), p, (i))) {
				return true;
			}
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
			if (p === expunged) {
				return false;
			}
		}
	};
	entry.prototype.tryStore = function(i) { return this.$val.tryStore(i); };
	entry.ptr.prototype.unexpungeLocked = function() {
		var e, wasExpunged;
		wasExpunged = false;
		e = this;
		wasExpunged = atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), expunged, 0);
		return wasExpunged;
	};
	entry.prototype.unexpungeLocked = function() { return this.$val.unexpungeLocked(); };
	entry.ptr.prototype.storeLocked = function(i) {
		var e, i;
		e = this;
		atomic.StorePointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), (i));
	};
	entry.prototype.storeLocked = function(i) { return this.$val.storeLocked(i); };
	Map.ptr.prototype.LoadOrStore = function(key, value) {
		var _entry, _entry$1, _entry$2, _key, _key$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, actual, actual$1, e, e$1, e$2, key, loaded, loaded$1, m, ok, ok$1, ok$2, ok$3, read, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _key = $f._key; _key$1 = $f._key$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; actual = $f.actual; actual$1 = $f.actual$1; e = $f.e; e$1 = $f.e$1; e$2 = $f.e$2; key = $f.key; loaded = $f.loaded; loaded$1 = $f.loaded$1; m = $f.m; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; read = $f.read; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		actual = $ifaceNil;
		loaded = false;
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = read.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok) {
			_tuple$2 = e.tryLoadOrStore(value);
			actual$1 = _tuple$2[0];
			loaded$1 = _tuple$2[1];
			ok$1 = _tuple$2[2];
			if (ok$1) {
				_tmp = actual$1;
				_tmp$1 = loaded$1;
				actual = _tmp;
				loaded = _tmp$1;
				$s = -1; return [actual, loaded];
			}
		}
		$r = m.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple$3 = $assertType(m.read.Load(), readOnly, true);
		readOnly.copy(read, _tuple$3[0]);
		_tuple$4 = (_entry$1 = read.m[$emptyInterface.keyFor(key)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
		e$1 = _tuple$4[0];
		ok$2 = _tuple$4[1];
		if (ok$2) {
			if (e$1.unexpungeLocked()) {
				_key = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: e$1 };
			}
			_tuple$5 = e$1.tryLoadOrStore(value);
			actual = _tuple$5[0];
			loaded = _tuple$5[1];
		} else {
			_tuple$6 = (_entry$2 = m.dirty[$emptyInterface.keyFor(key)], _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType$4.nil, false]);
			e$2 = _tuple$6[0];
			ok$3 = _tuple$6[1];
			if (ok$3) {
				_tuple$7 = e$2.tryLoadOrStore(value);
				actual = _tuple$7[0];
				loaded = _tuple$7[1];
				m.missLocked();
			} else {
				if (!read.amended) {
					m.dirtyLocked();
					m.read.Store((x = new readOnly.ptr(read.m, true), new x.constructor.elem(x)));
				}
				_key$1 = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key$1)] = { k: _key$1, v: newEntry(value) };
				_tmp$2 = value;
				_tmp$3 = false;
				actual = _tmp$2;
				loaded = _tmp$3;
			}
		}
		$r = m.mu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$4 = actual;
		_tmp$5 = loaded;
		actual = _tmp$4;
		loaded = _tmp$5;
		$s = -1; return [actual, loaded];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.LoadOrStore }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._key = _key; $f._key$1 = _key$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.actual = actual; $f.actual$1 = actual$1; $f.e = e; $f.e$1 = e$1; $f.e$2 = e$2; $f.key = key; $f.loaded = loaded; $f.loaded$1 = loaded$1; $f.m = m; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.read = read; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.LoadOrStore = function(key, value) { return this.$val.LoadOrStore(key, value); };
	entry.ptr.prototype.tryLoadOrStore = function(i) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, actual, e, i, ic, ic$24ptr, loaded, ok, p;
		actual = $ifaceNil;
		loaded = false;
		ok = false;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		if (p === expunged) {
			_tmp = $ifaceNil;
			_tmp$1 = false;
			_tmp$2 = false;
			actual = _tmp;
			loaded = _tmp$1;
			ok = _tmp$2;
			return [actual, loaded, ok];
		}
		if (!(p === 0)) {
			_tmp$3 = (p).$get();
			_tmp$4 = true;
			_tmp$5 = true;
			actual = _tmp$3;
			loaded = _tmp$4;
			ok = _tmp$5;
			return [actual, loaded, ok];
		}
		ic = i;
		while (true) {
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), 0, ((ic$24ptr || (ic$24ptr = new ptrType$3(function() { return ic; }, function($v) { ic = $v; })))))) {
				_tmp$6 = i;
				_tmp$7 = false;
				_tmp$8 = true;
				actual = _tmp$6;
				loaded = _tmp$7;
				ok = _tmp$8;
				return [actual, loaded, ok];
			}
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
			if (p === expunged) {
				_tmp$9 = $ifaceNil;
				_tmp$10 = false;
				_tmp$11 = false;
				actual = _tmp$9;
				loaded = _tmp$10;
				ok = _tmp$11;
				return [actual, loaded, ok];
			}
			if (!(p === 0)) {
				_tmp$12 = (p).$get();
				_tmp$13 = true;
				_tmp$14 = true;
				actual = _tmp$12;
				loaded = _tmp$13;
				ok = _tmp$14;
				return [actual, loaded, ok];
			}
		}
	};
	entry.prototype.tryLoadOrStore = function(i) { return this.$val.tryLoadOrStore(i); };
	Map.ptr.prototype.Delete = function(key) {
		var _entry, _entry$1, _tuple, _tuple$1, _tuple$2, _tuple$3, e, key, m, ok, read, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; e = $f.e; key = $f.key; m = $f.m; ok = $f.ok; read = $f.read; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = read.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (!ok && read.amended) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok && read.amended) { */ case 1:
			$r = m.mu.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$2 = $assertType(m.read.Load(), readOnly, true);
			readOnly.copy(read, _tuple$2[0]);
			_tuple$3 = (_entry$1 = read.m[$emptyInterface.keyFor(key)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
			e = _tuple$3[0];
			ok = _tuple$3[1];
			if (!ok && read.amended) {
				delete m.dirty[$emptyInterface.keyFor(key)];
			}
			$r = m.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (ok) {
			e.delete$();
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Delete }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.e = e; $f.key = key; $f.m = m; $f.ok = ok; $f.read = read; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Delete = function(key) { return this.$val.Delete(key); };
	entry.ptr.prototype.delete$ = function() {
		var e, hadValue, p;
		hadValue = false;
		e = this;
		while (true) {
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
			if (p === 0 || p === expunged) {
				hadValue = false;
				return hadValue;
			}
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), p, 0)) {
				hadValue = true;
				return hadValue;
			}
		}
	};
	entry.prototype.delete$ = function() { return this.$val.delete$(); };
	Map.ptr.prototype.Range = function(f) {
		var _entry, _i, _keys, _r, _ref, _tuple, _tuple$1, _tuple$2, e, f, k, m, ok, read, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; e = $f.e; f = $f.f; k = $f.k; m = $f.m; ok = $f.ok; read = $f.read; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		/* */ if (read.amended) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (read.amended) { */ case 1:
			$r = m.mu.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$1 = $assertType(m.read.Load(), readOnly, true);
			readOnly.copy(read, _tuple$1[0]);
			if (read.amended) {
				readOnly.copy(read, new readOnly.ptr(m.dirty, false));
				m.read.Store(new read.constructor.elem(read));
				m.dirty = false;
				m.misses = 0;
			}
			$r = m.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_ref = read.m;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 5:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 6; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 5; continue;
			}
			k = _entry.k;
			e = _entry.v;
			_tuple$2 = e.load();
			v = _tuple$2[0];
			ok = _tuple$2[1];
			/* */ if (!ok) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!ok) { */ case 7:
				_i++;
				/* continue; */ $s = 5; continue;
			/* } */ case 8:
			_r = f(k, v); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!_r) { */ case 9:
				/* break; */ $s = 6; continue;
			/* } */ case 10:
			_i++;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Range }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.e = e; $f.f = f; $f.k = k; $f.m = m; $f.ok = ok; $f.read = read; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Range = function(f) { return this.$val.Range(f); };
	Map.ptr.prototype.missLocked = function() {
		var m, x;
		m = this;
		m.misses = m.misses + (1) >> 0;
		if (m.misses < $keys(m.dirty).length) {
			return;
		}
		m.read.Store((x = new readOnly.ptr(m.dirty, false), new x.constructor.elem(x)));
		m.dirty = false;
		m.misses = 0;
	};
	Map.prototype.missLocked = function() { return this.$val.missLocked(); };
	Map.ptr.prototype.dirtyLocked = function() {
		var _entry, _i, _key, _keys, _ref, _tuple, e, k, m, read, x;
		m = this;
		if (!(m.dirty === false)) {
			return;
		}
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		m.dirty = (x = $keys(read.m).length, ((x < 0 || x > 2147483647) ? $throwRuntimeError("makemap: size out of range") : {}));
		_ref = read.m;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			e = _entry.v;
			if (!e.tryExpungeLocked()) {
				_key = k; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: e };
			}
			_i++;
		}
	};
	Map.prototype.dirtyLocked = function() { return this.$val.dirtyLocked(); };
	entry.ptr.prototype.tryExpungeLocked = function() {
		var e, isExpunged, p;
		isExpunged = false;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		while (true) {
			if (!(p === 0)) { break; }
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), 0, expunged)) {
				isExpunged = true;
				return isExpunged;
			}
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		}
		isExpunged = p === expunged;
		return isExpunged;
	};
	entry.prototype.tryExpungeLocked = function() { return this.$val.tryExpungeLocked(); };
	throw$1 = function() {
		$throwRuntimeError("native function not implemented: sync.throw");
	};
	Mutex.ptr.prototype.Lock = function() {
		var awoke, delta, iter, m, new$1, old, queueLifo, starving, waitStartTime, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; awoke = $f.awoke; delta = $f.delta; iter = $f.iter; m = $f.m; new$1 = $f.new$1; old = $f.old; queueLifo = $f.queueLifo; starving = $f.starving; waitStartTime = $f.waitStartTime; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), 0, 1)) {
			if (false) {
				race.Acquire((m));
			}
			$s = -1; return;
		}
		waitStartTime = new $Int64(0, 0);
		starving = false;
		awoke = false;
		iter = 0;
		old = m.state;
		/* while (true) { */ case 1:
			/* */ if (((old & 5) === 1) && runtime_canSpin(iter)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (((old & 5) === 1) && runtime_canSpin(iter)) { */ case 3:
				if (!awoke && ((old & 2) === 0) && !(((old >> 3 >> 0) === 0)) && atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, old | 2)) {
					awoke = true;
				}
				runtime_doSpin();
				iter = iter + (1) >> 0;
				old = m.state;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			new$1 = old;
			if ((old & 4) === 0) {
				new$1 = new$1 | (1);
			}
			if (!(((old & 5) === 0))) {
				new$1 = new$1 + (8) >> 0;
			}
			if (starving && !(((old & 1) === 0))) {
				new$1 = new$1 | (4);
			}
			if (awoke) {
				if ((new$1 & 2) === 0) {
					$panic(new $String("sync: inconsistent mutex state"));
				}
				new$1 = (new$1 & ~(2)) >> 0;
			}
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 5:
				if ((old & 5) === 0) {
					/* break; */ $s = 2; continue;
				}
				queueLifo = !((waitStartTime.$high === 0 && waitStartTime.$low === 0));
				if ((waitStartTime.$high === 0 && waitStartTime.$low === 0)) {
					waitStartTime = runtime_nanotime();
				}
				$r = runtime_SemacquireMutex((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), queueLifo); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				starving = starving || (x = (x$1 = runtime_nanotime(), new $Int64(x$1.$high - waitStartTime.$high, x$1.$low - waitStartTime.$low)), (x.$high > 0 || (x.$high === 0 && x.$low > 1000000)));
				old = m.state;
				if (!(((old & 4) === 0))) {
					if (!(((old & 3) === 0)) || ((old >> 3 >> 0) === 0)) {
						$panic(new $String("sync: inconsistent mutex state"));
					}
					delta = -7;
					if (!starving || ((old >> 3 >> 0) === 1)) {
						delta = delta - (4) >> 0;
					}
					atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), delta);
					/* break; */ $s = 2; continue;
				}
				awoke = true;
				iter = 0;
				$s = 7; continue;
			/* } else { */ case 6:
				old = m.state;
			/* } */ case 7:
		/* } */ $s = 1; continue; case 2:
		if (false) {
			race.Acquire((m));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Lock }; } $f.awoke = awoke; $f.delta = delta; $f.iter = iter; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.queueLifo = queueLifo; $f.starving = starving; $f.waitStartTime = waitStartTime; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (false) {
			$unused(m.state);
			race.Release((m));
		}
		new$1 = atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), -1);
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			$panic(new $String("sync: unlock of unlocked mutex"));
		}
		/* */ if ((new$1 & 4) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((new$1 & 4) === 0) { */ case 1:
			old = new$1;
			/* while (true) { */ case 4:
				if (((old >> 3 >> 0) === 0) || !(((old & 7) === 0))) {
					$s = -1; return;
				}
				new$1 = ((old - 8 >> 0)) | 2;
				/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 6:
					$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), false); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 7:
				old = m.state;
			/* } */ $s = 4; continue; case 5:
			$s = 3; continue;
		/* } else { */ case 2:
			$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), true); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Unlock }; } $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	poolCleanup = function() {
		var _i, _i$1, _ref, _ref$1, i, i$1, j, l, p, x;
		_ref = allPools;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= allPools.$length) ? ($throwRuntimeError("index out of range"), undefined) : allPools.$array[allPools.$offset + i] = ptrType.nil);
			i$1 = 0;
			while (true) {
				if (!(i$1 < ((p.localSize >> 0)))) { break; }
				l = indexLocal(p.local, i$1);
				l.poolLocalInternal.private$0 = $ifaceNil;
				_ref$1 = l.poolLocalInternal.shared;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					j = _i$1;
					(x = l.poolLocalInternal.shared, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j] = $ifaceNil));
					_i$1++;
				}
				l.poolLocalInternal.shared = sliceType$4.nil;
				i$1 = i$1 + (1) >> 0;
			}
			p.local = 0;
			p.localSize = 0;
			_i++;
		}
		allPools = new sliceType([]);
	};
	init = function() {
		runtime_registerPoolCleanup(poolCleanup);
	};
	indexLocal = function(l, i) {
		var i, l, lp;
		lp = (((l) + ($imul(((i >>> 0)), 128) >>> 0) >>> 0));
		return ($pointerOfStructConversion(lp, ptrType$7));
	};
	init$1 = function() {
		var n;
		n = new notifyList.ptr(0, 0, 0, 0, 0);
		runtime_notifyListCheck(20);
	};
	runtime_doSpin = function() {
		$throwRuntimeError("native function not implemented: sync.runtime_doSpin");
	};
	RWMutex.ptr.prototype.RLock = function() {
		var rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Disable();
		}
		/* */ if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$6(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$6(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { */ case 1:
			$r = runtime_Semacquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (false) {
			race.Enable();
			race.Acquire(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RLock }; } $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.ReleaseMerge(((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$6(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1);
		/* */ if (r < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 0) { */ case 1:
			if (((r + 1 >> 0) === 0) || ((r + 1 >> 0) === -1073741824)) {
				race.Enable();
				throw$1("sync: RUnlock of unlocked RWMutex");
			}
			/* */ if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$6(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$6(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { */ case 3:
				$r = runtime_Semrelease((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))), false); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		/* } */ case 2:
		if (false) {
			race.Enable();
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RUnlock }; } $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	RWMutex.ptr.prototype.Lock = function() {
		var r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Disable();
		}
		$r = rw.w.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$6(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1073741824) + 1073741824 >> 0;
		/* */ if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$6(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$6(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { */ case 2:
			$r = runtime_Semacquire((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		if (false) {
			race.Enable();
			race.Acquire(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
			race.Acquire(((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Lock }; } $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var i, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Release(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
			race.Release(((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$6(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1073741824);
		if (r >= 1073741824) {
			race.Enable();
			throw$1("sync: Unlock of unlocked RWMutex");
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < ((r >> 0)))) { break; } */ if(!(i < ((r >> 0)))) { $s = 2; continue; }
			$r = runtime_Semrelease((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))), false); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = rw.w.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (false) {
			race.Enable();
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Unlock }; } $f.i = i; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLocker = function() {
		var rw;
		rw = this;
		return ($pointerOfStructConversion(rw, ptrType$8));
	};
	RWMutex.prototype.RLocker = function() { return this.$val.RLocker(); };
	rlocker.ptr.prototype.Lock = function() {
		var r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = ($pointerOfStructConversion(r, ptrType$9)).RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Lock }; } $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Lock = function() { return this.$val.Lock(); };
	rlocker.ptr.prototype.Unlock = function() {
		var r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = ($pointerOfStructConversion(r, ptrType$9)).RUnlock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Unlock }; } $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Unlock = function() { return this.$val.Unlock(); };
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "getSlow", name: "getSlow", pkg: "sync", typ: $funcType([], [$emptyInterface], false)}, {prop: "pin", name: "pin", pkg: "sync", typ: $funcType([], [ptrType$7], false)}, {prop: "pinSlow", name: "pinSlow", pkg: "sync", typ: $funcType([], [ptrType$7], false)}];
	ptrType$15.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([$emptyInterface], [$emptyInterface, $Bool], false)}, {prop: "Store", name: "Store", pkg: "", typ: $funcType([$emptyInterface, $emptyInterface], [], false)}, {prop: "LoadOrStore", name: "LoadOrStore", pkg: "", typ: $funcType([$emptyInterface, $emptyInterface], [$emptyInterface, $Bool], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "Range", name: "Range", pkg: "", typ: $funcType([funcType$1], [], false)}, {prop: "missLocked", name: "missLocked", pkg: "sync", typ: $funcType([], [], false)}, {prop: "dirtyLocked", name: "dirtyLocked", pkg: "sync", typ: $funcType([], [], false)}];
	ptrType$4.methods = [{prop: "load", name: "load", pkg: "sync", typ: $funcType([], [$emptyInterface, $Bool], false)}, {prop: "tryStore", name: "tryStore", pkg: "sync", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "unexpungeLocked", name: "unexpungeLocked", pkg: "sync", typ: $funcType([], [$Bool], false)}, {prop: "storeLocked", name: "storeLocked", pkg: "sync", typ: $funcType([ptrType$3], [], false)}, {prop: "tryLoadOrStore", name: "tryLoadOrStore", pkg: "sync", typ: $funcType([$emptyInterface], [$emptyInterface, $Bool, $Bool], false)}, {prop: "delete$", name: "delete", pkg: "sync", typ: $funcType([], [$Bool], false)}, {prop: "tryExpungeLocked", name: "tryExpungeLocked", pkg: "sync", typ: $funcType([], [$Bool], false)}];
	ptrType$16.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$9.methods = [{prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}, {prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLocker", name: "RLocker", pkg: "", typ: $funcType([], [Locker], false)}];
	ptrType$8.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	Pool.init("sync", [{prop: "local", name: "local", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "localSize", name: "localSize", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "store", name: "store", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "New", name: "New", anonymous: false, exported: true, typ: funcType, tag: ""}]);
	Map.init("sync", [{prop: "mu", name: "mu", anonymous: false, exported: false, typ: Mutex, tag: ""}, {prop: "read", name: "read", anonymous: false, exported: false, typ: atomic.Value, tag: ""}, {prop: "dirty", name: "dirty", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "misses", name: "misses", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	readOnly.init("sync", [{prop: "m", name: "m", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "amended", name: "amended", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	entry.init("sync", [{prop: "p", name: "p", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}]);
	Mutex.init("sync", [{prop: "state", name: "state", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "sema", name: "sema", anonymous: false, exported: false, typ: $Uint32, tag: ""}]);
	Locker.init([{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}]);
	poolLocalInternal.init("sync", [{prop: "private$0", name: "private", anonymous: false, exported: false, typ: $emptyInterface, tag: ""}, {prop: "shared", name: "shared", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "Mutex", name: "Mutex", anonymous: true, exported: true, typ: Mutex, tag: ""}]);
	poolLocal.init("sync", [{prop: "poolLocalInternal", name: "poolLocalInternal", anonymous: true, exported: false, typ: poolLocalInternal, tag: ""}, {prop: "pad", name: "pad", anonymous: false, exported: false, typ: arrayType$2, tag: ""}]);
	notifyList.init("sync", [{prop: "wait", name: "wait", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "notify", name: "notify", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "lock", name: "lock", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "head", name: "head", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "tail", name: "tail", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}]);
	RWMutex.init("sync", [{prop: "w", name: "w", anonymous: false, exported: false, typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", anonymous: false, exported: false, typ: $Int32, tag: ""}]);
	rlocker.init("sync", [{prop: "w", name: "w", anonymous: false, exported: false, typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", anonymous: false, exported: false, typ: $Int32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = race.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		allPools = sliceType.nil;
		semWaiters = {};
		expunged = (new Uint8Array(8));
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, $init, errors, sync, RuneScanner, errWhence, errOffset;
	errors = $packages["errors"];
	sync = $packages["sync"];
	RuneScanner = $pkg.RuneScanner = $newType(8, $kindInterface, "io.RuneScanner", true, "io", true, null);
	RuneScanner.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrShortWrite = errors.New("short write");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, $init, js, arrayType, arrayType$1, arrayType$2, structType, math, buf, init, Float32bits, Float64bits;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	arrayType = $arrayType($Uint32, 2);
	arrayType$1 = $arrayType($Float32, 2);
	arrayType$2 = $arrayType($Float64, 1);
	structType = $structType("math", [{prop: "uint32array", name: "uint32array", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "float32array", name: "float32array", anonymous: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "float64array", name: "float64array", anonymous: false, exported: false, typ: arrayType$2, tag: ""}]);
	init = function() {
		var ab;
		ab = new ($global.ArrayBuffer)(8);
		buf.uint32array = new ($global.Uint32Array)(ab);
		buf.float32array = new ($global.Float32Array)(ab);
		buf.float64array = new ($global.Float64Array)(ab);
	};
	Float32bits = function(f) {
		var f;
		buf.float32array[0] = f;
		return buf.uint32array[0];
	};
	$pkg.Float32bits = Float32bits;
	Float64bits = function(f) {
		var f, x, x$1;
		buf.float64array[0] = f;
		return (x = $shiftLeft64((new $Uint64(0, buf.uint32array[1])), 32), x$1 = (new $Uint64(0, buf.uint32array[0])), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	$pkg.Float64bits = Float64bits;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buf = new structType.ptr(arrayType.zero(), arrayType$1.zero(), arrayType$2.zero());
		math = $global.Math;
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, $init, errors, js, race, runtime, sync, SockaddrDatalink, mmapper, Errno, Sockaddr, SockaddrInet4, SockaddrInet6, SockaddrUnix, Timespec, Stat_t, RawSockaddrInet4, RawSockaddrInet6, RawSockaddrUnix, RawSockaddrDatalink, RawSockaddr, RawSockaddrAny, _Socklen, Linger, Iovec, IPMreq, IPv6Mreq, Msghdr, sliceType, sliceType$1, ptrType$2, arrayType, arrayType$1, ptrType$11, arrayType$3, arrayType$4, arrayType$5, arrayType$6, arrayType$10, ptrType$16, arrayType$11, ptrType$17, ptrType$18, structType, ptrType$20, ptrType$21, ptrType$27, mapType, funcType$2, funcType$3, ptrType$28, ptrType$29, ptrType$30, ptrType$31, arrayType$15, ptrType$32, warningPrinted, lineBuffer, syscallModule, alreadyTriedToLoad, minusOne, envs, freebsdConfArch, minRoutingSockaddrLen, mapper, errEAGAIN, errEINVAL, errENOENT, ioSync, ioSync$24ptr, errors$1, init, printWarning, printToConsole, indexByte, runtime_envs, syscall, Syscall, Syscall6, BytePtrFromString, readInt, readIntBE, readIntLE, ParseDirent, CloseOnExec, SetNonblock, msanRead, msanWrite, rsaAlignOf, itoa, uitoa, ReadDirent, anyToSockaddr, Accept, Recvmsg, SendmsgN, direntIno, direntReclen, direntNamlen, errnoErr, Read, Write, Recvfrom, Sendto, SetsockoptByte, SetsockoptInt, SetsockoptInet4Addr, SetsockoptIPMreq, SetsockoptIPv6Mreq, SetsockoptLinger, accept, setsockopt, Shutdown, recvfrom, sendto, recvmsg, sendmsg, fcntl, Close, Fchdir, Fchmod, Fchown, Fstat, Fsync, Ftruncate, Getdirentries, Lstat, Pread, Pwrite, read, Seek, write, mmap, munmap;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	SockaddrDatalink = $pkg.SockaddrDatalink = $newType(0, $kindStruct, "syscall.SockaddrDatalink", true, "syscall", true, function(Len_, Family_, Index_, Type_, Nlen_, Alen_, Slen_, Data_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Index = 0;
			this.Type = 0;
			this.Nlen = 0;
			this.Alen = 0;
			this.Slen = 0;
			this.Data = arrayType$3.zero();
			this.raw = new RawSockaddrDatalink.ptr(0, 0, 0, 0, 0, 0, 0, arrayType$3.zero());
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Index = Index_;
		this.Type = Type_;
		this.Nlen = Nlen_;
		this.Alen = Alen_;
		this.Slen = Slen_;
		this.Data = Data_;
		this.raw = raw_;
	});
	mmapper = $pkg.mmapper = $newType(0, $kindStruct, "syscall.mmapper", true, "syscall", false, function(Mutex_, active_, mmap_, munmap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Mutex = new sync.Mutex.ptr(0, 0);
			this.active = false;
			this.mmap = $throwNilPointerError;
			this.munmap = $throwNilPointerError;
			return;
		}
		this.Mutex = Mutex_;
		this.active = active_;
		this.mmap = mmap_;
		this.munmap = munmap_;
	});
	Errno = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", true, "syscall", true, null);
	Sockaddr = $pkg.Sockaddr = $newType(8, $kindInterface, "syscall.Sockaddr", true, "syscall", true, null);
	SockaddrInet4 = $pkg.SockaddrInet4 = $newType(0, $kindStruct, "syscall.SockaddrInet4", true, "syscall", true, function(Port_, Addr_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Port = 0;
			this.Addr = arrayType$1.zero();
			this.raw = new RawSockaddrInet4.ptr(0, 0, 0, arrayType$1.zero(), arrayType$6.zero());
			return;
		}
		this.Port = Port_;
		this.Addr = Addr_;
		this.raw = raw_;
	});
	SockaddrInet6 = $pkg.SockaddrInet6 = $newType(0, $kindStruct, "syscall.SockaddrInet6", true, "syscall", true, function(Port_, ZoneId_, Addr_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Port = 0;
			this.ZoneId = 0;
			this.Addr = arrayType.zero();
			this.raw = new RawSockaddrInet6.ptr(0, 0, 0, 0, arrayType.zero(), 0);
			return;
		}
		this.Port = Port_;
		this.ZoneId = ZoneId_;
		this.Addr = Addr_;
		this.raw = raw_;
	});
	SockaddrUnix = $pkg.SockaddrUnix = $newType(0, $kindStruct, "syscall.SockaddrUnix", true, "syscall", true, function(Name_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.raw = new RawSockaddrUnix.ptr(0, 0, arrayType$11.zero());
			return;
		}
		this.Name = Name_;
		this.raw = raw_;
	});
	Timespec = $pkg.Timespec = $newType(0, $kindStruct, "syscall.Timespec", true, "syscall", true, function(Sec_, Nsec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Sec = new $Int64(0, 0);
			this.Nsec = new $Int64(0, 0);
			return;
		}
		this.Sec = Sec_;
		this.Nsec = Nsec_;
	});
	Stat_t = $pkg.Stat_t = $newType(0, $kindStruct, "syscall.Stat_t", true, "syscall", true, function(Dev_, Mode_, Nlink_, Ino_, Uid_, Gid_, Rdev_, Pad_cgo_0_, Atimespec_, Mtimespec_, Ctimespec_, Birthtimespec_, Size_, Blocks_, Blksize_, Flags_, Gen_, Lspare_, Qspare_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dev = 0;
			this.Mode = 0;
			this.Nlink = 0;
			this.Ino = new $Uint64(0, 0);
			this.Uid = 0;
			this.Gid = 0;
			this.Rdev = 0;
			this.Pad_cgo_0 = arrayType$1.zero();
			this.Atimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Mtimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Ctimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Birthtimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Size = new $Int64(0, 0);
			this.Blocks = new $Int64(0, 0);
			this.Blksize = 0;
			this.Flags = 0;
			this.Gen = 0;
			this.Lspare = 0;
			this.Qspare = arrayType$15.zero();
			return;
		}
		this.Dev = Dev_;
		this.Mode = Mode_;
		this.Nlink = Nlink_;
		this.Ino = Ino_;
		this.Uid = Uid_;
		this.Gid = Gid_;
		this.Rdev = Rdev_;
		this.Pad_cgo_0 = Pad_cgo_0_;
		this.Atimespec = Atimespec_;
		this.Mtimespec = Mtimespec_;
		this.Ctimespec = Ctimespec_;
		this.Birthtimespec = Birthtimespec_;
		this.Size = Size_;
		this.Blocks = Blocks_;
		this.Blksize = Blksize_;
		this.Flags = Flags_;
		this.Gen = Gen_;
		this.Lspare = Lspare_;
		this.Qspare = Qspare_;
	});
	RawSockaddrInet4 = $pkg.RawSockaddrInet4 = $newType(0, $kindStruct, "syscall.RawSockaddrInet4", true, "syscall", true, function(Len_, Family_, Port_, Addr_, Zero_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Port = 0;
			this.Addr = arrayType$1.zero();
			this.Zero = arrayType$6.zero();
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Port = Port_;
		this.Addr = Addr_;
		this.Zero = Zero_;
	});
	RawSockaddrInet6 = $pkg.RawSockaddrInet6 = $newType(0, $kindStruct, "syscall.RawSockaddrInet6", true, "syscall", true, function(Len_, Family_, Port_, Flowinfo_, Addr_, Scope_id_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Port = 0;
			this.Flowinfo = 0;
			this.Addr = arrayType.zero();
			this.Scope_id = 0;
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Port = Port_;
		this.Flowinfo = Flowinfo_;
		this.Addr = Addr_;
		this.Scope_id = Scope_id_;
	});
	RawSockaddrUnix = $pkg.RawSockaddrUnix = $newType(0, $kindStruct, "syscall.RawSockaddrUnix", true, "syscall", true, function(Len_, Family_, Path_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Path = arrayType$11.zero();
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Path = Path_;
	});
	RawSockaddrDatalink = $pkg.RawSockaddrDatalink = $newType(0, $kindStruct, "syscall.RawSockaddrDatalink", true, "syscall", true, function(Len_, Family_, Index_, Type_, Nlen_, Alen_, Slen_, Data_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Index = 0;
			this.Type = 0;
			this.Nlen = 0;
			this.Alen = 0;
			this.Slen = 0;
			this.Data = arrayType$3.zero();
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Index = Index_;
		this.Type = Type_;
		this.Nlen = Nlen_;
		this.Alen = Alen_;
		this.Slen = Slen_;
		this.Data = Data_;
	});
	RawSockaddr = $pkg.RawSockaddr = $newType(0, $kindStruct, "syscall.RawSockaddr", true, "syscall", true, function(Len_, Family_, Data_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Data = arrayType$4.zero();
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Data = Data_;
	});
	RawSockaddrAny = $pkg.RawSockaddrAny = $newType(0, $kindStruct, "syscall.RawSockaddrAny", true, "syscall", true, function(Addr_, Pad_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Addr = new RawSockaddr.ptr(0, 0, arrayType$4.zero());
			this.Pad = arrayType$5.zero();
			return;
		}
		this.Addr = Addr_;
		this.Pad = Pad_;
	});
	_Socklen = $pkg._Socklen = $newType(4, $kindUint32, "syscall._Socklen", true, "syscall", false, null);
	Linger = $pkg.Linger = $newType(0, $kindStruct, "syscall.Linger", true, "syscall", true, function(Onoff_, Linger_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Onoff = 0;
			this.Linger = 0;
			return;
		}
		this.Onoff = Onoff_;
		this.Linger = Linger_;
	});
	Iovec = $pkg.Iovec = $newType(0, $kindStruct, "syscall.Iovec", true, "syscall", true, function(Base_, Len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Base = ptrType$2.nil;
			this.Len = new $Uint64(0, 0);
			return;
		}
		this.Base = Base_;
		this.Len = Len_;
	});
	IPMreq = $pkg.IPMreq = $newType(0, $kindStruct, "syscall.IPMreq", true, "syscall", true, function(Multiaddr_, Interface_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Multiaddr = arrayType$1.zero();
			this.Interface = arrayType$1.zero();
			return;
		}
		this.Multiaddr = Multiaddr_;
		this.Interface = Interface_;
	});
	IPv6Mreq = $pkg.IPv6Mreq = $newType(0, $kindStruct, "syscall.IPv6Mreq", true, "syscall", true, function(Multiaddr_, Interface_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Multiaddr = arrayType.zero();
			this.Interface = 0;
			return;
		}
		this.Multiaddr = Multiaddr_;
		this.Interface = Interface_;
	});
	Msghdr = $pkg.Msghdr = $newType(0, $kindStruct, "syscall.Msghdr", true, "syscall", true, function(Name_, Namelen_, Pad_cgo_0_, Iov_, Iovlen_, Pad_cgo_1_, Control_, Controllen_, Flags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = ptrType$2.nil;
			this.Namelen = 0;
			this.Pad_cgo_0 = arrayType$1.zero();
			this.Iov = ptrType$18.nil;
			this.Iovlen = 0;
			this.Pad_cgo_1 = arrayType$1.zero();
			this.Control = ptrType$2.nil;
			this.Controllen = 0;
			this.Flags = 0;
			return;
		}
		this.Name = Name_;
		this.Namelen = Namelen_;
		this.Pad_cgo_0 = Pad_cgo_0_;
		this.Iov = Iov_;
		this.Iovlen = Iovlen_;
		this.Pad_cgo_1 = Pad_cgo_1_;
		this.Control = Control_;
		this.Controllen = Controllen_;
		this.Flags = Flags_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($String);
	ptrType$2 = $ptrType($Uint8);
	arrayType = $arrayType($Uint8, 16);
	arrayType$1 = $arrayType($Uint8, 4);
	ptrType$11 = $ptrType(SockaddrDatalink);
	arrayType$3 = $arrayType($Int8, 12);
	arrayType$4 = $arrayType($Int8, 14);
	arrayType$5 = $arrayType($Int8, 92);
	arrayType$6 = $arrayType($Int8, 8);
	arrayType$10 = $arrayType($Uint8, 32);
	ptrType$16 = $ptrType($Uint16);
	arrayType$11 = $arrayType($Int8, 104);
	ptrType$17 = $ptrType(_Socklen);
	ptrType$18 = $ptrType(Iovec);
	structType = $structType("syscall", [{prop: "addr", name: "addr", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "len", name: "len", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "cap", name: "cap", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	ptrType$20 = $ptrType($Int64);
	ptrType$21 = $ptrType($Int32);
	ptrType$27 = $ptrType(mmapper);
	mapType = $mapType(ptrType$2, sliceType);
	funcType$2 = $funcType([$Uintptr, $Uintptr, $Int, $Int, $Int, $Int64], [$Uintptr, $error], false);
	funcType$3 = $funcType([$Uintptr, $Uintptr], [$error], false);
	ptrType$28 = $ptrType(SockaddrInet4);
	ptrType$29 = $ptrType(SockaddrInet6);
	ptrType$30 = $ptrType(SockaddrUnix);
	ptrType$31 = $ptrType(Timespec);
	arrayType$15 = $arrayType($Int64, 2);
	ptrType$32 = $ptrType(Msghdr);
	init = function() {
		$flushConsole = (function() {
			if (!((lineBuffer.$length === 0))) {
				$global.console.log($externalize(($bytesToString(lineBuffer)), $String));
				lineBuffer = sliceType.nil;
			}
		});
	};
	printWarning = function() {
		if (!warningPrinted) {
			$global.console.error($externalize("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md", $String));
		}
		warningPrinted = true;
	};
	printToConsole = function(b) {
		var b, goPrintToConsole, i;
		goPrintToConsole = $global.goPrintToConsole;
		if (!(goPrintToConsole === undefined)) {
			goPrintToConsole(b);
			return;
		}
		lineBuffer = $appendSlice(lineBuffer, b);
		while (true) {
			i = indexByte(lineBuffer, 10);
			if (i === -1) {
				break;
			}
			$global.console.log($externalize(($bytesToString($subslice(lineBuffer, 0, i))), $String));
			lineBuffer = $subslice(lineBuffer, (i + 1 >> 0));
		}
	};
	indexByte = function(s, c) {
		var _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	runtime_envs = function() {
		var envkeys, envs$1, i, jsEnv, key, process;
		process = $global.process;
		if (process === undefined) {
			return sliceType$1.nil;
		}
		jsEnv = process.env;
		envkeys = $global.Object.keys(jsEnv);
		envs$1 = $makeSlice(sliceType$1, $parseInt(envkeys.length));
		i = 0;
		while (true) {
			if (!(i < $parseInt(envkeys.length))) { break; }
			key = $internalize(envkeys[i], $String);
			((i < 0 || i >= envs$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : envs$1.$array[envs$1.$offset + i] = key + "=" + $internalize(jsEnv[$externalize(key, $String)], $String));
			i = i + (1) >> 0;
		}
		return envs$1;
	};
	syscall = function(name) {
		var name, require, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			$recover();
		}), []]);
		if (syscallModule === null) {
			if (alreadyTriedToLoad) {
				return null;
			}
			alreadyTriedToLoad = true;
			require = $global.require;
			if (require === undefined) {
				$panic(new $String(""));
			}
			syscallModule = require($externalize("syscall", $String));
		}
		return syscallModule[$externalize(name, $String)];
		/* */ } catch(err) { $err = err; return null; } finally { $callDeferred($deferred, $err); }
	};
	Syscall = function(trap, a1, a2, a3) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, a1, a2, a3, array, err, f, r, r1, r2, slice, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3);
			_tmp = ((($parseInt(r[0]) >> 0) >>> 0));
			_tmp$1 = ((($parseInt(r[1]) >> 0) >>> 0));
			_tmp$2 = ((($parseInt(r[2]) >> 0) >>> 0));
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if ((trap === 4) && ((a1 === 1) || (a1 === 2))) {
			array = a2;
			slice = $makeSlice(sliceType, $parseInt(array.length));
			slice.$array = array;
			printToConsole(slice);
			_tmp$3 = (($parseInt(array.length) >>> 0));
			_tmp$4 = 0;
			_tmp$5 = 0;
			r1 = _tmp$3;
			r2 = _tmp$4;
			err = _tmp$5;
			return [r1, r2, err];
		}
		if (trap === 1) {
			runtime.Goexit();
		}
		printWarning();
		_tmp$6 = ((minusOne >>> 0));
		_tmp$7 = 0;
		_tmp$8 = 13;
		r1 = _tmp$6;
		r2 = _tmp$7;
		err = _tmp$8;
		return [r1, r2, err];
	};
	$pkg.Syscall = Syscall;
	Syscall6 = function(trap, a1, a2, a3, a4, a5, a6) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a1, a2, a3, a4, a5, a6, err, f, r, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall6");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3, a4, a5, a6);
			_tmp = ((($parseInt(r[0]) >> 0) >>> 0));
			_tmp$1 = ((($parseInt(r[1]) >> 0) >>> 0));
			_tmp$2 = ((($parseInt(r[2]) >> 0) >>> 0));
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if (!((trap === 202))) {
			printWarning();
		}
		_tmp$3 = ((minusOne >>> 0));
		_tmp$4 = 0;
		_tmp$5 = 13;
		r1 = _tmp$3;
		r2 = _tmp$4;
		err = _tmp$5;
		return [r1, r2, err];
	};
	$pkg.Syscall6 = Syscall6;
	BytePtrFromString = function(s) {
		var _i, _ref, array, b, i, s;
		array = new ($global.Uint8Array)(s.length + 1 >> 0);
		_ref = (new sliceType($stringToBytes(s)));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === 0) {
				return [ptrType$2.nil, new Errno(22)];
			}
			array[i] = b;
			_i++;
		}
		array[s.length] = 0;
		return [((array)), $ifaceNil];
	};
	$pkg.BytePtrFromString = BytePtrFromString;
	readInt = function(b, off, size) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, off, ok, size, u;
		u = new $Uint64(0, 0);
		ok = false;
		if (b.$length < (((off + size >>> 0) >> 0))) {
			_tmp = new $Uint64(0, 0);
			_tmp$1 = false;
			u = _tmp;
			ok = _tmp$1;
			return [u, ok];
		}
		if (false) {
			_tmp$2 = readIntBE($subslice(b, off), size);
			_tmp$3 = true;
			u = _tmp$2;
			ok = _tmp$3;
			return [u, ok];
		}
		_tmp$4 = readIntLE($subslice(b, off), size);
		_tmp$5 = true;
		u = _tmp$4;
		ok = _tmp$5;
		return [u, ok];
	};
	readIntBE = function(b, size) {
		var _1, b, size, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_1 = size;
		if (_1 === (1)) {
			return (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])));
		} else if (_1 === (2)) {
			$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
			return (x = (new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), x$1 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 8), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		} else if (_1 === (4)) {
			$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
			return (x$2 = (x$3 = (x$4 = (new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), x$5 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 8), new $Uint64(x$4.$high | x$5.$high, (x$4.$low | x$5.$low) >>> 0)), x$6 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 16), new $Uint64(x$3.$high | x$6.$high, (x$3.$low | x$6.$low) >>> 0)), x$7 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 24), new $Uint64(x$2.$high | x$7.$high, (x$2.$low | x$7.$low) >>> 0));
		} else if (_1 === (8)) {
			$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
			return (x$8 = (x$9 = (x$10 = (x$11 = (x$12 = (x$13 = (x$14 = (new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), x$15 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 8), new $Uint64(x$14.$high | x$15.$high, (x$14.$low | x$15.$low) >>> 0)), x$16 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 16), new $Uint64(x$13.$high | x$16.$high, (x$13.$low | x$16.$low) >>> 0)), x$17 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 24), new $Uint64(x$12.$high | x$17.$high, (x$12.$low | x$17.$low) >>> 0)), x$18 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 32), new $Uint64(x$11.$high | x$18.$high, (x$11.$low | x$18.$low) >>> 0)), x$19 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 40), new $Uint64(x$10.$high | x$19.$high, (x$10.$low | x$19.$low) >>> 0)), x$20 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 48), new $Uint64(x$9.$high | x$20.$high, (x$9.$low | x$20.$low) >>> 0)), x$21 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 56), new $Uint64(x$8.$high | x$21.$high, (x$8.$low | x$21.$low) >>> 0));
		} else {
			$panic(new $String("syscall: readInt with unsupported size"));
		}
	};
	readIntLE = function(b, size) {
		var _1, b, size, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_1 = size;
		if (_1 === (1)) {
			return (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])));
		} else if (_1 === (2)) {
			$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
			return (x = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$1 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		} else if (_1 === (4)) {
			$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
			return (x$2 = (x$3 = (x$4 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$5 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$4.$high | x$5.$high, (x$4.$low | x$5.$low) >>> 0)), x$6 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$3.$high | x$6.$high, (x$3.$low | x$6.$low) >>> 0)), x$7 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$2.$high | x$7.$high, (x$2.$low | x$7.$low) >>> 0));
		} else if (_1 === (8)) {
			$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
			return (x$8 = (x$9 = (x$10 = (x$11 = (x$12 = (x$13 = (x$14 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$15 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$14.$high | x$15.$high, (x$14.$low | x$15.$low) >>> 0)), x$16 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$13.$high | x$16.$high, (x$13.$low | x$16.$low) >>> 0)), x$17 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$12.$high | x$17.$high, (x$12.$low | x$17.$low) >>> 0)), x$18 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 32), new $Uint64(x$11.$high | x$18.$high, (x$11.$low | x$18.$low) >>> 0)), x$19 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 40), new $Uint64(x$10.$high | x$19.$high, (x$10.$low | x$19.$low) >>> 0)), x$20 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 48), new $Uint64(x$9.$high | x$20.$high, (x$9.$low | x$20.$low) >>> 0)), x$21 = $shiftLeft64((new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), 56), new $Uint64(x$8.$high | x$21.$high, (x$8.$low | x$21.$low) >>> 0));
		} else {
			$panic(new $String("syscall: readInt with unsupported size"));
		}
	};
	ParseDirent = function(buf, max, names) {
		var _i, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, buf, c, consumed, count, i, ino, max, name, names, namlen, newnames, ok, origlen, rec, reclen, x, x$1, x$2;
		consumed = 0;
		count = 0;
		newnames = sliceType$1.nil;
		origlen = buf.$length;
		count = 0;
		while (true) {
			if (!(!((max === 0)) && buf.$length > 0)) { break; }
			_tuple = direntReclen(buf);
			reclen = _tuple[0];
			ok = _tuple[1];
			if (!ok || (x = (new $Uint64(0, buf.$length)), (reclen.$high > x.$high || (reclen.$high === x.$high && reclen.$low > x.$low)))) {
				_tmp = origlen;
				_tmp$1 = count;
				_tmp$2 = names;
				consumed = _tmp;
				count = _tmp$1;
				newnames = _tmp$2;
				return [consumed, count, newnames];
			}
			rec = $subslice(buf, 0, $flatten64(reclen));
			buf = $subslice(buf, $flatten64(reclen));
			_tuple$1 = direntIno(rec);
			ino = _tuple$1[0];
			ok = _tuple$1[1];
			if (!ok) {
				break;
			}
			if ((ino.$high === 0 && ino.$low === 0)) {
				continue;
			}
			_tuple$2 = direntNamlen(rec);
			namlen = _tuple$2[0];
			ok = _tuple$2[1];
			if (!ok || (x$1 = new $Uint64(0 + namlen.$high, 21 + namlen.$low), x$2 = (new $Uint64(0, rec.$length)), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
				break;
			}
			name = $subslice(rec, 21, $flatten64(new $Uint64(0 + namlen.$high, 21 + namlen.$low)));
			_ref = name;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (c === 0) {
					name = $subslice(name, 0, i);
					break;
				}
				_i++;
			}
			if (($bytesToString(name)) === "." || ($bytesToString(name)) === "..") {
				continue;
			}
			max = max - (1) >> 0;
			count = count + (1) >> 0;
			names = $append(names, ($bytesToString(name)));
		}
		_tmp$3 = origlen - buf.$length >> 0;
		_tmp$4 = count;
		_tmp$5 = names;
		consumed = _tmp$3;
		count = _tmp$4;
		newnames = _tmp$5;
		return [consumed, count, newnames];
	};
	$pkg.ParseDirent = ParseDirent;
	CloseOnExec = function(fd) {
		var fd;
		fcntl(fd, 2, 1);
	};
	$pkg.CloseOnExec = CloseOnExec;
	SetNonblock = function(fd, nonblocking) {
		var _tuple, _tuple$1, err, fd, flag, nonblocking;
		err = $ifaceNil;
		_tuple = fcntl(fd, 3, 0);
		flag = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			return err;
		}
		if (nonblocking) {
			flag = flag | (4);
		} else {
			flag = (flag & ~(4)) >> 0;
		}
		_tuple$1 = fcntl(fd, 4, flag);
		err = _tuple$1[1];
		err = err;
		return err;
	};
	$pkg.SetNonblock = SetNonblock;
	msanRead = function(addr, len) {
		var addr, len;
	};
	msanWrite = function(addr, len) {
		var addr, len;
	};
	rsaAlignOf = function(salen) {
		var salen, salign;
		salign = 8;
		if (true) {
			salign = 4;
		} else if (false) {
			salign = 8;
		} else if (false) {
			if (freebsdConfArch === "amd64") {
				salign = 8;
			}
		}
		if (salen === 0) {
			return salign;
		}
		return (((salen + salign >> 0) - 1 >> 0)) & (~((salign - 1 >> 0)) >> 0);
	};
	itoa = function(val) {
		var val;
		if (val < 0) {
			return "-" + uitoa(((-val >>> 0)));
		}
		return uitoa(((val >>> 0)));
	};
	uitoa = function(val) {
		var _q, _r, buf, i, val;
		buf = arrayType$10.zero();
		i = 31;
		while (true) {
			if (!(val >= 10)) { break; }
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((((_r = val % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24)));
			i = i - (1) >> 0;
			val = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((val + 48 >>> 0) << 24 >>> 24)));
		return ($bytesToString($subslice(new sliceType(buf), i)));
	};
	Timespec.ptr.prototype.Unix = function() {
		var _tmp, _tmp$1, nsec, sec, ts;
		sec = new $Int64(0, 0);
		nsec = new $Int64(0, 0);
		ts = this;
		_tmp = (ts.Sec);
		_tmp$1 = (ts.Nsec);
		sec = _tmp;
		nsec = _tmp$1;
		return [sec, nsec];
	};
	Timespec.prototype.Unix = function() { return this.$val.Unix(); };
	Timespec.ptr.prototype.Nano = function() {
		var ts, x, x$1;
		ts = this;
		return (x = $mul64((ts.Sec), new $Int64(0, 1000000000)), x$1 = (ts.Nsec), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Timespec.prototype.Nano = function() { return this.$val.Nano(); };
	ReadDirent = function(fd, buf) {
		var _tuple, base, buf, err, fd, n;
		n = 0;
		err = $ifaceNil;
		base = ((new Uint8Array(8)));
		_tuple = Getdirentries(fd, buf, base);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	$pkg.ReadDirent = ReadDirent;
	SockaddrInet4.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, p, sa, x, x$1, x$2;
		sa = this;
		if (sa.Port < 0 || sa.Port > 65535) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = 16;
		sa.raw.Family = 2;
		p = (((x = sa.raw, (x.$ptr_Port || (x.$ptr_Port = new ptrType$16(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, x))))));
		p.nilCheck, p[0] = (((sa.Port >> 8 >> 0) << 24 >>> 24));
		p.nilCheck, p[1] = ((sa.Port << 24 >>> 24));
		i = 0;
		while (true) {
			if (!(i < 4)) { break; }
			(x$2 = sa.raw.Addr, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = (x$1 = sa.Addr, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i]))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(16);
		return [(_array), ((sa.raw.Len >>> 0)), $ifaceNil];
	};
	SockaddrInet4.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrInet6.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, p, sa, x, x$1, x$2;
		sa = this;
		if (sa.Port < 0 || sa.Port > 65535) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = 28;
		sa.raw.Family = 30;
		p = (((x = sa.raw, (x.$ptr_Port || (x.$ptr_Port = new ptrType$16(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, x))))));
		p.nilCheck, p[0] = (((sa.Port >> 8 >> 0) << 24 >>> 24));
		p.nilCheck, p[1] = ((sa.Port << 24 >>> 24));
		sa.raw.Scope_id = sa.ZoneId;
		i = 0;
		while (true) {
			if (!(i < 16)) { break; }
			(x$2 = sa.raw.Addr, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = (x$1 = sa.Addr, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i]))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(28);
		return [(_array), ((sa.raw.Len >>> 0)), $ifaceNil];
	};
	SockaddrInet6.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrUnix.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, n, name, sa, x;
		sa = this;
		name = sa.Name;
		n = name.length;
		if (n >= 104 || (n === 0)) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = (((3 + n >> 0) << 24 >>> 24));
		sa.raw.Family = 1;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			(x = sa.raw.Path, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i] = ((name.charCodeAt(i) << 24 >> 24))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(106);
		return [(_array), ((sa.raw.Len >>> 0)), $ifaceNil];
	};
	SockaddrUnix.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrDatalink.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, sa, x, x$1;
		sa = this;
		if (sa.Index === 0) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = sa.Len;
		sa.raw.Family = 18;
		sa.raw.Index = sa.Index;
		sa.raw.Type = sa.Type;
		sa.raw.Nlen = sa.Nlen;
		sa.raw.Alen = sa.Alen;
		sa.raw.Slen = sa.Slen;
		i = 0;
		while (true) {
			if (!(i < 12)) { break; }
			(x$1 = sa.raw.Data, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i] = (x = sa.Data, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(20);
		return [(_array), 20, $ifaceNil];
	};
	SockaddrDatalink.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	anyToSockaddr = function(rsa) {
		var _1, _array, _array$1, _array$2, _array$3, _array$4, _array$5, _array$6, _array$7, _struct, _struct$1, _struct$2, _struct$3, _struct$4, _struct$5, _struct$6, _struct$7, _view, _view$1, _view$2, _view$3, _view$4, _view$5, _view$6, _view$7, bytes, i, i$1, i$2, i$3, n, p, p$1, pp, pp$1, pp$2, pp$3, rsa, sa, sa$1, sa$2, sa$3, x, x$1, x$2, x$3, x$4, x$5, x$6;
		_1 = rsa.Addr.Family;
		if (_1 === (18)) {
			_array$1 = new Uint8Array(108);
			pp = ((_array = (_array$1), _struct = new RawSockaddrDatalink.ptr(0, 0, 0, 0, 0, 0, 0, arrayType$3.zero()), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Len = _view.getUint8(0, true), _struct.Family = _view.getUint8(1, true), _struct.Index = _view.getUint16(2, true), _struct.Type = _view.getUint8(4, true), _struct.Nlen = _view.getUint8(5, true), _struct.Alen = _view.getUint8(6, true), _struct.Slen = _view.getUint8(7, true), _struct.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct));
			_struct$1 = rsa, _view$1 = new DataView(_array$1.buffer, _array$1.byteOffset), _struct$1.Addr.Len = _view$1.getUint8(0, true), _struct$1.Addr.Family = _view$1.getUint8(1, true), _struct$1.Addr.Data = new ($nativeArray($kindInt8))(_array$1.buffer, $min(_array$1.byteOffset + 2, _array$1.buffer.byteLength)), _struct$1.Pad = new ($nativeArray($kindInt8))(_array$1.buffer, $min(_array$1.byteOffset + 16, _array$1.buffer.byteLength));
			sa = new SockaddrDatalink.ptr(0, 0, 0, 0, 0, 0, 0, arrayType$3.zero(), new RawSockaddrDatalink.ptr(0, 0, 0, 0, 0, 0, 0, arrayType$3.zero()));
			sa.Len = pp.Len;
			sa.Family = pp.Family;
			sa.Index = pp.Index;
			sa.Type = pp.Type;
			sa.Nlen = pp.Nlen;
			sa.Alen = pp.Alen;
			sa.Slen = pp.Slen;
			i = 0;
			while (true) {
				if (!(i < 12)) { break; }
				(x$1 = sa.Data, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i] = (x = pp.Data, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]))));
				i = i + (1) >> 0;
			}
			return [sa, $ifaceNil];
		} else if (_1 === (1)) {
			_array$3 = new Uint8Array(108);
			pp$1 = ((_array$2 = (_array$3), _struct$2 = new RawSockaddrUnix.ptr(0, 0, arrayType$11.zero()), _view$2 = new DataView(_array$2.buffer, _array$2.byteOffset), _struct$2.Len = _view$2.getUint8(0, true), _struct$2.Family = _view$2.getUint8(1, true), _struct$2.Path = new ($nativeArray($kindInt8))(_array$2.buffer, $min(_array$2.byteOffset + 2, _array$2.buffer.byteLength)), _struct$2));
			_struct$3 = rsa, _view$3 = new DataView(_array$3.buffer, _array$3.byteOffset), _struct$3.Addr.Len = _view$3.getUint8(0, true), _struct$3.Addr.Family = _view$3.getUint8(1, true), _struct$3.Addr.Data = new ($nativeArray($kindInt8))(_array$3.buffer, $min(_array$3.byteOffset + 2, _array$3.buffer.byteLength)), _struct$3.Pad = new ($nativeArray($kindInt8))(_array$3.buffer, $min(_array$3.byteOffset + 16, _array$3.buffer.byteLength));
			if (pp$1.Len < 2 || pp$1.Len > 106) {
				return [$ifaceNil, new Errno(22)];
			}
			sa$1 = new SockaddrUnix.ptr("", new RawSockaddrUnix.ptr(0, 0, arrayType$11.zero()));
			n = ((pp$1.Len >> 0)) - 2 >> 0;
			i$1 = 0;
			while (true) {
				if (!(i$1 < n)) { break; }
				if ((x$2 = pp$1.Path, ((i$1 < 0 || i$1 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i$1])) === 0) {
					n = i$1;
					break;
				}
				i$1 = i$1 + (1) >> 0;
			}
			bytes = $subslice(new sliceType((($sliceToArray(new sliceType(pp$1.Path))))), 0, n);
			sa$1.Name = ($bytesToString(bytes));
			return [sa$1, $ifaceNil];
		} else if (_1 === (2)) {
			_array$5 = new Uint8Array(108);
			pp$2 = ((_array$4 = (_array$5), _struct$4 = new RawSockaddrInet4.ptr(0, 0, 0, arrayType$1.zero(), arrayType$6.zero()), _view$4 = new DataView(_array$4.buffer, _array$4.byteOffset), _struct$4.Len = _view$4.getUint8(0, true), _struct$4.Family = _view$4.getUint8(1, true), _struct$4.Port = _view$4.getUint16(2, true), _struct$4.Addr = new ($nativeArray($kindUint8))(_array$4.buffer, $min(_array$4.byteOffset + 4, _array$4.buffer.byteLength)), _struct$4.Zero = new ($nativeArray($kindInt8))(_array$4.buffer, $min(_array$4.byteOffset + 8, _array$4.buffer.byteLength)), _struct$4));
			_struct$5 = rsa, _view$5 = new DataView(_array$5.buffer, _array$5.byteOffset), _struct$5.Addr.Len = _view$5.getUint8(0, true), _struct$5.Addr.Family = _view$5.getUint8(1, true), _struct$5.Addr.Data = new ($nativeArray($kindInt8))(_array$5.buffer, $min(_array$5.byteOffset + 2, _array$5.buffer.byteLength)), _struct$5.Pad = new ($nativeArray($kindInt8))(_array$5.buffer, $min(_array$5.byteOffset + 16, _array$5.buffer.byteLength));
			sa$2 = new SockaddrInet4.ptr(0, arrayType$1.zero(), new RawSockaddrInet4.ptr(0, 0, 0, arrayType$1.zero(), arrayType$6.zero()));
			p = (((pp$2.$ptr_Port || (pp$2.$ptr_Port = new ptrType$16(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, pp$2)))));
			sa$2.Port = ((((p.nilCheck, p[0]) >> 0)) << 8 >> 0) + (((p.nilCheck, p[1]) >> 0)) >> 0;
			i$2 = 0;
			while (true) {
				if (!(i$2 < 4)) { break; }
				(x$4 = sa$2.Addr, ((i$2 < 0 || i$2 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[i$2] = (x$3 = pp$2.Addr, ((i$2 < 0 || i$2 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[i$2]))));
				i$2 = i$2 + (1) >> 0;
			}
			return [sa$2, $ifaceNil];
		} else if (_1 === (30)) {
			_array$7 = new Uint8Array(108);
			pp$3 = ((_array$6 = (_array$7), _struct$6 = new RawSockaddrInet6.ptr(0, 0, 0, 0, arrayType.zero(), 0), _view$6 = new DataView(_array$6.buffer, _array$6.byteOffset), _struct$6.Len = _view$6.getUint8(0, true), _struct$6.Family = _view$6.getUint8(1, true), _struct$6.Port = _view$6.getUint16(2, true), _struct$6.Flowinfo = _view$6.getUint32(4, true), _struct$6.Addr = new ($nativeArray($kindUint8))(_array$6.buffer, $min(_array$6.byteOffset + 8, _array$6.buffer.byteLength)), _struct$6.Scope_id = _view$6.getUint32(24, true), _struct$6));
			_struct$7 = rsa, _view$7 = new DataView(_array$7.buffer, _array$7.byteOffset), _struct$7.Addr.Len = _view$7.getUint8(0, true), _struct$7.Addr.Family = _view$7.getUint8(1, true), _struct$7.Addr.Data = new ($nativeArray($kindInt8))(_array$7.buffer, $min(_array$7.byteOffset + 2, _array$7.buffer.byteLength)), _struct$7.Pad = new ($nativeArray($kindInt8))(_array$7.buffer, $min(_array$7.byteOffset + 16, _array$7.buffer.byteLength));
			sa$3 = new SockaddrInet6.ptr(0, 0, arrayType.zero(), new RawSockaddrInet6.ptr(0, 0, 0, 0, arrayType.zero(), 0));
			p$1 = (((pp$3.$ptr_Port || (pp$3.$ptr_Port = new ptrType$16(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, pp$3)))));
			sa$3.Port = ((((p$1.nilCheck, p$1[0]) >> 0)) << 8 >> 0) + (((p$1.nilCheck, p$1[1]) >> 0)) >> 0;
			sa$3.ZoneId = pp$3.Scope_id;
			i$3 = 0;
			while (true) {
				if (!(i$3 < 16)) { break; }
				(x$6 = sa$3.Addr, ((i$3 < 0 || i$3 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[i$3] = (x$5 = pp$3.Addr, ((i$3 < 0 || i$3 >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i$3]))));
				i$3 = i$3 + (1) >> 0;
			}
			return [sa$3, $ifaceNil];
		}
		return [$ifaceNil, new Errno(47)];
	};
	Accept = function(fd) {
		var _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, err, fd, len, len$24ptr, nfd, rsa, sa;
		nfd = 0;
		sa = $ifaceNil;
		err = $ifaceNil;
		rsa = new RawSockaddrAny.ptr(new RawSockaddr.ptr(0, 0, arrayType$4.zero()), arrayType$5.zero());
		len = 108;
		_tuple = accept(fd, rsa, (len$24ptr || (len$24ptr = new ptrType$17(function() { return len; }, function($v) { len = $v; }))));
		nfd = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [nfd, sa, err];
		}
		if (true && (len === 0)) {
			Close(nfd);
			_tmp = 0;
			_tmp$1 = $ifaceNil;
			_tmp$2 = new Errno(53);
			nfd = _tmp;
			sa = _tmp$1;
			err = _tmp$2;
			return [nfd, sa, err];
		}
		_tuple$1 = anyToSockaddr(rsa);
		sa = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			Close(nfd);
			nfd = 0;
		}
		return [nfd, sa, err];
	};
	$pkg.Accept = Accept;
	Recvmsg = function(fd, p, oob, flags) {
		var _array, _struct, _tuple, _tuple$1, _view, dummy, dummy$24ptr, err, fd, flags, from, iov, msg, n, oob, oobn, p, recvflags, rsa;
		n = 0;
		oobn = 0;
		recvflags = 0;
		from = $ifaceNil;
		err = $ifaceNil;
		msg = new Msghdr.ptr(ptrType$2.nil, 0, arrayType$1.zero(), ptrType$18.nil, 0, arrayType$1.zero(), ptrType$2.nil, 0, 0);
		rsa = new RawSockaddrAny.ptr(new RawSockaddr.ptr(0, 0, arrayType$4.zero()), arrayType$5.zero());
		_array = new Uint8Array(108);
		msg.Name = ((_array));
		_struct = rsa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		msg.Namelen = 108;
		iov = new Iovec.ptr(ptrType$2.nil, new $Uint64(0, 0));
		if (p.$length > 0) {
			iov.Base = (($sliceToArray(p)));
			iov.SetLen(p.$length);
		}
		dummy = 0;
		if (oob.$length > 0) {
			if (p.$length === 0) {
				iov.Base = (dummy$24ptr || (dummy$24ptr = new ptrType$2(function() { return dummy; }, function($v) { dummy = $v; })));
				iov.SetLen(1);
			}
			msg.Control = (($sliceToArray(oob)));
			msg.SetControllen(oob.$length);
		}
		msg.Iov = iov;
		msg.Iovlen = 1;
		_tuple = recvmsg(fd, msg, flags);
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [n, oobn, recvflags, from, err];
		}
		oobn = ((msg.Controllen >> 0));
		recvflags = ((msg.Flags >> 0));
		if (!((rsa.Addr.Family === 0))) {
			_tuple$1 = anyToSockaddr(rsa);
			from = _tuple$1[0];
			err = _tuple$1[1];
		}
		return [n, oobn, recvflags, from, err];
	};
	$pkg.Recvmsg = Recvmsg;
	SendmsgN = function(fd, p, oob, to, flags) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, dummy, err, fd, flags, iov, msg, n, oob, p, ptr, salen, to, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dummy = $f.dummy; err = $f.err; fd = $f.fd; flags = $f.flags; iov = $f.iov; msg = $f.msg; n = $f.n; oob = $f.oob; p = $f.p; ptr = $f.ptr; salen = $f.salen; to = $f.to; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dummy = [dummy];
		iov = [iov];
		msg = [msg];
		n = 0;
		err = $ifaceNil;
		ptr = 0;
		salen = 0;
		/* */ if (!($interfaceIsEqual(to, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(to, $ifaceNil))) { */ case 1:
			_r = to.sockaddr(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			ptr = _tuple[0];
			salen = _tuple[1];
			err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = 0;
				_tmp$1 = err;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
		/* } */ case 2:
		msg[0] = new Msghdr.ptr(ptrType$2.nil, 0, arrayType$1.zero(), ptrType$18.nil, 0, arrayType$1.zero(), ptrType$2.nil, 0, 0);
		msg[0].Name = ((ptr));
		msg[0].Namelen = ((salen >>> 0));
		iov[0] = new Iovec.ptr(ptrType$2.nil, new $Uint64(0, 0));
		if (p.$length > 0) {
			iov[0].Base = (($sliceToArray(p)));
			iov[0].SetLen(p.$length);
		}
		dummy[0] = 0;
		if (oob.$length > 0) {
			if (p.$length === 0) {
				iov[0].Base = (dummy.$ptr || (dummy.$ptr = new ptrType$2(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, dummy)));
				iov[0].SetLen(1);
			}
			msg[0].Control = (($sliceToArray(oob)));
			msg[0].SetControllen(oob.$length);
		}
		msg[0].Iov = iov[0];
		msg[0].Iovlen = 1;
		_tuple$1 = sendmsg(fd, msg[0], flags);
		n = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = 0;
			_tmp$3 = err;
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		if (oob.$length > 0 && (p.$length === 0)) {
			n = 0;
		}
		_tmp$4 = n;
		_tmp$5 = $ifaceNil;
		n = _tmp$4;
		err = _tmp$5;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: SendmsgN }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dummy = dummy; $f.err = err; $f.fd = fd; $f.flags = flags; $f.iov = iov; $f.msg = msg; $f.n = n; $f.oob = oob; $f.p = p; $f.ptr = ptr; $f.salen = salen; $f.to = to; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SendmsgN = SendmsgN;
	direntIno = function(buf) {
		var buf;
		return readInt(buf, 0, 8);
	};
	direntReclen = function(buf) {
		var buf;
		return readInt(buf, 16, 2);
	};
	direntNamlen = function(buf) {
		var buf;
		return readInt(buf, 18, 2);
	};
	Iovec.ptr.prototype.SetLen = function(length) {
		var iov, length;
		iov = this;
		iov.Len = (new $Uint64(0, length));
	};
	Iovec.prototype.SetLen = function(length) { return this.$val.SetLen(length); };
	Msghdr.ptr.prototype.SetControllen = function(length) {
		var length, msghdr;
		msghdr = this;
		msghdr.Controllen = ((length >>> 0));
	};
	Msghdr.prototype.SetControllen = function(length) { return this.$val.SetControllen(length); };
	mmapper.ptr.prototype.Mmap = function(fd, offset, length, prot, flags) {
		var _key, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, addr, b, data, err, errno, fd, flags, length, m, offset, p, prot, sl, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _key = $f._key; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; addr = $f.addr; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; fd = $f.fd; flags = $f.flags; length = $f.length; m = $f.m; offset = $f.offset; p = $f.p; prot = $f.prot; sl = $f.sl; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		sl = [sl];
		data = sliceType.nil;
		err = $ifaceNil;
		m = this;
		if (length <= 0) {
			_tmp = sliceType.nil;
			_tmp$1 = new Errno(22);
			data = _tmp;
			err = _tmp$1;
			$s = -1; return [data, err];
		}
		_r = m.mmap(0, ((length >>> 0)), prot, flags, fd, offset); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		addr = _tuple[0];
		errno = _tuple[1];
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			_tmp$2 = sliceType.nil;
			_tmp$3 = errno;
			data = _tmp$2;
			err = _tmp$3;
			$s = -1; return [data, err];
		}
		sl[0] = new structType.ptr(addr, length, length);
		b = sl[0];
		p = $indexPtr(b.$array, b.$offset + (b.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		_key = p; (m.active || $throwRuntimeError("assignment to entry in nil map"))[ptrType$2.keyFor(_key)] = { k: _key, v: b };
		_tmp$4 = b;
		_tmp$5 = $ifaceNil;
		data = _tmp$4;
		err = _tmp$5;
		$s = -1; return [data, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [data, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Mmap }; } $f._key = _key; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.addr = addr; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.fd = fd; $f.flags = flags; $f.length = length; $f.m = m; $f.offset = offset; $f.p = p; $f.prot = prot; $f.sl = sl; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Mmap = function(fd, offset, length, prot, flags) { return this.$val.Mmap(fd, offset, length, prot, flags); };
	mmapper.ptr.prototype.Munmap = function(data) {
		var _entry, _r, b, data, err, errno, m, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; m = $f.m; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = $ifaceNil;
		m = this;
		if ((data.$length === 0) || !((data.$length === data.$capacity))) {
			err = new Errno(22);
			$s = -1; return err;
		}
		p = $indexPtr(data.$array, data.$offset + (data.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		b = (_entry = m.active[ptrType$2.keyFor(p)], _entry !== undefined ? _entry.v : sliceType.nil);
		if (b === sliceType.nil || !($indexPtr(b.$array, b.$offset + 0, ptrType$2) === $indexPtr(data.$array, data.$offset + 0, ptrType$2))) {
			err = new Errno(22);
			$s = -1; return err;
		}
		_r = m.munmap((($sliceToArray(b))), ((b.$length >>> 0))); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		errno = _r;
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			err = errno;
			$s = -1; return err;
		}
		delete m.active[ptrType$2.keyFor(p)];
		err = $ifaceNil;
		$s = -1; return err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Munmap }; } $f._entry = _entry; $f._r = _r; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.m = m; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Munmap = function(data) { return this.$val.Munmap(data); };
	Errno.prototype.Error = function() {
		var e, s;
		e = this.$val;
		if (0 <= ((e >> 0)) && ((e >> 0)) < 106) {
			s = ((e < 0 || e >= errors$1.length) ? ($throwRuntimeError("index out of range"), undefined) : errors$1[e]);
			if (!(s === "")) {
				return s;
			}
		}
		return "errno " + itoa(((e >> 0)));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var e;
		e = this.$val;
		return (e === 4) || (e === 24) || (e === 54) || (e === 53) || new Errno(e).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var e;
		e = this.$val;
		return (e === 35) || (e === 35) || (e === 60);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	errnoErr = function(e) {
		var _1, e;
		_1 = e;
		if (_1 === (0)) {
			return $ifaceNil;
		} else if (_1 === (35)) {
			return errEAGAIN;
		} else if (_1 === (22)) {
			return errEINVAL;
		} else if (_1 === (2)) {
			return errENOENT;
		}
		return new Errno(e);
	};
	Read = function(fd, p) {
		var _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		_tuple = read(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		if (false) {
			if (n > 0) {
				race.WriteRange(($sliceToArray(p)), n);
			}
			if ($interfaceIsEqual(err, $ifaceNil)) {
				race.Acquire(((ioSync$24ptr || (ioSync$24ptr = new ptrType$20(function() { return ioSync; }, function($v) { ioSync = $v; })))));
			}
		}
		if (false && n > 0) {
			msanWrite(($sliceToArray(p)), n);
		}
		return [n, err];
	};
	$pkg.Read = Read;
	Write = function(fd, p) {
		var _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		if (false) {
			race.ReleaseMerge(((ioSync$24ptr || (ioSync$24ptr = new ptrType$20(function() { return ioSync; }, function($v) { ioSync = $v; })))));
		}
		_tuple = write(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		if (false && n > 0) {
			race.ReadRange(($sliceToArray(p)), n);
		}
		if (false && n > 0) {
			msanRead(($sliceToArray(p)), n);
		}
		return [n, err];
	};
	$pkg.Write = Write;
	Recvfrom = function(fd, p, flags) {
		var _tuple, _tuple$1, err, fd, flags, from, len, len$24ptr, n, p, rsa;
		n = 0;
		from = $ifaceNil;
		err = $ifaceNil;
		rsa = new RawSockaddrAny.ptr(new RawSockaddr.ptr(0, 0, arrayType$4.zero()), arrayType$5.zero());
		len = 108;
		_tuple = recvfrom(fd, p, flags, rsa, (len$24ptr || (len$24ptr = new ptrType$17(function() { return len; }, function($v) { len = $v; }))));
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [n, from, err];
		}
		if (!((rsa.Addr.Family === 0))) {
			_tuple$1 = anyToSockaddr(rsa);
			from = _tuple$1[0];
			err = _tuple$1[1];
		}
		return [n, from, err];
	};
	$pkg.Recvfrom = Recvfrom;
	Sendto = function(fd, p, flags, to) {
		var _r, _tuple, err, fd, flags, n, p, ptr, to, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; fd = $f.fd; flags = $f.flags; n = $f.n; p = $f.p; ptr = $f.ptr; to = $f.to; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_r = to.sockaddr(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ptr = _tuple[0];
		n = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			$s = -1; return err;
		}
		err = sendto(fd, p, flags, ptr, n);
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sendto }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.fd = fd; $f.flags = flags; $f.n = n; $f.p = p; $f.ptr = ptr; $f.to = to; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sendto = Sendto;
	SetsockoptByte = function(fd, level, opt, value) {
		var err, fd, level, opt, value, value$24ptr;
		err = $ifaceNil;
		err = setsockopt(fd, level, opt, ((value$24ptr || (value$24ptr = new ptrType$2(function() { return value; }, function($v) { value = $v; })))), 1);
		return err;
	};
	$pkg.SetsockoptByte = SetsockoptByte;
	SetsockoptInt = function(fd, level, opt, value) {
		var err, fd, level, n, n$24ptr, opt, value;
		err = $ifaceNil;
		n = ((value >> 0));
		err = setsockopt(fd, level, opt, ((n$24ptr || (n$24ptr = new ptrType$21(function() { return n; }, function($v) { n = $v; })))), 4);
		return err;
	};
	$pkg.SetsockoptInt = SetsockoptInt;
	SetsockoptInet4Addr = function(fd, level, opt, value) {
		var err, fd, level, opt, value;
		err = $ifaceNil;
		err = setsockopt(fd, level, opt, ($sliceToArray(new sliceType(value))), 4);
		return err;
	};
	$pkg.SetsockoptInet4Addr = SetsockoptInet4Addr;
	SetsockoptIPMreq = function(fd, level, opt, mreq) {
		var _array, _struct, _view, err, fd, level, mreq, opt;
		err = $ifaceNil;
		_array = new Uint8Array(8);
		err = setsockopt(fd, level, opt, (_array), 8);
		_struct = mreq, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Multiaddr = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.Interface = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 4, _array.buffer.byteLength));
		return err;
	};
	$pkg.SetsockoptIPMreq = SetsockoptIPMreq;
	SetsockoptIPv6Mreq = function(fd, level, opt, mreq) {
		var _array, _struct, _view, err, fd, level, mreq, opt;
		err = $ifaceNil;
		_array = new Uint8Array(20);
		err = setsockopt(fd, level, opt, (_array), 20);
		_struct = mreq, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Multiaddr = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.Interface = _view.getUint32(16, true);
		return err;
	};
	$pkg.SetsockoptIPv6Mreq = SetsockoptIPv6Mreq;
	SetsockoptLinger = function(fd, level, opt, l) {
		var _array, _struct, _view, err, fd, l, level, opt;
		err = $ifaceNil;
		_array = new Uint8Array(8);
		err = setsockopt(fd, level, opt, (_array), 8);
		_struct = l, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Onoff = _view.getInt32(0, true), _struct.Linger = _view.getInt32(4, true);
		return err;
	};
	$pkg.SetsockoptLinger = SetsockoptLinger;
	accept = function(s, rsa, addrlen) {
		var _array, _struct, _tuple, _view, addrlen, e1, err, fd, r0, rsa, s;
		fd = 0;
		err = $ifaceNil;
		_array = new Uint8Array(108);
		_tuple = Syscall(30, ((s >>> 0)), ((_array)), ((addrlen)));
		_struct = rsa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		r0 = _tuple[0];
		e1 = _tuple[2];
		fd = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [fd, err];
	};
	setsockopt = function(s, level, name, val, vallen) {
		var _tuple, e1, err, level, name, s, val, vallen;
		err = $ifaceNil;
		_tuple = Syscall6(105, ((s >>> 0)), ((level >>> 0)), ((name >>> 0)), (val), (vallen), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	Shutdown = function(s, how) {
		var _tuple, e1, err, how, s;
		err = $ifaceNil;
		_tuple = Syscall(134, ((s >>> 0)), ((how >>> 0)), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Shutdown = Shutdown;
	recvfrom = function(fd, p, flags, from, fromlen) {
		var _array, _p0, _struct, _tuple, _view, e1, err, fd, flags, from, fromlen, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_array = new Uint8Array(108);
		_tuple = Syscall6(29, ((fd >>> 0)), (_p0), ((p.$length >>> 0)), ((flags >>> 0)), ((_array)), ((fromlen)));
		_struct = from, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	sendto = function(s, buf, flags, to, addrlen) {
		var _p0, _tuple, addrlen, buf, e1, err, flags, s, to;
		err = $ifaceNil;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = ($sliceToArray(buf));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall6(133, ((s >>> 0)), (_p0), ((buf.$length >>> 0)), ((flags >>> 0)), (to), ((addrlen >>> 0)));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	recvmsg = function(s, msg, flags) {
		var _array, _struct, _tuple, _view, e1, err, flags, msg, n, r0, s;
		n = 0;
		err = $ifaceNil;
		_array = new Uint8Array(36);
		_tuple = Syscall(27, ((s >>> 0)), ((_array)), ((flags >>> 0)));
		_struct = msg, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Namelen = _view.getUint32(4, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct.Iovlen = _view.getInt32(16, true), _struct.Pad_cgo_1 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 20, _array.buffer.byteLength)), _struct.Controllen = _view.getUint32(28, true), _struct.Flags = _view.getInt32(32, true);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	sendmsg = function(s, msg, flags) {
		var _array, _struct, _tuple, _view, e1, err, flags, msg, n, r0, s;
		n = 0;
		err = $ifaceNil;
		_array = new Uint8Array(36);
		_tuple = Syscall(28, ((s >>> 0)), ((_array)), ((flags >>> 0)));
		_struct = msg, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Namelen = _view.getUint32(4, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct.Iovlen = _view.getInt32(16, true), _struct.Pad_cgo_1 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 20, _array.buffer.byteLength)), _struct.Controllen = _view.getUint32(28, true), _struct.Flags = _view.getInt32(32, true);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	fcntl = function(fd, cmd, arg) {
		var _tuple, arg, cmd, e1, err, fd, r0, val;
		val = 0;
		err = $ifaceNil;
		_tuple = Syscall(92, ((fd >>> 0)), ((cmd >>> 0)), ((arg >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		val = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [val, err];
	};
	Close = function(fd) {
		var _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(6, ((fd >>> 0)), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Close = Close;
	Fchdir = function(fd) {
		var _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(13, ((fd >>> 0)), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchdir = Fchdir;
	Fchmod = function(fd, mode) {
		var _tuple, e1, err, fd, mode;
		err = $ifaceNil;
		_tuple = Syscall(124, ((fd >>> 0)), ((mode >>> 0)), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchmod = Fchmod;
	Fchown = function(fd, uid, gid) {
		var _tuple, e1, err, fd, gid, uid;
		err = $ifaceNil;
		_tuple = Syscall(123, ((fd >>> 0)), ((uid >>> 0)), ((gid >>> 0)));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchown = Fchown;
	Fstat = function(fd, stat) {
		var _array, _struct, _tuple, _view, e1, err, fd, stat;
		err = $ifaceNil;
		_array = new Uint8Array(144);
		_tuple = Syscall(339, ((fd >>> 0)), ((_array)), 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fstat = Fstat;
	Fsync = function(fd) {
		var _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(95, ((fd >>> 0)), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fsync = Fsync;
	Ftruncate = function(fd, length) {
		var _tuple, e1, err, fd, length;
		err = $ifaceNil;
		_tuple = Syscall(201, ((fd >>> 0)), ((length.$low >>> 0)), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Ftruncate = Ftruncate;
	Getdirentries = function(fd, buf, basep) {
		var _p0, _tuple, basep, buf, e1, err, fd, n, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = ($sliceToArray(buf));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall6(344, ((fd >>> 0)), (_p0), ((buf.$length >>> 0)), ((basep)), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Getdirentries = Getdirentries;
	Lstat = function(path, stat) {
		var _array, _p0, _struct, _tuple, _tuple$1, _view, e1, err, path, stat;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(340, ((_p0)), ((_array)), 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Lstat = Lstat;
	Pread = function(fd, p, offset) {
		var _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall6(153, ((fd >>> 0)), (_p0), ((p.$length >>> 0)), ((offset.$low >>> 0)), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pread = Pread;
	Pwrite = function(fd, p, offset) {
		var _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall6(154, ((fd >>> 0)), (_p0), ((p.$length >>> 0)), ((offset.$low >>> 0)), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pwrite = Pwrite;
	read = function(fd, p) {
		var _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall(3, ((fd >>> 0)), (_p0), ((p.$length >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	Seek = function(fd, offset, whence) {
		var _tuple, e1, err, fd, newoffset, offset, r0, whence;
		newoffset = new $Int64(0, 0);
		err = $ifaceNil;
		_tuple = Syscall(199, ((fd >>> 0)), ((offset.$low >>> 0)), ((whence >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		newoffset = (new $Int64(0, r0.constructor === Number ? r0 : 1));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [newoffset, err];
	};
	$pkg.Seek = Seek;
	write = function(fd, p) {
		var _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall(4, ((fd >>> 0)), (_p0), ((p.$length >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	mmap = function(addr, length, prot, flag, fd, pos) {
		var _tuple, addr, e1, err, fd, flag, length, pos, prot, r0, ret;
		ret = 0;
		err = $ifaceNil;
		_tuple = Syscall6(197, (addr), (length), ((prot >>> 0)), ((flag >>> 0)), ((fd >>> 0)), ((pos.$low >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		ret = (r0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [ret, err];
	};
	munmap = function(addr, length) {
		var _tuple, addr, e1, err, length;
		err = $ifaceNil;
		_tuple = Syscall(73, (addr), (length), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	ptrType$11.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$27.methods = [{prop: "Mmap", name: "Mmap", pkg: "", typ: $funcType([$Int, $Int64, $Int, $Int, $Int], [sliceType, $error], false)}, {prop: "Munmap", name: "Munmap", pkg: "", typ: $funcType([sliceType], [$error], false)}];
	Errno.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$28.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$29.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$30.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$31.methods = [{prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64, $Int64], false)}, {prop: "Nano", name: "Nano", pkg: "", typ: $funcType([], [$Int64], false)}];
	ptrType$18.methods = [{prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}];
	ptrType$32.methods = [{prop: "SetControllen", name: "SetControllen", pkg: "", typ: $funcType([$Int], [], false)}];
	SockaddrDatalink.init("syscall", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Nlen", name: "Nlen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Alen", name: "Alen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Slen", name: "Slen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Data", name: "Data", anonymous: false, exported: true, typ: arrayType$3, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrDatalink, tag: ""}]);
	mmapper.init("syscall", [{prop: "Mutex", name: "Mutex", anonymous: true, exported: true, typ: sync.Mutex, tag: ""}, {prop: "active", name: "active", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "mmap", name: "mmap", anonymous: false, exported: false, typ: funcType$2, tag: ""}, {prop: "munmap", name: "munmap", anonymous: false, exported: false, typ: funcType$3, tag: ""}]);
	Sockaddr.init([{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}]);
	SockaddrInet4.init("syscall", [{prop: "Port", name: "Port", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrInet4, tag: ""}]);
	SockaddrInet6.init("syscall", [{prop: "Port", name: "Port", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "ZoneId", name: "ZoneId", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrInet6, tag: ""}]);
	SockaddrUnix.init("syscall", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrUnix, tag: ""}]);
	Timespec.init("", [{prop: "Sec", name: "Sec", anonymous: false, exported: true, typ: $Int64, tag: ""}, {prop: "Nsec", name: "Nsec", anonymous: false, exported: true, typ: $Int64, tag: ""}]);
	Stat_t.init("", [{prop: "Dev", name: "Dev", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Mode", name: "Mode", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Nlink", name: "Nlink", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Ino", name: "Ino", anonymous: false, exported: true, typ: $Uint64, tag: ""}, {prop: "Uid", name: "Uid", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Gid", name: "Gid", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Rdev", name: "Rdev", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Atimespec", name: "Atimespec", anonymous: false, exported: true, typ: Timespec, tag: ""}, {prop: "Mtimespec", name: "Mtimespec", anonymous: false, exported: true, typ: Timespec, tag: ""}, {prop: "Ctimespec", name: "Ctimespec", anonymous: false, exported: true, typ: Timespec, tag: ""}, {prop: "Birthtimespec", name: "Birthtimespec", anonymous: false, exported: true, typ: Timespec, tag: ""}, {prop: "Size", name: "Size", anonymous: false, exported: true, typ: $Int64, tag: ""}, {prop: "Blocks", name: "Blocks", anonymous: false, exported: true, typ: $Int64, tag: ""}, {prop: "Blksize", name: "Blksize", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Flags", name: "Flags", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Gen", name: "Gen", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Lspare", name: "Lspare", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Qspare", name: "Qspare", anonymous: false, exported: true, typ: arrayType$15, tag: ""}]);
	RawSockaddrInet4.init("", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Port", name: "Port", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Zero", name: "Zero", anonymous: false, exported: true, typ: arrayType$6, tag: ""}]);
	RawSockaddrInet6.init("", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Port", name: "Port", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Flowinfo", name: "Flowinfo", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType, tag: ""}, {prop: "Scope_id", name: "Scope_id", anonymous: false, exported: true, typ: $Uint32, tag: ""}]);
	RawSockaddrUnix.init("", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Path", name: "Path", anonymous: false, exported: true, typ: arrayType$11, tag: ""}]);
	RawSockaddrDatalink.init("", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Nlen", name: "Nlen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Alen", name: "Alen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Slen", name: "Slen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Data", name: "Data", anonymous: false, exported: true, typ: arrayType$3, tag: ""}]);
	RawSockaddr.init("", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Data", name: "Data", anonymous: false, exported: true, typ: arrayType$4, tag: ""}]);
	RawSockaddrAny.init("", [{prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: RawSockaddr, tag: ""}, {prop: "Pad", name: "Pad", anonymous: false, exported: true, typ: arrayType$5, tag: ""}]);
	Linger.init("", [{prop: "Onoff", name: "Onoff", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Linger", name: "Linger", anonymous: false, exported: true, typ: $Int32, tag: ""}]);
	Iovec.init("", [{prop: "Base", name: "Base", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint64, tag: ""}]);
	IPMreq.init("", [{prop: "Multiaddr", name: "Multiaddr", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Interface", name: "Interface", anonymous: false, exported: true, typ: arrayType$1, tag: ""}]);
	IPv6Mreq.init("", [{prop: "Multiaddr", name: "Multiaddr", anonymous: false, exported: true, typ: arrayType, tag: ""}, {prop: "Interface", name: "Interface", anonymous: false, exported: true, typ: $Uint32, tag: ""}]);
	Msghdr.init("", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Namelen", name: "Namelen", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Iov", name: "Iov", anonymous: false, exported: true, typ: ptrType$18, tag: ""}, {prop: "Iovlen", name: "Iovlen", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Pad_cgo_1", name: "Pad_cgo_1", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Control", name: "Control", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Controllen", name: "Controllen", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Flags", name: "Flags", anonymous: false, exported: true, typ: $Int32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = race.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		lineBuffer = sliceType.nil;
		syscallModule = null;
		freebsdConfArch = "";
		ioSync = new $Int64(0, 0);
		warningPrinted = false;
		alreadyTriedToLoad = false;
		minusOne = -1;
		envs = runtime_envs();
		$pkg.Stdin = 0;
		$pkg.Stdout = 1;
		$pkg.Stderr = 2;
		errEAGAIN = new Errno(35);
		errEINVAL = new Errno(22);
		errENOENT = new Errno(2);
		errors$1 = $toNativeArray($kindString, ["", "operation not permitted", "no such file or directory", "no such process", "interrupted system call", "input/output error", "device not configured", "argument list too long", "exec format error", "bad file descriptor", "no child processes", "resource deadlock avoided", "cannot allocate memory", "permission denied", "bad address", "block device required", "resource busy", "file exists", "cross-device link", "operation not supported by device", "not a directory", "is a directory", "invalid argument", "too many open files in system", "too many open files", "inappropriate ioctl for device", "text file busy", "file too large", "no space left on device", "illegal seek", "read-only file system", "too many links", "broken pipe", "numerical argument out of domain", "result too large", "resource temporarily unavailable", "operation now in progress", "operation already in progress", "socket operation on non-socket", "destination address required", "message too long", "protocol wrong type for socket", "protocol not available", "protocol not supported", "socket type not supported", "operation not supported", "protocol family not supported", "address family not supported by protocol family", "address already in use", "can't assign requested address", "network is down", "network is unreachable", "network dropped connection on reset", "software caused connection abort", "connection reset by peer", "no buffer space available", "socket is already connected", "socket is not connected", "can't send after socket shutdown", "too many references: can't splice", "operation timed out", "connection refused", "too many levels of symbolic links", "file name too long", "host is down", "no route to host", "directory not empty", "too many processes", "too many users", "disc quota exceeded", "stale NFS file handle", "too many levels of remote in path", "RPC struct is bad", "RPC version wrong", "RPC prog. not avail", "program version wrong", "bad procedure for program", "no locks available", "function not implemented", "inappropriate file type or format", "authentication error", "need authenticator", "device power is off", "device error", "value too large to be stored in data type", "bad executable (or shared library)", "bad CPU type in executable", "shared library version mismatch", "malformed Mach-o file", "operation canceled", "identifier removed", "no message of desired type", "illegal byte sequence", "attribute not found", "bad message", "EMULTIHOP (Reserved)", "no message available on STREAM", "ENOLINK (Reserved)", "no STREAM resources", "not a STREAM", "protocol error", "STREAM ioctl timeout", "operation not supported on socket", "policy not found", "state not recoverable", "previous owner died"]);
		mapper = new mmapper.ptr(new sync.Mutex.ptr(0, 0), {}, mmap, munmap);
		minRoutingSockaddrLen = rsaAlignOf(0);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
	var $pkg = {}, $init, Once, funcType$1, ptrType$4;
	Once = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", true, "github.com/gopherjs/gopherjs/nosync", true, function(doing_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.doing = false;
			this.done = false;
			return;
		}
		this.doing = doing_;
		this.done = done_;
	});
	funcType$1 = $funcType([], [], false);
	ptrType$4 = $ptrType(Once);
	Once.ptr.prototype.Do = function(f) {
		var f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = [o];
		o[0] = this;
		if (o[0].done) {
			$s = -1; return;
		}
		if (o[0].doing) {
			$panic(new $String("nosync: Do called within f"));
		}
		o[0].doing = true;
		$deferred.push([(function(o) { return function() {
			o[0].doing = false;
			o[0].done = true;
		}; })(o), []]);
		$r = f(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	ptrType$4.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$1], [], false)}];
	Once.init("github.com/gopherjs/gopherjs/nosync", [{prop: "doing", name: "doing", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "done", name: "done", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, $init, errors, js, nosync, runtime, syscall, ParseError, Time, Month, Weekday, Duration, Location, zone, zoneTrans, sliceType, sliceType$1, ptrType, sliceType$2, arrayType, sliceType$3, arrayType$1, arrayType$2, ptrType$2, arrayType$4, ptrType$4, ptrType$7, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, months, days, daysBefore, utcLoc, utcLoc$24ptr, localLoc, localLoc$24ptr, localOnce, errLocation, badData, init, initLocal, indexByte, startsWithLowerCase, nextStdChunk, match, lookup, appendInt, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, absWeekday, absClock, fmtFrac, fmtInt, lessThanHalf, absDate, daysIn, unixTime, Unix, isLeap, norm, Date, div, FixedZone;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	runtime = $packages["runtime"];
	syscall = $packages["syscall"];
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", true, "time", true, function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Layout = "";
			this.Value = "";
			this.LayoutElem = "";
			this.ValueElem = "";
			this.Message = "";
			return;
		}
		this.Layout = Layout_;
		this.Value = Value_;
		this.LayoutElem = LayoutElem_;
		this.ValueElem = ValueElem_;
		this.Message = Message_;
	});
	Time = $pkg.Time = $newType(0, $kindStruct, "time.Time", true, "time", true, function(wall_, ext_, loc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wall = new $Uint64(0, 0);
			this.ext = new $Int64(0, 0);
			this.loc = ptrType$2.nil;
			return;
		}
		this.wall = wall_;
		this.ext = ext_;
		this.loc = loc_;
	});
	Month = $pkg.Month = $newType(4, $kindInt, "time.Month", true, "time", true, null);
	Weekday = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", true, "time", true, null);
	Duration = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", true, "time", true, null);
	Location = $pkg.Location = $newType(0, $kindStruct, "time.Location", true, "time", true, function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.zone = sliceType.nil;
			this.tx = sliceType$1.nil;
			this.cacheStart = new $Int64(0, 0);
			this.cacheEnd = new $Int64(0, 0);
			this.cacheZone = ptrType.nil;
			return;
		}
		this.name = name_;
		this.zone = zone_;
		this.tx = tx_;
		this.cacheStart = cacheStart_;
		this.cacheEnd = cacheEnd_;
		this.cacheZone = cacheZone_;
	});
	zone = $pkg.zone = $newType(0, $kindStruct, "time.zone", true, "time", false, function(name_, offset_, isDST_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.offset = 0;
			this.isDST = false;
			return;
		}
		this.name = name_;
		this.offset = offset_;
		this.isDST = isDST_;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", true, "time", false, function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.when = new $Int64(0, 0);
			this.index = 0;
			this.isstd = false;
			this.isutc = false;
			return;
		}
		this.when = when_;
		this.index = index_;
		this.isstd = isstd_;
		this.isutc = isutc_;
	});
	sliceType = $sliceType(zone);
	sliceType$1 = $sliceType(zoneTrans);
	ptrType = $ptrType(zone);
	sliceType$2 = $sliceType($String);
	arrayType = $arrayType($Uint8, 20);
	sliceType$3 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 9);
	arrayType$2 = $arrayType($Uint8, 64);
	ptrType$2 = $ptrType(Location);
	arrayType$4 = $arrayType($Uint8, 32);
	ptrType$4 = $ptrType(ParseError);
	ptrType$7 = $ptrType(Time);
	init = function() {
		$unused(Unix(new $Int64(0, 0), new $Int64(0, 0)));
	};
	initLocal = function() {
		var d, i, j, s;
		d = new ($global.Date)();
		s = $internalize(d, $String);
		i = indexByte(s, 40);
		j = indexByte(s, 41);
		if ((i === -1) || (j === -1)) {
			localLoc.name = "UTC";
			return;
		}
		localLoc.name = $substring(s, (i + 1 >> 0), j);
		localLoc.zone = new sliceType([new zone.ptr(localLoc.name, $imul(($parseInt(d.getTimezoneOffset()) >> 0), -60), false)]);
	};
	indexByte = function(s, c) {
		var c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	startsWithLowerCase = function(str) {
		var c, str;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$81, _tmp$82, _tmp$83, _tmp$84, _tmp$85, _tmp$86, _tmp$9, c, ch, i, j, layout, prefix, std, std$1, suffix, x;
		prefix = "";
		std = 0;
		suffix = "";
		i = 0;
		while (true) {
			if (!(i < layout.length)) { break; }
			c = ((layout.charCodeAt(i) >> 0));
			_1 = c;
			if (_1 === (74)) {
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "January") {
						_tmp = $substring(layout, 0, i);
						_tmp$1 = 257;
						_tmp$2 = $substring(layout, (i + 7 >> 0));
						prefix = _tmp;
						std = _tmp$1;
						suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
						_tmp$3 = $substring(layout, 0, i);
						_tmp$4 = 258;
						_tmp$5 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$3;
						std = _tmp$4;
						suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (77)) {
				if (layout.length >= (i + 3 >> 0)) {
					if ($substring(layout, i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = $substring(layout, 0, i);
							_tmp$7 = 261;
							_tmp$8 = $substring(layout, (i + 6 >> 0));
							prefix = _tmp$6;
							std = _tmp$7;
							suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
							_tmp$9 = $substring(layout, 0, i);
							_tmp$10 = 262;
							_tmp$11 = $substring(layout, (i + 3 >> 0));
							prefix = _tmp$9;
							std = _tmp$10;
							suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if ($substring(layout, i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = $substring(layout, 0, i);
						_tmp$13 = 21;
						_tmp$14 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$12;
						std = _tmp$13;
						suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (48)) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = $substring(layout, 0, i);
					_tmp$16 = (x = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x < 0 || x >= std0x.length) ? ($throwRuntimeError("index out of range"), undefined) : std0x[x]));
					_tmp$17 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$15;
					std = _tmp$16;
					suffix = _tmp$17;
					return [prefix, std, suffix];
				}
			} else if (_1 === (49)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$18 = $substring(layout, 0, i);
					_tmp$19 = 522;
					_tmp$20 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$18;
					std = _tmp$19;
					suffix = _tmp$20;
					return [prefix, std, suffix];
				}
				_tmp$21 = $substring(layout, 0, i);
				_tmp$22 = 259;
				_tmp$23 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$21;
				std = _tmp$22;
				suffix = _tmp$23;
				return [prefix, std, suffix];
			} else if (_1 === (50)) {
				if (layout.length >= (i + 4 >> 0) && $substring(layout, i, (i + 4 >> 0)) === "2006") {
					_tmp$24 = $substring(layout, 0, i);
					_tmp$25 = 273;
					_tmp$26 = $substring(layout, (i + 4 >> 0));
					prefix = _tmp$24;
					std = _tmp$25;
					suffix = _tmp$26;
					return [prefix, std, suffix];
				}
				_tmp$27 = $substring(layout, 0, i);
				_tmp$28 = 263;
				_tmp$29 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$27;
				std = _tmp$28;
				suffix = _tmp$29;
				return [prefix, std, suffix];
			} else if (_1 === (95)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					if (layout.length >= (i + 5 >> 0) && $substring(layout, (i + 1 >> 0), (i + 5 >> 0)) === "2006") {
						_tmp$30 = $substring(layout, 0, (i + 1 >> 0));
						_tmp$31 = 273;
						_tmp$32 = $substring(layout, (i + 5 >> 0));
						prefix = _tmp$30;
						std = _tmp$31;
						suffix = _tmp$32;
						return [prefix, std, suffix];
					}
					_tmp$33 = $substring(layout, 0, i);
					_tmp$34 = 264;
					_tmp$35 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$33;
					std = _tmp$34;
					suffix = _tmp$35;
					return [prefix, std, suffix];
				}
			} else if (_1 === (51)) {
				_tmp$36 = $substring(layout, 0, i);
				_tmp$37 = 523;
				_tmp$38 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$36;
				std = _tmp$37;
				suffix = _tmp$38;
				return [prefix, std, suffix];
			} else if (_1 === (52)) {
				_tmp$39 = $substring(layout, 0, i);
				_tmp$40 = 525;
				_tmp$41 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$39;
				std = _tmp$40;
				suffix = _tmp$41;
				return [prefix, std, suffix];
			} else if (_1 === (53)) {
				_tmp$42 = $substring(layout, 0, i);
				_tmp$43 = 527;
				_tmp$44 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$42;
				std = _tmp$43;
				suffix = _tmp$44;
				return [prefix, std, suffix];
			} else if (_1 === (80)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$45 = $substring(layout, 0, i);
					_tmp$46 = 531;
					_tmp$47 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$45;
					std = _tmp$46;
					suffix = _tmp$47;
					return [prefix, std, suffix];
				}
			} else if (_1 === (112)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$48 = $substring(layout, 0, i);
					_tmp$49 = 532;
					_tmp$50 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$48;
					std = _tmp$49;
					suffix = _tmp$50;
					return [prefix, std, suffix];
				}
			} else if (_1 === (45)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "-070000") {
					_tmp$51 = $substring(layout, 0, i);
					_tmp$52 = 28;
					_tmp$53 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$51;
					std = _tmp$52;
					suffix = _tmp$53;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$54 = $substring(layout, 0, i);
					_tmp$55 = 31;
					_tmp$56 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$54;
					std = _tmp$55;
					suffix = _tmp$56;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "-0700") {
					_tmp$57 = $substring(layout, 0, i);
					_tmp$58 = 27;
					_tmp$59 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$57;
					std = _tmp$58;
					suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "-07:00") {
					_tmp$60 = $substring(layout, 0, i);
					_tmp$61 = 30;
					_tmp$62 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$60;
					std = _tmp$61;
					suffix = _tmp$62;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "-07") {
					_tmp$63 = $substring(layout, 0, i);
					_tmp$64 = 29;
					_tmp$65 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$63;
					std = _tmp$64;
					suffix = _tmp$65;
					return [prefix, std, suffix];
				}
			} else if (_1 === (90)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "Z070000") {
					_tmp$66 = $substring(layout, 0, i);
					_tmp$67 = 23;
					_tmp$68 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$66;
					std = _tmp$67;
					suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$69 = $substring(layout, 0, i);
					_tmp$70 = 26;
					_tmp$71 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$69;
					std = _tmp$70;
					suffix = _tmp$71;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "Z0700") {
					_tmp$72 = $substring(layout, 0, i);
					_tmp$73 = 22;
					_tmp$74 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$72;
					std = _tmp$73;
					suffix = _tmp$74;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$75 = $substring(layout, 0, i);
					_tmp$76 = 25;
					_tmp$77 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$75;
					std = _tmp$76;
					suffix = _tmp$77;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Z07") {
					_tmp$78 = $substring(layout, 0, i);
					_tmp$79 = 24;
					_tmp$80 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$78;
					std = _tmp$79;
					suffix = _tmp$80;
					return [prefix, std, suffix];
				}
			} else if (_1 === (46)) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (true) {
						if (!(j < layout.length && (layout.charCodeAt(j) === ch))) { break; }
						j = j + (1) >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 32;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 33;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tmp$81 = $substring(layout, 0, i);
						_tmp$82 = std$1;
						_tmp$83 = $substring(layout, j);
						prefix = _tmp$81;
						std = _tmp$82;
						suffix = _tmp$83;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + (1) >> 0;
		}
		_tmp$84 = layout;
		_tmp$85 = 0;
		_tmp$86 = "";
		prefix = _tmp$84;
		std = _tmp$85;
		suffix = _tmp$86;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var c1, c2, i, s1, s2;
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | (32)) >>> 0;
				c2 = (c2 | (32)) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var _i, _ref, i, tab, v, val;
		_ref = tab;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (val.length >= v.length && match($substring(val, 0, v.length), v)) {
				return [i, $substring(val, v.length), $ifaceNil];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendInt = function(b, x, width) {
		var _q, b, buf, i, q, u, w, width, x;
		u = ((x >>> 0));
		if (x < 0) {
			b = $append(b, 45);
			u = ((-x >>> 0));
		}
		buf = arrayType.zero();
		i = 20;
		while (true) {
			if (!(u >= 10)) { break; }
			i = i - (1) >> 0;
			q = (_q = u / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((((48 + u >>> 0) - (q * 10 >>> 0) >>> 0) << 24 >>> 24)));
			u = q;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((48 + u >>> 0) << 24 >>> 24)));
		w = 20 - i >> 0;
		while (true) {
			if (!(w < width)) { break; }
			b = $append(b, 48);
			w = w + (1) >> 0;
		}
		return $appendSlice(b, $subslice(new sliceType$3(buf), i));
	};
	atoi = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, neg, q, rem, s, x;
		x = 0;
		err = $ifaceNil;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = $substring(s, 1);
		}
		_tuple = leadingInt(s);
		q = _tuple[0];
		rem = _tuple[1];
		err = _tuple[2];
		x = (((q.$low + ((q.$high >> 31) * 4294967296)) >> 0));
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
			_tmp = 0;
			_tmp$1 = atoiError;
			x = _tmp;
			err = _tmp$1;
			return [x, err];
		}
		if (neg) {
			x = -x;
		}
		_tmp$2 = x;
		_tmp$3 = $ifaceNil;
		x = _tmp$2;
		err = _tmp$3;
		return [x, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var _q, _r, b, buf, n, nanosec, start, trim, u, x;
		u = nanosec;
		buf = arrayType$1.zero();
		start = 9;
		while (true) {
			if (!(start > 0)) { break; }
			start = start - (1) >> 0;
			((start < 0 || start >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[start] = ((((_r = u % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24)));
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (true) {
				if (!(n > 0 && ((x = n - 1 >> 0, ((x < 0 || x >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[x])) === 48))) { break; }
				n = n - (1) >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, 46);
		return $appendSlice(b, $subslice(new sliceType$3(buf), 0, n));
	};
	Time.ptr.prototype.String = function() {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, buf, m0, m1, m2, s, sign, t, wid, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; buf = $f.buf; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; s = $f.s; sign = $f.sign; t = $f.t; wid = $f.wid; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Format("2006-01-02 15:04:05.999999999 -0700 MST"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		if (!((x = (x$1 = t.wall, new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			m2 = ((x$2 = t.ext, new $Uint64(x$2.$high, x$2.$low)));
			sign = 43;
			if ((x$3 = t.ext, (x$3.$high < 0 || (x$3.$high === 0 && x$3.$low < 0)))) {
				sign = 45;
				m2 = new $Uint64(-m2.$high, -m2.$low);
			}
			_tmp = $div64(m2, new $Uint64(0, 1000000000), false);
			_tmp$1 = $div64(m2, new $Uint64(0, 1000000000), true);
			m1 = _tmp;
			m2 = _tmp$1;
			_tmp$2 = $div64(m1, new $Uint64(0, 1000000000), false);
			_tmp$3 = $div64(m1, new $Uint64(0, 1000000000), true);
			m0 = _tmp$2;
			m1 = _tmp$3;
			buf = sliceType$3.nil;
			buf = $appendSlice(buf, " m=");
			buf = $append(buf, sign);
			wid = 0;
			if (!((m0.$high === 0 && m0.$low === 0))) {
				buf = appendInt(buf, ((m0.$low >> 0)), 0);
				wid = 9;
			}
			buf = appendInt(buf, ((m1.$low >> 0)), wid);
			buf = $append(buf, 46);
			buf = appendInt(buf, ((m2.$low >> 0)), 9);
			s = s + (($bytesToString(buf)));
		}
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.String }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.buf = buf; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.s = s; $f.sign = sign; $f.t = t; $f.wid = wid; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.ptr.prototype.Format = function(layout) {
		var _r, b, buf, layout, max, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; buf = $f.buf; layout = $f.layout; max = $f.max; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		b = sliceType$3.nil;
		max = layout.length + 10 >> 0;
		if (max < 64) {
			buf = arrayType$2.zero();
			b = $subslice(new sliceType$3(buf), 0, 0);
		} else {
			b = $makeSlice(sliceType$3, 0, max);
		}
		_r = $clone(t, Time).AppendFormat(b, layout); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = _r;
		$s = -1; return ($bytesToString(b));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Format }; } $f._r = _r; $f.b = b; $f.buf = buf; $f.layout = layout; $f.max = max; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	Time.ptr.prototype.AppendFormat = function(b, layout) {
		var _1, _q, _q$1, _q$2, _q$3, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, _tuple$2, _tuple$3, abs, absoffset, b, day, hour, hr, hr$1, layout, m, min, month, name, offset, prefix, s, sec, std, suffix, t, y, year, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; abs = $f.abs; absoffset = $f.absoffset; b = $f.b; day = $f.day; hour = $f.hour; hr = $f.hr; hr$1 = $f.hr$1; layout = $f.layout; m = $f.m; min = $f.min; month = $f.month; name = $f.name; offset = $f.offset; prefix = $f.prefix; s = $f.s; sec = $f.sec; std = $f.std; suffix = $f.suffix; t = $f.t; y = $f.y; year = $f.year; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).locabs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		name = _tuple[0];
		offset = _tuple[1];
		abs = _tuple[2];
		year = -1;
		month = 0;
		day = 0;
		hour = -1;
		min = 0;
		sec = 0;
		while (true) {
			if (!(!(layout === ""))) { break; }
			_tuple$1 = nextStdChunk(layout);
			prefix = _tuple$1[0];
			std = _tuple$1[1];
			suffix = _tuple$1[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, prefix);
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$2 = absDate(abs, true);
				year = _tuple$2[0];
				month = _tuple$2[1];
				day = _tuple$2[2];
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$3 = absClock(abs);
				hour = _tuple$3[0];
				min = _tuple$3[1];
				sec = _tuple$3[2];
			}
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (274)) {
					y = year;
					if (y < 0) {
						y = -y;
					}
					b = appendInt(b, (_r$1 = y % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")), 2);
				} else if (_1 === (273)) {
					b = appendInt(b, year, 4);
				} else if (_1 === (258)) {
					b = $appendSlice(b, $substring(new Month(month).String(), 0, 3));
				} else if (_1 === (257)) {
					m = new Month(month).String();
					b = $appendSlice(b, m);
				} else if (_1 === (259)) {
					b = appendInt(b, ((month >> 0)), 0);
				} else if (_1 === (260)) {
					b = appendInt(b, ((month >> 0)), 2);
				} else if (_1 === (262)) {
					b = $appendSlice(b, $substring(new Weekday(absWeekday(abs)).String(), 0, 3));
				} else if (_1 === (261)) {
					s = new Weekday(absWeekday(abs)).String();
					b = $appendSlice(b, s);
				} else if (_1 === (263)) {
					b = appendInt(b, day, 0);
				} else if (_1 === (264)) {
					if (day < 10) {
						b = $append(b, 32);
					}
					b = appendInt(b, day, 0);
				} else if (_1 === (265)) {
					b = appendInt(b, day, 2);
				} else if (_1 === (522)) {
					b = appendInt(b, hour, 2);
				} else if (_1 === (523)) {
					hr = (_r$2 = hour % 12, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
					if (hr === 0) {
						hr = 12;
					}
					b = appendInt(b, hr, 0);
				} else if (_1 === (524)) {
					hr$1 = (_r$3 = hour % 12, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
					if (hr$1 === 0) {
						hr$1 = 12;
					}
					b = appendInt(b, hr$1, 2);
				} else if (_1 === (525)) {
					b = appendInt(b, min, 0);
				} else if (_1 === (526)) {
					b = appendInt(b, min, 2);
				} else if (_1 === (527)) {
					b = appendInt(b, sec, 0);
				} else if (_1 === (528)) {
					b = appendInt(b, sec, 2);
				} else if (_1 === (531)) {
					if (hour >= 12) {
						b = $appendSlice(b, "PM");
					} else {
						b = $appendSlice(b, "AM");
					}
				} else if (_1 === (532)) {
					if (hour >= 12) {
						b = $appendSlice(b, "pm");
					} else {
						b = $appendSlice(b, "am");
					}
				} else if ((_1 === (22)) || (_1 === (25)) || (_1 === (23)) || (_1 === (24)) || (_1 === (26)) || (_1 === (27)) || (_1 === (30)) || (_1 === (28)) || (_1 === (29)) || (_1 === (31))) {
					if ((offset === 0) && ((std === 22) || (std === 25) || (std === 23) || (std === 24) || (std === 26))) {
						b = $append(b, 90);
						break;
					}
					zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
					absoffset = offset;
					if (zone$1 < 0) {
						b = $append(b, 45);
						zone$1 = -zone$1;
						absoffset = -absoffset;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					if ((std === 25) || (std === 30) || (std === 26) || (std === 31)) {
						b = $append(b, 58);
					}
					if (!((std === 29)) && !((std === 24))) {
						b = appendInt(b, (_r$4 = zone$1 % 60, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")), 2);
					}
					if ((std === 23) || (std === 28) || (std === 31) || (std === 26)) {
						if ((std === 31) || (std === 26)) {
							b = $append(b, 58);
						}
						b = appendInt(b, (_r$5 = absoffset % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")), 2);
					}
				} else if (_1 === (21)) {
					if (!(name === "")) {
						b = $appendSlice(b, name);
						break;
					}
					zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
					if (zone$2 < 0) {
						b = $append(b, 45);
						zone$2 = -zone$2;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					b = appendInt(b, (_r$6 = zone$2 % 60, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")), 2);
				} else if ((_1 === (32)) || (_1 === (33))) {
					b = formatNano(b, (($clone(t, Time).Nanosecond() >>> 0)), std >> 16 >> 0, (std & 65535) === 33);
				}
			}
		}
		$s = -1; return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AppendFormat }; } $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.abs = abs; $f.absoffset = absoffset; $f.b = b; $f.day = day; $f.hour = hour; $f.hr = hr; $f.hr$1 = hr$1; $f.layout = layout; $f.m = m; $f.min = min; $f.month = month; $f.name = name; $f.offset = offset; $f.prefix = prefix; $f.s = s; $f.sec = sec; $f.std = std; $f.suffix = suffix; $f.t = t; $f.y = y; $f.year = year; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AppendFormat = function(b, layout) { return this.$val.AppendFormat(b, layout); };
	quote = function(s) {
		var s;
		return "\"" + s + "\"";
	};
	ParseError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var c, i, s;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var fixed, s;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), $substring(s, 1), $ifaceNil];
		}
		return [($imul((((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), 10)) + (((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0)) >> 0, $substring(s, 2), $ifaceNil];
	};
	cutspace = function(s) {
		var s;
		while (true) {
			if (!(s.length > 0 && (s.charCodeAt(0) === 32))) { break; }
			s = $substring(s, 1);
		}
		return s;
	};
	skip = function(value, prefix) {
		var prefix, value;
		while (true) {
			if (!(prefix.length > 0)) { break; }
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = $substring(prefix, 1);
			value = $substring(value, 1);
		}
		return [value, $ifaceNil];
	};
	Parse = function(layout, value) {
		var _r, layout, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; layout = $f.layout; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = parse(layout, value, $pkg.UTC, $pkg.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f._r = _r; $f.layout = layout; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parse = function(layout, value, defaultLocation, local) {
		var _1, _2, _3, _4, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, day, defaultLocation, err, hour, hour$1, hr, i, layout, local, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x, x$1, year, z, zoneName, zoneOffset, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$34 = $f._tmp$34; _tmp$35 = $f._tmp$35; _tmp$36 = $f._tmp$36; _tmp$37 = $f._tmp$37; _tmp$38 = $f._tmp$38; _tmp$39 = $f._tmp$39; _tmp$4 = $f._tmp$4; _tmp$40 = $f._tmp$40; _tmp$41 = $f._tmp$41; _tmp$42 = $f._tmp$42; _tmp$43 = $f._tmp$43; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$17 = $f._tuple$17; _tuple$18 = $f._tuple$18; _tuple$19 = $f._tuple$19; _tuple$2 = $f._tuple$2; _tuple$20 = $f._tuple$20; _tuple$21 = $f._tuple$21; _tuple$22 = $f._tuple$22; _tuple$23 = $f._tuple$23; _tuple$24 = $f._tuple$24; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; alayout = $f.alayout; amSet = $f.amSet; avalue = $f.avalue; day = $f.day; defaultLocation = $f.defaultLocation; err = $f.err; hour = $f.hour; hour$1 = $f.hour$1; hr = $f.hr; i = $f.i; layout = $f.layout; local = $f.local; min = $f.min; min$1 = $f.min$1; mm = $f.mm; month = $f.month; n = $f.n; n$1 = $f.n$1; name = $f.name; ndigit = $f.ndigit; nsec = $f.nsec; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; pmSet = $f.pmSet; prefix = $f.prefix; rangeErrString = $f.rangeErrString; sec = $f.sec; seconds = $f.seconds; sign = $f.sign; ss = $f.ss; std = $f.std; stdstr = $f.stdstr; suffix = $f.suffix; t = $f.t; t$1 = $f.t$1; value = $f.value; x = $f.x; x$1 = $f.x$1; year = $f.year; z = $f.z; zoneName = $f.zoneName; zoneOffset = $f.zoneOffset; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = layout;
		_tmp$1 = value;
		alayout = _tmp;
		avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = 1;
		day = 1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ptrType$2.nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = $ifaceNil;
			_tuple = nextStdChunk(layout);
			prefix = _tuple[0];
			std = _tuple[1];
			suffix = _tuple[2];
			stdstr = $substring(layout, prefix.length, (layout.length - suffix.length >> 0));
			_tuple$1 = skip(value, prefix);
			value = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + value)];
				}
				break;
			}
			layout = suffix;
			p = "";
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (274)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$2 = $substring(value, 0, 2);
					_tmp$3 = $substring(value, 2);
					p = _tmp$2;
					value = _tmp$3;
					_tuple$2 = atoi(p);
					year = _tuple$2[0];
					err = _tuple$2[1];
					if (year >= 69) {
						year = year + (1900) >> 0;
					} else {
						year = year + (2000) >> 0;
					}
				} else if (_1 === (273)) {
					if (value.length < 4 || !isDigit(value, 0)) {
						err = errBad;
						break;
					}
					_tmp$4 = $substring(value, 0, 4);
					_tmp$5 = $substring(value, 4);
					p = _tmp$4;
					value = _tmp$5;
					_tuple$3 = atoi(p);
					year = _tuple$3[0];
					err = _tuple$3[1];
				} else if (_1 === (258)) {
					_tuple$4 = lookup(shortMonthNames, value);
					month = _tuple$4[0];
					value = _tuple$4[1];
					err = _tuple$4[2];
				} else if (_1 === (257)) {
					_tuple$5 = lookup(longMonthNames, value);
					month = _tuple$5[0];
					value = _tuple$5[1];
					err = _tuple$5[2];
				} else if ((_1 === (259)) || (_1 === (260))) {
					_tuple$6 = getnum(value, std === 260);
					month = _tuple$6[0];
					value = _tuple$6[1];
					err = _tuple$6[2];
					if (month <= 0 || 12 < month) {
						rangeErrString = "month";
					}
				} else if (_1 === (262)) {
					_tuple$7 = lookup(shortDayNames, value);
					value = _tuple$7[1];
					err = _tuple$7[2];
				} else if (_1 === (261)) {
					_tuple$8 = lookup(longDayNames, value);
					value = _tuple$8[1];
					err = _tuple$8[2];
				} else if ((_1 === (263)) || (_1 === (264)) || (_1 === (265))) {
					if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
						value = $substring(value, 1);
					}
					_tuple$9 = getnum(value, std === 265);
					day = _tuple$9[0];
					value = _tuple$9[1];
					err = _tuple$9[2];
					if (day < 0) {
						rangeErrString = "day";
					}
				} else if (_1 === (522)) {
					_tuple$10 = getnum(value, false);
					hour = _tuple$10[0];
					value = _tuple$10[1];
					err = _tuple$10[2];
					if (hour < 0 || 24 <= hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (523)) || (_1 === (524))) {
					_tuple$11 = getnum(value, std === 524);
					hour = _tuple$11[0];
					value = _tuple$11[1];
					err = _tuple$11[2];
					if (hour < 0 || 12 < hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (525)) || (_1 === (526))) {
					_tuple$12 = getnum(value, std === 526);
					min = _tuple$12[0];
					value = _tuple$12[1];
					err = _tuple$12[2];
					if (min < 0 || 60 <= min) {
						rangeErrString = "minute";
					}
				} else if ((_1 === (527)) || (_1 === (528))) {
					_tuple$13 = getnum(value, std === 528);
					sec = _tuple$13[0];
					value = _tuple$13[1];
					err = _tuple$13[2];
					if (sec < 0 || 60 <= sec) {
						rangeErrString = "second";
						break;
					}
					if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
						_tuple$14 = nextStdChunk(layout);
						std = _tuple$14[1];
						std = std & (65535);
						if ((std === 32) || (std === 33)) {
							break;
						}
						n = 2;
						while (true) {
							if (!(n < value.length && isDigit(value, n))) { break; }
							n = n + (1) >> 0;
						}
						_tuple$15 = parseNanoseconds(value, n);
						nsec = _tuple$15[0];
						rangeErrString = _tuple$15[1];
						err = _tuple$15[2];
						value = $substring(value, n);
					}
				} else if (_1 === (531)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$6 = $substring(value, 0, 2);
					_tmp$7 = $substring(value, 2);
					p = _tmp$6;
					value = _tmp$7;
					_2 = p;
					if (_2 === ("PM")) {
						pmSet = true;
					} else if (_2 === ("AM")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if (_1 === (532)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$8 = $substring(value, 0, 2);
					_tmp$9 = $substring(value, 2);
					p = _tmp$8;
					value = _tmp$9;
					_3 = p;
					if (_3 === ("pm")) {
						pmSet = true;
					} else if (_3 === ("am")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if ((_1 === (22)) || (_1 === (25)) || (_1 === (23)) || (_1 === (24)) || (_1 === (26)) || (_1 === (27)) || (_1 === (29)) || (_1 === (30)) || (_1 === (28)) || (_1 === (31))) {
					if (((std === 22) || (std === 24) || (std === 25)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
						value = $substring(value, 1);
						z = $pkg.UTC;
						break;
					}
					_tmp$10 = "";
					_tmp$11 = "";
					_tmp$12 = "";
					_tmp$13 = "";
					sign = _tmp$10;
					hour$1 = _tmp$11;
					min$1 = _tmp$12;
					seconds = _tmp$13;
					if ((std === 25) || (std === 30)) {
						if (value.length < 6) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58))) {
							err = errBad;
							break;
						}
						_tmp$14 = $substring(value, 0, 1);
						_tmp$15 = $substring(value, 1, 3);
						_tmp$16 = $substring(value, 4, 6);
						_tmp$17 = "00";
						_tmp$18 = $substring(value, 6);
						sign = _tmp$14;
						hour$1 = _tmp$15;
						min$1 = _tmp$16;
						seconds = _tmp$17;
						value = _tmp$18;
					} else if ((std === 29) || (std === 24)) {
						if (value.length < 3) {
							err = errBad;
							break;
						}
						_tmp$19 = $substring(value, 0, 1);
						_tmp$20 = $substring(value, 1, 3);
						_tmp$21 = "00";
						_tmp$22 = "00";
						_tmp$23 = $substring(value, 3);
						sign = _tmp$19;
						hour$1 = _tmp$20;
						min$1 = _tmp$21;
						seconds = _tmp$22;
						value = _tmp$23;
					} else if ((std === 26) || (std === 31)) {
						if (value.length < 9) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
							err = errBad;
							break;
						}
						_tmp$24 = $substring(value, 0, 1);
						_tmp$25 = $substring(value, 1, 3);
						_tmp$26 = $substring(value, 4, 6);
						_tmp$27 = $substring(value, 7, 9);
						_tmp$28 = $substring(value, 9);
						sign = _tmp$24;
						hour$1 = _tmp$25;
						min$1 = _tmp$26;
						seconds = _tmp$27;
						value = _tmp$28;
					} else if ((std === 23) || (std === 28)) {
						if (value.length < 7) {
							err = errBad;
							break;
						}
						_tmp$29 = $substring(value, 0, 1);
						_tmp$30 = $substring(value, 1, 3);
						_tmp$31 = $substring(value, 3, 5);
						_tmp$32 = $substring(value, 5, 7);
						_tmp$33 = $substring(value, 7);
						sign = _tmp$29;
						hour$1 = _tmp$30;
						min$1 = _tmp$31;
						seconds = _tmp$32;
						value = _tmp$33;
					} else {
						if (value.length < 5) {
							err = errBad;
							break;
						}
						_tmp$34 = $substring(value, 0, 1);
						_tmp$35 = $substring(value, 1, 3);
						_tmp$36 = $substring(value, 3, 5);
						_tmp$37 = "00";
						_tmp$38 = $substring(value, 5);
						sign = _tmp$34;
						hour$1 = _tmp$35;
						min$1 = _tmp$36;
						seconds = _tmp$37;
						value = _tmp$38;
					}
					_tmp$39 = 0;
					_tmp$40 = 0;
					_tmp$41 = 0;
					hr = _tmp$39;
					mm = _tmp$40;
					ss = _tmp$41;
					_tuple$16 = atoi(hour$1);
					hr = _tuple$16[0];
					err = _tuple$16[1];
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$17 = atoi(min$1);
						mm = _tuple$17[0];
						err = _tuple$17[1];
					}
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$18 = atoi(seconds);
						ss = _tuple$18[0];
						err = _tuple$18[1];
					}
					zoneOffset = ($imul(((($imul(hr, 60)) + mm >> 0)), 60)) + ss >> 0;
					_4 = sign.charCodeAt(0);
					if (_4 === (43)) {
					} else if (_4 === (45)) {
						zoneOffset = -zoneOffset;
					} else {
						err = errBad;
					}
				} else if (_1 === (21)) {
					if (value.length >= 3 && $substring(value, 0, 3) === "UTC") {
						z = $pkg.UTC;
						value = $substring(value, 3);
						break;
					}
					_tuple$19 = parseTimeZone(value);
					n$1 = _tuple$19[0];
					ok = _tuple$19[1];
					if (!ok) {
						err = errBad;
						break;
					}
					_tmp$42 = $substring(value, 0, n$1);
					_tmp$43 = $substring(value, n$1);
					zoneName = _tmp$42;
					value = _tmp$43;
				} else if (_1 === (32)) {
					ndigit = 1 + ((std >> 16 >> 0)) >> 0;
					if (value.length < ndigit) {
						err = errBad;
						break;
					}
					_tuple$20 = parseNanoseconds(value, ndigit);
					nsec = _tuple$20[0];
					rangeErrString = _tuple$20[1];
					err = _tuple$20[2];
					value = $substring(value, ndigit);
				} else if (_1 === (33)) {
					if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
						break;
					}
					i = 0;
					while (true) {
						if (!(i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57)) { break; }
						i = i + (1) >> 0;
					}
					_tuple$21 = parseNanoseconds(value, 1 + i >> 0);
					nsec = _tuple$21[0];
					rangeErrString = _tuple$21[1];
					err = _tuple$21[2];
					value = $substring(value, (1 + i >> 0));
				}
			}
			if (!(rangeErrString === "")) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + (12) >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		if (day < 1 || day > daysIn(((month >> 0)), year)) {
			$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": day out of range")];
		}
		/* */ if (!(z === ptrType$2.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(z === ptrType$2.nil)) { */ case 1:
			_r = Date(year, ((month >> 0)), day, hour, min, sec, nsec, z); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return [_r, $ifaceNil];
		/* } */ case 2:
		/* */ if (!((zoneOffset === -1))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((zoneOffset === -1))) { */ case 4:
			_r$1 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			t = $clone(_r$1, Time);
			t.addSec((x = (new $Int64(0, zoneOffset)), new $Int64(-x.$high, -x.$low)));
			_r$2 = local.lookup(t.unixSec()); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$22 = _r$2;
			name = _tuple$22[0];
			offset = _tuple$22[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.setLoc(local);
				$s = -1; return [t, $ifaceNil];
			}
			t.setLoc(FixedZone(zoneName, zoneOffset));
			$s = -1; return [t, $ifaceNil];
		/* } */ case 5:
		/* */ if (!(zoneName === "")) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!(zoneName === "")) { */ case 8:
			_r$3 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			t$1 = $clone(_r$3, Time);
			_r$4 = local.lookupName(zoneName, t$1.unixSec()); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$23 = _r$4;
			offset$1 = _tuple$23[0];
			ok$1 = _tuple$23[2];
			if (ok$1) {
				t$1.addSec((x$1 = (new $Int64(0, offset$1)), new $Int64(-x$1.$high, -x$1.$low)));
				t$1.setLoc(local);
				$s = -1; return [t$1, $ifaceNil];
			}
			if (zoneName.length > 3 && $substring(zoneName, 0, 3) === "GMT") {
				_tuple$24 = atoi($substring(zoneName, 3));
				offset$1 = _tuple$24[0];
				offset$1 = $imul(offset$1, (3600));
			}
			t$1.setLoc(FixedZone(zoneName, offset$1));
			$s = -1; return [t$1, $ifaceNil];
		/* } */ case 9:
		_r$5 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, defaultLocation); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return [_r$5, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parse }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$34 = _tmp$34; $f._tmp$35 = _tmp$35; $f._tmp$36 = _tmp$36; $f._tmp$37 = _tmp$37; $f._tmp$38 = _tmp$38; $f._tmp$39 = _tmp$39; $f._tmp$4 = _tmp$4; $f._tmp$40 = _tmp$40; $f._tmp$41 = _tmp$41; $f._tmp$42 = _tmp$42; $f._tmp$43 = _tmp$43; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$17 = _tuple$17; $f._tuple$18 = _tuple$18; $f._tuple$19 = _tuple$19; $f._tuple$2 = _tuple$2; $f._tuple$20 = _tuple$20; $f._tuple$21 = _tuple$21; $f._tuple$22 = _tuple$22; $f._tuple$23 = _tuple$23; $f._tuple$24 = _tuple$24; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.alayout = alayout; $f.amSet = amSet; $f.avalue = avalue; $f.day = day; $f.defaultLocation = defaultLocation; $f.err = err; $f.hour = hour; $f.hour$1 = hour$1; $f.hr = hr; $f.i = i; $f.layout = layout; $f.local = local; $f.min = min; $f.min$1 = min$1; $f.mm = mm; $f.month = month; $f.n = n; $f.n$1 = n$1; $f.name = name; $f.ndigit = ndigit; $f.nsec = nsec; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.pmSet = pmSet; $f.prefix = prefix; $f.rangeErrString = rangeErrString; $f.sec = sec; $f.seconds = seconds; $f.sign = sign; $f.ss = ss; $f.std = std; $f.stdstr = stdstr; $f.suffix = suffix; $f.t = t; $f.t$1 = t$1; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.year = year; $f.z = z; $f.zoneName = zoneName; $f.zoneOffset = zoneOffset; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseTimeZone = function(value) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length, nUpper, ok, value;
		length = 0;
		ok = false;
		if (value.length < 3) {
			_tmp = 0;
			_tmp$1 = false;
			length = _tmp;
			ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && ($substring(value, 0, 4) === "ChST" || $substring(value, 0, 4) === "MeST")) {
			_tmp$2 = 4;
			_tmp$3 = true;
			length = _tmp$2;
			ok = _tmp$3;
			return [length, ok];
		}
		if ($substring(value, 0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length;
			_tmp$5 = true;
			length = _tmp$4;
			ok = _tmp$5;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (true) {
			if (!(nUpper < 6)) { break; }
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + (1) >> 0;
		}
		_1 = nUpper;
		if ((_1 === (0)) || (_1 === (1)) || (_1 === (2)) || (_1 === (6))) {
			_tmp$6 = 0;
			_tmp$7 = false;
			length = _tmp$6;
			ok = _tmp$7;
			return [length, ok];
		} else if (_1 === (5)) {
			if (value.charCodeAt(4) === 84) {
				_tmp$8 = 5;
				_tmp$9 = true;
				length = _tmp$8;
				ok = _tmp$9;
				return [length, ok];
			}
		} else if (_1 === (4)) {
			if ((value.charCodeAt(3) === 84) || $substring(value, 0, 4) === "WITA") {
				_tmp$10 = 4;
				_tmp$11 = true;
				length = _tmp$10;
				ok = _tmp$11;
				return [length, ok];
			}
		} else if (_1 === (3)) {
			_tmp$12 = 3;
			_tmp$13 = true;
			length = _tmp$12;
			ok = _tmp$13;
			return [length, ok];
		}
		_tmp$14 = 0;
		_tmp$15 = false;
		length = _tmp$14;
		ok = _tmp$15;
		return [length, ok];
	};
	parseGMT = function(value) {
		var _tuple, err, rem, sign, value, x;
		value = $substring(value, 3);
		if (value.length === 0) {
			return 3;
		}
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 3;
		}
		_tuple = leadingInt($substring(value, 1));
		x = _tuple[0];
		rem = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 3;
		}
		if (sign === 45) {
			x = new $Int64(-x.$high, -x.$low);
		}
		if ((x.$high === 0 && x.$low === 0) || (x.$high < -1 || (x.$high === -1 && x.$low < 4294967282)) || (0 < x.$high || (0 === x.$high && 12 < x.$low))) {
			return 3;
		}
		return (3 + value.length >> 0) - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var _tuple, err, i, nbytes, ns, rangeErrString, scaleDigits, value;
		ns = 0;
		rangeErrString = "";
		err = $ifaceNil;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		_tuple = atoi($substring(value, 1, nbytes));
		ns = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (true) {
			if (!(i < scaleDigits)) { break; }
			ns = $imul(ns, (10));
			i = i + (1) >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, c, err, i, rem, s, x, x$1, x$2, x$3;
		x = new $Int64(0, 0);
		rem = "";
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x.$high > 214748364 || (x.$high === 214748364 && x.$low > 3435973836))) {
				_tmp = new $Int64(0, 0);
				_tmp$1 = "";
				_tmp$2 = errLeadingInt;
				x = _tmp;
				rem = _tmp$1;
				err = _tmp$2;
				return [x, rem, err];
			}
			x = (x$1 = (x$2 = $mul64(x, new $Int64(0, 10)), x$3 = (new $Int64(0, c)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), new $Int64(x$1.$high - 0, x$1.$low - 48));
			if ((x.$high < 0 || (x.$high === 0 && x.$low < 0))) {
				_tmp$3 = new $Int64(0, 0);
				_tmp$4 = "";
				_tmp$5 = errLeadingInt;
				x = _tmp$3;
				rem = _tmp$4;
				err = _tmp$5;
				return [x, rem, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$6 = x;
		_tmp$7 = $substring(s, i);
		_tmp$8 = $ifaceNil;
		x = _tmp$6;
		rem = _tmp$7;
		err = _tmp$8;
		return [x, rem, err];
	};
	Time.ptr.prototype.nsec = function() {
		var t, x;
		t = this;
		return (((x = t.wall, new $Uint64(x.$high & 0, (x.$low & 1073741823) >>> 0)).$low >> 0));
	};
	Time.prototype.nsec = function() { return this.$val.nsec(); };
	Time.ptr.prototype.sec = function() {
		var t, x, x$1, x$2, x$3;
		t = this;
		if (!((x = (x$1 = t.wall, new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			return (x$2 = ((x$3 = $shiftRightUint64($shiftLeft64(t.wall, 1), 31), new $Int64(x$3.$high, x$3.$low))), new $Int64(13 + x$2.$high, 3618733952 + x$2.$low));
		}
		return (t.ext);
	};
	Time.prototype.sec = function() { return this.$val.sec(); };
	Time.ptr.prototype.unixSec = function() {
		var t, x;
		t = this;
		return (x = t.sec(), new $Int64(x.$high + -15, x.$low + 2288912640));
	};
	Time.prototype.unixSec = function() { return this.$val.unixSec(); };
	Time.ptr.prototype.addSec = function(d) {
		var d, dsec, sec, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		t = this;
		if (!((x = (x$1 = t.wall, new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			sec = ((x$2 = $shiftRightUint64($shiftLeft64(t.wall, 1), 31), new $Int64(x$2.$high, x$2.$low)));
			dsec = new $Int64(sec.$high + d.$high, sec.$low + d.$low);
			if ((0 < dsec.$high || (0 === dsec.$high && 0 <= dsec.$low)) && (dsec.$high < 1 || (dsec.$high === 1 && dsec.$low <= 4294967295))) {
				t.wall = (x$3 = (x$4 = (x$5 = t.wall, new $Uint64(x$5.$high & 0, (x$5.$low & 1073741823) >>> 0)), x$6 = $shiftLeft64((new $Uint64(dsec.$high, dsec.$low)), 30), new $Uint64(x$4.$high | x$6.$high, (x$4.$low | x$6.$low) >>> 0)), new $Uint64(x$3.$high | 2147483648, (x$3.$low | 0) >>> 0));
				return;
			}
			t.stripMono();
		}
		t.ext = (x$7 = t.ext, x$8 = d, new $Int64(x$7.$high + x$8.$high, x$7.$low + x$8.$low));
	};
	Time.prototype.addSec = function(d) { return this.$val.addSec(d); };
	Time.ptr.prototype.setLoc = function(loc) {
		var loc, t;
		t = this;
		if (loc === utcLoc) {
			loc = ptrType$2.nil;
		}
		t.stripMono();
		t.loc = loc;
	};
	Time.prototype.setLoc = function(loc) { return this.$val.setLoc(loc); };
	Time.ptr.prototype.stripMono = function() {
		var t, x, x$1, x$2, x$3;
		t = this;
		if (!((x = (x$1 = t.wall, new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			t.ext = t.sec();
			t.wall = (x$2 = t.wall, x$3 = new $Uint64(0, 1073741823), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		}
	};
	Time.prototype.stripMono = function() { return this.$val.stripMono(); };
	Time.ptr.prototype.After = function(u) {
		var t, ts, u, us, x, x$1, x$2, x$3, x$4, x$5;
		t = this;
		if (!((x = (x$1 = (x$2 = t.wall, x$3 = u.wall, new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0)), new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			return (x$4 = t.ext, x$5 = u.ext, (x$4.$high > x$5.$high || (x$4.$high === x$5.$high && x$4.$low > x$5.$low)));
		}
		ts = t.sec();
		us = u.sec();
		return (ts.$high > us.$high || (ts.$high === us.$high && ts.$low > us.$low)) || (ts.$high === us.$high && ts.$low === us.$low) && t.nsec() > u.nsec();
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.ptr.prototype.Before = function(u) {
		var t, u, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		if (!((x = (x$1 = (x$2 = t.wall, x$3 = u.wall, new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0)), new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			return (x$4 = t.ext, x$5 = u.ext, (x$4.$high < x$5.$high || (x$4.$high === x$5.$high && x$4.$low < x$5.$low)));
		}
		return (x$6 = t.sec(), x$7 = u.sec(), (x$6.$high < x$7.$high || (x$6.$high === x$7.$high && x$6.$low < x$7.$low))) || (x$8 = t.sec(), x$9 = u.sec(), (x$8.$high === x$9.$high && x$8.$low === x$9.$low)) && t.nsec() < u.nsec();
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.ptr.prototype.Equal = function(u) {
		var t, u, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		t = this;
		if (!((x = (x$1 = (x$2 = t.wall, x$3 = u.wall, new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0)), new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			return (x$4 = t.ext, x$5 = u.ext, (x$4.$high === x$5.$high && x$4.$low === x$5.$low));
		}
		return (x$6 = t.sec(), x$7 = u.sec(), (x$6.$high === x$7.$high && x$6.$low === x$7.$low)) && (t.nsec() === u.nsec());
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var buf, m, n, x;
		m = this.$val;
		if (1 <= m && m <= 12) {
			return (x = m - 1 >> 0, ((x < 0 || x >= months.length) ? ($throwRuntimeError("index out of range"), undefined) : months[x]));
		}
		buf = $makeSlice(sliceType$3, 20);
		n = fmtInt(buf, (new $Uint64(0, m)));
		return "%!Month(" + ($bytesToString($subslice(buf, n))) + ")";
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var d;
		d = this.$val;
		return ((d < 0 || d >= days.length) ? ($throwRuntimeError("index out of range"), undefined) : days[d]);
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.ptr.prototype.IsZero = function() {
		var t, x;
		t = this;
		return (x = t.sec(), (x.$high === 0 && x.$low === 0)) && (t.nsec() === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.ptr.prototype.abs = function() {
		var _r, _r$1, _tuple, l, offset, sec, t, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; l = $f.l; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		l = t.loc;
		/* */ if (l === ptrType$2.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$2.nil || l === localLoc) { */ case 1:
			_r = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
		/* } */ case 2:
		sec = t.unixSec();
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) { */ case 6:
				sec = (x$2 = (new $Int64(0, l.cacheZone.offset)), new $Int64(sec.$high + x$2.$high, sec.$low + x$2.$low));
				$s = 8; continue;
			/* } else { */ case 7:
				_r$1 = l.lookup(sec); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				offset = _tuple[1];
				sec = (x$3 = (new $Int64(0, offset)), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
			/* } */ case 8:
		/* } */ case 5:
		$s = -1; return ((x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.abs }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.l = l; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.ptr.prototype.locabs = function() {
		var _r, _r$1, _tuple, abs, l, name, offset, sec, t, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; abs = $f.abs; l = $f.l; name = $f.name; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		abs = new $Uint64(0, 0);
		t = this;
		l = t.loc;
		/* */ if (l === ptrType$2.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$2.nil || l === localLoc) { */ case 1:
			_r = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
		/* } */ case 2:
		sec = t.unixSec();
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) { */ case 7:
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$1 = l.lookup(sec); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				name = _tuple[0];
				offset = _tuple[1];
			/* } */ case 9:
			sec = (x$2 = (new $Int64(0, offset)), new $Int64(sec.$high + x$2.$high, sec.$low + x$2.$low));
			$s = 6; continue;
		/* } else { */ case 5:
			name = "UTC";
		/* } */ case 6:
		abs = ((x$3 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$3.$high, x$3.$low)));
		$s = -1; return [name, offset, abs];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.locabs }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.abs = abs; $f.l = l; $f.name = name; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.ptr.prototype.Date = function() {
		var _r, _tuple, day, month, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; day = $f.day; month = $f.month; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		$s = -1; return [year, month, day];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Date }; } $f._r = _r; $f._tuple = _tuple; $f.day = day; $f.month = month; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.ptr.prototype.Year = function() {
		var _r, _tuple, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		$s = -1; return year;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Year }; } $f._r = _r; $f._tuple = _tuple; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.ptr.prototype.Month = function() {
		var _r, _tuple, month, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; month = $f.month; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		month = _tuple[1];
		$s = -1; return month;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Month }; } $f._r = _r; $f._tuple = _tuple; $f.month = month; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.ptr.prototype.Day = function() {
		var _r, _tuple, day, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; day = $f.day; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		day = _tuple[2];
		$s = -1; return day;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Day }; } $f._r = _r; $f._tuple = _tuple; $f.day = day; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.ptr.prototype.Weekday = function() {
		var _r, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absWeekday(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Weekday }; } $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var _q, abs, sec;
		sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
		return (((_q = ((sec.$low >> 0)) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
	};
	Time.ptr.prototype.ISOWeek = function() {
		var _q, _r, _r$1, _r$2, _r$3, _r$4, _tuple, day, dec31wday, jan1wday, month, t, wday, week, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; day = $f.day; dec31wday = $f.dec31wday; jan1wday = $f.jan1wday; month = $f.month; t = $f.t; wday = $f.wday; week = $f.week; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		week = 0;
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		yday = _tuple[3];
		_r$2 = $clone(t, Time).Weekday(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		wday = (_r$1 = (((_r$2 + 6 >> 0) >> 0)) % 7, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
		week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		jan1wday = (_r$3 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
		if (1 <= jan1wday && jan1wday <= 3) {
			week = week + (1) >> 0;
		}
		if (week === 0) {
			year = year - (1) >> 0;
			week = 52;
			if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
				week = week + (1) >> 0;
			}
		}
		if ((month === 12) && day >= 29 && wday < 3) {
			dec31wday = (_r$4 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
			if (0 <= dec31wday && dec31wday <= 2) {
				year = year + (1) >> 0;
				week = 1;
			}
		}
		$s = -1; return [year, week];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.ISOWeek }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.day = day; $f.dec31wday = dec31wday; $f.jan1wday = jan1wday; $f.month = month; $f.t = t; $f.wday = wday; $f.week = week; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.ptr.prototype.Clock = function() {
		var _r, _r$1, _tuple, hour, min, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; hour = $f.hour; min = $f.min; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		hour = 0;
		min = 0;
		sec = 0;
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absClock(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		hour = _tuple[0];
		min = _tuple[1];
		sec = _tuple[2];
		$s = -1; return [hour, min, sec];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Clock }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.hour = hour; $f.min = min; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var _q, _q$1, abs, hour, min, sec;
		hour = 0;
		min = 0;
		sec = 0;
		sec = (($div64(abs, new $Uint64(0, 86400), true).$low >> 0));
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(hour, 3600))) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(min, 60))) >> 0;
		return [hour, min, sec];
	};
	Time.ptr.prototype.Hour = function() {
		var _q, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (_q = (($div64(_r, new $Uint64(0, 86400), true).$low >> 0)) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Hour }; } $f._q = _q; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.ptr.prototype.Minute = function() {
		var _q, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (_q = (($div64(_r, new $Uint64(0, 3600), true).$low >> 0)) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Minute }; } $f._q = _q; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.ptr.prototype.Second = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (($div64(_r, new $Uint64(0, 60), true).$low >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Second }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.ptr.prototype.Nanosecond = function() {
		var t;
		t = this;
		return ((t.nsec() >> 0));
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.ptr.prototype.YearDay = function() {
		var _r, _tuple, t, yday, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; t = $f.t; yday = $f.yday; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		yday = _tuple[3];
		$s = -1; return yday + 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.YearDay }; } $f._r = _r; $f._tuple = _tuple; $f.t = t; $f.yday = yday; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var _tuple, _tuple$1, buf, d, neg, prec, u, w;
		d = this;
		buf = arrayType$4.zero();
		w = 32;
		u = (new $Uint64(d.$high, d.$low));
		neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
			prec = 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
			w = w - (1) >> 0;
			if ((u.$high === 0 && u.$low === 0)) {
				return "0s";
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
				prec = 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 110);
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
				prec = 3;
				w = w - (1) >> 0;
				$copyString($subslice(new sliceType$3(buf), w), "\xC2\xB5");
			} else {
				prec = 6;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
			}
			_tuple = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, prec);
			w = _tuple[0];
			u = _tuple[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
		} else {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
			_tuple$1 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, 9);
			w = _tuple$1[0];
			u = _tuple$1[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, (new $Uint64(0, 60)), false);
			if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
				w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 104);
					w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
		}
		return ($bytesToString($subslice(new sliceType$3(buf), w)));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var _tmp, _tmp$1, buf, digit, i, nv, nw, prec, print, v, w;
		nw = 0;
		nv = new $Uint64(0, 0);
		w = buf.$length;
		print = false;
		i = 0;
		while (true) {
			if (!(i < prec)) { break; }
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.$high === 0 && digit.$low === 0));
			if (print) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = (((digit.$low << 24 >>> 24)) + 48 << 24 >>> 24));
			}
			v = $div64(v, (new $Uint64(0, 10)), false);
			i = i + (1) >> 0;
		}
		if (print) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
		}
		_tmp = w;
		_tmp$1 = v;
		nw = _tmp;
		nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var buf, v, w;
		w = buf.$length;
		if ((v.$high === 0 && v.$low === 0)) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
		} else {
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = ((($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24)) + 48 << 24 >>> 24));
				v = $div64(v, (new $Uint64(0, 10)), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var d;
		d = this;
		return (new $Int64(d.$high, d.$low));
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Seconds = function() {
		var d, nsec, sec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return ($flatten64(sec)) + ($flatten64(nsec)) / 1e+09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return ($flatten64(min)) + ($flatten64(nsec)) / 6e+10;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return ($flatten64(hour)) + ($flatten64(nsec)) / 3.6e+12;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Duration.prototype.Truncate = function(m) {
		var d, m, x;
		d = this;
		if ((m.$high < 0 || (m.$high === 0 && m.$low <= 0))) {
			return d;
		}
		return (x = $div64(d, m, true), new Duration(d.$high - x.$high, d.$low - x.$low));
	};
	$ptrType(Duration).prototype.Truncate = function(m) { return this.$get().Truncate(m); };
	lessThanHalf = function(x, y) {
		var x, x$1, x$2, x$3, x$4, y;
		return (x$1 = (x$2 = (new $Uint64(x.$high, x.$low)), x$3 = (new $Uint64(x.$high, x.$low)), new $Uint64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), x$4 = (new $Uint64(y.$high, y.$low)), (x$1.$high < x$4.$high || (x$1.$high === x$4.$high && x$1.$low < x$4.$low)));
	};
	Duration.prototype.Round = function(m) {
		var d, d1, d1$1, m, r, x, x$1;
		d = this;
		if ((m.$high < 0 || (m.$high === 0 && m.$low <= 0))) {
			return d;
		}
		r = $div64(d, m, true);
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 0))) {
			r = new Duration(-r.$high, -r.$low);
			if (lessThanHalf(r, m)) {
				return new Duration(d.$high + r.$high, d.$low + r.$low);
			}
			d1 = (x = new Duration(d.$high - m.$high, d.$low - m.$low), new Duration(x.$high + r.$high, x.$low + r.$low));
			if ((d1.$high < d.$high || (d1.$high === d.$high && d1.$low < d.$low))) {
				return d1;
			}
			return new Duration(-2147483648, 0);
		}
		if (lessThanHalf(r, m)) {
			return new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		d1$1 = (x$1 = new Duration(d.$high + m.$high, d.$low + m.$low), new Duration(x$1.$high - r.$high, x$1.$low - r.$low));
		if ((d1$1.$high > d.$high || (d1$1.$high === d.$high && d1$1.$low > d.$low))) {
			return d1$1;
		}
		return new Duration(2147483647, 4294967295);
	};
	$ptrType(Duration).prototype.Round = function(m) { return this.$get().Round(m); };
	Time.ptr.prototype.Add = function(d) {
		var d, dsec, nsec, t, te, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		dsec = ((x = $div64(d, new Duration(0, 1000000000), false), new $Int64(x.$high, x.$low)));
		nsec = t.nsec() + (((x$1 = $div64(d, new Duration(0, 1000000000), true), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0)) >> 0;
		if (nsec >= 1000000000) {
			dsec = (x$2 = new $Int64(0, 1), new $Int64(dsec.$high + x$2.$high, dsec.$low + x$2.$low));
			nsec = nsec - (1000000000) >> 0;
		} else if (nsec < 0) {
			dsec = (x$3 = new $Int64(0, 1), new $Int64(dsec.$high - x$3.$high, dsec.$low - x$3.$low));
			nsec = nsec + (1000000000) >> 0;
		}
		t.wall = (x$4 = (x$5 = t.wall, new $Uint64(x$5.$high & ~0, (x$5.$low & ~1073741823) >>> 0)), x$6 = (new $Uint64(0, nsec)), new $Uint64(x$4.$high | x$6.$high, (x$4.$low | x$6.$low) >>> 0));
		t.addSec(dsec);
		if (!((x$7 = (x$8 = t.wall, new $Uint64(x$8.$high & 2147483648, (x$8.$low & 0) >>> 0)), (x$7.$high === 0 && x$7.$low === 0)))) {
			te = (x$9 = t.ext, x$10 = (new $Int64(d.$high, d.$low)), new $Int64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 0)) && (x$11 = (t.ext), (te.$high > x$11.$high || (te.$high === x$11.$high && te.$low > x$11.$low))) || (d.$high > 0 || (d.$high === 0 && d.$low > 0)) && (x$12 = (t.ext), (te.$high < x$12.$high || (te.$high === x$12.$high && te.$low < x$12.$low)))) {
				t.stripMono();
			} else {
				t.ext = te;
			}
		}
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.ptr.prototype.Sub = function(u) {
		var d, d$1, t, te, u, ue, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		if (!((x = (x$1 = (x$2 = t.wall, x$3 = u.wall, new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0)), new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			te = (t.ext);
			ue = (u.ext);
			d = ((x$4 = new $Int64(te.$high - ue.$high, te.$low - ue.$low), new Duration(x$4.$high, x$4.$low)));
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 0)) && (te.$high > ue.$high || (te.$high === ue.$high && te.$low > ue.$low))) {
				return new Duration(2147483647, 4294967295);
			}
			if ((d.$high > 0 || (d.$high === 0 && d.$low > 0)) && (te.$high < ue.$high || (te.$high === ue.$high && te.$low < ue.$low))) {
				return new Duration(-2147483648, 0);
			}
			return d;
		}
		d$1 = (x$5 = $mul64(((x$6 = (x$7 = t.sec(), x$8 = u.sec(), new $Int64(x$7.$high - x$8.$high, x$7.$low - x$8.$low)), new Duration(x$6.$high, x$6.$low))), new Duration(0, 1000000000)), x$9 = (new Duration(0, (t.nsec() - u.nsec() >> 0))), new Duration(x$5.$high + x$9.$high, x$5.$low + x$9.$low));
		if ($clone($clone(u, Time).Add(d$1), Time).Equal($clone(t, Time))) {
			return d$1;
		} else if ($clone(t, Time).Before($clone(u, Time))) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Time.ptr.prototype.AddDate = function(years, months$1, days$1) {
		var _r, _r$1, _r$2, _tuple, _tuple$1, day, days$1, hour, min, month, months$1, sec, t, year, years, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; day = $f.day; days$1 = $f.days$1; hour = $f.hour; min = $f.min; month = $f.month; months$1 = $f.months$1; sec = $f.sec; t = $f.t; year = $f.year; years = $f.years; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		_r$1 = $clone(t, Time).Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		hour = _tuple$1[0];
		min = _tuple$1[1];
		sec = _tuple$1[2];
		_r$2 = Date(year + years >> 0, month + ((months$1 >> 0)) >> 0, day + days$1 >> 0, hour, min, sec, ((t.nsec() >> 0)), $clone(t, Time).Location()); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AddDate }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.day = day; $f.days$1 = days$1; $f.hour = hour; $f.min = min; $f.month = month; $f.months$1 = months$1; $f.sec = sec; $f.t = t; $f.year = year; $f.years = years; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AddDate = function(years, months$1, days$1) { return this.$val.AddDate(years, months$1, days$1); };
	Time.ptr.prototype.date = function(full) {
		var _r, _r$1, _tuple, day, full, month, t, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; day = $f.day; full = $f.full; month = $f.month; t = $f.t; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absDate(_r, full); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		yday = _tuple[3];
		$s = -1; return [year, month, day, yday];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.date }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.day = day; $f.full = full; $f.month = month; $f.t = t; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var _q, abs, begin, d, day, end, full, month, n, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday, year;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x.$high, d.$low - x.$low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$1 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$1.$high, n.$low - x$1.$low));
		y = (x$2 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$2.$high, y.$low + x$2.$low));
		d = (x$3 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$3.$high, d.$low - x$3.$low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$4 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$4.$high, y.$low + x$4.$low));
		d = (x$5 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$5.$high, d.$low - x$5.$low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$6 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$6.$high, n.$low - x$6.$low));
		y = (x$7 = n, new $Uint64(y.$high + x$7.$high, y.$low + x$7.$low));
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$8.$high, d.$low - x$8.$low));
		year = (((x$9 = (x$10 = (new $Int64(y.$high, y.$low)), new $Int64(x$10.$high + -69, x$10.$low + 4075721025)), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0));
		yday = ((d.$low >> 0));
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - (1) >> 0;
			} else if ((day === 59)) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = (((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
		end = (((x$11 = month + 1 >> 0, ((x$11 < 0 || x$11 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$11])) >> 0));
		begin = 0;
		if (day >= end) {
			month = month + (1) >> 0;
			begin = end;
		} else {
			begin = ((((month < 0 || month >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[month]) >> 0));
		}
		month = month + (1) >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	daysIn = function(m, year) {
		var m, x, year;
		if ((m === 2) && isLeap(year)) {
			return 29;
		}
		return (((((m < 0 || m >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[m]) - (x = m - 1 >> 0, ((x < 0 || x >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x])) >> 0) >> 0));
	};
	unixTime = function(sec, nsec) {
		var nsec, sec;
		return new Time.ptr((new $Uint64(0, nsec)), new $Int64(sec.$high + 14, sec.$low + 2006054656), $pkg.Local);
	};
	Time.ptr.prototype.UTC = function() {
		var t;
		t = this;
		t.setLoc(utcLoc);
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.ptr.prototype.Local = function() {
		var t;
		t = this;
		t.setLoc($pkg.Local);
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.ptr.prototype.In = function(loc) {
		var loc, t;
		t = this;
		if (loc === ptrType$2.nil) {
			$panic(new $String("time: missing Location in call to Time.In"));
		}
		t.setLoc(loc);
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.ptr.prototype.Location = function() {
		var l, t;
		t = this;
		l = t.loc;
		if (l === ptrType$2.nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.ptr.prototype.Zone = function() {
		var _r, _tuple, name, offset, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; name = $f.name; offset = $f.offset; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		t = this;
		_r = t.loc.lookup(t.unixSec()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		name = _tuple[0];
		offset = _tuple[1];
		$s = -1; return [name, offset];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Zone }; } $f._r = _r; $f._tuple = _tuple; $f.name = name; $f.offset = offset; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.ptr.prototype.Unix = function() {
		var t;
		t = this;
		return t.unixSec();
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.ptr.prototype.UnixNano = function() {
		var t, x, x$1;
		t = this;
		return (x = $mul64((t.unixSec()), new $Int64(0, 1000000000)), x$1 = (new $Int64(0, t.nsec())), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.ptr.prototype.MarshalBinary = function() {
		var _q, _r, _r$1, _tuple, enc, nsec, offset, offsetMin, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; enc = $f.enc; nsec = $f.nsec; offset = $f.offset; offsetMin = $f.offsetMin; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		offsetMin = 0;
		/* */ if ($clone(t, Time).Location() === $pkg.UTC) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(t, Time).Location() === $pkg.UTC) { */ case 1:
			offsetMin = -1;
			$s = 3; continue;
		/* } else { */ case 2:
			_r = $clone(t, Time).Zone(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			offset = _tuple[1];
			if (!(((_r$1 = offset % 60, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0))) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = ((offset << 16 >> 16));
		/* } */ case 3:
		sec = t.sec();
		nsec = t.nsec();
		enc = new sliceType$3([1, (($shiftRightInt64(sec, 56).$low << 24 >>> 24)), (($shiftRightInt64(sec, 48).$low << 24 >>> 24)), (($shiftRightInt64(sec, 40).$low << 24 >>> 24)), (($shiftRightInt64(sec, 32).$low << 24 >>> 24)), (($shiftRightInt64(sec, 24).$low << 24 >>> 24)), (($shiftRightInt64(sec, 16).$low << 24 >>> 24)), (($shiftRightInt64(sec, 8).$low << 24 >>> 24)), ((sec.$low << 24 >>> 24)), (((nsec >> 24 >> 0) << 24 >>> 24)), (((nsec >> 16 >> 0) << 24 >>> 24)), (((nsec >> 8 >> 0) << 24 >>> 24)), ((nsec << 24 >>> 24)), (((offsetMin >> 8 << 16 >> 16) << 24 >>> 24)), ((offsetMin << 24 >>> 24))]);
		$s = -1; return [enc, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalBinary }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.enc = enc; $f.nsec = nsec; $f.offset = offset; $f.offsetMin = offsetMin; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.ptr.prototype.UnmarshalBinary = function(data$1) {
		var _r, _tuple, buf, data$1, localoff, nsec, offset, sec, t, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; data$1 = $f.data$1; localoff = $f.localoff; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		buf = data$1;
		if (buf.$length === 0) {
			$s = -1; return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!(((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 1))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.$length === 15))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Int64(0, (7 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 7]))), x$7 = $shiftLeft64((new $Int64(0, (6 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 6]))), 8), new $Int64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Int64(0, (5 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 5]))), 16), new $Int64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Int64(0, (4 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 4]))), 24), new $Int64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Int64(0, (3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]))), 32), new $Int64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Int64(0, (2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]))), 40), new $Int64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Int64(0, (1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]))), 48), new $Int64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Int64(0, (0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]))), 56), new $Int64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		buf = $subslice(buf, 8);
		nsec = (((((3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]) >> 0)) | ((((2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]) >> 0)) << 8 >> 0)) | ((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) >> 0)) << 16 >> 0)) | ((((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) >> 0)) << 24 >> 0);
		buf = $subslice(buf, 4);
		offset = $imul(((((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) << 16 >> 16)) | ((((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) << 16 >> 16)) << 8 << 16 >> 16)) >> 0)), 60);
		Time.copy(t, new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil));
		t.wall = (new $Uint64(0, nsec));
		t.ext = sec;
		/* */ if (offset === -60) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (offset === -60) { */ case 1:
			t.setLoc(utcLoc);
			$s = 3; continue;
		/* } else { */ case 2:
			_r = $pkg.Local.lookup(t.unixSec()); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			localoff = _tuple[1];
			if (offset === localoff) {
				t.setLoc($pkg.Local);
			} else {
				t.setLoc(FixedZone("", offset));
			}
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalBinary }; } $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.data$1 = data$1; $f.localoff = localoff; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalBinary = function(data$1) { return this.$val.UnmarshalBinary(data$1); };
	Time.ptr.prototype.GobEncode = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).MarshalBinary(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobEncode }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.ptr.prototype.GobDecode = function(data$1) {
		var _r, data$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; data$1 = $f.data$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.UnmarshalBinary(data$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobDecode }; } $f._r = _r; $f.data$1 = data$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobDecode = function(data$1) { return this.$val.GobDecode(data$1); };
	Time.ptr.prototype.MarshalJSON = function() {
		var _r, _r$1, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		y = _r;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 37);
		b = $append(b, 34);
		_r$1 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		b = _r$1;
		b = $append(b, 34);
		$s = -1; return [b, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalJSON }; } $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.ptr.prototype.UnmarshalJSON = function(data$1) {
		var _r, _tuple, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (($bytesToString(data$1)) === "null") {
			$s = -1; return $ifaceNil;
		}
		err = $ifaceNil;
		_r = Parse("\"2006-01-02T15:04:05Z07:00\"", ($bytesToString(data$1))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		Time.copy(t, _tuple[0]);
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalJSON }; } $f._r = _r; $f._tuple = _tuple; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalJSON = function(data$1) { return this.$val.UnmarshalJSON(data$1); };
	Time.ptr.prototype.MarshalText = function() {
		var _r, _r$1, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		y = _r;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 35);
		_r$1 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return [_r$1, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalText }; } $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.ptr.prototype.UnmarshalText = function(data$1) {
		var _r, _tuple, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		err = $ifaceNil;
		_r = Parse("2006-01-02T15:04:05Z07:00", ($bytesToString(data$1))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		Time.copy(t, _tuple[0]);
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalText }; } $f._r = _r; $f._tuple = _tuple; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalText = function(data$1) { return this.$val.UnmarshalText(data$1); };
	Unix = function(sec, nsec) {
		var n, nsec, sec, x, x$1, x$2, x$3;
		if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x = n, new $Int64(sec.$high + x.$high, sec.$low + x.$low));
			nsec = (x$1 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$1.$high, nsec.$low - x$1.$low));
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
				nsec = (x$2 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$2.$high, nsec.$low + x$2.$low));
				sec = (x$3 = new $Int64(0, 1), new $Int64(sec.$high - x$3.$high, sec.$low - x$3.$low));
			}
		}
		return unixTime(sec, (((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0)));
	};
	$pkg.Unix = Unix;
	isLeap = function(year) {
		var _r, _r$1, _r$2, year;
		return ((_r = year % 4, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$1 = year % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$2 = year % 400, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var _q, _q$1, _tmp, _tmp$1, base, hi, lo, n, n$1, nhi, nlo;
		nhi = 0;
		nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + (($imul(n, base))) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - (($imul(n$1, base))) >> 0;
		}
		_tmp = hi;
		_tmp$1 = lo;
		nhi = _tmp;
		nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, abs, d, day, end, hour, loc, m, min, month, n, nsec, offset, sec, start, t, unix, utc, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; abs = $f.abs; d = $f.d; day = $f.day; end = $f.end; hour = $f.hour; loc = $f.loc; m = $f.m; min = $f.min; month = $f.month; n = $f.n; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; start = $f.start; t = $f.t; unix = $f.unix; utc = $f.utc; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (loc === ptrType$2.nil) {
			$panic(new $String("time: missing Location in call to Date"));
		}
		m = ((month >> 0)) - 1 >> 0;
		_tuple = norm(year, m, 12);
		year = _tuple[0];
		m = _tuple[1];
		month = ((m >> 0)) + 1 >> 0;
		_tuple$1 = norm(sec, nsec, 1000000000);
		sec = _tuple$1[0];
		nsec = _tuple$1[1];
		_tuple$2 = norm(min, sec, 60);
		min = _tuple$2[0];
		sec = _tuple$2[1];
		_tuple$3 = norm(hour, min, 60);
		hour = _tuple$3[0];
		min = _tuple$3[1];
		_tuple$4 = norm(day, hour, 24);
		day = _tuple$4[0];
		hour = _tuple$4[1];
		y = ((x = (x$1 = (new $Int64(0, year)), new $Int64(x$1.$high - -69, x$1.$low - 4075721025)), new $Uint64(x.$high, x.$low)));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$2 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$2.$high, y.$low - x$2.$low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$5.$high, y.$low - x$5.$low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$6.$high, d.$low + x$6.$low));
		n = y;
		d = (x$7 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
		d = (x$8 = (new $Uint64(0, (x$9 = month - 1 >> 0, ((x$9 < 0 || x$9 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$9])))), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
		if (isLeap(year) && month >= 3) {
			d = (x$10 = new $Uint64(0, 1), new $Uint64(d.$high + x$10.$high, d.$low + x$10.$low));
		}
		d = (x$11 = (new $Uint64(0, (day - 1 >> 0))), new $Uint64(d.$high + x$11.$high, d.$low + x$11.$low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$12 = (new $Uint64(0, ((($imul(hour, 3600)) + ($imul(min, 60)) >> 0) + sec >> 0))), new $Uint64(abs.$high + x$12.$high, abs.$low + x$12.$low));
		unix = (x$13 = (new $Int64(abs.$high, abs.$low)), new $Int64(x$13.$high + -2147483647, x$13.$low + 3844486912));
		_r = loc.lookup(unix); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$5 = _r;
		offset = _tuple$5[1];
		start = _tuple$5[3];
		end = _tuple$5[4];
		/* */ if (!((offset === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((offset === 0))) { */ case 2:
				utc = (x$14 = (new $Int64(0, offset)), new $Int64(unix.$high - x$14.$high, unix.$low - x$14.$low));
				/* */ if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { $s = 5; continue; }
				/* */ if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { */ case 5:
					_r$1 = loc.lookup(new $Int64(start.$high - 0, start.$low - 1)); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$6 = _r$1;
					offset = _tuple$6[1];
					$s = 7; continue;
				/* } else if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { */ case 6:
					_r$2 = loc.lookup(end); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$7 = _r$2;
					offset = _tuple$7[1];
				/* } */ case 7:
			case 4:
			unix = (x$15 = (new $Int64(0, offset)), new $Int64(unix.$high - x$15.$high, unix.$low - x$15.$low));
		/* } */ case 3:
		t = $clone(unixTime(unix, ((nsec >> 0))), Time);
		t.setLoc(loc);
		$s = -1; return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Date }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.abs = abs; $f.d = d; $f.day = day; $f.end = end; $f.hour = hour; $f.loc = loc; $f.m = m; $f.min = min; $f.month = month; $f.n = n; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.start = start; $f.t = t; $f.unix = unix; $f.utc = utc; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Date = Date;
	Time.ptr.prototype.Truncate = function(d) {
		var _tuple, d, r, t;
		t = this;
		t.stripMono();
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple = div($clone(t, Time), d);
		r = _tuple[1];
		return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.ptr.prototype.Round = function(d) {
		var _tuple, d, r, t;
		t = this;
		t.stripMono();
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple = div($clone(t, Time), d);
		r = _tuple[1];
		if (lessThanHalf(r, d)) {
			return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
		}
		return $clone(t, Time).Add(new Duration(d.$high - r.$high, d.$low - r.$low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var _q, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, d0, d1, d1$1, neg, nsec, qmod2, r, sec, sec$1, t, tmp, u0, u0x, u1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		qmod2 = 0;
		r = new Duration(0, 0);
		neg = false;
		nsec = t.nsec();
		sec = t.sec();
		if ((sec.$high < 0 || (sec.$high === 0 && sec.$low < 0))) {
			neg = true;
			sec = new $Int64(-sec.$high, -sec.$low);
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + (1000000000) >> 0;
				sec = (x = new $Int64(0, 1), new $Int64(sec.$high - x.$high, sec.$low - x.$low));
			}
		}
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$1 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$1.$high === 0 && x$1.$low === 0))) {
			qmod2 = (((_q = nsec / (((d.$low + ((d.$high >> 31) * 4294967296)) >> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) & 1;
			r = (new Duration(0, (_r = nsec % (((d.$low + ((d.$high >> 31) * 4294967296)) >> 0)), _r === _r ? _r : $throwRuntimeError("integer divide by zero"))));
		} else if ((x$2 = $div64(d, new Duration(0, 1000000000), true), (x$2.$high === 0 && x$2.$low === 0))) {
			d1 = ((x$3 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$3.$high, x$3.$low)));
			qmod2 = (((x$4 = $div64(sec, d1, false), x$4.$low + ((x$4.$high >> 31) * 4294967296)) >> 0)) & 1;
			r = (x$5 = $mul64(((x$6 = $div64(sec, d1, true), new Duration(x$6.$high, x$6.$low))), new Duration(0, 1000000000)), x$7 = (new Duration(0, nsec)), new Duration(x$5.$high + x$7.$high, x$5.$low + x$7.$low));
		} else {
			sec$1 = (new $Uint64(sec.$high, sec.$low));
			tmp = $mul64(($shiftRightUint64(sec$1, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64((new $Uint64(sec$1.$high & 0, (sec$1.$low & 4294967295) >>> 0)), new $Uint64(0, 1000000000));
			_tmp = u0;
			_tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low);
			u0x = _tmp;
			u0 = _tmp$1;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$8 = new $Uint64(0, 1), new $Uint64(u1.$high + x$8.$high, u1.$low + x$8.$low));
			}
			_tmp$2 = u0;
			_tmp$3 = (x$9 = (new $Uint64(0, nsec)), new $Uint64(u0.$high + x$9.$high, u0.$low + x$9.$low));
			u0x = _tmp$2;
			u0 = _tmp$3;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$10 = new $Uint64(0, 1), new $Uint64(u1.$high + x$10.$high, u1.$low + x$10.$low));
			}
			d1$1 = (new $Uint64(d.$high, d.$low));
			while (true) {
				if (!(!((x$11 = $shiftRightUint64(d1$1, 63), (x$11.$high === 0 && x$11.$low === 1))))) { break; }
				d1$1 = $shiftLeft64(d1$1, (1));
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
					qmod2 = 1;
					_tmp$4 = u0;
					_tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low);
					u0x = _tmp$4;
					u0 = _tmp$5;
					if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
						u1 = (x$12 = new $Uint64(0, 1), new $Uint64(u1.$high - x$12.$high, u1.$low - x$12.$low));
					}
					u1 = (x$13 = d1$1, new $Uint64(u1.$high - x$13.$high, u1.$low - x$13.$low));
				}
				if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$14 = (new $Uint64(d.$high, d.$low)), (d0.$high === x$14.$high && d0.$low === x$14.$low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, (1));
				d0 = (x$15 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$15.$high, (d0.$low | x$15.$low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, (1));
			}
			r = (new Duration(u0.$high, u0.$low));
		}
		if (neg && !((r.$high === 0 && r.$low === 0))) {
			qmod2 = (qmod2 ^ (1)) >> 0;
			r = new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		return [qmod2, r];
	};
	Location.ptr.prototype.get = function() {
		var l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		if (l === ptrType$2.nil) {
			$s = -1; return utcLoc;
		}
		/* */ if (l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === localLoc) { */ case 1:
			$r = localOnce.Do(initLocal); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return l;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.get }; } $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.ptr.prototype.String = function() {
		var _r, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r.name;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.String }; } $f._r = _r; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = function(name, offset) {
		var l, name, offset, x;
		l = new Location.ptr(name, new sliceType([new zone.ptr(name, offset, false)]), new sliceType$1([new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);
		l.cacheZone = (x = l.zone, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		return l;
	};
	$pkg.FixedZone = FixedZone;
	Location.ptr.prototype.lookup = function(sec) {
		var _q, _r, end, hi, isDST, l, lim, lo, m, name, offset, sec, start, tx, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, zone$1, zone$2, zone$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; end = $f.end; hi = $f.hi; isDST = $f.isDST; l = $f.l; lim = $f.lim; lo = $f.lo; m = $f.m; name = $f.name; offset = $f.offset; sec = $f.sec; start = $f.start; tx = $f.tx; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; zone$1 = $f.zone$1; zone$2 = $f.zone$2; zone$3 = $f.zone$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		isDST = false;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = _r;
		if (l.zone.$length === 0) {
			name = "UTC";
			offset = 0;
			isDST = false;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			$s = -1; return [name, offset, isDST, start, end];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			isDST = zone$1.isDST;
			start = l.cacheStart;
			end = l.cacheEnd;
			$s = -1; return [name, offset, isDST, start, end];
		}
		if ((l.tx.$length === 0) || (x$2 = (x$3 = l.tx, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).when, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
			zone$2 = (x$4 = l.zone, x$5 = l.lookupFirstZone(), ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5]));
			name = zone$2.name;
			offset = zone$2.offset;
			isDST = zone$2.isDST;
			start = new $Int64(-2147483648, 0);
			if (l.tx.$length > 0) {
				end = (x$6 = l.tx, (0 >= x$6.$length ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			$s = -1; return [name, offset, isDST, start, end];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.$length;
		while (true) {
			if (!((hi - lo >> 0) > 1)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + m]).when;
			if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$7 = l.zone, x$8 = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).index, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8]));
		name = zone$3.name;
		offset = zone$3.offset;
		isDST = zone$3.isDST;
		start = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).when;
		$s = -1; return [name, offset, isDST, start, end];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookup }; } $f._q = _q; $f._r = _r; $f.end = end; $f.hi = hi; $f.isDST = isDST; $f.l = l; $f.lim = lim; $f.lo = lo; $f.m = m; $f.name = name; $f.offset = offset; $f.sec = sec; $f.start = start; $f.tx = tx; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.zone$3 = zone$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.ptr.prototype.lookupFirstZone = function() {
		var _i, _ref, l, x, x$1, x$2, x$3, x$4, x$5, zi, zi$1;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.$length > 0 && (x = l.zone, x$1 = (x$2 = l.tx, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])).index, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).isDST) {
			zi = (((x$3 = l.tx, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).index >> 0)) - 1 >> 0;
			while (true) {
				if (!(zi >= 0)) { break; }
				if (!(x$4 = l.zone, ((zi < 0 || zi >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + zi])).isDST) {
					return zi;
				}
				zi = zi - (1) >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			zi$1 = _i;
			if (!(x$5 = l.zone, ((zi$1 < 0 || zi$1 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.ptr.prototype.firstZoneUsed = function() {
		var _i, _ref, l, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			tx = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	Location.ptr.prototype.lookupName = function(name, unix) {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, i, i$1, isDST, isDST$1, l, nam, name, offset, offset$1, ok, unix, x, x$1, x$2, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; i = $f.i; i$1 = $f.i$1; isDST = $f.isDST; isDST$1 = $f.isDST$1; l = $f.l; nam = $f.nam; name = $f.name; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; unix = $f.unix; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		offset = 0;
		isDST = false;
		ok = false;
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = _r;
		_ref = l.zone;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			zone$1 = (x = l.zone, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			/* */ if (zone$1.name === name) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (zone$1.name === name) { */ case 4:
				_r$1 = l.lookup((x$1 = (new $Int64(0, zone$1.offset)), new $Int64(unix.$high - x$1.$high, unix.$low - x$1.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				nam = _tuple[0];
				offset$1 = _tuple[1];
				isDST$1 = _tuple[2];
				if (nam === zone$1.name) {
					_tmp = offset$1;
					_tmp$1 = isDST$1;
					_tmp$2 = true;
					offset = _tmp;
					isDST = _tmp$1;
					ok = _tmp$2;
					$s = -1; return [offset, isDST, ok];
				}
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		_ref$1 = l.zone;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			zone$2 = (x$2 = l.zone, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			if (zone$2.name === name) {
				_tmp$3 = zone$2.offset;
				_tmp$4 = zone$2.isDST;
				_tmp$5 = true;
				offset = _tmp$3;
				isDST = _tmp$4;
				ok = _tmp$5;
				$s = -1; return [offset, isDST, ok];
			}
			_i$1++;
		}
		$s = -1; return [offset, isDST, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookupName }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.i = i; $f.i$1 = i$1; $f.isDST = isDST; $f.isDST$1 = isDST$1; $f.l = l; $f.nam = nam; $f.name = name; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.unix = unix; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Time.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "AppendFormat", name: "AppendFormat", pkg: "", typ: $funcType([sliceType$3, $String], [sliceType$3], false)}, {prop: "After", name: "After", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "abs", name: "abs", pkg: "time", typ: $funcType([], [$Uint64], false)}, {prop: "locabs", name: "locabs", pkg: "time", typ: $funcType([], [$String, $Int, $Uint64], false)}, {prop: "Date", name: "Date", pkg: "", typ: $funcType([], [$Int, Month, $Int], false)}, {prop: "Year", name: "Year", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", typ: $funcType([], [Month], false)}, {prop: "Day", name: "Day", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Weekday", name: "Weekday", pkg: "", typ: $funcType([], [Weekday], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Clock", name: "Clock", pkg: "", typ: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Hour", name: "Hour", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Minute", name: "Minute", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Second", name: "Second", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Time], [Duration], false)}, {prop: "AddDate", name: "AddDate", pkg: "", typ: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "date", name: "date", pkg: "time", typ: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "UTC", name: "UTC", pkg: "", typ: $funcType([], [Time], false)}, {prop: "Local", name: "Local", pkg: "", typ: $funcType([], [Time], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([ptrType$2], [Time], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "Zone", name: "Zone", pkg: "", typ: $funcType([], [$String, $Int], false)}, {prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Time], false)}];
	ptrType$7.methods = [{prop: "nsec", name: "nsec", pkg: "time", typ: $funcType([], [$Int32], false)}, {prop: "sec", name: "sec", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "unixSec", name: "unixSec", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "addSec", name: "addSec", pkg: "time", typ: $funcType([$Int64], [], false)}, {prop: "setLoc", name: "setLoc", pkg: "time", typ: $funcType([ptrType$2], [], false)}, {prop: "stripMono", name: "stripMono", pkg: "time", typ: $funcType([], [], false)}, {prop: "setMono", name: "setMono", pkg: "time", typ: $funcType([$Int64], [], false)}, {prop: "mono", name: "mono", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$3], [$error], false)}];
	Month.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Weekday.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Duration.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Hours", name: "Hours", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Duration], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Duration], false)}];
	ptrType$2.methods = [{prop: "get", name: "get", pkg: "time", typ: $funcType([], [ptrType$2], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "lookup", name: "lookup", pkg: "time", typ: $funcType([$Int64], [$String, $Int, $Bool, $Int64, $Int64], false)}, {prop: "lookupFirstZone", name: "lookupFirstZone", pkg: "time", typ: $funcType([], [$Int], false)}, {prop: "firstZoneUsed", name: "firstZoneUsed", pkg: "time", typ: $funcType([], [$Bool], false)}, {prop: "lookupName", name: "lookupName", pkg: "time", typ: $funcType([$String, $Int64], [$Int, $Bool, $Bool], false)}];
	ParseError.init("", [{prop: "Layout", name: "Layout", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Value", name: "Value", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "LayoutElem", name: "LayoutElem", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "ValueElem", name: "ValueElem", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Message", name: "Message", anonymous: false, exported: true, typ: $String, tag: ""}]);
	Time.init("time", [{prop: "wall", name: "wall", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "ext", name: "ext", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "loc", name: "loc", anonymous: false, exported: false, typ: ptrType$2, tag: ""}]);
	Location.init("time", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "zone", name: "zone", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "tx", name: "tx", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "cacheStart", name: "cacheStart", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "cacheEnd", name: "cacheEnd", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "cacheZone", name: "cacheZone", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	zone.init("time", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "offset", name: "offset", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "isDST", name: "isDST", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	zoneTrans.init("time", [{prop: "when", name: "when", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "isstd", name: "isstd", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "isutc", name: "isutc", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		localLoc = new Location.ptr("", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		localOnce = new nosync.Once.ptr(false, false);
		std0x = $toNativeArray($kindInt, [260, 265, 524, 526, 528, 274]);
		longDayNames = new sliceType$2(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new sliceType$2(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new sliceType$2(["---", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new sliceType$2(["---", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		months = $toNativeArray($kindString, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		days = $toNativeArray($kindString, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		daysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		utcLoc = new Location.ptr("UTC", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		errLocation = errors.New("time: invalid location name");
		badData = errors.New("malformed time zone information");
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/poll"] = (function() {
	var $pkg = {}, $init, errors, io, atomic, syscall, time, pollDesc, TimeoutError, fdMutex, FD, ptrType, ptrType$1, arrayType, sliceType, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, sliceType$1, ptrType$8, funcType, funcType$1, ptrType$9, ptrType$10, ptrType$11, sliceType$2, ptrType$12, errClosing, consume, runtime_Semacquire, runtime_Semrelease, accept;
	errors = $packages["errors"];
	io = $packages["io"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	pollDesc = $pkg.pollDesc = $newType(0, $kindStruct, "poll.pollDesc", true, "internal/poll", false, function(closing_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.closing = false;
			return;
		}
		this.closing = closing_;
	});
	TimeoutError = $pkg.TimeoutError = $newType(0, $kindStruct, "poll.TimeoutError", true, "internal/poll", true, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	fdMutex = $pkg.fdMutex = $newType(0, $kindStruct, "poll.fdMutex", true, "internal/poll", false, function(state_, rsema_, wsema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = new $Uint64(0, 0);
			this.rsema = 0;
			this.wsema = 0;
			return;
		}
		this.state = state_;
		this.rsema = rsema_;
		this.wsema = wsema_;
	});
	FD = $pkg.FD = $newType(0, $kindStruct, "poll.FD", true, "internal/poll", true, function(fdmu_, Sysfd_, pd_, iovecs_, IsStream_, ZeroReadIsEOF_, isFile_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fdmu = new fdMutex.ptr(new $Uint64(0, 0), 0, 0);
			this.Sysfd = 0;
			this.pd = new pollDesc.ptr(false);
			this.iovecs = ptrType$2.nil;
			this.IsStream = false;
			this.ZeroReadIsEOF = false;
			this.isFile = false;
			return;
		}
		this.fdmu = fdmu_;
		this.Sysfd = Sysfd_;
		this.pd = pd_;
		this.iovecs = iovecs_;
		this.IsStream = IsStream_;
		this.ZeroReadIsEOF = ZeroReadIsEOF_;
		this.isFile = isFile_;
	});
	ptrType = $ptrType($Uint64);
	ptrType$1 = $ptrType($Uint32);
	arrayType = $arrayType($Uint8, 4);
	sliceType = $sliceType(syscall.Iovec);
	ptrType$2 = $ptrType(sliceType);
	ptrType$3 = $ptrType($Uint8);
	ptrType$4 = $ptrType(FD);
	ptrType$5 = $ptrType(pollDesc);
	ptrType$6 = $ptrType(TimeoutError);
	ptrType$7 = $ptrType(fdMutex);
	sliceType$1 = $sliceType($Uint8);
	ptrType$8 = $ptrType(syscall.Stat_t);
	funcType = $funcType([$Uintptr], [], false);
	funcType$1 = $funcType([$Uintptr], [$Bool], false);
	ptrType$9 = $ptrType(syscall.Linger);
	ptrType$10 = $ptrType(syscall.IPMreq);
	ptrType$11 = $ptrType(syscall.IPv6Mreq);
	sliceType$2 = $sliceType(sliceType$1);
	ptrType$12 = $ptrType(sliceType$2);
	pollDesc.ptr.prototype.init = function(fd) {
		var fd, pd;
		pd = this;
		return $ifaceNil;
	};
	pollDesc.prototype.init = function(fd) { return this.$val.init(fd); };
	pollDesc.ptr.prototype.close = function() {
		var pd;
		pd = this;
	};
	pollDesc.prototype.close = function() { return this.$val.close(); };
	pollDesc.ptr.prototype.evict = function() {
		var pd;
		pd = this;
		pd.closing = true;
	};
	pollDesc.prototype.evict = function() { return this.$val.evict(); };
	pollDesc.ptr.prototype.prepare = function(mode, isFile) {
		var isFile, mode, pd;
		pd = this;
		if (pd.closing) {
			return errClosing(isFile);
		}
		return $ifaceNil;
	};
	pollDesc.prototype.prepare = function(mode, isFile) { return this.$val.prepare(mode, isFile); };
	pollDesc.ptr.prototype.prepareRead = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.prepare(114, isFile);
	};
	pollDesc.prototype.prepareRead = function(isFile) { return this.$val.prepareRead(isFile); };
	pollDesc.ptr.prototype.prepareWrite = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.prepare(119, isFile);
	};
	pollDesc.prototype.prepareWrite = function(isFile) { return this.$val.prepareWrite(isFile); };
	pollDesc.ptr.prototype.wait = function(mode, isFile) {
		var isFile, mode, pd;
		pd = this;
		if (pd.closing) {
			return errClosing(isFile);
		}
		return $pkg.ErrTimeout;
	};
	pollDesc.prototype.wait = function(mode, isFile) { return this.$val.wait(mode, isFile); };
	pollDesc.ptr.prototype.waitRead = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.wait(114, isFile);
	};
	pollDesc.prototype.waitRead = function(isFile) { return this.$val.waitRead(isFile); };
	pollDesc.ptr.prototype.waitWrite = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.wait(119, isFile);
	};
	pollDesc.prototype.waitWrite = function(isFile) { return this.$val.waitWrite(isFile); };
	pollDesc.ptr.prototype.pollable = function() {
		return true;
	};
	pollDesc.prototype.pollable = function() { return this.$val.pollable(); };
	FD.ptr.prototype.SetDeadline = function(t) {
		var t;
		return $ifaceNil;
	};
	FD.prototype.SetDeadline = function(t) { return this.$val.SetDeadline(t); };
	FD.ptr.prototype.SetReadDeadline = function(t) {
		var t;
		return $ifaceNil;
	};
	FD.prototype.SetReadDeadline = function(t) { return this.$val.SetReadDeadline(t); };
	FD.ptr.prototype.SetWriteDeadline = function(t) {
		var t;
		return $ifaceNil;
	};
	FD.prototype.SetWriteDeadline = function(t) { return this.$val.SetWriteDeadline(t); };
	errClosing = function(isFile) {
		var isFile;
		if (isFile) {
			return $pkg.ErrFileClosing;
		}
		return $pkg.ErrNetClosing;
	};
	TimeoutError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "i/o timeout";
	};
	TimeoutError.prototype.Error = function() { return this.$val.Error(); };
	TimeoutError.ptr.prototype.Timeout = function() {
		var e;
		e = this;
		return true;
	};
	TimeoutError.prototype.Timeout = function() { return this.$val.Timeout(); };
	TimeoutError.ptr.prototype.Temporary = function() {
		var e;
		e = this;
		return true;
	};
	TimeoutError.prototype.Temporary = function() { return this.$val.Temporary(); };
	consume = function(v, n) {
		var ln0, n, v, x, x$1, x$2, x$3;
		while (true) {
			if (!(v.$get().$length > 0)) { break; }
			ln0 = (new $Int64(0, (x = v.$get(), (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).$length));
			if ((ln0.$high > n.$high || (ln0.$high === n.$high && ln0.$low > n.$low))) {
				(x$2 = v.$get(), (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0] = $subslice((x$1 = v.$get(), (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])), $flatten64(n))));
				return;
			}
			n = (x$3 = ln0, new $Int64(n.$high - x$3.$high, n.$low - x$3.$low));
			v.$set($subslice((v.$get()), 1));
		}
	};
	fdMutex.ptr.prototype.incref = function() {
		var mu, new$1, old, x, x$1;
		mu = this;
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				return false;
			}
			new$1 = new $Uint64(old.$high + 0, old.$low + 8);
			if ((x$1 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				return true;
			}
		}
	};
	fdMutex.prototype.incref = function() { return this.$val.incref(); };
	fdMutex.ptr.prototype.increfAndClose = function() {
		var mu, new$1, old, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		mu = this;
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				return false;
			}
			new$1 = (x$1 = new $Uint64(old.$high | 0, (old.$low | 1) >>> 0), new $Uint64(x$1.$high + 0, x$1.$low + 8));
			if ((x$2 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$2.$high === 0 && x$2.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = (x$3 = new $Uint64(2147483647, 4286578688), new $Uint64(new$1.$high & ~x$3.$high, (new$1.$low & ~x$3.$low) >>> 0));
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				while (true) {
					if (!(!((x$4 = new $Uint64(old.$high & 2047, (old.$low & 4286578688) >>> 0), (x$4.$high === 0 && x$4.$low === 0))))) { break; }
					old = (x$5 = new $Uint64(0, 8388608), new $Uint64(old.$high - x$5.$high, old.$low - x$5.$low));
					runtime_Semrelease((mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType$1(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu))));
				}
				while (true) {
					if (!(!((x$6 = new $Uint64(old.$high & 2147481600, (old.$low & 0) >>> 0), (x$6.$high === 0 && x$6.$low === 0))))) { break; }
					old = (x$7 = new $Uint64(2048, 0), new $Uint64(old.$high - x$7.$high, old.$low - x$7.$low));
					runtime_Semrelease((mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType$1(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu))));
				}
				return true;
			}
		}
	};
	fdMutex.prototype.increfAndClose = function() { return this.$val.increfAndClose(); };
	fdMutex.ptr.prototype.decref = function() {
		var mu, new$1, old, x, x$1;
		mu = this;
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if ((x = new $Uint64(old.$high & 0, (old.$low & 8388600) >>> 0), (x.$high === 0 && x.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = new $Uint64(old.$high - 0, old.$low - 8);
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				return (x$1 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388601) >>> 0), (x$1.$high === 0 && x$1.$low === 1));
			}
		}
	};
	fdMutex.prototype.decref = function() { return this.$val.decref(); };
	fdMutex.ptr.prototype.rwlock = function(read) {
		var _tmp, _tmp$1, _tmp$2, mu, mutexBit, mutexMask, mutexSema, mutexWait, new$1, old, read, x, x$1, x$2, x$3, x$4, x$5;
		mu = this;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		_tmp$2 = new $Uint64(0, 0);
		mutexBit = _tmp;
		mutexWait = _tmp$1;
		mutexMask = _tmp$2;
		mutexSema = ptrType$1.nil;
		if (read) {
			mutexBit = new $Uint64(0, 2);
			mutexWait = new $Uint64(0, 8388608);
			mutexMask = new $Uint64(2047, 4286578688);
			mutexSema = (mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType$1(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)));
		} else {
			mutexBit = new $Uint64(0, 4);
			mutexWait = new $Uint64(2048, 0);
			mutexMask = new $Uint64(2147481600, 0);
			mutexSema = (mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType$1(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)));
		}
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				return false;
			}
			new$1 = new $Uint64(0, 0);
			if ((x$1 = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				new$1 = (x$2 = new $Uint64(old.$high | mutexBit.$high, (old.$low | mutexBit.$low) >>> 0), new $Uint64(x$2.$high + 0, x$2.$low + 8));
				if ((x$3 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$3.$high === 0 && x$3.$low === 0))) {
					$panic(new $String("inconsistent poll.fdMutex"));
				}
			} else {
				new$1 = new $Uint64(old.$high + mutexWait.$high, old.$low + mutexWait.$low);
				if ((x$4 = new $Uint64(new$1.$high & mutexMask.$high, (new$1.$low & mutexMask.$low) >>> 0), (x$4.$high === 0 && x$4.$low === 0))) {
					$panic(new $String("inconsistent poll.fdMutex"));
				}
			}
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				if ((x$5 = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0))) {
					return true;
				}
				runtime_Semacquire(mutexSema);
			}
		}
	};
	fdMutex.prototype.rwlock = function(read) { return this.$val.rwlock(read); };
	fdMutex.ptr.prototype.rwunlock = function(read) {
		var _tmp, _tmp$1, _tmp$2, mu, mutexBit, mutexMask, mutexSema, mutexWait, new$1, old, read, x, x$1, x$2, x$3, x$4, x$5, x$6;
		mu = this;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		_tmp$2 = new $Uint64(0, 0);
		mutexBit = _tmp;
		mutexWait = _tmp$1;
		mutexMask = _tmp$2;
		mutexSema = ptrType$1.nil;
		if (read) {
			mutexBit = new $Uint64(0, 2);
			mutexWait = new $Uint64(0, 8388608);
			mutexMask = new $Uint64(2047, 4286578688);
			mutexSema = (mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType$1(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)));
		} else {
			mutexBit = new $Uint64(0, 4);
			mutexWait = new $Uint64(2048, 0);
			mutexMask = new $Uint64(2147481600, 0);
			mutexSema = (mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType$1(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)));
		}
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if ((x = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x.$high === 0 && x.$low === 0)) || (x$1 = new $Uint64(old.$high & 0, (old.$low & 8388600) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = (x$2 = new $Uint64(old.$high & ~mutexBit.$high, (old.$low & ~mutexBit.$low) >>> 0), new $Uint64(x$2.$high - 0, x$2.$low - 8));
			if (!((x$3 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$3.$high === 0 && x$3.$low === 0)))) {
				new$1 = (x$4 = mutexWait, new $Uint64(new$1.$high - x$4.$high, new$1.$low - x$4.$low));
			}
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				if (!((x$5 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0)))) {
					runtime_Semrelease(mutexSema);
				}
				return (x$6 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388601) >>> 0), (x$6.$high === 0 && x$6.$low === 1));
			}
		}
	};
	fdMutex.prototype.rwunlock = function(read) { return this.$val.rwunlock(read); };
	runtime_Semacquire = function() {
		$throwRuntimeError("native function not implemented: internal/poll.runtime_Semacquire");
	};
	runtime_Semrelease = function() {
		$throwRuntimeError("native function not implemented: internal/poll.runtime_Semrelease");
	};
	FD.ptr.prototype.incref = function() {
		var fd;
		fd = this;
		if (!fd.fdmu.incref()) {
			return errClosing(fd.isFile);
		}
		return $ifaceNil;
	};
	FD.prototype.incref = function() { return this.$val.incref(); };
	FD.ptr.prototype.decref = function() {
		var _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		/* */ if (fd.fdmu.decref()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (fd.fdmu.decref()) { */ case 1:
			_r = fd.destroy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.decref }; } $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.decref = function() { return this.$val.decref(); };
	FD.ptr.prototype.readLock = function() {
		var fd;
		fd = this;
		if (!fd.fdmu.rwlock(true)) {
			return errClosing(fd.isFile);
		}
		return $ifaceNil;
	};
	FD.prototype.readLock = function() { return this.$val.readLock(); };
	FD.ptr.prototype.readUnlock = function() {
		var _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		/* */ if (fd.fdmu.rwunlock(true)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (fd.fdmu.rwunlock(true)) { */ case 1:
			_r = fd.destroy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.readUnlock }; } $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.readUnlock = function() { return this.$val.readUnlock(); };
	FD.ptr.prototype.writeLock = function() {
		var fd;
		fd = this;
		if (!fd.fdmu.rwlock(false)) {
			return errClosing(fd.isFile);
		}
		return $ifaceNil;
	};
	FD.prototype.writeLock = function() { return this.$val.writeLock(); };
	FD.ptr.prototype.writeUnlock = function() {
		var _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		/* */ if (fd.fdmu.rwunlock(false)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (fd.fdmu.rwunlock(false)) { */ case 1:
			_r = fd.destroy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.writeUnlock }; } $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.writeUnlock = function() { return this.$val.writeUnlock(); };
	FD.ptr.prototype.eofError = function(n, err) {
		var err, fd, n;
		fd = this;
		if ((n === 0) && $interfaceIsEqual(err, $ifaceNil) && fd.ZeroReadIsEOF) {
			return io.EOF;
		}
		return err;
	};
	FD.prototype.eofError = function(n, err) { return this.$val.eofError(n, err); };
	FD.ptr.prototype.Fchmod = function(mode) {
		var err, fd, mode, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; mode = $f.mode; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fchmod(fd.Sysfd, mode);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fchmod }; } $f.err = err; $f.fd = fd; $f.mode = mode; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fchmod = function(mode) { return this.$val.Fchmod(mode); };
	FD.ptr.prototype.Fchown = function(uid, gid) {
		var err, fd, gid, uid, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; gid = $f.gid; uid = $f.uid; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fchown(fd.Sysfd, uid, gid);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fchown }; } $f.err = err; $f.fd = fd; $f.gid = gid; $f.uid = uid; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fchown = function(uid, gid) { return this.$val.Fchown(uid, gid); };
	FD.ptr.prototype.Ftruncate = function(size) {
		var err, fd, size, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; size = $f.size; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Ftruncate(fd.Sysfd, size);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Ftruncate }; } $f.err = err; $f.fd = fd; $f.size = size; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Ftruncate = function(size) { return this.$val.Ftruncate(size); };
	FD.ptr.prototype.Fsync = function() {
		var err, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fsync(fd.Sysfd);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fsync }; } $f.err = err; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fsync = function() { return this.$val.Fsync(); };
	FD.ptr.prototype.Init = function(net, pollable) {
		var fd, net, pollable;
		fd = this;
		if (net === "file") {
			fd.isFile = true;
		}
		if (!pollable) {
			return $ifaceNil;
		}
		return fd.pd.init(fd);
	};
	FD.prototype.Init = function(net, pollable) { return this.$val.Init(net, pollable); };
	FD.ptr.prototype.destroy = function() {
		var _r, err, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		fd.pd.close();
		_r = $pkg.CloseFunc(fd.Sysfd); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		fd.Sysfd = -1;
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.destroy }; } $f._r = _r; $f.err = err; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.destroy = function() { return this.$val.destroy(); };
	FD.ptr.prototype.Close = function() {
		var _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		if (!fd.fdmu.increfAndClose()) {
			$s = -1; return errClosing(fd.isFile);
		}
		fd.pd.evict();
		_r = fd.decref(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Close }; } $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.Close = function() { return this.$val.Close(); };
	FD.ptr.prototype.Shutdown = function(how) {
		var err, fd, how, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; how = $f.how; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Shutdown(fd.Sysfd, how);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Shutdown }; } $f.err = err; $f.fd = fd; $f.how = how; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Shutdown = function(how) { return this.$val.Shutdown(how); };
	FD.ptr.prototype.Read = function(p) {
		var _tuple, err, err$1, err$2, fd, n, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; n = $f.n; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.readLock();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		if (p.$length === 0) {
			$s = -1; return [0, $ifaceNil];
		}
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, err$1];
		}
		if (fd.IsStream && p.$length > 1073741824) {
			p = $subslice(p, 0, 1073741824);
		}
		while (true) {
			_tuple = syscall.Read(fd.Sysfd, p);
			n = _tuple[0];
			err$2 = _tuple[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$s = -1; return [n, err$2];
		}
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Read }; } $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.n = n; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Read = function(p) { return this.$val.Read(p); };
	FD.ptr.prototype.Pread = function(p, off) {
		var _r, _tuple, err, err$1, fd, n, off, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; fd = $f.fd; n = $f.n; off = $f.off; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		if (fd.IsStream && p.$length > 1073741824) {
			p = $subslice(p, 0, 1073741824);
		}
		_tuple = syscall.Pread(fd.Sysfd, p, off);
		n = _tuple[0];
		err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			n = 0;
		}
		_r = fd.decref(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		err$1 = fd.eofError(n, err$1);
		$s = -1; return [n, err$1];
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Pread }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.fd = fd; $f.n = n; $f.off = off; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.Pread = function(p, off) { return this.$val.Pread(p, off); };
	FD.ptr.prototype.ReadFrom = function(p) {
		var _tuple, err, err$1, err$2, fd, n, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; n = $f.n; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.readLock();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, $ifaceNil, err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, $ifaceNil, err$1];
		}
		while (true) {
			_tuple = syscall.Recvfrom(fd.Sysfd, p, 0);
			n = _tuple[0];
			sa = _tuple[1];
			err$2 = _tuple[2];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$s = -1; return [n, sa, err$2];
		}
		$s = -1; return [0, $ifaceNil, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.ReadFrom }; } $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.n = n; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.ReadFrom = function(p) { return this.$val.ReadFrom(p); };
	FD.ptr.prototype.ReadMsg = function(p, oob) {
		var _tuple, err, err$1, err$2, fd, flags, n, oob, oobn, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; flags = $f.flags; n = $f.n; oob = $f.oob; oobn = $f.oobn; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.readLock();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, 0, 0, $ifaceNil, err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, 0, 0, $ifaceNil, err$1];
		}
		while (true) {
			_tuple = syscall.Recvmsg(fd.Sysfd, p, oob, 0);
			n = _tuple[0];
			oobn = _tuple[1];
			flags = _tuple[2];
			sa = _tuple[3];
			err$2 = _tuple[4];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$s = -1; return [n, oobn, flags, sa, err$2];
		}
		$s = -1; return [0, 0, 0, $ifaceNil, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, 0, $ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.ReadMsg }; } $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.flags = flags; $f.n = n; $f.oob = oob; $f.oobn = oobn; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.ReadMsg = function(p, oob) { return this.$val.ReadMsg(p, oob); };
	FD.ptr.prototype.Write = function(p) {
		var _tuple, err, err$1, err$2, fd, max, n, nn, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; max = $f.max; n = $f.n; nn = $f.nn; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.writeLock();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, err$1];
		}
		nn = 0;
		while (true) {
			max = p.$length;
			if (fd.IsStream && (max - nn >> 0) > 1073741824) {
				max = nn + 1073741824 >> 0;
			}
			_tuple = syscall.Write(fd.Sysfd, $subslice(p, nn, max));
			n = _tuple[0];
			err$2 = _tuple[1];
			if (n > 0) {
				nn = nn + (n) >> 0;
			}
			if (nn === p.$length) {
				$s = -1; return [nn, err$2];
			}
			if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					continue;
				}
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return [nn, err$2];
			}
			if (n === 0) {
				$s = -1; return [nn, io.ErrUnexpectedEOF];
			}
		}
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Write }; } $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.max = max; $f.n = n; $f.nn = nn; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Write = function(p) { return this.$val.Write(p); };
	FD.ptr.prototype.Pwrite = function(p, off) {
		var _tuple, err, err$1, fd, max, n, nn, off, p, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; fd = $f.fd; max = $f.max; n = $f.n; nn = $f.nn; off = $f.off; p = $f.p; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		nn = 0;
		while (true) {
			max = p.$length;
			if (fd.IsStream && (max - nn >> 0) > 1073741824) {
				max = nn + 1073741824 >> 0;
			}
			_tuple = syscall.Pwrite(fd.Sysfd, $subslice(p, nn, max), (x = (new $Int64(0, nn)), new $Int64(off.$high + x.$high, off.$low + x.$low)));
			n = _tuple[0];
			err$1 = _tuple[1];
			if (n > 0) {
				nn = nn + (n) >> 0;
			}
			if (nn === p.$length) {
				$s = -1; return [nn, err$1];
			}
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [nn, err$1];
			}
			if (n === 0) {
				$s = -1; return [nn, io.ErrUnexpectedEOF];
			}
		}
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Pwrite }; } $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.fd = fd; $f.max = max; $f.n = n; $f.nn = nn; $f.off = off; $f.p = p; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Pwrite = function(p, off) { return this.$val.Pwrite(p, off); };
	FD.ptr.prototype.WriteTo = function(p, sa) {
		var _r, err, err$1, err$2, fd, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.writeLock();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, err$1];
		}
		/* while (true) { */ case 1:
			_r = syscall.Sendto(fd.Sysfd, p, 0, sa); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err$2 = _r;
			if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 1; continue;
				}
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return [0, err$2];
			}
			$s = -1; return [p.$length, $ifaceNil];
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.WriteTo }; } $f._r = _r; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.WriteTo = function(p, sa) { return this.$val.WriteTo(p, sa); };
	FD.ptr.prototype.WriteMsg = function(p, oob, sa) {
		var _r, _tuple, err, err$1, err$2, fd, n, oob, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; n = $f.n; oob = $f.oob; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.writeLock();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, 0, err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, 0, err$1];
		}
		/* while (true) { */ case 1:
			_r = syscall.SendmsgN(fd.Sysfd, p, oob, sa, 0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err$2 = _tuple[1];
			if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 1; continue;
				}
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return [n, 0, err$2];
			}
			$s = -1; return [n, oob.$length, err$2];
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, 0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.WriteMsg }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.n = n; $f.oob = oob; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.WriteMsg = function(p, oob, sa) { return this.$val.WriteMsg(p, oob, sa); };
	FD.ptr.prototype.Accept = function() {
		var _1, _r, _tuple, err, err$1, err$2, errcall, fd, rsa, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; errcall = $f.errcall; fd = $f.fd; rsa = $f.rsa; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.readLock();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [-1, $ifaceNil, "", err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [-1, $ifaceNil, "", err$1];
		}
		/* while (true) { */ case 1:
			_r = accept(fd.Sysfd); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			s = _tuple[0];
			rsa = _tuple[1];
			errcall = _tuple[2];
			err$2 = _tuple[3];
			if ($interfaceIsEqual(err$2, $ifaceNil)) {
				$s = -1; return [s, rsa, "", err$2];
			}
			_1 = err$2;
			if ($interfaceIsEqual(_1, new syscall.Errno((35)))) {
				if (fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 1; continue;
					}
				}
			} else if ($interfaceIsEqual(_1, new syscall.Errno((53)))) {
				/* continue; */ $s = 1; continue;
			}
			$s = -1; return [-1, $ifaceNil, errcall, err$2];
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, $ifaceNil, "", $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil, "", $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Accept }; } $f._1 = _1; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.errcall = errcall; $f.fd = fd; $f.rsa = rsa; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Accept = function() { return this.$val.Accept(); };
	FD.ptr.prototype.Seek = function(offset, whence) {
		var err, fd, offset, whence, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; offset = $f.offset; whence = $f.whence; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new $Int64(0, 0), err];
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Seek(fd.Sysfd, offset, whence);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [new $Int64(0, 0), $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Seek }; } $f.err = err; $f.fd = fd; $f.offset = offset; $f.whence = whence; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	FD.ptr.prototype.ReadDirent = function(buf) {
		var _tuple, buf, err, err$1, fd, n, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; buf = $f.buf; err = $f.err; err$1 = $f.err$1; fd = $f.fd; n = $f.n; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		while (true) {
			_tuple = syscall.ReadDirent(fd.Sysfd, buf);
			n = _tuple[0];
			err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$1, new syscall.Errno(35)) && fd.pd.pollable()) {
					err$1 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$1, $ifaceNil)) {
						continue;
					}
				}
			}
			$s = -1; return [n, err$1];
		}
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.ReadDirent }; } $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.err$1 = err$1; $f.fd = fd; $f.n = n; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.ReadDirent = function(buf) { return this.$val.ReadDirent(buf); };
	FD.ptr.prototype.Fchdir = function() {
		var err, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fchdir(fd.Sysfd);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fchdir }; } $f.err = err; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fchdir = function() { return this.$val.Fchdir(); };
	FD.ptr.prototype.Fstat = function(s) {
		var err, fd, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fstat(fd.Sysfd, s);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fstat }; } $f.err = err; $f.fd = fd; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fstat = function(s) { return this.$val.Fstat(s); };
	FD.ptr.prototype.WaitWrite = function() {
		var fd;
		fd = this;
		return fd.pd.waitWrite(fd.isFile);
	};
	FD.prototype.WaitWrite = function() { return this.$val.WaitWrite(); };
	FD.ptr.prototype.RawControl = function(f) {
		var err, f, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; f = $f.f; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$r = f(((fd.Sysfd >>> 0))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.RawControl }; } $f.err = err; $f.f = f; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.RawControl = function(f) { return this.$val.RawControl(f); };
	FD.ptr.prototype.RawRead = function(f) {
		var _r, err, err$1, err$2, f, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; f = $f.f; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.readLock();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		/* while (true) { */ case 1:
			_r = f(((fd.Sysfd >>> 0))); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r) { */ case 3:
				$s = -1; return $ifaceNil;
			/* } */ case 4:
			err$2 = fd.pd.waitRead(fd.isFile);
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return err$2;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.RawRead }; } $f._r = _r; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.f = f; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.RawRead = function(f) { return this.$val.RawRead(f); };
	FD.ptr.prototype.RawWrite = function(f) {
		var _r, err, err$1, err$2, f, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; f = $f.f; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.writeLock();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		/* while (true) { */ case 1:
			_r = f(((fd.Sysfd >>> 0))); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r) { */ case 3:
				$s = -1; return $ifaceNil;
			/* } */ case 4:
			err$2 = fd.pd.waitWrite(fd.isFile);
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return err$2;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.RawWrite }; } $f._r = _r; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.f = f; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.RawWrite = function(f) { return this.$val.RawWrite(f); };
	FD.ptr.prototype.SetsockoptInt = function(level, name, arg) {
		var arg, err, fd, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; arg = $f.arg; err = $f.err; fd = $f.fd; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptInt(fd.Sysfd, level, name, arg);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptInt }; } $f.arg = arg; $f.err = err; $f.fd = fd; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptInt = function(level, name, arg) { return this.$val.SetsockoptInt(level, name, arg); };
	FD.ptr.prototype.SetsockoptInet4Addr = function(level, name, arg) {
		var arg, err, fd, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; arg = $f.arg; err = $f.err; fd = $f.fd; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptInet4Addr(fd.Sysfd, level, name, $clone(arg, arrayType));
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptInet4Addr }; } $f.arg = arg; $f.err = err; $f.fd = fd; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptInet4Addr = function(level, name, arg) { return this.$val.SetsockoptInet4Addr(level, name, arg); };
	FD.ptr.prototype.SetsockoptLinger = function(level, name, l) {
		var err, fd, l, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; l = $f.l; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptLinger(fd.Sysfd, level, name, l);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptLinger }; } $f.err = err; $f.fd = fd; $f.l = l; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptLinger = function(level, name, l) { return this.$val.SetsockoptLinger(level, name, l); };
	FD.ptr.prototype.SetsockoptByte = function(level, name, arg) {
		var arg, err, fd, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; arg = $f.arg; err = $f.err; fd = $f.fd; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptByte(fd.Sysfd, level, name, arg);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptByte }; } $f.arg = arg; $f.err = err; $f.fd = fd; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptByte = function(level, name, arg) { return this.$val.SetsockoptByte(level, name, arg); };
	FD.ptr.prototype.SetsockoptIPMreq = function(level, name, mreq) {
		var err, fd, level, mreq, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; level = $f.level; mreq = $f.mreq; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptIPMreq(fd.Sysfd, level, name, mreq);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptIPMreq }; } $f.err = err; $f.fd = fd; $f.level = level; $f.mreq = mreq; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptIPMreq = function(level, name, mreq) { return this.$val.SetsockoptIPMreq(level, name, mreq); };
	FD.ptr.prototype.SetsockoptIPv6Mreq = function(level, name, mreq) {
		var err, fd, level, mreq, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; level = $f.level; mreq = $f.mreq; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptIPv6Mreq(fd.Sysfd, level, name, mreq);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptIPv6Mreq }; } $f.err = err; $f.fd = fd; $f.level = level; $f.mreq = mreq; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptIPv6Mreq = function(level, name, mreq) { return this.$val.SetsockoptIPv6Mreq(level, name, mreq); };
	accept = function(s) {
		var _r, _r$1, _tuple, err, ns, s, sa, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; ns = $f.ns; s = $f.s; sa = $f.sa; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.AcceptFunc(s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ns = _tuple[0];
		sa = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			syscall.CloseOnExec(ns);
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [-1, $ifaceNil, "accept", err];
		}
		err = syscall.SetNonblock(ns, true);
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = $pkg.CloseFunc(ns); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			$s = -1; return [-1, $ifaceNil, "setnonblock", err];
		/* } */ case 3:
		$s = -1; return [ns, sa, "", $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: accept }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.ns = ns; $f.s = s; $f.sa = sa; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.ptr.prototype.Writev = function(v) {
		var _i, _ref, _tuple, chunk, e0, err, err$1, err$2, fd, iovecs, maxVec, n, v, wrote, x, x$1, x$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; _tuple = $f._tuple; chunk = $f.chunk; e0 = $f.e0; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; iovecs = $f.iovecs; maxVec = $f.maxVec; n = $f.n; v = $f.v; wrote = $f.wrote; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		iovecs = [iovecs];
		fd = this;
		err = fd.writeLock();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new $Int64(0, 0), err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [new $Int64(0, 0), err$1];
		}
		iovecs[0] = sliceType.nil;
		if (!(fd.iovecs === ptrType$2.nil)) {
			iovecs[0] = fd.iovecs.$get();
		}
		maxVec = 1024;
		n = new $Int64(0, 0);
		err$2 = $ifaceNil;
		/* while (true) { */ case 1:
			/* if (!(v.$get().$length > 0)) { break; } */ if(!(v.$get().$length > 0)) { $s = 2; continue; }
			iovecs[0] = $subslice(iovecs[0], 0, 0);
			_ref = v.$get();
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				chunk = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (chunk.$length === 0) {
					_i++;
					/* continue; */ $s = 3; continue;
				}
				iovecs[0] = $append(iovecs[0], new syscall.Iovec.ptr($indexPtr(chunk.$array, chunk.$offset + 0, ptrType$3), new $Uint64(0, 0)));
				if (fd.IsStream && chunk.$length > 1073741824) {
					(x = iovecs[0].$length - 1 >> 0, ((x < 0 || x >= iovecs[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : iovecs[0].$array[iovecs[0].$offset + x])).SetLen(1073741824);
					/* break; */ $s = 4; continue;
				}
				(x$1 = iovecs[0].$length - 1 >> 0, ((x$1 < 0 || x$1 >= iovecs[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : iovecs[0].$array[iovecs[0].$offset + x$1])).SetLen(chunk.$length);
				if (iovecs[0].$length === maxVec) {
					/* break; */ $s = 4; continue;
				}
				_i++;
			/* } */ $s = 3; continue; case 4:
			if (iovecs[0].$length === 0) {
				/* break; */ $s = 2; continue;
			}
			fd.iovecs = (iovecs.$ptr || (iovecs.$ptr = new ptrType$2(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, iovecs)));
			_tuple = syscall.Syscall(121, ((fd.Sysfd >>> 0)), (($sliceToArray(iovecs[0]))), ((iovecs[0].$length >>> 0)));
			wrote = _tuple[0];
			e0 = _tuple[2];
			if (wrote === 4294967295) {
				wrote = 0;
			}
			$r = $pkg.TestHookDidWritev(((wrote >> 0))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			n = (x$2 = (new $Int64(0, wrote.constructor === Number ? wrote : 1)), new $Int64(n.$high + x$2.$high, n.$low + x$2.$low));
			consume(v, (new $Int64(0, wrote.constructor === Number ? wrote : 1)));
			if (e0 === 35) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 1; continue;
				}
			} else if (!((e0 === 0))) {
				err$2 = new syscall.Errno((e0));
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				/* break; */ $s = 2; continue;
			}
			if ((n.$high === 0 && n.$low === 0)) {
				err$2 = io.ErrUnexpectedEOF;
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [n, err$2];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [new $Int64(0, 0), $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Writev }; } $f._i = _i; $f._ref = _ref; $f._tuple = _tuple; $f.chunk = chunk; $f.e0 = e0; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.iovecs = iovecs; $f.maxVec = maxVec; $f.n = n; $f.v = v; $f.wrote = wrote; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Writev = function(v) { return this.$val.Writev(v); };
	ptrType$5.methods = [{prop: "init", name: "init", pkg: "internal/poll", typ: $funcType([ptrType$4], [$error], false)}, {prop: "close", name: "close", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "evict", name: "evict", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "prepare", name: "prepare", pkg: "internal/poll", typ: $funcType([$Int, $Bool], [$error], false)}, {prop: "prepareRead", name: "prepareRead", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "prepareWrite", name: "prepareWrite", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "wait", name: "wait", pkg: "internal/poll", typ: $funcType([$Int, $Bool], [$error], false)}, {prop: "waitRead", name: "waitRead", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "waitWrite", name: "waitWrite", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "waitCanceled", name: "waitCanceled", pkg: "internal/poll", typ: $funcType([$Int], [], false)}, {prop: "pollable", name: "pollable", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}];
	ptrType$6.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$7.methods = [{prop: "incref", name: "incref", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "increfAndClose", name: "increfAndClose", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "decref", name: "decref", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "rwlock", name: "rwlock", pkg: "internal/poll", typ: $funcType([$Bool], [$Bool], false)}, {prop: "rwunlock", name: "rwunlock", pkg: "internal/poll", typ: $funcType([$Bool], [$Bool], false)}];
	ptrType$4.methods = [{prop: "SetDeadline", name: "SetDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetReadDeadline", name: "SetReadDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetWriteDeadline", name: "SetWriteDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "incref", name: "incref", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "decref", name: "decref", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "readLock", name: "readLock", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "readUnlock", name: "readUnlock", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "writeLock", name: "writeLock", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "writeUnlock", name: "writeUnlock", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "eofError", name: "eofError", pkg: "internal/poll", typ: $funcType([$Int, $error], [$error], false)}, {prop: "Fchmod", name: "Fchmod", pkg: "", typ: $funcType([$Uint32], [$error], false)}, {prop: "Fchown", name: "Fchown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Ftruncate", name: "Ftruncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Fsync", name: "Fsync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Init", name: "Init", pkg: "", typ: $funcType([$String, $Bool], [$error], false)}, {prop: "destroy", name: "destroy", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Shutdown", name: "Shutdown", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "Pread", name: "Pread", pkg: "", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([sliceType$1], [$Int, syscall.Sockaddr, $error], false)}, {prop: "ReadMsg", name: "ReadMsg", pkg: "", typ: $funcType([sliceType$1, sliceType$1], [$Int, $Int, $Int, syscall.Sockaddr, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "Pwrite", name: "Pwrite", pkg: "", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([sliceType$1, syscall.Sockaddr], [$Int, $error], false)}, {prop: "WriteMsg", name: "WriteMsg", pkg: "", typ: $funcType([sliceType$1, sliceType$1, syscall.Sockaddr], [$Int, $Int, $error], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([], [$Int, syscall.Sockaddr, $String, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "ReadDirent", name: "ReadDirent", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "Fchdir", name: "Fchdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Fstat", name: "Fstat", pkg: "", typ: $funcType([ptrType$8], [$error], false)}, {prop: "WaitWrite", name: "WaitWrite", pkg: "", typ: $funcType([], [$error], false)}, {prop: "RawControl", name: "RawControl", pkg: "", typ: $funcType([funcType], [$error], false)}, {prop: "RawRead", name: "RawRead", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "RawWrite", name: "RawWrite", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "SetsockoptInt", name: "SetsockoptInt", pkg: "", typ: $funcType([$Int, $Int, $Int], [$error], false)}, {prop: "SetsockoptInet4Addr", name: "SetsockoptInet4Addr", pkg: "", typ: $funcType([$Int, $Int, arrayType], [$error], false)}, {prop: "SetsockoptLinger", name: "SetsockoptLinger", pkg: "", typ: $funcType([$Int, $Int, ptrType$9], [$error], false)}, {prop: "SetsockoptByte", name: "SetsockoptByte", pkg: "", typ: $funcType([$Int, $Int, $Uint8], [$error], false)}, {prop: "SetsockoptIPMreq", name: "SetsockoptIPMreq", pkg: "", typ: $funcType([$Int, $Int, ptrType$10], [$error], false)}, {prop: "SetsockoptIPv6Mreq", name: "SetsockoptIPv6Mreq", pkg: "", typ: $funcType([$Int, $Int, ptrType$11], [$error], false)}, {prop: "Writev", name: "Writev", pkg: "", typ: $funcType([ptrType$12], [$Int64, $error], false)}];
	pollDesc.init("internal/poll", [{prop: "closing", name: "closing", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	TimeoutError.init("", []);
	fdMutex.init("internal/poll", [{prop: "state", name: "state", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "rsema", name: "rsema", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "wsema", name: "wsema", anonymous: false, exported: false, typ: $Uint32, tag: ""}]);
	FD.init("internal/poll", [{prop: "fdmu", name: "fdmu", anonymous: false, exported: false, typ: fdMutex, tag: ""}, {prop: "Sysfd", name: "Sysfd", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "pd", name: "pd", anonymous: false, exported: false, typ: pollDesc, tag: ""}, {prop: "iovecs", name: "iovecs", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "IsStream", name: "IsStream", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "ZeroReadIsEOF", name: "ZeroReadIsEOF", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "isFile", name: "isFile", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrNetClosing = errors.New("use of closed network connection");
		$pkg.ErrFileClosing = errors.New("use of closed file");
		$pkg.ErrTimeout = new TimeoutError.ptr();
		$pkg.TestHookDidWritev = (function(wrote) {
			var wrote;
		});
		$pkg.CloseFunc = syscall.Close;
		$pkg.AcceptFunc = syscall.Accept;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, $init, errors, js, poll, io, runtime, sync, atomic, syscall, time, PathError, SyscallError, LinkError, file, dirInfo, File, FileInfo, FileMode, fileStat, sliceType, ptrType, sliceType$1, ptrType$1, sliceType$2, ptrType$2, ptrType$3, ptrType$4, arrayType, sliceType$5, ptrType$12, ptrType$13, funcType$1, ptrType$15, arrayType$3, arrayType$5, ptrType$16, errFinished, lstat, useSyscallwd, runtime_args, init, NewSyscallError, IsNotExist, underlyingError, wrapSyscallError, isNotExist, sigpipe, syscallMode, NewFile, newFile, epipecheck, init$1, useSyscallwdDarwin, basename, init$2, fillFileStatFromSys, timespecToTime, Lstat;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	poll = $packages["internal/poll"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	PathError = $pkg.PathError = $newType(0, $kindStruct, "os.PathError", true, "os", true, function(Op_, Path_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Path = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Path = Path_;
		this.Err = Err_;
	});
	SyscallError = $pkg.SyscallError = $newType(0, $kindStruct, "os.SyscallError", true, "os", true, function(Syscall_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Syscall = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Syscall = Syscall_;
		this.Err = Err_;
	});
	LinkError = $pkg.LinkError = $newType(0, $kindStruct, "os.LinkError", true, "os", true, function(Op_, Old_, New_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Old = "";
			this.New = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Old = Old_;
		this.New = New_;
		this.Err = Err_;
	});
	file = $pkg.file = $newType(0, $kindStruct, "os.file", true, "os", false, function(pfd_, name_, dirinfo_, nonblock_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pfd = new poll.FD.ptr(new poll.fdMutex.ptr(new $Uint64(0, 0), 0, 0), 0, new poll.pollDesc.ptr(false), ptrType$12.nil, false, false, false);
			this.name = "";
			this.dirinfo = ptrType$1.nil;
			this.nonblock = false;
			return;
		}
		this.pfd = pfd_;
		this.name = name_;
		this.dirinfo = dirinfo_;
		this.nonblock = nonblock_;
	});
	dirInfo = $pkg.dirInfo = $newType(0, $kindStruct, "os.dirInfo", true, "os", false, function(buf_, nbuf_, bufp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType$2.nil;
			this.nbuf = 0;
			this.bufp = 0;
			return;
		}
		this.buf = buf_;
		this.nbuf = nbuf_;
		this.bufp = bufp_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "os.File", true, "os", true, function(file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$13.nil;
			return;
		}
		this.file = file_;
	});
	FileInfo = $pkg.FileInfo = $newType(8, $kindInterface, "os.FileInfo", true, "os", true, null);
	FileMode = $pkg.FileMode = $newType(4, $kindUint32, "os.FileMode", true, "os", true, null);
	fileStat = $pkg.fileStat = $newType(0, $kindStruct, "os.fileStat", true, "os", false, function(name_, size_, mode_, modTime_, sys_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.size = new $Int64(0, 0);
			this.mode = 0;
			this.modTime = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$15.nil);
			this.sys = new syscall.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, arrayType.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, arrayType$3.zero());
			return;
		}
		this.name = name_;
		this.size = size_;
		this.mode = mode_;
		this.modTime = modTime_;
		this.sys = sys_;
	});
	sliceType = $sliceType($String);
	ptrType = $ptrType(File);
	sliceType$1 = $sliceType(FileInfo);
	ptrType$1 = $ptrType(dirInfo);
	sliceType$2 = $sliceType($Uint8);
	ptrType$2 = $ptrType(PathError);
	ptrType$3 = $ptrType(LinkError);
	ptrType$4 = $ptrType(SyscallError);
	arrayType = $arrayType($Uint8, 4);
	sliceType$5 = $sliceType(syscall.Iovec);
	ptrType$12 = $ptrType(sliceType$5);
	ptrType$13 = $ptrType(file);
	funcType$1 = $funcType([ptrType$13], [$error], false);
	ptrType$15 = $ptrType(time.Location);
	arrayType$3 = $arrayType($Int64, 2);
	arrayType$5 = $arrayType($Uint8, 32);
	ptrType$16 = $ptrType(fileStat);
	runtime_args = function() {
		return $pkg.Args;
	};
	init = function() {
		var argv, i, process;
		process = $global.process;
		if (!(process === undefined)) {
			argv = process.argv;
			$pkg.Args = $makeSlice(sliceType, ($parseInt(argv.length) - 1 >> 0));
			i = 0;
			while (true) {
				if (!(i < ($parseInt(argv.length) - 1 >> 0))) { break; }
				((i < 0 || i >= $pkg.Args.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(argv[(i + 1 >> 0)], $String));
				i = i + (1) >> 0;
			}
		}
		if ($pkg.Args.$length === 0) {
			$pkg.Args = new sliceType(["?"]);
		}
	};
	File.ptr.prototype.Readdir = function(n) {
		var _r, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType.nil) {
			$s = -1; return [sliceType$1.nil, $pkg.ErrInvalid];
		}
		_r = f.readdir(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdir }; } $f._r = _r; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.ptr.prototype.Readdirnames = function(n) {
		var _r, _tmp, _tmp$1, _tuple, err, f, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType.nil) {
			_tmp = sliceType.nil;
			_tmp$1 = $pkg.ErrInvalid;
			names = _tmp;
			err = _tmp$1;
			$s = -1; return [names, err];
		}
		_r = f.readdirnames(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		names = _tuple[0];
		err = _tuple[1];
		$s = -1; return [names, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdirnames }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	File.ptr.prototype.readdir = function(n) {
		var _i, _r, _r$1, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, dirname, err, f, fi, filename, fip, lerr, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dirname = $f.dirname; err = $f.err; f = $f.f; fi = $f.fi; filename = $f.filename; fip = $f.fip; lerr = $f.lerr; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fi = sliceType$1.nil;
		err = $ifaceNil;
		f = this;
		dirname = f.file.name;
		if (dirname === "") {
			dirname = ".";
		}
		_r = f.Readdirnames(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		names = _tuple[0];
		err = _tuple[1];
		fi = $makeSlice(sliceType$1, 0, names.$length);
		_ref = names;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			filename = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$1 = lstat(dirname + "/" + filename); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			fip = _tuple$1[0];
			lerr = _tuple$1[1];
			if (IsNotExist(lerr)) {
				_i++;
				/* continue; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(lerr, $ifaceNil))) {
				_tmp = fi;
				_tmp$1 = lerr;
				fi = _tmp;
				err = _tmp$1;
				$s = -1; return [fi, err];
			}
			fi = $append(fi, fip);
			_i++;
		/* } */ $s = 2; continue; case 3:
		if ((fi.$length === 0) && $interfaceIsEqual(err, $ifaceNil) && n > 0) {
			err = io.EOF;
		}
		_tmp$2 = fi;
		_tmp$3 = err;
		fi = _tmp$2;
		err = _tmp$3;
		$s = -1; return [fi, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdir }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dirname = dirname; $f.err = err; $f.f = f; $f.fi = fi; $f.filename = filename; $f.fip = fip; $f.lerr = lerr; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readdir = function(n) { return this.$val.readdir(n); };
	File.ptr.prototype.readdirnames = function(n) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, d, err, errno, f, n, names, nb, nc, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; d = $f.d; err = $f.err; errno = $f.errno; f = $f.f; n = $f.n; names = $f.names; nb = $f.nb; nc = $f.nc; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f.file.dirinfo === ptrType$1.nil) {
			f.file.dirinfo = new dirInfo.ptr(sliceType$2.nil, 0, 0);
			f.file.dirinfo.buf = $makeSlice(sliceType$2, 4096);
		}
		d = f.file.dirinfo;
		size = n;
		if (size <= 0) {
			size = 100;
			n = -1;
		}
		names = $makeSlice(sliceType, 0, size);
		/* while (true) { */ case 1:
			/* if (!(!((n === 0)))) { break; } */ if(!(!((n === 0)))) { $s = 2; continue; }
			/* */ if (d.bufp >= d.nbuf) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (d.bufp >= d.nbuf) { */ case 3:
				d.bufp = 0;
				errno = $ifaceNil;
				_r = f.file.pfd.ReadDirent(d.buf); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				d.nbuf = _tuple[0];
				errno = _tuple[1];
				runtime.KeepAlive(f);
				if (!($interfaceIsEqual(errno, $ifaceNil))) {
					_tmp = names;
					_tmp$1 = wrapSyscallError("readdirent", errno);
					names = _tmp;
					err = _tmp$1;
					$s = -1; return [names, err];
				}
				if (d.nbuf <= 0) {
					/* break; */ $s = 2; continue;
				}
			/* } */ case 4:
			_tmp$2 = 0;
			_tmp$3 = 0;
			nb = _tmp$2;
			nc = _tmp$3;
			_tuple$1 = syscall.ParseDirent($subslice(d.buf, d.bufp, d.nbuf), n, names);
			nb = _tuple$1[0];
			nc = _tuple$1[1];
			names = _tuple$1[2];
			d.bufp = d.bufp + (nb) >> 0;
			n = n - (nc) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (n >= 0 && (names.$length === 0)) {
			_tmp$4 = names;
			_tmp$5 = io.EOF;
			names = _tmp$4;
			err = _tmp$5;
			$s = -1; return [names, err];
		}
		_tmp$6 = names;
		_tmp$7 = $ifaceNil;
		names = _tmp$6;
		err = _tmp$7;
		$s = -1; return [names, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdirnames }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.d = d; $f.err = err; $f.errno = errno; $f.f = f; $f.n = n; $f.names = names; $f.nb = nb; $f.nc = nc; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readdirnames = function(n) { return this.$val.readdirnames(n); };
	PathError.ptr.prototype.Error = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Op + " " + e.Path + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PathError.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	SyscallError.ptr.prototype.Error = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Syscall + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SyscallError.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyscallError.prototype.Error = function() { return this.$val.Error(); };
	NewSyscallError = function(syscall$1, err) {
		var err, syscall$1;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return $ifaceNil;
		}
		return new SyscallError.ptr(syscall$1, err);
	};
	$pkg.NewSyscallError = NewSyscallError;
	IsNotExist = function(err) {
		var err;
		return isNotExist(err);
	};
	$pkg.IsNotExist = IsNotExist;
	underlyingError = function(err) {
		var _ref, err, err$1, err$2, err$3;
		_ref = err;
		if ($assertType(_ref, ptrType$2, true)[1]) {
			err$1 = _ref.$val;
			return err$1.Err;
		} else if ($assertType(_ref, ptrType$3, true)[1]) {
			err$2 = _ref.$val;
			return err$2.Err;
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			err$3 = _ref.$val;
			return err$3.Err;
		}
		return err;
	};
	wrapSyscallError = function(name, err) {
		var _tuple, err, name, ok;
		_tuple = $assertType(err, syscall.Errno, true);
		ok = _tuple[1];
		if (ok) {
			err = NewSyscallError(name, err);
		}
		return err;
	};
	isNotExist = function(err) {
		var err;
		err = underlyingError(err);
		return $interfaceIsEqual(err, new syscall.Errno(2)) || $interfaceIsEqual(err, $pkg.ErrNotExist);
	};
	File.ptr.prototype.Name = function() {
		var f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	LinkError.ptr.prototype.Error = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Op + " " + e.Old + " " + e.New + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LinkError.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	LinkError.prototype.Error = function() { return this.$val.Error(); };
	File.ptr.prototype.Read = function(b) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("read");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r = f.read(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		e = _tuple[1];
		_tmp$2 = n;
		_tmp$3 = f.wrapErr("read", e);
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Read }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.ptr.prototype.ReadAt = function(b, off) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, m, n, off, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; m = $f.m; n = $f.n; off = $f.off; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("read");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp$2 = 0;
			_tmp$3 = new PathError.ptr("readat", f.file.name, errors.New("negative offset"));
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			_r = f.pread(b, off); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = f.wrapErr("read", e);
				/* break; */ $s = 2; continue;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = (new $Int64(0, m)), new $Int64(off.$high + x.$high, off.$low + x.$low));
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.ReadAt }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.m = m; $f.n = n; $f.off = off; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.ptr.prototype.Write = function(b) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r = f.write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.$length))) {
			err = io.ErrShortWrite;
		}
		epipecheck(f, e);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = f.wrapErr("write", e);
		}
		_tmp$2 = n;
		_tmp$3 = err;
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Write }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.ptr.prototype.WriteAt = function(b, off) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, m, n, off, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; m = $f.m; n = $f.n; off = $f.off; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp$2 = 0;
			_tmp$3 = new PathError.ptr("writeat", f.file.name, errors.New("negative offset"));
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			_r = f.pwrite(b, off); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = f.wrapErr("write", e);
				/* break; */ $s = 2; continue;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = (new $Int64(0, m)), new $Int64(off.$high + x.$high, off.$low + x.$low));
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.WriteAt }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.m = m; $f.n = n; $f.off = off; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.ptr.prototype.Seek = function(offset, whence) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err, err$1, f, offset, r, ret, whence, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; offset = $f.offset; r = $f.r; ret = $f.ret; whence = $f.whence; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("seek");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = err$1;
			ret = _tmp;
			err = _tmp$1;
			$s = -1; return [ret, err];
		}
		_r = f.seek(offset, whence); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		e = _tuple[1];
		if ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ptrType$1.nil) && !((r.$high === 0 && r.$low === 0))) {
			e = new syscall.Errno(21);
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = f.wrapErr("seek", e);
			ret = _tmp$2;
			err = _tmp$3;
			$s = -1; return [ret, err];
		}
		_tmp$4 = r;
		_tmp$5 = $ifaceNil;
		ret = _tmp$4;
		err = _tmp$5;
		$s = -1; return [ret, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Seek }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.offset = offset; $f.r = r; $f.ret = ret; $f.whence = whence; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	File.ptr.prototype.WriteString = function(s) {
		var _r, _tuple, err, f, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; f = $f.f; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.Write((new sliceType$2($stringToBytes(s)))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.WriteString }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	File.ptr.prototype.wrapErr = function(op, err) {
		var err, f, op;
		f = this;
		if ($interfaceIsEqual(err, $ifaceNil) || $interfaceIsEqual(err, io.EOF)) {
			return err;
		}
		if ($interfaceIsEqual(err, poll.ErrFileClosing)) {
			err = $pkg.ErrClosed;
		}
		return new PathError.ptr(op, f.file.name, err);
	};
	File.prototype.wrapErr = function(op, err) { return this.$val.wrapErr(op, err); };
	File.ptr.prototype.Chmod = function(mode) {
		var _r, f, mode, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; mode = $f.mode; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = f.chmod(mode); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Chmod }; } $f._r = _r; $f.f = f; $f.mode = mode; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	sigpipe = function() {
		$throwRuntimeError("native function not implemented: os.sigpipe");
	};
	syscallMode = function(i) {
		var i, o;
		o = 0;
		o = (o | (((new FileMode(i).Perm() >>> 0)))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | (2048)) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | (1024)) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | (512)) >>> 0;
		}
		return o;
	};
	File.ptr.prototype.chmod = function(mode) {
		var _r, e, err, f, mode, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; mode = $f.mode; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chmod");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Fchmod(syscallMode(mode)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chmod", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.chmod }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.mode = mode; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.chmod = function(mode) { return this.$val.chmod(mode); };
	File.ptr.prototype.Chown = function(uid, gid) {
		var _r, e, err, f, gid, uid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; gid = $f.gid; uid = $f.uid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chown");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Fchown(uid, gid); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chown", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Chown }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.gid = gid; $f.uid = uid; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.ptr.prototype.Truncate = function(size) {
		var _r, e, err, f, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("truncate");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Ftruncate(size); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("truncate", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Truncate }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.ptr.prototype.Sync = function() {
		var _r, e, err, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("sync");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Fsync(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("sync", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Sync }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.ptr.prototype.Chdir = function() {
		var _r, e, err, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chdir");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Fchdir(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chdir", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Chdir }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	File.ptr.prototype.checkValid = function(op) {
		var f, op;
		f = this;
		if (f === ptrType.nil) {
			return $pkg.ErrInvalid;
		}
		return $ifaceNil;
	};
	File.prototype.checkValid = function(op) { return this.$val.checkValid(op); };
	File.ptr.prototype.Fd = function() {
		var f;
		f = this;
		if (f === ptrType.nil) {
			return 4294967295;
		}
		if (f.file.nonblock) {
			syscall.SetNonblock(f.file.pfd.Sysfd, false);
		}
		return ((f.file.pfd.Sysfd >>> 0));
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	NewFile = function(fd, name) {
		var fd, name;
		return newFile(fd, name, false);
	};
	$pkg.NewFile = NewFile;
	newFile = function(fd, name, pollable) {
		var err, err$1, f, fd, fdi, name, pollable;
		fdi = ((fd >> 0));
		if (fdi < 0) {
			return ptrType.nil;
		}
		f = new File.ptr(new file.ptr(new poll.FD.ptr(new poll.fdMutex.ptr(new $Uint64(0, 0), 0, 0), fdi, new poll.pollDesc.ptr(false), ptrType$12.nil, true, true, false), name, ptrType$1.nil, false));
		if (false) {
			pollable = false;
		}
		err = f.file.pfd.Init("file", pollable);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
		} else if (pollable) {
			err$1 = syscall.SetNonblock(fdi, true);
			if ($interfaceIsEqual(err$1, $ifaceNil)) {
				f.file.nonblock = true;
			}
		}
		runtime.SetFinalizer(f.file, new funcType$1($methodExpr(ptrType$13, "close")));
		return f;
	};
	epipecheck = function(file$1, e) {
		var e, file$1;
		if ($interfaceIsEqual(e, new syscall.Errno(32)) && ((file$1.file.pfd.Sysfd === 1) || (file$1.file.pfd.Sysfd === 2))) {
			sigpipe();
		}
	};
	File.ptr.prototype.Close = function() {
		var _r, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType.nil) {
			$s = -1; return $pkg.ErrInvalid;
		}
		_r = f.file.close(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Close }; } $f._r = _r; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	file.ptr.prototype.close = function() {
		var _r, e, err, file$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; file$1 = $f.file$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		file$1 = this;
		if (file$1 === ptrType$13.nil) {
			$s = -1; return new syscall.Errno(22);
		}
		err = $ifaceNil;
		_r = file$1.pfd.Close(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			if ($interfaceIsEqual(e, poll.ErrFileClosing)) {
				e = $pkg.ErrClosed;
			}
			err = new PathError.ptr("close", file$1.name, e);
		}
		runtime.SetFinalizer(file$1, $ifaceNil);
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: file.ptr.prototype.close }; } $f._r = _r; $f.e = e; $f.err = err; $f.file$1 = file$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.read = function(b) {
		var _r, _tmp, _tmp$1, _tuple, b, err, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Read(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.read }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.ptr.prototype.pread = function(b, off) {
		var _r, _tmp, _tmp$1, _tuple, b, err, f, n, off, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; off = $f.off; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Pread(b, off); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.pread }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.off = off; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.ptr.prototype.write = function(b) {
		var _r, _tmp, _tmp$1, _tuple, b, err, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.write }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.ptr.prototype.pwrite = function(b, off) {
		var _r, _tmp, _tmp$1, _tuple, b, err, f, n, off, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; off = $f.off; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Pwrite(b, off); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.pwrite }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.off = off; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	File.ptr.prototype.seek = function(offset, whence) {
		var _r, _tmp, _tmp$1, _tuple, err, f, offset, ret, whence, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; offset = $f.offset; ret = $f.ret; whence = $f.whence; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Seek(offset, whence); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ret = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = ret;
		_tmp$1 = err;
		ret = _tmp;
		err = _tmp$1;
		$s = -1; return [ret, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.seek }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.offset = offset; $f.ret = ret; $f.whence = whence; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	init$1 = function() {
		useSyscallwd = useSyscallwdDarwin;
	};
	useSyscallwdDarwin = function(err) {
		var err;
		return !($interfaceIsEqual(err, new syscall.Errno(45)));
	};
	basename = function(name) {
		var i, name;
		i = name.length - 1 >> 0;
		while (true) {
			if (!(i > 0 && (name.charCodeAt(i) === 47))) { break; }
			name = $substring(name, 0, i);
			i = i - (1) >> 0;
		}
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (name.charCodeAt(i) === 47) {
				name = $substring(name, (i + 1 >> 0));
				break;
			}
			i = i - (1) >> 0;
		}
		return name;
	};
	init$2 = function() {
		if (false) {
			return;
		}
		$pkg.Args = runtime_args();
	};
	fillFileStatFromSys = function(fs, name) {
		var _1, fs, name;
		fs.name = basename(name);
		fs.size = fs.sys.Size;
		time.Time.copy(fs.modTime, timespecToTime($clone(fs.sys.Mtimespec, syscall.Timespec)));
		fs.mode = ((((fs.sys.Mode & 511) >>> 0) >>> 0));
		_1 = (fs.sys.Mode & 61440) >>> 0;
		if ((_1 === (24576)) || (_1 === (57344))) {
			fs.mode = (fs.mode | (67108864)) >>> 0;
		} else if (_1 === (8192)) {
			fs.mode = (fs.mode | (69206016)) >>> 0;
		} else if (_1 === (16384)) {
			fs.mode = (fs.mode | (2147483648)) >>> 0;
		} else if (_1 === (4096)) {
			fs.mode = (fs.mode | (33554432)) >>> 0;
		} else if (_1 === (40960)) {
			fs.mode = (fs.mode | (134217728)) >>> 0;
		} else if (_1 === (32768)) {
		} else if (_1 === (49152)) {
			fs.mode = (fs.mode | (16777216)) >>> 0;
		}
		if (!((((fs.sys.Mode & 1024) >>> 0) === 0))) {
			fs.mode = (fs.mode | (4194304)) >>> 0;
		}
		if (!((((fs.sys.Mode & 2048) >>> 0) === 0))) {
			fs.mode = (fs.mode | (8388608)) >>> 0;
		}
		if (!((((fs.sys.Mode & 512) >>> 0) === 0))) {
			fs.mode = (fs.mode | (1048576)) >>> 0;
		}
	};
	timespecToTime = function(ts) {
		var ts;
		return time.Unix((ts.Sec), (ts.Nsec));
	};
	File.ptr.prototype.Stat = function() {
		var _r, err, f, fs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; f = $f.f; fs = $f.fs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fs = [fs];
		f = this;
		if (f === ptrType.nil) {
			$s = -1; return [$ifaceNil, $pkg.ErrInvalid];
		}
		fs[0] = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$15.nil), new syscall.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, arrayType.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, arrayType$3.zero()));
		_r = f.file.pfd.Fstat(fs[0].sys); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, new PathError.ptr("stat", f.file.name, err)];
		}
		fillFileStatFromSys(fs[0], f.file.name);
		$s = -1; return [fs[0], $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Stat }; } $f._r = _r; $f.err = err; $f.f = f; $f.fs = fs; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	Lstat = function(name) {
		var err, fs, name;
		fs = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$15.nil), new syscall.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, arrayType.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, arrayType$3.zero()));
		err = syscall.Lstat(name, fs.sys);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("lstat", name, err)];
		}
		fillFileStatFromSys(fs, name);
		return [fs, $ifaceNil];
	};
	$pkg.Lstat = Lstat;
	FileMode.prototype.String = function() {
		var _i, _i$1, _ref, _ref$1, _rune, _rune$1, buf, c, c$1, i, i$1, m, w, y, y$1;
		m = this.$val;
		buf = arrayType$5.zero();
		w = 0;
		_ref = "dalTLDpSugct";
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = (((31 - i >> 0) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = ((c << 24 >>> 24)));
				w = w + (1) >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			w = w + (1) >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.length)) { break; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = (((8 - i$1 >> 0) >>> 0)), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = ((c$1 << 24 >>> 24)));
			} else {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			}
			w = w + (1) >> 0;
			_i$1 += _rune$1[1];
		}
		return ($bytesToString($subslice(new sliceType$2(buf), 0, w)));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var m;
		m = this.$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var m;
		m = this.$val;
		return ((m & 2399141888) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var m;
		m = this.$val;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	fileStat.ptr.prototype.Name = function() {
		var fs;
		fs = this;
		return fs.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.ptr.prototype.IsDir = function() {
		var fs;
		fs = this;
		return new FileMode(fs.Mode()).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	fileStat.ptr.prototype.Size = function() {
		var fs;
		fs = this;
		return fs.size;
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.ptr.prototype.Mode = function() {
		var fs;
		fs = this;
		return fs.mode;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.ptr.prototype.ModTime = function() {
		var fs;
		fs = this;
		return fs.modTime;
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.ptr.prototype.Sys = function() {
		var fs;
		fs = this;
		return fs.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	ptrType$2.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$13.methods = [{prop: "close", name: "close", pkg: "os", typ: $funcType([], [$error], false)}];
	ptrType.methods = [{prop: "Readdir", name: "Readdir", pkg: "", typ: $funcType([$Int], [sliceType$1, $error], false)}, {prop: "Readdirnames", name: "Readdirnames", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "readdir", name: "readdir", pkg: "os", typ: $funcType([$Int], [sliceType$1, $error], false)}, {prop: "readdirnames", name: "readdirnames", pkg: "os", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "WriteAt", name: "WriteAt", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "wrapErr", name: "wrapErr", pkg: "os", typ: $funcType([$String, $error], [$error], false)}, {prop: "Chmod", name: "Chmod", pkg: "", typ: $funcType([FileMode], [$error], false)}, {prop: "chmod", name: "chmod", pkg: "os", typ: $funcType([FileMode], [$error], false)}, {prop: "Chown", name: "Chown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "checkValid", name: "checkValid", pkg: "os", typ: $funcType([$String], [$error], false)}, {prop: "Fd", name: "Fd", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "read", name: "read", pkg: "os", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "pread", name: "pread", pkg: "os", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "write", name: "write", pkg: "os", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "pwrite", name: "pwrite", pkg: "os", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "seek", name: "seek", pkg: "os", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([], [FileInfo, $error], false)}];
	FileMode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsRegular", name: "IsRegular", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([], [FileMode], false)}];
	ptrType$16.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	PathError.init("", [{prop: "Op", name: "Op", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Path", name: "Path", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", anonymous: false, exported: true, typ: $error, tag: ""}]);
	SyscallError.init("", [{prop: "Syscall", name: "Syscall", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", anonymous: false, exported: true, typ: $error, tag: ""}]);
	LinkError.init("", [{prop: "Op", name: "Op", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Old", name: "Old", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "New", name: "New", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", anonymous: false, exported: true, typ: $error, tag: ""}]);
	file.init("os", [{prop: "pfd", name: "pfd", anonymous: false, exported: false, typ: poll.FD, tag: ""}, {prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "dirinfo", name: "dirinfo", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "nonblock", name: "nonblock", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	dirInfo.init("os", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "nbuf", name: "nbuf", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "bufp", name: "bufp", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	File.init("os", [{prop: "file", name: "file", anonymous: true, exported: false, typ: ptrType$13, tag: ""}]);
	FileInfo.init([{prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}]);
	fileStat.init("os", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "size", name: "size", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "mode", name: "mode", anonymous: false, exported: false, typ: FileMode, tag: ""}, {prop: "modTime", name: "modTime", anonymous: false, exported: false, typ: time.Time, tag: ""}, {prop: "sys", name: "sys", anonymous: false, exported: false, typ: syscall.Stat_t, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = poll.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Args = sliceType.nil;
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		$pkg.ErrClosed = errors.New("file already closed");
		errFinished = errors.New("os: process already finished");
		$pkg.Stdin = NewFile(((syscall.Stdin >>> 0)), "/dev/stdin");
		$pkg.Stdout = NewFile(((syscall.Stdout >>> 0)), "/dev/stdout");
		$pkg.Stderr = NewFile(((syscall.Stderr >>> 0)), "/dev/stderr");
		useSyscallwd = (function(param) {
			var param;
			return true;
		});
		lstat = Lstat;
		init();
		init$1();
		init$2();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, $init, acceptRange, first, acceptRanges, DecodeRuneInString, RuneLen, EncodeRune, RuneCount, RuneCountInString, ValidRune;
	acceptRange = $pkg.acceptRange = $newType(0, $kindStruct, "utf8.acceptRange", true, "unicode/utf8", false, function(lo_, hi_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lo = 0;
			this.hi = 0;
			return;
		}
		this.lo = lo_;
		this.hi = hi_;
	});
	DecodeRuneInString = function(s) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, mask, n, r, s, s0, s1, s2, s3, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = s.length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		s0 = s.charCodeAt(0);
		x = ((s0 < 0 || s0 >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[s0]);
		if (x >= 240) {
			mask = (((x >> 0)) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = ((((s.charCodeAt(0) >> 0)) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
		if (n < ((sz >> 0))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		s1 = s.charCodeAt(1);
		if (s1 < accept.lo || accept.hi < s1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = (((((s0 & 31) >>> 0) >> 0)) << 6 >> 0) | ((((s1 & 63) >>> 0) >> 0));
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		s2 = s.charCodeAt(2);
		if (s2 < 128 || 191 < s2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = ((((((s0 & 15) >>> 0) >> 0)) << 12 >> 0) | (((((s1 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((s2 & 63) >>> 0) >> 0));
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		s3 = s.charCodeAt(3);
		if (s3 < 128 || 191 < s3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = (((((((s0 & 7) >>> 0) >> 0)) << 18 >> 0) | (((((s1 & 63) >>> 0) >> 0)) << 12 >> 0)) | (((((s2 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((s3 & 63) >>> 0) >> 0));
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRuneInString = DecodeRuneInString;
	RuneLen = function(r) {
		var r;
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	$pkg.RuneLen = RuneLen;
	EncodeRune = function(p, r) {
		var i, p, r;
		i = ((r >>> 0));
		if (i <= 127) {
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((r << 24 >>> 24)));
			return 1;
		} else if (i <= 2047) {
			$unused((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((192 | (((r >> 6 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 2;
		} else if ((i > 1114111) || (55296 <= i && i <= 57343)) {
			r = 65533;
			$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | (((r >> 12 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 3;
		} else if (i <= 65535) {
			$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | (((r >> 12 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 3;
		} else {
			$unused((3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((240 | (((r >> 18 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 12 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 4;
		}
	};
	$pkg.EncodeRune = EncodeRune;
	RuneCount = function(p) {
		var accept, c, c$1, c$2, c$3, i, n, np, p, size, x, x$1, x$2, x$3, x$4;
		np = p.$length;
		n = 0;
		i = 0;
		while (true) {
			if (!(i < np)) { break; }
			n = n + (1) >> 0;
			c = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
			if (c < 128) {
				i = i + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				continue;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > np) {
				i = i + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c$1 = (x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$2]));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$3]));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = (x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$4]));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
		}
		return n;
	};
	$pkg.RuneCount = RuneCount;
	RuneCountInString = function(s) {
		var accept, c, c$1, c$2, c$3, i, n, ns, s, size, x, x$1;
		n = 0;
		ns = s.length;
		i = 0;
		while (true) {
			if (!(i < ns)) { break; }
			c = s.charCodeAt(i);
			if (c < 128) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > ns) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c$1 = s.charCodeAt((i + 1 >> 0));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = s.charCodeAt((i + 2 >> 0));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = s.charCodeAt((i + 3 >> 0));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
			n = n + (1) >> 0;
		}
		n = n;
		return n;
	};
	$pkg.RuneCountInString = RuneCountInString;
	ValidRune = function(r) {
		var r;
		if (0 <= r && r < 55296) {
			return true;
		} else if (57343 < r && r <= 1114111) {
			return true;
		}
		return false;
	};
	$pkg.ValidRune = ValidRune;
	acceptRange.init("unicode/utf8", [{prop: "lo", name: "lo", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "hi", name: "hi", anonymous: false, exported: false, typ: $Uint8, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = $toNativeArray($kindUint
		acceptRanges = $toNativeArray($kindStruct, [new acceptRange.ptr(128, 191), new acceptRange.ptr(160, 191), new acceptRange.ptr(128, 159), new acceptRange.ptr(144, 191), new acceptRange.ptr(128, 143)]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, $init, errors, math, utf8, NumError, decimal, leftCheat, extFloat, floatInfo, decimalSlice, sliceType$3, sliceType$4, sliceType$5, arrayType, ptrType, sliceType$6, arrayType$1, arrayType$2, ptrType$1, arrayType$3, arrayType$4, ptrType$2, ptrType$3, ptrType$4, optimize, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float32info$24ptr, float64info, float64info$24ptr, isPrint16, isNotPrint16, isPrint32, isNotPrint32, isGraphic, shifts, syntaxError, rangeError, ParseUint, ParseInt, Atoi, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, min, max, FormatInt, Itoa, small, formatBits, quoteWith, appendQuotedWith, appendQuotedRuneWith, appendEscapedRune, Quote, AppendQuote, AppendQuoteToASCII, AppendQuoteRune, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint, isInGraphicList;
	errors = $packages["errors"];
	math = $packages["math"];
	utf8 = $packages["unicode/utf8"];
	NumError = $pkg.NumError = $newType(0, $kindStruct, "strconv.NumError", true, "strconv", true, function(Func_, Num_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Func = "";
			this.Num = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Func = Func_;
		this.Num = Num_;
		this.Err = Err_;
	});
	decimal = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", true, "strconv", false, function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = arrayType.zero();
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			this.trunc = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
		this.trunc = trunc_;
	});
	leftCheat = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", true, "strconv", false, function(delta_, cutoff_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.delta = 0;
			this.cutoff = "";
			return;
		}
		this.delta = delta_;
		this.cutoff = cutoff_;
	});
	extFloat = $pkg.extFloat = $newType(0, $kindStruct, "strconv.extFloat", true, "strconv", false, function(mant_, exp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mant = new $Uint64(0, 0);
			this.exp = 0;
			this.neg = false;
			return;
		}
		this.mant = mant_;
		this.exp = exp_;
		this.neg = neg_;
	});
	floatInfo = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", true, "strconv", false, function(mantbits_, expbits_, bias_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mantbits = 0;
			this.expbits = 0;
			this.bias = 0;
			return;
		}
		this.mantbits = mantbits_;
		this.expbits = expbits_;
		this.bias = bias_;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", true, "strconv", false, function(d_, nd_, dp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = sliceType$6.nil;
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
	});
	sliceType$3 = $sliceType(leftCheat);
	sliceType$4 = $sliceType($Uint16);
	sliceType$5 = $sliceType($Uint32);
	arrayType = $arrayType($Uint8, 800);
	ptrType = $ptrType(NumError);
	sliceType$6 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 24);
	arrayType$2 = $arrayType($Uint8, 32);
	ptrType$1 = $ptrType(floatInfo);
	arrayType$3 = $arrayType($Uint8, 65);
	arrayType$4 = $arrayType($Uint8, 4);
	ptrType$2 = $ptrType(decimal);
	ptrType$3 = $ptrType(decimalSlice);
	ptrType$4 = $ptrType(extFloat);
	NumError.ptr.prototype.Error = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NumError.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	NumError.prototype.Error = function() { return this.$val.Error(); };
	syntaxError = function(fn, str) {
		var fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrSyntax);
	};
	rangeError = function(fn, str) {
		var fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrRange);
	};
	ParseUint = function(s, base, bitSize) {
		var _1, _tmp, _tmp$1, base, bitSize, cutoff, d, err, i, maxVal, n, n1, s, v, x, x$1, x$2, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		n = new $Uint64(0, 0);
		err = $ifaceNil;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		cutoff = _tmp;
		maxVal = _tmp$1;
		if (bitSize === 0) {
			bitSize = 32;
		}
		i = 0;
			/* */ if (s.length < 1) { $s = 2; continue; }
			/* */ if (2 <= base && base <= 36) { $s = 3; continue; }
			/* */ if ((base === 0)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (s.length < 1) { */ case 2:
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 7; continue;
				$s = 6; continue;
			/* } else if (2 <= base && base <= 36) { */ case 3:
				$s = 6; continue;
			/* } else if ((base === 0)) { */ case 4:
					/* */ if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { $s = 9; continue; }
					/* */ if ((s.charCodeAt(0) === 48)) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { */ case 9:
						/* */ if (s.length < 3) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (s.length < 3) { */ case 13:
							err = $pkg.ErrSyntax;
							/* goto Error */ $s = 7; continue;
						/* } */ case 14:
						base = 16;
						i = 2;
						$s = 12; continue;
					/* } else if ((s.charCodeAt(0) === 48)) { */ case 10:
						base = 8;
						i = 1;
						$s = 12; continue;
					/* } else { */ case 11:
						base = 10;
					/* } */ case 12:
				case 8:
				$s = 6; continue;
			/* } else { */ case 5:
				err = errors.New("invalid base " + Itoa(base));
				/* goto Error */ $s = 7; continue;
			/* } */ case 6:
		case 1:
		_1 = base;
		if (_1 === (10)) {
			cutoff = new $Uint64(429496729, 2576980378);
		} else if (_1 === (16)) {
			cutoff = new $Uint64(268435456, 0);
		} else {
			cutoff = (x = $div64(new $Uint64(4294967295, 4294967295), (new $Uint64(0, base)), false), new $Uint64(x.$high + 0, x.$low + 1));
		}
		maxVal = (x$1 = $shiftLeft64(new $Uint64(0, 1), ((bitSize >>> 0))), new $Uint64(x$1.$high - 0, x$1.$low - 1));
		/* while (true) { */ case 15:
			/* if (!(i < s.length)) { break; } */ if(!(i < s.length)) { $s = 16; continue; }
			v = 0;
			d = s.charCodeAt(i);
				/* */ if (48 <= d && d <= 57) { $s = 18; continue; }
				/* */ if (97 <= d && d <= 122) { $s = 19; continue; }
				/* */ if (65 <= d && d <= 90) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (48 <= d && d <= 57) { */ case 18:
					v = d - 48 << 24 >>> 24;
					$s = 22; continue;
				/* } else if (97 <= d && d <= 122) { */ case 19:
					v = (d - 97 << 24 >>> 24) + 10 << 24 >>> 24;
					$s = 22; continue;
				/* } else if (65 <= d && d <= 90) { */ case 20:
					v = (d - 65 << 24 >>> 24) + 10 << 24 >>> 24;
					$s = 22; continue;
				/* } else { */ case 21:
					n = new $Uint64(0, 0);
					err = $pkg.ErrSyntax;
					/* goto Error */ $s = 7; continue;
				/* } */ case 22:
			case 17:
			/* */ if (v >= ((base << 24 >>> 24))) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (v >= ((base << 24 >>> 24))) { */ case 23:
				n = new $Uint64(0, 0);
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 7; continue;
			/* } */ case 24:
			/* */ if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { */ case 25:
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 7; continue;
			/* } */ case 26:
			n = $mul64(n, ((new $Uint64(0, base))));
			n1 = (x$2 = (new $Uint64(0, v)), new $Uint64(n.$high + x$2.$high, n.$low + x$2.$low));
			/* */ if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { */ case 27:
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 7; continue;
			/* } */ case 28:
			n = n1;
			i = i + (1) >> 0;
		/* } */ $s = 15; continue; case 16:
		$s = -1; return [n, $ifaceNil];
		/* Error: */ case 7:
		$s = -1; return [n, new NumError.ptr("ParseUint", s, err)];
		$s = -1; return [new $Uint64(0, 0), $ifaceNil];
		/* */ } return; }
	};
	$pkg.ParseUint = ParseUint;
	ParseInt = function(s, base, bitSize) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, base, bitSize, cutoff, err, i, n, neg, s, s0, un, x, x$1;
		i = new $Int64(0, 0);
		err = $ifaceNil;
		if (bitSize === 0) {
			bitSize = 32;
		}
		if (s.length === 0) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = syntaxError("ParseInt", s);
			i = _tmp;
			err = _tmp$1;
			return [i, err];
		}
		s0 = s;
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = $substring(s, 1);
		} else if (s.charCodeAt(0) === 45) {
			neg = true;
			s = $substring(s, 1);
		}
		un = new $Uint64(0, 0);
		_tuple = ParseUint(s, base, bitSize);
		un = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual($assertType(err, ptrType).Err, $pkg.ErrRange))) {
			$assertType(err, ptrType).Func = "ParseInt";
			$assertType(err, ptrType).Num = s0;
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = err;
			i = _tmp$2;
			err = _tmp$3;
			return [i, err];
		}
		cutoff = ($shiftLeft64(new $Uint64(0, 1), (((bitSize - 1 >> 0) >>> 0))));
		if (!neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low >= cutoff.$low))) {
			_tmp$4 = ((x = new $Uint64(cutoff.$high - 0, cutoff.$low - 1), new $Int64(x.$high, x.$low)));
			_tmp$5 = rangeError("ParseInt", s0);
			i = _tmp$4;
			err = _tmp$5;
			return [i, err];
		}
		if (neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low > cutoff.$low))) {
			_tmp$6 = (x$1 = (new $Int64(cutoff.$high, cutoff.$low)), new $Int64(-x$1.$high, -x$1.$low));
			_tmp$7 = rangeError("ParseInt", s0);
			i = _tmp$6;
			err = _tmp$7;
			return [i, err];
		}
		n = (new $Int64(un.$high, un.$low));
		if (neg) {
			n = new $Int64(-n.$high, -n.$low);
		}
		_tmp$8 = n;
		_tmp$9 = $ifaceNil;
		i = _tmp$8;
		err = _tmp$9;
		return [i, err];
	};
	$pkg.ParseInt = ParseInt;
	Atoi = function(s) {
		var _tuple, _tuple$1, err, i64, nerr, ok, s;
		_tuple = ParseInt(s, 10, 0);
		i64 = _tuple[0];
		err = _tuple[1];
		_tuple$1 = $assertType(err, ptrType, true);
		nerr = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok) {
			nerr.Func = "Atoi";
		}
		return [(((i64.$low + ((i64.$high >> 31) * 4294967296)) >> 0)), err];
	};
	$pkg.Atoi = Atoi;
	decimal.ptr.prototype.String = function() {
		var a, buf, n, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = $makeSlice(sliceType$6, n);
		w = 0;
		if ((a.nd === 0)) {
			return "0";
		} else if (a.dp <= 0) {
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
			w = w + (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.dp))) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return ($bytesToString($subslice(buf, 0, w)));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var _i, _ref, dst, i;
		_ref = dst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + i] = 48);
			_i++;
		}
		return dst.$length;
	};
	trim = function(a) {
		var a, x, x$1;
		while (true) {
			if (!(a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) === 48))) { break; }
			a.nd = a.nd - (1) >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.ptr.prototype.Assign = function(v) {
		var a, buf, n, v, v1, x, x$1, x$2;
		a = this;
		buf = arrayType$1.zero();
		n = 0;
		while (true) {
			if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
			((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = ((new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24)));
			n = n + (1) >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - (1) >> 0;
		while (true) {
			if (!(n >= 0)) { break; }
			(x$1 = a.d, x$2 = a.nd, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2] = ((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n])));
			a.nd = a.nd + (1) >> 0;
			n = n - (1) >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var a, c, c$1, dig, dig$1, k, mask, n, r, w, x, x$1, x$2, x$3, y, y$1, y$2, y$3, y$4;
		r = 0;
		w = 0;
		n = 0;
		while (true) {
			if (!(((y = k, y < 32 ? (n >>> y) : 0) >>> 0) === 0)) { break; }
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (true) {
					if (!(((y$1 = k, y$1 < 32 ? (n >>> y$1) : 0) >>> 0) === 0)) { break; }
					n = n * 10 >>> 0;
					r = r + (1) >> 0;
				}
				break;
			}
			c = (((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0));
			n = ((n * 10 >>> 0) + c >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		mask = (((y$2 = k, y$2 < 32 ? (1 << y$2) : 0) >>> 0)) - 1 >>> 0;
		while (true) {
			if (!(r < a.nd)) { break; }
			c$1 = (((x$1 = a.d, ((r < 0 || r >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[r])) >>> 0));
			dig = (y$3 = k, y$3 < 32 ? (n >>> y$3) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = (((dig + 48 >>> 0) << 24 >>> 24))));
			w = w + (1) >> 0;
			n = ((n * 10 >>> 0) + c$1 >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			dig$1 = (y$4 = k, y$4 < 32 ? (n >>> y$4) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			if (w < 800) {
				(x$3 = a.d, ((w < 0 || w >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[w] = (((dig$1 + 48 >>> 0) << 24 >>> 24))));
				w = w + (1) >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = n * 10 >>> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var b, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (i >= b.$length) {
				return true;
			}
			if (!((((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) < s.charCodeAt(i);
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var _q, _q$1, a, delta, k, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;
		delta = ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).delta;
		if (prefixIsLessThan($subslice(new sliceType$6(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
			delta = delta - (1) >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - (1) >> 0;
		while (true) {
			if (!(r >= 0)) { break; }
			n = n + (((y = k, y < 32 ? ((((((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0)) - 48 >>> 0)) << y) : 0) >>> 0)) >>> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - (10 * quo >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$1 = a.d, ((w < 0 || w >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[w] = (((rem + 48 >>> 0) << 24 >>> 24))));
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - (10 * quo$1 >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = (((rem$1 + 48 >>> 0) << 24 >>> 24))));
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.ptr.prototype.Shift = function(k) {
		var a, k;
		a = this;
		if ((a.nd === 0)) {
		} else if (k > 0) {
			while (true) {
				if (!(k > 28)) { break; }
				leftShift(a, 28);
				k = k - (28) >> 0;
			}
			leftShift(a, ((k >>> 0)));
		} else if (k < 0) {
			while (true) {
				if (!(k < -28)) { break; }
				rightShift(a, 28);
				k = k + (28) >> 0;
			}
			rightShift(a, ((-k >>> 0)));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var _r, a, nd, x, x$1, x$2, x$3;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if (((x = a.d, ((nd < 0 || nd >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[nd])) >= 53;
	};
	decimal.ptr.prototype.Round = function(nd) {
		var a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.ptr.prototype.RoundDown = function(nd) {
		var a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.ptr.prototype.RoundUp = function(nd) {
		var a, c, i, nd, x, x$1, x$2;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			c = (x = a.d, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]));
			if (c < 57) {
				(x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = ((x$1 = a.d, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i])) + (1) << 24 >>> 24)));
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - (1) >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + (1) >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.ptr.prototype.RoundedInteger = function() {
		var a, i, n, x, x$1, x$2, x$3;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (true) {
			if (!(i < a.dp && i < a.nd)) { break; }
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = (new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])) - 48 << 24 >>> 24))), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		while (true) {
			if (!(i < a.dp)) { break; }
			n = $mul64(n, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	extFloat.ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var _tmp, _tmp$1, exp, expBiased, f, flt, lower, mant, neg, upper, x, x$1, x$2, x$3, x$4;
		lower = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		upper = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		f = this;
		f.mant = mant;
		f.exp = exp - ((flt.mantbits >> 0)) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, ((-f.exp >>> 0)))), ((-f.exp >>> 0))), (mant.$high === x.$high && mant.$low === x.$low))) {
			f.mant = $shiftRightUint64(f.mant, (((-f.exp >>> 0))));
			f.exp = 0;
			_tmp = $clone(f, extFloat);
			_tmp$1 = $clone(f, extFloat);
			extFloat.copy(lower, _tmp);
			extFloat.copy(upper, _tmp$1);
			return [lower, upper];
		}
		expBiased = exp - flt.bias >> 0;
		extFloat.copy(upper, new extFloat.ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.$high + 0, x$1.$low + 1)), f.exp - 1 >> 0, f.neg));
		if (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) || (expBiased === 1)) {
			extFloat.copy(lower, new extFloat.ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.$high - 0, x$3.$low - 1)), f.exp - 1 >> 0, f.neg));
		} else {
			extFloat.copy(lower, new extFloat.ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.$high - 0, x$4.$low - 1)), f.exp - 2 >> 0, f.neg));
		}
		return [lower, upper];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.ptr.prototype.Normalize = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, exp, f, mant, shift, x, x$1, x$2, x$3, x$4, x$5;
		shift = 0;
		f = this;
		_tmp = f.mant;
		_tmp$1 = f.exp;
		mant = _tmp;
		exp = _tmp$1;
		if ((mant.$high === 0 && mant.$low === 0)) {
			shift = 0;
			return shift;
		}
		if ((x = $shiftRightUint64(mant, 32), (x.$high === 0 && x.$low === 0))) {
			mant = $shiftLeft64(mant, (32));
			exp = exp - (32) >> 0;
		}
		if ((x$1 = $shiftRightUint64(mant, 48), (x$1.$high === 0 && x$1.$low === 0))) {
			mant = $shiftLeft64(mant, (16));
			exp = exp - (16) >> 0;
		}
		if ((x$2 = $shiftRightUint64(mant, 56), (x$2.$high === 0 && x$2.$low === 0))) {
			mant = $shiftLeft64(mant, (8));
			exp = exp - (8) >> 0;
		}
		if ((x$3 = $shiftRightUint64(mant, 60), (x$3.$high === 0 && x$3.$low === 0))) {
			mant = $shiftLeft64(mant, (4));
			exp = exp - (4) >> 0;
		}
		if ((x$4 = $shiftRightUint64(mant, 62), (x$4.$high === 0 && x$4.$low === 0))) {
			mant = $shiftLeft64(mant, (2));
			exp = exp - (2) >> 0;
		}
		if ((x$5 = $shiftRightUint64(mant, 63), (x$5.$high === 0 && x$5.$low === 0))) {
			mant = $shiftLeft64(mant, (1));
			exp = exp - (1) >> 0;
		}
		shift = (((f.exp - exp >> 0) >>> 0));
		_tmp$2 = mant;
		_tmp$3 = exp;
		f.mant = _tmp$2;
		f.exp = _tmp$3;
		return shift;
	};
	extFloat.prototype.Normalize = function() { return this.$val.Normalize(); };
	extFloat.ptr.prototype.Multiply = function(g) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, cross1, cross2, f, fhi, flo, g, ghi, glo, rem, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		_tmp = $shiftRightUint64(f.mant, 32);
		_tmp$1 = (new $Uint64(0, ((f.mant.$low >>> 0))));
		fhi = _tmp;
		flo = _tmp$1;
		_tmp$2 = $shiftRightUint64(g.mant, 32);
		_tmp$3 = (new $Uint64(0, ((g.mant.$low >>> 0))));
		ghi = _tmp$2;
		glo = _tmp$3;
		cross1 = $mul64(fhi, glo);
		cross2 = $mul64(flo, ghi);
		f.mant = (x = (x$1 = $mul64(fhi, ghi), x$2 = $shiftRightUint64(cross1, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), x$3 = $shiftRightUint64(cross2, 32), new $Uint64(x.$high + x$3.$high, x.$low + x$3.$low));
		rem = (x$4 = (x$5 = (new $Uint64(0, ((cross1.$low >>> 0)))), x$6 = (new $Uint64(0, ((cross2.$low >>> 0)))), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $shiftRightUint64(($mul64(flo, glo)), 32), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));
		rem = (x$8 = new $Uint64(0, 2147483648), new $Uint64(rem.$high + x$8.$high, rem.$low + x$8.$low));
		f.mant = (x$9 = f.mant, x$10 = ($shiftRightUint64(rem, 32)), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };
	extFloat.ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
		var _q, _r, adjExp, denormalExp, errors$1, exp10, extrabits, f, flt, halfway, i, mant_extra, mantissa, neg, ok, shift, trunc, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y;
		ok = false;
		f = this;
		errors$1 = 0;
		if (trunc) {
			errors$1 = errors$1 + (4) >> 0;
		}
		f.mant = mantissa;
		f.exp = 0;
		f.neg = neg;
		i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (exp10 < -348 || i >= 87) {
			ok = false;
			return ok;
		}
		adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (adjExp < 19 && (x = (x$1 = 19 - adjExp >> 0, ((x$1 < 0 || x$1 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$1])), (mantissa.$high < x.$high || (mantissa.$high === x.$high && mantissa.$low < x.$low)))) {
			f.mant = $mul64(f.mant, (((adjExp < 0 || adjExp >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[adjExp])));
			f.Normalize();
		} else {
			f.Normalize();
			f.Multiply($clone(((adjExp < 0 || adjExp >= smallPowersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : smallPowersOfTen[adjExp]), extFloat));
			errors$1 = errors$1 + (4) >> 0;
		}
		f.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		if (errors$1 > 0) {
			errors$1 = errors$1 + (1) >> 0;
		}
		errors$1 = errors$1 + (4) >> 0;
		shift = f.Normalize();
		errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
		denormalExp = flt.bias - 63 >> 0;
		extrabits = 0;
		if (f.exp <= denormalExp) {
			extrabits = ((63 - flt.mantbits >>> 0) + 1 >>> 0) + (((denormalExp - f.exp >> 0) >>> 0)) >>> 0;
		} else {
			extrabits = 63 - flt.mantbits >>> 0;
		}
		halfway = $shiftLeft64(new $Uint64(0, 1), ((extrabits - 1 >>> 0)));
		mant_extra = (x$2 = f.mant, x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), extrabits), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		if ((x$5 = (x$6 = (new $Int64(halfway.$high, halfway.$low)), x$7 = (new $Int64(0, errors$1)), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low)), x$8 = (new $Int64(mant_extra.$high, mant_extra.$low)), (x$5.$high < x$8.$high || (x$5.$high === x$8.$high && x$5.$low < x$8.$low))) && (x$9 = (new $Int64(mant_extra.$high, mant_extra.$low)), x$10 = (x$11 = (new $Int64(halfway.$high, halfway.$low)), x$12 = (new $Int64(0, errors$1)), new $Int64(x$11.$high + x$12.$high, x$11.$low + x$12.$low)), (x$9.$high < x$10.$high || (x$9.$high === x$10.$high && x$9.$low < x$10.$low)))) {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
	extFloat.ptr.prototype.frexp10 = function() {
		var _q, _q$1, _tmp, _tmp$1, approxExp10, exp, exp10, f, i, index;
		exp10 = 0;
		index = 0;
		f = this;
		approxExp10 = (_q = ($imul(((-46 - f.exp >> 0)), 28)) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + ((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]).exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + (1) >> 0;
			} else if (exp > -32) {
				i = i - (1) >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		_tmp = -((-348 + ($imul(i, 8)) >> 0));
		_tmp$1 = i;
		exp10 = _tmp;
		index = _tmp$1;
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var _tuple, a, b, c, exp10, i;
		exp10 = 0;
		_tuple = c.frexp10();
		exp10 = _tuple[0];
		i = _tuple[1];
		a.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		b.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		return exp10;
	};
	extFloat.ptr.prototype.FixedDecimal = function(d, n) {
		var $CE$B5, _q, _q$1, _tmp, _tmp$1, _tuple, buf, d, digit, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, n, nd, needed, ok, pos, pow, pow10, rest, shift, v, v1, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			$panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10();
		exp10 = _tuple[0];
		shift = ((-f.exp >>> 0));
		integer = (($shiftRightUint64(f.mant, shift).$low >>> 0));
		fraction = (x$1 = f.mant, x$2 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		$CE$B5 = new $Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new $Uint64(0, 1);
		_tmp = 0;
		_tmp$1 = new $Uint64(0, 1);
		i = _tmp;
		pow = _tmp$1;
		while (true) {
			if (!(i < 20)) { break; }
			if ((x$3 = (new $Uint64(0, integer)), (pow.$high > x$3.$high || (pow.$high === x$3.$high && pow.$low > x$3.$low)))) {
				integerDigits = i;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = (x$4 = integerDigits - needed >> 0, ((x$4 < 0 || x$4 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$4]));
			integer = (_q = integer / (((pow10.$low >>> 0))), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rest = rest - (($imul(integer, ((pow10.$low >>> 0))) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = arrayType$2.zero();
		pos = 32;
		v = integer;
		while (true) {
			if (!(v > 0)) { break; }
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			v = v - (($imul(10, v1) >>> 0)) >>> 0;
			pos = pos - (1) >> 0;
			((pos < 0 || pos >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[pos] = (((v + 48 >>> 0) << 24 >>> 24)));
			v = v1;
		}
		i$1 = pos;
		while (true) {
			if (!(i$1 < 32)) { break; }
			(x$5 = d.d, x$6 = i$1 - pos >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = ((i$1 < 0 || i$1 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i$1])));
			i$1 = i$1 + (1) >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.$high === 0 && pow10.$low === 1))) {
				$panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (true) {
				if (!(needed > 0)) { break; }
				fraction = $mul64(fraction, (new $Uint64(0, 10)));
				$CE$B5 = $mul64($CE$B5, (new $Uint64(0, 10)));
				if ((x$7 = $mul64(new $Uint64(0, 2), $CE$B5), x$8 = $shiftLeft64(new $Uint64(0, 1), shift), (x$7.$high > x$8.$high || (x$7.$high === x$8.$high && x$7.$low > x$8.$low)))) {
					return false;
				}
				digit = $shiftRightUint64(fraction, shift);
				(x$9 = d.d, ((nd < 0 || nd >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + nd] = ((new $Uint64(digit.$high + 0, digit.$low + 48).$low << 24 >>> 24))));
				fraction = (x$10 = $shiftLeft64(digit, shift), new $Uint64(fraction.$high - x$10.$high, fraction.$low - x$10.$low));
				nd = nd + (1) >> 0;
				needed = needed - (1) >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$11 = $shiftLeft64((new $Uint64(0, rest)), shift), new $Uint64(x$11.$high | fraction.$high, (x$11.$low | fraction.$low) >>> 0)), pow10, shift, $CE$B5);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			if (!(((x$12 = d.d, ((i$2 < 0 || i$2 >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + i$2])) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, $CE$B5) {
		var $CE$B5, d, den, i, num, shift, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $shiftLeft64(den, shift), (num.$high > x.$high || (num.$high === x.$high && num.$low > x.$low)))) {
			$panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = $mul64(new $Uint64(0, 2), $CE$B5), x$2 = $shiftLeft64(den, shift), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			$panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high + $CE$B5.$high, num.$low + $CE$B5.$low))), x$4 = $shiftLeft64(den, shift), (x$3.$high < x$4.$high || (x$3.$high === x$4.$high && x$3.$low < x$4.$low)))) {
			return true;
		}
		if ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high - $CE$B5.$high, num.$low - $CE$B5.$low))), x$6 = $shiftLeft64(den, shift), (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)))) {
			i = d.nd - 1 >> 0;
			while (true) {
				if (!(i >= 0)) { break; }
				if ((x$7 = d.d, ((i < 0 || i >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i])) === 57) {
					d.nd = d.nd - (1) >> 0;
				} else {
					break;
				}
				i = i - (1) >> 0;
			}
			if (i < 0) {
				(x$8 = d.d, (0 >= x$8.$length ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + 0] = 49));
				d.nd = 1;
				d.dp = d.dp + (1) >> 0;
			} else {
				(x$10 = d.d, ((i < 0 || i >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + i] = ((x$9 = d.d, ((i < 0 || i >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + i])) + (1) << 24 >>> 24)));
			}
			return true;
		}
		return false;
	};
	extFloat.ptr.prototype.ShortestDecimal = function(d, lower, upper) {
		var _q, _tmp, _tmp$1, _tmp$2, _tmp$3, allowance, buf, currentDiff, d, digit, digit$1, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, lower, multiplier, n, nd, pow, pow$1, shift, targetDiff, upper, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && $equal(lower, f, extFloat) && $equal(lower, upper, extFloat)) {
			buf = arrayType$1.zero();
			n = 23;
			v = f.mant;
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				v1 = $div64(v, new $Uint64(0, 10), false);
				v = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x$1.$high, v.$low - x$1.$low));
				((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = ((new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24)));
				n = n - (1) >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (true) {
				if (!(i < nd)) { break; }
				(x$3 = d.d, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i] = (x$2 = (n + 1 >> 0) + i >> 0, ((x$2 < 0 || x$2 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[x$2]))));
				i = i + (1) >> 0;
			}
			_tmp = nd;
			_tmp$1 = nd;
			d.nd = _tmp;
			d.dp = _tmp$1;
			while (true) {
				if (!(d.nd > 0 && ((x$4 = d.d, x$5 = d.nd - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) === 48))) { break; }
				d.nd = d.nd - (1) >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = $shiftLeft64(f.mant, ((((f.exp - upper.exp >> 0) >>> 0))));
			f.exp = upper.exp;
		}
		if (lower.exp > upper.exp) {
			lower.mant = $shiftLeft64(lower.mant, ((((lower.exp - upper.exp >> 0) >>> 0))));
			lower.exp = upper.exp;
		}
		exp10 = frexp10Many(lower, f, upper);
		upper.mant = (x$6 = upper.mant, x$7 = new $Uint64(0, 1), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
		lower.mant = (x$8 = lower.mant, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));
		shift = ((-upper.exp >>> 0));
		integer = (($shiftRightUint64(upper.mant, shift).$low >>> 0));
		fraction = (x$10 = upper.mant, x$11 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$10.$high - x$11.$high, x$10.$low - x$11.$low));
		allowance = (x$12 = upper.mant, x$13 = lower.mant, new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
		targetDiff = (x$14 = upper.mant, x$15 = f.mant, new $Uint64(x$14.$high - x$15.$high, x$14.$low - x$15.$low));
		integerDigits = 0;
		_tmp$2 = 0;
		_tmp$3 = new $Uint64(0, 1);
		i$1 = _tmp$2;
		pow = _tmp$3;
		while (true) {
			if (!(i$1 < 20)) { break; }
			if ((x$16 = (new $Uint64(0, integer)), (pow.$high > x$16.$high || (pow.$high === x$16.$high && pow.$low > x$16.$low)))) {
				integerDigits = i$1;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (true) {
			if (!(i$2 < integerDigits)) { break; }
			pow$1 = (x$17 = (integerDigits - i$2 >> 0) - 1 >> 0, ((x$17 < 0 || x$17 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$17]));
			digit = (_q = integer / ((pow$1.$low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			(x$18 = d.d, ((i$2 < 0 || i$2 >= x$18.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$18.$array[x$18.$offset + i$2] = (((digit + 48 >>> 0) << 24 >>> 24))));
			integer = integer - (($imul(digit, ((pow$1.$low >>> 0))) >>> 0)) >>> 0;
			currentDiff = (x$19 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$19.$high + fraction.$high, x$19.$low + fraction.$low));
			if ((currentDiff.$high < allowance.$high || (currentDiff.$high === allowance.$high && currentDiff.$low < allowance.$low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));
			}
			i$2 = i$2 + (1) >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new $Uint64(0, 1);
		while (true) {
			fraction = $mul64(fraction, (new $Uint64(0, 10)));
			multiplier = $mul64(multiplier, (new $Uint64(0, 10)));
			digit$1 = (($shiftRightUint64(fraction, shift).$low >> 0));
			(x$20 = d.d, x$21 = d.nd, ((x$21 < 0 || x$21 >= x$20.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$20.$array[x$20.$offset + x$21] = (((digit$1 + 48 >> 0) << 24 >>> 24))));
			d.nd = d.nd + (1) >> 0;
			fraction = (x$22 = $shiftLeft64((new $Uint64(0, digit$1)), shift), new $Uint64(fraction.$high - x$22.$high, fraction.$low - x$22.$low));
			if ((x$23 = $mul64(allowance, multiplier), (fraction.$high < x$23.$high || (fraction.$high === x$23.$high && fraction.$low < x$23.$low)))) {
				return adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.$val.ShortestDecimal(d, lower, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var _index, currentDiff, d, maxDiff, targetDiff, ulpBinary, ulpDecimal, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.$high < x.$high || (ulpDecimal.$high === x.$high && ulpDecimal.$low < x.$low)))) {
			return false;
		}
		while (true) {
			if (!((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.$high + x$3.$high, currentDiff.$low + x$3.$low)), new $Uint64(x$2.$high + ulpBinary.$high, x$2.$low + ulpBinary.$low)), (x$1.$high < targetDiff.$high || (x$1.$high === targetDiff.$high && x$1.$low < targetDiff.$low))))) { break; }
			_index = d.nd - 1 >> 0;
			(x$5 = d.d, ((_index < 0 || _index >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + _index] = ((x$4 = d.d, ((_index < 0 || _index >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + _index])) - (1) << 24 >>> 24)));
			currentDiff = (x$6 = ulpDecimal, new $Uint64(currentDiff.$high + x$6.$high, currentDiff.$low + x$6.$low));
		}
		if ((x$7 = new $Uint64(currentDiff.$high + ulpDecimal.$high, currentDiff.$low + ulpDecimal.$low), x$8 = (x$9 = (x$10 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.$high + x$10.$high, targetDiff.$low + x$10.$low)), new $Uint64(x$9.$high + ulpBinary.$high, x$9.$low + ulpBinary.$low)), (x$7.$high < x$8.$high || (x$7.$high === x$8.$high && x$7.$low <= x$8.$low)))) {
			return false;
		}
		if ((currentDiff.$high < ulpBinary.$high || (currentDiff.$high === ulpBinary.$high && currentDiff.$low < ulpBinary.$low)) || (x$11 = new $Uint64(maxDiff.$high - ulpBinary.$high, maxDiff.$low - ulpBinary.$low), (currentDiff.$high > x$11.$high || (currentDiff.$high === x$11.$high && currentDiff.$low > x$11.$low)))) {
			return false;
		}
		if ((d.nd === 1) && ((x$12 = d.d, (0 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 0])) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	AppendFloat = function(dst, f, fmt, prec, bitSize) {
		var bitSize, dst, f, fmt, prec;
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	$pkg.AppendFloat = AppendFloat;
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var _1, _2, _3, _4, _tuple, bitSize, bits, buf, buf$1, digits, digs, dst, exp, f, f$1, flt, fmt, lower, mant, neg, ok, prec, s, shortest, upper, val, x, x$1, x$2, x$3, y, y$1;
		bits = new $Uint64(0, 0);
		flt = ptrType$1.nil;
		_1 = bitSize;
		if (_1 === (32)) {
			bits = (new $Uint64(0, math.Float32bits(($fround(val)))));
			flt = float32info;
		} else if (_1 === (64)) {
			bits = math.Float64bits(val);
			flt = float64info;
		} else {
			$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
		exp = (($shiftRightUint64(bits, flt.mantbits).$low >> 0)) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits.$high & x$1.$high, (bits.$low & x$1.$low) >>> 0));
		_2 = exp;
		if (_2 === ((((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0))) {
			s = "";
			if (!((mant.$high === 0 && mant.$low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, s);
		} else if (_2 === (0)) {
			exp = exp + (1) >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.ptr(new $Uint64(0, 0), 0, false);
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt);
			lower = $clone(_tuple[0], extFloat);
			upper = $clone(_tuple[1], extFloat);
			buf = arrayType$2.zero();
			digs.d = new sliceType$6(buf);
			ok = f.ShortestDecimal(digs, lower, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_3 = fmt;
			if ((_3 === (101)) || (_3 === (69))) {
				prec = max(digs.nd - 1 >> 0, 0);
			} else if (_3 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_3 === (103)) || (_3 === (71))) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_4 = fmt;
			if ((_4 === (101)) || (_4 === (69))) {
				digits = digits + (1) >> 0;
			} else if ((_4 === (103)) || (_4 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = arrayType$1.zero();
				digs.d = new sliceType$6(buf$1);
				f$1 = new extFloat.ptr(mant, exp - ((flt.mantbits >> 0)) >> 0, neg);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var _1, _2, d, digs, dst, exp, flt, fmt, mant, neg, prec, shortest;
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		d.Assign(mant);
		d.Shift(exp - ((flt.mantbits >> 0)) >> 0);
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
			_1 = fmt;
			if ((_1 === (101)) || (_1 === (69))) {
				prec = digs.nd - 1 >> 0;
			} else if (_1 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_1 === (103)) || (_1 === (71))) {
				prec = digs.nd;
			}
		} else {
			_2 = fmt;
			if ((_2 === (101)) || (_2 === (69))) {
				d.Round(prec + 1 >> 0);
			} else if (_2 === (102)) {
				d.Round(d.dp + prec >> 0);
			} else if ((_2 === (103)) || (_2 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var _1, digs, dst, eprec, exp, fmt, neg, prec, shortest;
		_1 = fmt;
		if ((_1 === (101)) || (_1 === (69))) {
			return fmtE(dst, neg, $clone(digs, decimalSlice), prec, fmt);
		} else if (_1 === (102)) {
			return fmtF(dst, neg, $clone(digs, decimalSlice), prec);
		} else if ((_1 === (103)) || (_1 === (71))) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, $clone(digs, decimalSlice), prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, $clone(digs, decimalSlice), max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var d, exp, explo, flt, i, inclusive, l, lower, m, mant, mantlo, minexp, okdown, okup, u, upper, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		if ((mant.$high === 0 && mant.$low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && ($imul(332, ((d.dp - d.nd >> 0)))) >= ($imul(100, ((exp - ((flt.mantbits >> 0)) >> 0))))) {
			return;
		}
		upper = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		upper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));
		upper.Shift((exp - ((flt.mantbits >> 0)) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
			explo = exp;
		} else {
			mantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));
			explo = exp - 1 >> 0;
		}
		lower = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		lower.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));
		lower.Shift((explo - ((flt.mantbits >> 0)) >> 0) - 1 >> 0);
		inclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));
		i = 0;
		while (true) {
			if (!(i < d.nd)) { break; }
			l = 48;
			if (i < lower.nd) {
				l = (x$5 = lower.d, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i]));
			}
			m = (x$6 = d.d, ((i < 0 || i >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[i]));
			u = 48;
			if (i < upper.nd) {
				u = (x$7 = upper.d, ((i < 0 || i >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[i]));
			}
			okdown = !((l === m)) || inclusive && ((i + 1 >> 0) === lower.nd);
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(i + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(i + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(i + 1 >> 0);
				return;
			}
			i = i + (1) >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var _q, _q$1, _q$2, _r, _r$1, _r$2, ch, d, dst, exp, fmt, i, m, neg, prec, x;
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = min(d.nd, prec + 1 >> 0);
			if (i < m) {
				dst = $appendSlice(dst, $subslice(d.d, i, m));
				i = m;
			}
			while (true) {
				if (!(i <= prec)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		if (exp < 10) {
			dst = $append(dst, 48, ((exp << 24 >>> 24)) + 48 << 24 >>> 24);
		} else if (exp < 100) {
			dst = $append(dst, (((_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		} else {
			dst = $append(dst, (((_q$1 = exp / 100, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (_r$1 = (((_q$2 = exp / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24, (((_r$2 = exp % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var ch, d, dst, i, j, m, neg, prec, x;
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			m = min(d.nd, d.dp);
			dst = $appendSlice(dst, $subslice(d.d, 0, m));
			while (true) {
				if (!(m < d.dp)) { break; }
				dst = $append(dst, 48);
				m = m + (1) >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				ch = 48;
				j = d.dp + i >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x = d.d, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
				}
				dst = $append(dst, ch);
				i = i + (1) >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var _tuple, _tuple$1, dst, exp, flt, mant, neg;
		if (neg) {
			dst = $append(dst, 45);
		}
		_tuple = formatBits(dst, mant, 10, false, true);
		dst = _tuple[0];
		dst = $append(dst, 112);
		exp = exp - (((flt.mantbits >> 0))) >> 0;
		if (exp >= 0) {
			dst = $append(dst, 43);
		}
		_tuple$1 = formatBits(dst, (new $Uint64(0, exp)), 10, exp < 0, true);
		dst = _tuple$1[0];
		return dst;
	};
	min = function(a, b) {
		var a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	max = function(a, b) {
		var a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatInt = function(i, base) {
		var _tuple, base, i, s;
		if (true && (0 < i.$high || (0 === i.$high && 0 <= i.$low)) && (i.$high < 0 || (i.$high === 0 && i.$low < 100)) && (base === 10)) {
			return small((((i.$low + ((i.$high >> 31) * 4294967296)) >> 0)));
		}
		_tuple = formatBits(sliceType$6.nil, (new $Uint64(i.$high, i.$low)), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatInt = FormatInt;
	Itoa = function(i) {
		var i;
		return FormatInt((new $Int64(0, i)), 10);
	};
	$pkg.Itoa = Itoa;
	small = function(i) {
		var i, off;
		off = 0;
		if (i < 10) {
			off = 1;
		}
		return $substring("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", (($imul(i, 2)) + off >> 0), (($imul(i, 2)) + 2 >> 0));
	};
	formatBits = function(dst, u, base, neg, append_) {
		var _q, _q$1, _r, _r$1, a, append_, b, b$1, base, d, dst, i, is, is$1, is$2, j, m, neg, q, q$1, s, s$1, u, us, us$1, x, x$1, x$2, x$3, x$4, x$5;
		d = sliceType$6.nil;
		s = "";
		if (base < 2 || base > 36) {
			$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = arrayType$3.zero();
		i = 65;
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if (base === 10) {
			if (true) {
				while (true) {
					if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 1000000000)))) { break; }
					q = $div64(u, new $Uint64(0, 1000000000), false);
					us = (((x = $mul64(q, new $Uint64(0, 1000000000)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0));
					j = 4;
					while (true) {
						if (!(j > 0)) { break; }
						is = (_r = us % 100, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) * 2 >>> 0;
						us = (_q = us / (100), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
						i = i - (2) >> 0;
						(x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$1] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is + 1 >>> 0))));
						(x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$2] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is + 0 >>> 0))));
						j = j - (1) >> 0;
					}
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt(((us * 2 >>> 0) + 1 >>> 0)));
					u = q;
				}
			}
			us$1 = ((u.$low >>> 0));
			while (true) {
				if (!(us$1 >= 100)) { break; }
				is$1 = (_r$1 = us$1 % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) * 2 >>> 0;
				us$1 = (_q$1 = us$1 / (100), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				i = i - (2) >> 0;
				(x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$3] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$1 + 1 >>> 0))));
				(x$4 = i + 0 >> 0, ((x$4 < 0 || x$4 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$4] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$1 + 0 >>> 0))));
			}
			is$2 = us$1 * 2 >>> 0;
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$2 + 1 >>> 0)));
			if (us$1 >= 10) {
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt(is$2));
			}
		} else {
			s$1 = ((base < 0 || base >= shifts.length) ? ($throwRuntimeError("index out of range"), undefined) : shifts[base]);
			if (s$1 > 0) {
				b = (new $Uint64(0, base));
				m = ((base >>> 0)) - 1 >>> 0;
				while (true) {
					if (!((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low)))) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((((u.$low >>> 0)) & m) >>> 0)));
					u = $shiftRightUint64(u, (s$1));
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((u.$low >>> 0))));
			} else {
				b$1 = (new $Uint64(0, base));
				while (true) {
					if (!((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low)))) { break; }
					i = i - (1) >> 0;
					q$1 = $div64(u, b$1, false);
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((x$5 = $mul64(q$1, b$1), new $Uint64(u.$high - x$5.$high, u.$low - x$5.$low)).$low >>> 0))));
					u = q$1;
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((u.$low >>> 0))));
			}
		}
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = 45);
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new sliceType$6(a), i));
			return [d, s];
		}
		s = ($bytesToString($subslice(new sliceType$6(a), i)));
		return [d, s];
	};
	quoteWith = function(s, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _q, graphicOnly, quote, s;
		return ($bytesToString(appendQuotedWith($makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), s, quote, ASCIIonly, graphicOnly)));
	};
	appendQuotedWith = function(buf, s, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _tuple, buf, graphicOnly, quote, r, s, width;
		buf = $append(buf, quote);
		width = 0;
		while (true) {
			if (!(s.length > 0)) { break; }
			r = ((s.charCodeAt(0) >> 0));
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = $substring(s, width);
				continue;
			}
			buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly);
			s = $substring(s, width);
		}
		buf = $append(buf, quote);
		return buf;
	};
	appendQuotedRuneWith = function(buf, r, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, buf, graphicOnly, quote, r;
		buf = $append(buf, quote);
		if (!utf8.ValidRune(r)) {
			r = 65533;
		}
		buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly);
		buf = $append(buf, quote);
		return buf;
	};
	appendEscapedRune = function(buf, r, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _1, buf, graphicOnly, n, quote, r, runeTmp, s, s$1;
		runeTmp = arrayType$4.zero();
		if ((r === ((quote >> 0))) || (r === 92)) {
			buf = $append(buf, 92);
			buf = $append(buf, ((r << 24 >>> 24)));
			return buf;
		}
		if (ASCIIonly) {
			if (r < 128 && IsPrint(r)) {
				buf = $append(buf, ((r << 24 >>> 24)));
				return buf;
			}
		} else if (IsPrint(r) || graphicOnly && isInGraphicList(r)) {
			n = utf8.EncodeRune(new sliceType$6(runeTmp), r);
			buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n));
			return buf;
		}
		_1 = r;
		if (_1 === (7)) {
			buf = $appendSlice(buf, "\\a");
		} else if (_1 === (8)) {
			buf = $appendSlice(buf, "\\b");
		} else if (_1 === (12)) {
			buf = $appendSlice(buf, "\\f");
		} else if (_1 === (10)) {
			buf = $appendSlice(buf, "\\n");
		} else if (_1 === (13)) {
			buf = $appendSlice(buf, "\\r");
		} else if (_1 === (9)) {
			buf = $appendSlice(buf, "\\t");
		} else if (_1 === (11)) {
			buf = $appendSlice(buf, "\\v");
		} else {
			if (r < 32) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((((r << 24 >>> 24)) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((((r << 24 >>> 24)) & 15) >>> 0)));
			} else if (r > 1114111) {
				r = 65533;
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s >>> 0)), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else if (r < 65536) {
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s >>> 0)), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else {
				buf = $appendSlice(buf, "\\U");
				s$1 = 28;
				while (true) {
					if (!(s$1 >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s$1 >>> 0)), 31)) >> 0) & 15)));
					s$1 = s$1 - (4) >> 0;
				}
			}
		}
		return buf;
	};
	Quote = function(s) {
		var s;
		return quoteWith(s, 34, false, false);
	};
	$pkg.Quote = Quote;
	AppendQuote = function(dst, s) {
		var dst, s;
		return appendQuotedWith(dst, s, 34, false, false);
	};
	$pkg.AppendQuote = AppendQuote;
	AppendQuoteToASCII = function(dst, s) {
		var dst, s;
		return appendQuotedWith(dst, s, 34, true, false);
	};
	$pkg.AppendQuoteToASCII = AppendQuoteToASCII;
	AppendQuoteRune = function(dst, r) {
		var dst, r;
		return appendQuotedRuneWith(dst, r, 39, false, false);
	};
	$pkg.AppendQuoteRune = AppendQuoteRune;
	AppendQuoteRuneToASCII = function(dst, r) {
		var dst, r;
		return appendQuotedRuneWith(dst, r, 39, true, false);
	};
	$pkg.AppendQuoteRuneToASCII = AppendQuoteRuneToASCII;
	CanBackquote = function(s) {
		var _tuple, r, s, wid;
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			wid = _tuple[1];
			s = $substring(s, wid);
			if (wid > 1) {
				if (r === 65279) {
					return false;
				}
				continue;
			}
			if (r === 65533) {
				return false;
			}
			if ((r < 32 && !((r === 9))) || (r === 96) || (r === 127)) {
				return false;
			}
		}
		return true;
	};
	$pkg.CanBackquote = CanBackquote;
	unhex = function(b) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, c, ok, v;
		v = 0;
		ok = false;
		c = ((b >> 0));
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0;
			_tmp$1 = true;
			v = _tmp;
			ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0;
			_tmp$3 = true;
			v = _tmp$2;
			ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0;
			_tmp$5 = true;
			v = _tmp$4;
			ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = function(s, quote) {
		var _1, _2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err, j, j$1, multibyte, n, ok, quote, r, s, size, tail, v, v$1, value, x, x$1;
		value = 0;
		multibyte = false;
		tail = "";
		err = $ifaceNil;
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			size = _tuple[1];
			_tmp = r;
			_tmp$1 = true;
			_tmp$2 = $substring(s, size);
			_tmp$3 = $ifaceNil;
			value = _tmp;
			multibyte = _tmp$1;
			tail = _tmp$2;
			err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = ((s.charCodeAt(0) >> 0));
			_tmp$5 = false;
			_tmp$6 = $substring(s, 1);
			_tmp$7 = $ifaceNil;
			value = _tmp$4;
			multibyte = _tmp$5;
			tail = _tmp$6;
			err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = $substring(s, 2);
		switch (0) { default:
			_1 = c$1;
			if (_1 === (97)) {
				value = 7;
			} else if (_1 === (98)) {
				value = 8;
			} else if (_1 === (102)) {
				value = 12;
			} else if (_1 === (110)) {
				value = 10;
			} else if (_1 === (114)) {
				value = 13;
			} else if (_1 === (116)) {
				value = 9;
			} else if (_1 === (118)) {
				value = 11;
			} else if ((_1 === (120)) || (_1 === (117)) || (_1 === (85))) {
				n = 0;
				_2 = c$1;
				if (_2 === (120)) {
					n = 2;
				} else if (_2 === (117)) {
					n = 4;
				} else if (_2 === (85)) {
					n = 8;
				}
				v = 0;
				if (s.length < n) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j = 0;
				while (true) {
					if (!(j < n)) { break; }
					_tuple$1 = unhex(s.charCodeAt(j));
					x = _tuple$1[0];
					ok = _tuple$1[1];
					if (!ok) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v = (v << 4 >> 0) | x;
					j = j + (1) >> 0;
				}
				s = $substring(s, n);
				if (c$1 === 120) {
					value = v;
					break;
				}
				if (v > 1114111) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v;
				multibyte = true;
			} else if ((_1 === (48)) || (_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55))) {
				v$1 = ((c$1 >> 0)) - 48 >> 0;
				if (s.length < 2) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j$1 = 0;
				while (true) {
					if (!(j$1 < 2)) { break; }
					x$1 = ((s.charCodeAt(j$1) >> 0)) - 48 >> 0;
					if (x$1 < 0 || x$1 > 7) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v$1 = ((v$1 << 3 >> 0)) | x$1;
					j$1 = j$1 + (1) >> 0;
				}
				s = $substring(s, 2);
				if (v$1 > 255) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v$1;
			} else if (_1 === (92)) {
				value = 92;
			} else if ((_1 === (39)) || (_1 === (34))) {
				if (!((c$1 === quote))) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = ((c$1 >> 0));
			} else {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
		}
		tail = s;
		return [value, multibyte, tail, err];
	};
	$pkg.UnquoteChar = UnquoteChar;
	Unquote = function(s) {
		var _1, _q, _tuple, _tuple$1, buf, buf$1, c, err, i, multibyte, n, n$1, quote, r, runeTmp, s, size, ss;
		n = s.length;
		if (n < 2) {
			return ["", $pkg.ErrSyntax];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			return ["", $pkg.ErrSyntax];
		}
		s = $substring(s, 1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				return ["", $pkg.ErrSyntax];
			}
			if (contains(s, 13)) {
				buf = $makeSlice(sliceType$6, 0, (s.length - 1 >> 0));
				i = 0;
				while (true) {
					if (!(i < s.length)) { break; }
					if (!((s.charCodeAt(i) === 13))) {
						buf = $append(buf, s.charCodeAt(i));
					}
					i = i + (1) >> 0;
				}
				return [($bytesToString(buf)), $ifaceNil];
			}
			return [s, $ifaceNil];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			return ["", $pkg.ErrSyntax];
		}
		if (contains(s, 10)) {
			return ["", $pkg.ErrSyntax];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_1 = quote;
			if (_1 === (34)) {
				return [s, $ifaceNil];
			} else if (_1 === (39)) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				size = _tuple[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					return [s, $ifaceNil];
				}
			}
		}
		runeTmp = arrayType$4.zero();
		buf$1 = $makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple$1 = UnquoteChar(s, quote);
			c = _tuple$1[0];
			multibyte = _tuple$1[1];
			ss = _tuple$1[2];
			err = _tuple$1[3];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return ["", err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf$1 = $append(buf$1, ((c << 24 >>> 24)));
			} else {
				n$1 = utf8.EncodeRune(new sliceType$6(runeTmp), c);
				buf$1 = $appendSlice(buf$1, $subslice(new sliceType$6(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				return ["", $pkg.ErrSyntax];
			}
		}
		return [($bytesToString(buf$1)), $ifaceNil];
	};
	$pkg.Unquote = Unquote;
	contains = function(s, c) {
		var c, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === c) {
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	bsearch16 = function(a, x) {
		var _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, r, rr, rr$1, x, x$1, x$2, x$3;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = ((r << 16 >>> 16));
			_tmp$1 = isPrint16;
			_tmp$2 = isNotPrint16;
			rr = _tmp;
			isPrint = _tmp$1;
			isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.$length || rr < (x = (i & ~1) >> 0, ((x < 0 || x >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
		}
		_tmp$3 = ((r >>> 0));
		_tmp$4 = isPrint32;
		_tmp$5 = isNotPrint32;
		rr$1 = _tmp$3;
		isPrint$1 = _tmp$4;
		isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = (i$1 & ~1) >> 0, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - (65536) >> 0;
		j$1 = bsearch16(isNotPrint$1, ((r << 16 >>> 16)));
		return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === ((r << 16 >>> 16))));
	};
	$pkg.IsPrint = IsPrint;
	isInGraphicList = function(r) {
		var i, r, rr;
		if (r > 65535) {
			return false;
		}
		rr = ((r << 16 >>> 16));
		i = bsearch16(isGraphic, rr);
		return i < isGraphic.$length && (rr === ((i < 0 || i >= isGraphic.$length) ? ($throwRuntimeError("index out of range"), undefined) : isGraphic.$array[isGraphic.$offset + i]));
	};
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "set", name: "set", pkg: "strconv", typ: $funcType([$String], [$Bool], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Assign", name: "Assign", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundDown", name: "RoundDown", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundUp", name: "RoundUp", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundedInteger", name: "RoundedInteger", pkg: "", typ: $funcType([], [$Uint64], false)}];
	ptrType$4.methods = [{prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "AssignComputeBounds", name: "AssignComputeBounds", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, ptrType$1], [extFloat, extFloat], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([extFloat], [], false)}, {prop: "AssignDecimal", name: "AssignDecimal", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, $Bool, ptrType$1], [$Bool], false)}, {prop: "frexp10", name: "frexp10", pkg: "strconv", typ: $funcType([], [$Int, $Int], false)}, {prop: "FixedDecimal", name: "FixedDecimal", pkg: "", typ: $funcType([ptrType$3, $Int], [$Bool], false)}, {prop: "ShortestDecimal", name: "ShortestDecimal", pkg: "", typ: $funcType([ptrType$3, ptrType$4, ptrType$4], [$Bool], false)}];
	NumError.init("", [{prop: "Func", name: "Func", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Num", name: "Num", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", anonymous: false, exported: true, typ: $error, tag: ""}]);
	decimal.init("strconv", [{prop: "d", name: "d", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "nd", name: "nd", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "trunc", name: "trunc", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	leftCheat.init("strconv", [{prop: "delta", name: "delta", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "cutoff", name: "cutoff", anonymous: false, exported: false, typ: $String, tag: ""}]);
	extFloat.init("strconv", [{prop: "mant", name: "mant", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "exp", name: "exp", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	floatInfo.init("strconv", [{prop: "mantbits", name: "mantbits", anonymous: false, exported: false, typ: $Uint, tag: ""}, {prop: "expbits", name: "expbits", anonymous: false, exported: false, typ: $Uint, tag: ""}, {prop: "bias", name: "bias", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	decimalSlice.init("strconv", [{prop: "d", name: "d", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "nd", name: "nd", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		optimize = true;
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new sliceType$3([new leftCheat.ptr(0, ""), new leftCheat.ptr(1, "5"), new leftCheat.ptr(1, "25"), new leftCheat.ptr(1, "125"), new leftCheat.ptr(2, "625"), new leftCheat.ptr(2, "3125"), new leftCheat.ptr(2, "15625"), new leftCheat.ptr(3, "78125"), new leftCheat.ptr(3, "390625"), new leftCheat.ptr(3, "1953125"), new leftCheat.ptr(4, "9765625"), new leftCheat.ptr(4, "48828125"), new leftCheat.ptr(4, "244140625"), new leftCheat.ptr(4, "1220703125"), new leftCheat.ptr(5, "6103515625"), new leftCheat.ptr(5, "30517578125"), new leftCheat.ptr(5, "152587890625"), new leftCheat.ptr(6, "762939453125"), new leftCheat.ptr(6, "3814697265625"), new leftCheat.ptr(6, "19073486328125"), new leftCheat.ptr(7, "95367431640625"), new leftCheat.ptr(7, "476837158203125"), new leftCheat.ptr(7, "2384185791015625"), new leftCheat.ptr(7, "11920928955078125"), new leftCheat.ptr(8, "59604644775390625"), new leftCheat.ptr(8, "298023223876953125"), new leftCheat.ptr(8, "1490116119384765625"), new leftCheat.ptr(9, "7450580596923828125"), new leftCheat.ptr(9, "37252902984619140625"), new leftCheat.ptr(9, "186264514923095703125"), new leftCheat.ptr(10, "931322574615478515625"), new leftCheat.ptr(10, "4656612873077392578125"), new leftCheat.ptr(10, "23283064365386962890625"), new leftCheat.ptr(10, "116415321826934814453125"), new leftCheat.ptr(11, "582076609134674072265625"), new leftCheat.ptr(11, "2910383045673370361328125"), new leftCheat.ptr(11, "14551915228366851806640625"), new leftCheat.ptr(12, "72759576141834259033203125"), new leftCheat.ptr(12, "363797880709171295166015625"), new leftCheat.ptr(12, "1818989403545856475830078125"), new leftCheat.ptr(13, "9094947017729282379150390625"), new leftCheat.ptr(13, "45474735088646411895751953125"), new leftCheat.ptr(13, "227373675443232059478759765625"), new leftCheat.ptr(13, "1136868377216160297393798828125"), new leftCheat.ptr(14, "5684341886080801486968994140625"), new leftCheat.ptr(14, "28421709430404007434844970703125"), new leftCheat.ptr(14, "142108547152020037174224853515625"), new leftCheat.ptr(15, "710542735760100185871124267578125"), new leftCheat.ptr(15, "3552713678800500929355621337890625"), new leftCheat.ptr(15, "17763568394002504646778106689453125"), new leftCheat.ptr(16, "88817841970012523233890533447265625"), new leftCheat.ptr(16, "444089209850062616169452667236328125"), new leftCheat.ptr(16, "2220446049250313080847263336181640625"), new leftCheat.ptr(16, "11102230246251565404236316680908203125"), new leftCheat.ptr(17, "55511151231257827021181583404541015625"), new leftCheat.ptr(17, "277555756156289135105907917022705078125"), new leftCheat.ptr(17, "1387778780781445675529539585113525390625"), new leftCheat.ptr(18, "6938893903907228377647697925567626953125"), new leftCheat.ptr(18, "34694469519536141888238489627838134765625"), new leftCheat.ptr(18, "173472347597680709441192448139190673828125"), new leftCheat.ptr(19, "867361737988403547205962240695953369140625")]);
		smallPowersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(2147483648, 0), -63, false), new extFloat.ptr(new $Uint64(2684354560, 0), -60, false), new extFloat.ptr(new $Uint64(3355443200, 0), -57, false), new extFloat.ptr(new $Uint64(4194304000, 0), -54, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3276800000, 0), -47, false), new extFloat.ptr(new $Uint64(4096000000, 0), -44, false), new extFloat.ptr(new $Uint64(2560000000, 0), -40, false)]);
		powersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);
		uint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.ptr(23, 8, -127);
		float64info = new floatInfo.ptr(52, 11, -1023);
		isPrint16 = new sliceType$4([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2142, 2208, 2237, 2260, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2555, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2809, 2809, 2817, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3162, 3168, 3171, 3174, 3183, 3192, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3329, 3386, 3389, 3407, 3412, 3427, 3430, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5109, 5112, 5117, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6846, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7304, 7360, 7367, 7376, 7417, 7424, 7669, 7675, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8382, 8400, 8432, 8448, 8587, 8592, 9254, 9280, 9290, 9312, 11123, 11126, 11157, 11160, 11193, 11197, 11217, 11244, 11247, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11844, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12589, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40917, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42935, 42999, 43051, 43056, 43065, 43072, 43127, 43136, 43205, 43214, 43225, 43232, 43261, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43877, 43888, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new sliceType$4([173, 907, 909, 930, 1328, 1376, 1416, 1424, 1757, 2111, 2229, 2274, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3141, 3145, 3159, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7415, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 9215, 11209, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 42927, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new sliceType$5([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65947, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66352, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67808, 67829, 67835, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68028, 68047, 68050, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 68736, 68786, 68800, 68850, 68858, 68863, 69216, 69246, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 69968, 70006, 70016, 70093, 70096, 70132, 70144, 70206, 70272, 70313, 70320, 70378, 70384, 70393, 70400, 70412, 70415, 70416, 70419, 70457, 70460, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70656, 70749, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71133, 71168, 71236, 71248, 71257, 71264, 71276, 71296, 71351, 71360, 71369, 71424, 71449, 71453, 71467, 71472, 71487, 71840, 71922, 71935, 71935, 72384, 72440, 72704, 72773, 72784, 72812, 72816, 72847, 72850, 72886, 73728, 74649, 74752, 74868, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93952, 94020, 94032, 94078, 94095, 94111, 94176, 94176, 94208, 100332, 100352, 101106, 110592, 110593, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119272, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 121483, 121499, 121519, 122880, 122904, 122907, 122922, 124928, 125124, 125127, 125142, 125184, 125258, 125264, 125273, 125278, 125279, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127244, 127248, 127339, 127344, 127404, 127462, 127490, 127504, 127547, 127552, 127560, 127568, 127569, 127744, 128722, 128736, 128748, 128752, 128758, 128768, 128883, 128896, 128980, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 129296, 129319, 129328, 129328, 129331, 129355, 129360, 129374, 129408, 129425, 129472, 129472, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 194560, 195101, 917760, 917999]);
		isNotPrint32 = new sliceType$4([12, 39, 59, 62, 399, 926, 2057, 2102, 2134, 2291, 2564, 2580, 2584, 4285, 4405, 4576, 4626, 4743, 4745, 4750, 4766, 4868, 4905, 4913, 4916, 5210, 5212, 7177, 7223, 7336, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 55968, 57351, 57378, 57381, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 61743, 63775, 63807]);
		isGraphic = new sliceType$4([160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288]);
		shifts = $toNativeArray($kindUint, [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, $init, CaseRange, d, arrayType, sliceType$3, _CaseRanges, to, To, ToUpper;
	CaseRange = $pkg.CaseRange = $newType(0, $kindStruct, "unicode.CaseRange", true, "unicode", true, function(Lo_, Hi_, Delta_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Delta = arrayType.zero();
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Delta = Delta_;
	});
	d = $pkg.d = $newType(12, $kindArray, "unicode.d", true, "unicode", false, null);
	arrayType = $arrayType($Int32, 3);
	sliceType$3 = $sliceType(CaseRange);
	to = function(_case, r, caseRange) {
		var _case, _q, caseRange, cr, delta, hi, lo, m, r, x;
		if (_case < 0 || 3 <= _case) {
			return 65533;
		}
		lo = 0;
		hi = caseRange.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			cr = ((m < 0 || m >= caseRange.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseRange.$array[caseRange.$offset + m]);
			if (((cr.Lo >> 0)) <= r && r <= ((cr.Hi >> 0))) {
				delta = ((x = cr.Delta, ((_case < 0 || _case >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[_case])));
				if (delta > 1114111) {
					return ((cr.Lo >> 0)) + ((((((r - ((cr.Lo >> 0)) >> 0)) & ~1) >> 0) | (((_case & 1) >> 0)))) >> 0;
				}
				return r + delta >> 0;
			}
			if (r < ((cr.Lo >> 0))) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return r;
	};
	To = function(_case, r) {
		var _case, r;
		return to(_case, r, $pkg.CaseRanges);
	};
	$pkg.To = To;
	ToUpper = function(r) {
		var r;
		if (r <= 127) {
			if (97 <= r && r <= 122) {
				r = r - (32) >> 0;
			}
			return r;
		}
		return To(0, r);
	};
	$pkg.ToUpper = ToUpper;
	CaseRange.init("", [{prop: "Lo", name: "Lo", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Delta", name: "Delta", anonymous: false, exported: true, typ: d, tag: ""}]);
	d.init($Int32, 3);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_CaseRanges = new sliceType$3([new CaseRange.ptr(65, 90, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(97, 122, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(181, 181, $toNativeArray($kindInt32, [743, 0, 743])), new CaseRange.ptr(192, 214, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(216, 222, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(224, 246, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(248, 254, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(255, 255, $toNativeArray($kindInt32, [121, 0, 121])), new CaseRange.ptr(256, 303, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(304, 304, $toNativeArray($kindInt32, [0, -199, 0])), new CaseRange.ptr(305, 305, $toNativeArray($kindInt32, [-232, 0, -232])), new CaseRange.ptr(306, 311, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(313, 328, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(330, 375, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(376, 376, $toNativeArray($kindInt32, [0, -121, 0])), new CaseRange.ptr(377, 382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(383, 383, $toNativeArray($kindInt32, [-300, 0, -300])), new CaseRange.ptr(384, 384, $toNativeArray($kindInt32, [195, 0, 195])), new CaseRange.ptr(385, 385, $toNativeArray($kindInt32, [0, 210, 0])), new CaseRange.ptr(386, 389, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(390, 390, $toNativeArray($kindInt32, [0, 206, 0])), new CaseRange.ptr(391, 392, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(393, 394, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(395, 396, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(398, 398, $toNativeArray($kindInt32, [0, 79, 0])), new CaseRange.ptr(399, 399, $toNativeArray($kindInt32, [0, 202, 0])), new CaseRange.ptr(400, 400, $toNativeArray($kindInt32, [0, 203, 0])), new CaseRange.ptr(401, 402, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(403, 403, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(404, 404, $toNativeArray($kindInt32, [0, 207, 0])), new CaseRange.ptr(405, 405, $toNativeArray($kindInt32, [97, 0, 97])), new CaseRange.ptr(406, 406, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(407, 407, $toNativeArray($kindInt32, [0, 209, 0])), new CaseRange.ptr(408, 409, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(410, 410, $toNativeArray($kindInt32, [163, 0, 163])), new CaseRange.ptr(412, 412, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(413, 413, $toNativeArray($kindInt32, [0, 213, 0])), new CaseRange.ptr(414, 414, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(415, 415, $toNativeArray($kindInt32, [0, 214, 0])), new CaseRange.ptr(416, 421, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(422, 422, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(423, 424, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(425, 425, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(428, 429, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(430, 430, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(431, 432, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(433, 434, $toNativeArray($kindInt32, [0, 217, 0])), new CaseRange.ptr(435, 438, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(439, 439, $toNativeArray($kindInt32, [0, 219, 0])), new CaseRange.ptr(440, 441, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(444, 445, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(447, 447, $toNativeArray($kindInt32, [56, 0, 56])), new CaseRange.ptr(452, 452, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(453, 453, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(454, 454, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(455, 455, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(456, 456, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(457, 457, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(458, 458, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(459, 459, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(460, 460, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(461, 476, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(477, 477, $toNativeArray($kindInt32, [-79, 0, -79])), new CaseRange.ptr(478, 495, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(497, 497, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(498, 498, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(499, 499, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(500, 501, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(502, 502, $toNativeArray($kindInt32, [0, -97, 0])), new CaseRange.ptr(503, 503, $toNativeArray($kindInt32, [0, -56, 0])), new CaseRange.ptr(504, 543, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(544, 544, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(546, 563, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(570, 570, $toNativeArray($kindInt32, [0, 10795, 0])), new CaseRange.ptr(571, 572, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(573, 573, $toNativeArray($kindInt32, [0, -163, 0])), new CaseRange.ptr(574, 574, $toNativeArray($kindInt32, [0, 10792, 0])), new CaseRange.ptr(575, 576, $toNativeArray($kindInt32, [10815, 0, 10815])), new CaseRange.ptr(577, 578, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(579, 579, $toNativeArray($kindInt32, [0, -195, 0])), new CaseRange.ptr(580, 580, $toNativeArray($kindInt32, [0, 69, 0])), new CaseRange.ptr(581, 581, $toNativeArray($kindInt32, [0, 71, 0])), new CaseRange.ptr(582, 591, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(592, 592, $toNativeArray($kindInt32, [10783, 0, 10783])), new CaseRange.ptr(593, 593, $toNativeArray($kindInt32, [10780, 0, 10780])), new CaseRange.ptr(594, 594, $toNativeArray($kindInt32, [10782, 0, 10782])), new CaseRange.ptr(595, 595, $toNativeArray($kindInt32, [-210, 0, -210])), new CaseRange.ptr(596, 596, $toNativeArray($kindInt32, [-206, 0, -206])), new CaseRange.ptr(598, 599, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(601, 601, $toNativeArray($kindInt32, [-202, 0, -202])), new CaseRange.ptr(603, 603, $toNativeArray($kindInt32, [-203, 0, -203])), new CaseRange.ptr(604, 604, $toNativeArray($kindInt32, [42319, 0, 42319])), new CaseRange.ptr(608, 608, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(609, 609, $toNativeArray($kindInt32, [42315, 0, 42315])), new CaseRange.ptr(611, 611, $toNativeArray($kindInt32, [-207, 0, -207])), new CaseRange.ptr(613, 613, $toNativeArray($kindInt32, [42280, 0, 42280])), new CaseRange.ptr(614, 614, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(616, 616, $toNativeArray($kindInt32, [-209, 0, -209])), new CaseRange.ptr(617, 617, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(618, 618, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(619, 619, $toNativeArray($kindInt32, [10743, 0, 10743])), new CaseRange.ptr(620, 620, $toNativeArray($kindInt32, [42305, 0, 42305])), new CaseRange.ptr(623, 623, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(625, 625, $toNativeArray($kindInt32, [10749, 0, 10749])), new CaseRange.ptr(626, 626, $toNativeArray($kindInt32, [-213, 0, -213])), new CaseRange.ptr(629, 629, $toNativeArray($kindInt32, [-214, 0, -214])), new CaseRange.ptr(637, 637, $toNativeArray($kindInt32, [10727, 0, 10727])), new CaseRange.ptr(640, 640, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(643, 643, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(647, 647, $toNativeArray($kindInt32, [42282, 0, 42282])), new CaseRange.ptr(648, 648, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(649, 649, $toNativeArray($kindInt32, [-69, 0, -69])), new CaseRange.ptr(650, 651, $toNativeArray($kindInt32, [-217, 0, -217])), new CaseRange.ptr(652, 652, $toNativeArray($kindInt32, [-71, 0, -71])), new CaseRange.ptr(658, 658, $toNativeArray($kindInt32, [-219, 0, -219])), new CaseRange.ptr(669, 669, $toNativeArray($kindInt32, [42261, 0, 42261])), new CaseRange.ptr(670, 670, $toNativeArray($kindInt32, [42258, 0, 42258])), new CaseRange.ptr(837, 837, $toNativeArray($kindInt32, [84, 0, 84])), new CaseRange.ptr(880, 883, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(886, 887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(891, 893, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(895, 895, $toNativeArray($kindInt32, [0, 116, 0])), new CaseRange.ptr(902, 902, $toNativeArray($kindInt32, [0, 38, 0])), new CaseRange.ptr(904, 906, $toNativeArray($kindInt32, [0, 37, 0])), new CaseRange.ptr(908, 908, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(910, 911, $toNativeArray($kindInt32, [0, 63, 0])), new CaseRange.ptr(913, 929, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(931, 939, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(940, 940, $toNativeArray($kindInt32, [-38, 0, -38])), new CaseRange.ptr(941, 943, $toNativeArray($kindInt32, [-37, 0, -37])), new CaseRange.ptr(945, 961, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(962, 962, $toNativeArray($kindInt32, [-31, 0, -31])), new CaseRange.ptr(963, 971, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(972, 972, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(973, 974, $toNativeArray($kindInt32, [-63, 0, -63])), new CaseRange.ptr(975, 975, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(976, 976, $toNativeArray($kindInt32, [-62, 0, -62])), new CaseRange.ptr(977, 977, $toNativeArray($kindInt32, [-57, 0, -57])), new CaseRange.ptr(981, 981, $toNativeArray($kindInt32, [-47, 0, -47])), new CaseRange.ptr(982, 982, $toNativeArray($kindInt32, [-54, 0, -54])), new CaseRange.ptr(983, 983, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(984, 1007, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1008, 1008, $toNativeArray($kindInt32, [-86, 0, -86])), new CaseRange.ptr(1009, 1009, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1010, 1010, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(1011, 1011, $toNativeArray($kindInt32, [-116, 0, -116])), new CaseRange.ptr(1012, 1012, $toNativeArray($kindInt32, [0, -60, 0])), new CaseRange.ptr(1013, 1013, $toNativeArray($kindInt32, [-96, 0, -96])), new CaseRange.ptr(1015, 1016, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1017, 1017, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(1018, 1019, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1021, 1023, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(1024, 1039, $toNativeArray($kindInt32, [0, 80, 0])), new CaseRange.ptr(1040, 1071, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(1072, 1103, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(1104, 1119, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1120, 1153, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1162, 1215, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1216, 1216, $toNativeArray($kindInt32, [0, 15, 0])), new CaseRange.ptr(1217, 1230, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1231, 1231, $toNativeArray($kindInt32, [-15, 0, -15])), new CaseRange.ptr(1232, 1327, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1329, 1366, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(1377, 1414, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(4256, 4293, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4295, 4295, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4301, 4301, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(5024, 5103, $toNativeArray($kindInt32, [0, 38864, 0])), new CaseRange.ptr(5104, 5109, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(5112, 5117, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(7296, 7296, $toNativeArray($kindInt32, [-6254, 0, -6254])), new CaseRange.ptr(7297, 7297, $toNativeArray($kindInt32, [-6253, 0, -6253])), new CaseRange.ptr(7298, 7298, $toNativeArray($kindInt32, [-6244, 0, -6244])), new CaseRange.ptr(7299, 7300, $toNativeArray($kindInt32, [-6242, 0, -6242])), new CaseRange.ptr(7301, 7301, $toNativeArray($kindInt32, [-6243, 0, -6243])), new CaseRange.ptr(7302, 7302, $toNativeArray($kindInt32, [-6236, 0, -6236])), new CaseRange.ptr(7303, 7303, $toNativeArray($kindInt32, [-6181, 0, -6181])), new CaseRange.ptr(7304, 7304, $toNativeArray($kindInt32, [35266, 0, 35266])), new CaseRange.ptr(7545, 7545, $toNativeArray($kindInt32, [35332, 0, 35332])), new CaseRange.ptr(7549, 7549, $toNativeArray($kindInt32, [3814, 0, 3814])), new CaseRange.ptr(7680, 7829, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7835, 7835, $toNativeArray($kindInt32, [-59, 0, -59])), new CaseRange.ptr(7838, 7838, $toNativeArray($kindInt32, [0, -7615, 0])), new CaseRange.ptr(7840, 7935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7936, 7943, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7944, 7951, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7952, 7957, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7960, 7965, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7968, 7975, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7976, 7983, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7984, 7991, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7992, 7999, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8000, 8005, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8008, 8013, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8017, 8017, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8019, 8019, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8021, 8021, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8023, 8023, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8025, 8025, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8027, 8027, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8029, 8029, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8031, 8031, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8032, 8039, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8040, 8047, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8048, 8049, $toNativeArray($kindInt32, [74, 0, 74])), new CaseRange.ptr(8050, 8053, $toNativeArray($kindInt32, [86, 0, 86])), new CaseRange.ptr(8054, 8055, $toNativeArray($kindInt32, [100, 0, 100])), new CaseRange.ptr(8056, 8057, $toNativeArray($kindInt32, [128, 0, 128])), new CaseRange.ptr(8058, 8059, $toNativeArray($kindInt32, [112, 0, 112])), new CaseRange.ptr(8060, 8061, $toNativeArray($kindInt32, [126, 0, 126])), new CaseRange.ptr(8064, 8071, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8072, 8079, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8080, 8087, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8088, 8095, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8096, 8103, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8104, 8111, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8112, 8113, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8115, 8115, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8120, 8121, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8122, 8123, $toNativeArray($kindInt32, [0, -74, 0])), new CaseRange.ptr(8124, 8124, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8126, 8126, $toNativeArray($kindInt32, [-7205, 0, -7205])), new CaseRange.ptr(8131, 8131, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8136, 8139, $toNativeArray($kindInt32, [0, -86, 0])), new CaseRange.ptr(8140, 8140, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8144, 8145, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8152, 8153, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8154, 8155, $toNativeArray($kindInt32, [0, -100, 0])), new CaseRange.ptr(8160, 8161, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8165, 8165, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(8168, 8169, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8170, 8171, $toNativeArray($kindInt32, [0, -112, 0])), new CaseRange.ptr(8172, 8172, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(8179, 8179, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8184, 8185, $toNativeArray($kindInt32, [0, -128, 0])), new CaseRange.ptr(8186, 8187, $toNativeArray($kindInt32, [0, -126, 0])), new CaseRange.ptr(8188, 8188, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8486, 8486, $toNativeArray($kindInt32, [0, -7517, 0])), new CaseRange.ptr(8490, 8490, $toNativeArray($kindInt32, [0, -8383, 0])), new CaseRange.ptr(8491, 8491, $toNativeArray($kindInt32, [0, -8262, 0])), new CaseRange.ptr(8498, 8498, $toNativeArray($kindInt32, [0, 28, 0])), new CaseRange.ptr(8526, 8526, $toNativeArray($kindInt32, [-28, 0, -28])), new CaseRange.ptr(8544, 8559, $toNativeArray($kindInt32, [0, 16, 0])), new CaseRange.ptr(8560, 8575, $toNativeArray($kindInt32, [-16, 0, -16])), new CaseRange.ptr(8579, 8580, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(9398, 9423, $toNativeArray($kindInt32, [0, 26, 0])), new CaseRange.ptr(9424, 9449, $toNativeArray($kindInt32, [-26, 0, -26])), new CaseRange.ptr(11264, 11310, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(11312, 11358, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(11360, 11361, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11362, 11362, $toNativeArray($kindInt32, [0, -10743, 0])), new CaseRange.ptr(11363, 11363, $toNativeArray($kindInt32, [0, -3814, 0])), new CaseRange.ptr(11364, 11364, $toNativeArray($kindInt32, [0, -10727, 0])), new CaseRange.ptr(11365, 11365, $toNativeArray($kindInt32, [-10795, 0, -10795])), new CaseRange.ptr(11366, 11366, $toNativeArray($kindInt32, [-10792, 0, -10792])), new CaseRange.ptr(11367, 11372, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11373, 11373, $toNativeArray($kindInt32, [0, -10780, 0])), new CaseRange.ptr(11374, 11374, $toNativeArray($kindInt32, [0, -10749, 0])), new CaseRange.ptr(11375, 11375, $toNativeArray($kindInt32, [0, -10783, 0])), new CaseRange.ptr(11376, 11376, $toNativeArray($kindInt32, [0, -10782, 0])), new CaseRange.ptr(11378, 11379, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11381, 11382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11390, 11391, $toNativeArray($kindInt32, [0, -10815, 0])), new CaseRange.ptr(11392, 11491, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11499, 11502, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11506, 11507, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11520, 11557, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11559, 11559, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11565, 11565, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(42560, 42605, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42624, 42651, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42786, 42799, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42802, 42863, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42873, 42876, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42877, 42877, $toNativeArray($kindInt32, [0, -35332, 0])), new CaseRange.ptr(42878, 42887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42891, 42892, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42893, 42893, $toNativeArray($kindInt32, [0, -42280, 0])), new CaseRange.ptr(42896, 42899, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42902, 42921, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42922, 42922, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42923, 42923, $toNativeArray($kindInt32, [0, -42319, 0])), new CaseRange.ptr(42924, 42924, $toNativeArray($kindInt32, [0, -42315, 0])), new CaseRange.ptr(42925, 42925, $toNativeArray($kindInt32, [0, -42305, 0])), new CaseRange.ptr(42926, 42926, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42928, 42928, $toNativeArray($kindInt32, [0, -42258, 0])), new CaseRange.ptr(42929, 42929, $toNativeArray($kindInt32, [0, -42282, 0])), new CaseRange.ptr(42930, 42930, $toNativeArray($kindInt32, [0, -42261, 0])), new CaseRange.ptr(42931, 42931, $toNativeArray($kindInt32, [0, 928, 0])), new CaseRange.ptr(42932, 42935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(43859, 43859, $toNativeArray($kindInt32, [-928, 0, -928])), new CaseRange.ptr(43888, 43967, $toNativeArray($kindInt32, [-38864, 0, -38864])), new CaseRange.ptr(65313, 65338, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(65345, 65370, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(66560, 66599, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66600, 66639, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(66736, 66771, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66776, 66811, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(68736, 68786, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(68800, 68850, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(71840, 71871, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(71872, 71903, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(125184, 125217, $toNativeArray($kindInt32, [0, 34, 0])), new CaseRange.ptr(125218, 125251, $toNativeArray($kindInt32, [-34, 0, -34]))]);
		$pkg.CaseRanges = _CaseRanges;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, $init, errors, js, math, runtime, strconv, sync, unicode, utf8, uncommonType, funcType, name, nameData, mapIter, Type, Kind, tflag, rtype, typeAlg, method, ChanDir, arrayType, chanType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, nameOff, typeOff, textOff, StructField, StructTag, fieldScan, Value, flag, ValueError, sliceType$1, ptrType$1, sliceType$2, sliceType$3, ptrType$2, funcType$1, sliceType$4, ptrType$3, ptrType$4, sliceType$5, sliceType$6, sliceType$7, ptrType$5, ptrType$6, structType$3, sliceType$8, sliceType$9, sliceType$10, sliceType$11, ptrType$7, ptrType$8, sliceType$13, sliceType$14, ptrType$9, sliceType$15, ptrType$15, sliceType$17, ptrType$16, funcType$3, funcType$4, funcType$5, ptrType$17, arrayType$12, ptrType$18, initialized, uncommonTypeMap, nameMap, nameOffList, typeOffList, callHelper, jsObjectPtr, selectHelper, kindNames, methodCache, uint8Type, init, jsType, reflectType, setKindType, newName, newNameOff, newTypeOff, internalStr, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, FuncOf, SliceOf, Zero, unsafe_New, makeInt, typedmemmove, keyFor, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapiternext, maplen, cvtDirect, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, chanrecv, chansend, PtrTo, implements$1, directlyAssignable, haveIdenticalType, haveIdenticalUnderlyingType, toType, ifaceIndir, overflowFloat32, New, convertOp, makeFloat, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	math = $packages["math"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", true, "reflect", false, function(pkgPath_, mcount_, _$2_, moff_, _$4_, _methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pkgPath = 0;
			this.mcount = 0;
			this._$2 = 0;
			this.moff = 0;
			this._$4 = 0;
			this._methods = sliceType$5.nil;
			return;
		}
		this.pkgPath = pkgPath_;
		this.mcount = mcount_;
		this._$2 = _$2_;
		this.moff = moff_;
		this._$4 = _$4_;
		this._methods = _methods_;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", true, "reflect", false, function(rtype_, inCount_, outCount_, _in_, _out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.inCount = 0;
			this.outCount = 0;
			this._in = sliceType$2.nil;
			this._out = sliceType$2.nil;
			return;
		}
		this.rtype = rtype_;
		this.inCount = inCount_;
		this.outCount = outCount_;
		this._in = _in_;
		this._out = _out_;
	});
	name = $pkg.name = $newType(0, $kindStruct, "reflect.name", true, "reflect", false, function(bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bytes = ptrType$4.nil;
			return;
		}
		this.bytes = bytes_;
	});
	nameData = $pkg.nameData = $newType(0, $kindStruct, "reflect.nameData", true, "reflect", false, function(name_, tag_, pkgPath_, exported_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.tag = "";
			this.pkgPath = "";
			this.exported = false;
			return;
		}
		this.name = name_;
		this.tag = tag_;
		this.pkgPath = pkgPath_;
		this.exported = exported_;
	});
	mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflect.mapIter", true, "reflect", false, function(t_, m_, keys_, i_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = $ifaceNil;
			this.m = null;
			this.keys = null;
			this.i = 0;
			return;
		}
		this.t = t_;
		this.m = m_;
		this.keys = keys_;
		this.i = i_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", true, "reflect", true, null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", true, "reflect", true, null);
	tflag = $pkg.tflag = $newType(1, $kindUint8, "reflect.tflag", true, "reflect", false, null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", true, "reflect", false, function(size_, ptrdata_, hash_, tflag_, align_, fieldAlign_, kind_, alg_, gcdata_, str_, ptrToThis_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.ptrdata = 0;
			this.hash = 0;
			this.tflag = 0;
			this.align = 0;
			this.fieldAlign = 0;
			this.kind = 0;
			this.alg = ptrType$3.nil;
			this.gcdata = ptrType$4.nil;
			this.str = 0;
			this.ptrToThis = 0;
			return;
		}
		this.size = size_;
		this.ptrdata = ptrdata_;
		this.hash = hash_;
		this.tflag = tflag_;
		this.align = align_;
		this.fieldAlign = fieldAlign_;
		this.kind = kind_;
		this.alg = alg_;
		this.gcdata = gcdata_;
		this.str = str_;
		this.ptrToThis = ptrToThis_;
	});
	typeAlg = $pkg.typeAlg = $newType(0, $kindStruct, "reflect.typeAlg", true, "reflect", false, function(hash_, equal_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.hash = $throwNilPointerError;
			this.equal = $throwNilPointerError;
			return;
		}
		this.hash = hash_;
		this.equal = equal_;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflect.method", true, "reflect", false, function(name_, mtyp_, ifn_, tfn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.mtyp = 0;
			this.ifn = 0;
			this.tfn = 0;
			return;
		}
		this.name = name_;
		this.mtyp = mtyp_;
		this.ifn = ifn_;
		this.tfn = tfn_;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", true, "reflect", true, null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", true, "reflect", false, function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.slice = ptrType$1.nil;
			this.len = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.slice = slice_;
		this.len = len_;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", true, "reflect", false, function(rtype_, elem_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.dir = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.dir = dir_;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", true, "reflect", false, function(name_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.typ = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", true, "reflect", false, function(rtype_, pkgPath_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$4.nil);
			this.methods = sliceType$6.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.methods = methods_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", true, "reflect", false, function(rtype_, key_, elem_, bucket_, hmap_, keysize_, indirectkey_, valuesize_, indirectvalue_, bucketsize_, reflexivekey_, needkeyupdate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.key = ptrType$1.nil;
			this.elem = ptrType$1.nil;
			this.bucket = ptrType$1.nil;
			this.hmap = ptrType$1.nil;
			this.keysize = 0;
			this.indirectkey = 0;
			this.valuesize = 0;
			this.indirectvalue = 0;
			this.bucketsize = 0;
			this.reflexivekey = false;
			this.needkeyupdate = false;
			return;
		}
		this.rtype = rtype_;
		this.key = key_;
		this.elem = elem_;
		this.bucket = bucket_;
		this.hmap = hmap_;
		this.keysize = keysize_;
		this.indirectkey = indirectkey_;
		this.valuesize = valuesize_;
		this.indirectvalue = indirectvalue_;
		this.bucketsize = bucketsize_;
		this.reflexivekey = reflexivekey_;
		this.needkeyupdate = needkeyupdate_;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", true, "reflect", false, function(name_, typ_, offsetAnon_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = new name.ptr(ptrType$4.nil);
			this.typ = ptrType$1.nil;
			this.offsetAnon = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
		this.offsetAnon = offsetAnon_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", true, "reflect", false, function(rtype_, pkgPath_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$4.nil);
			this.fields = sliceType$7.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.fields = fields_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", true, "reflect", true, function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Func = new Value.ptr(ptrType$1.nil, 0, 0);
			this.Index = 0;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Func = Func_;
		this.Index = Index_;
	});
	nameOff = $pkg.nameOff = $newType(4, $kindInt32, "reflect.nameOff", true, "reflect", false, null);
	typeOff = $pkg.typeOff = $newType(4, $kindInt32, "reflect.typeOff", true, "reflect", false, null);
	textOff = $pkg.textOff = $newType(4, $kindInt32, "reflect.textOff", true, "reflect", false, null);
	StructField = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", true, "reflect", true, function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Tag = "";
			this.Offset = 0;
			this.Index = sliceType$13.nil;
			this.Anonymous = false;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Tag = Tag_;
		this.Offset = Offset_;
		this.Index = Index_;
		this.Anonymous = Anonymous_;
	});
	StructTag = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", true, "reflect", true, null);
	fieldScan = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", true, "reflect", false, function(typ_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$9.nil;
			this.index = sliceType$13.nil;
			return;
		}
		this.typ = typ_;
		this.index = index_;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", true, "reflect", true, function(typ_, ptr_, flag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$1.nil;
			this.ptr = 0;
			this.flag = 0;
			return;
		}
		this.typ = typ_;
		this.ptr = ptr_;
		this.flag = flag_;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", true, "reflect", false, null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", true, "reflect", true, function(Method_, Kind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Kind = 0;
			return;
		}
		this.Method = Method_;
		this.Kind = Kind_;
	});
	sliceType$1 = $sliceType(name);
	ptrType$1 = $ptrType(rtype);
	sliceType$2 = $sliceType(ptrType$1);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$2 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$3], [ptrType$2], true);
	sliceType$4 = $sliceType($String);
	ptrType$3 = $ptrType(typeAlg);
	ptrType$4 = $ptrType($Uint8);
	sliceType$5 = $sliceType(method);
	sliceType$6 = $sliceType(imethod);
	sliceType$7 = $sliceType(structField);
	ptrType$5 = $ptrType(uncommonType);
	ptrType$6 = $ptrType(nameData);
	structType$3 = $structType("reflect", [{prop: "str", name: "str", anonymous: false, exported: false, typ: $String, tag: ""}]);
	sliceType$8 = $sliceType(ptrType$2);
	sliceType$9 = $sliceType(Value);
	sliceType$10 = $sliceType(Type);
	sliceType$11 = $sliceType(sliceType$8);
	ptrType$7 = $ptrType(interfaceType);
	ptrType$8 = $ptrType(imethod);
	sliceType$13 = $sliceType($Int);
	sliceType$14 = $sliceType(fieldScan);
	ptrType$9 = $ptrType(structType);
	sliceType$15 = $sliceType($Uint8);
	ptrType$15 = $ptrType($UnsafePointer);
	sliceType$17 = $sliceType($Int32);
	ptrType$16 = $ptrType(funcType);
	funcType$3 = $funcType([$String], [$Bool], false);
	funcType$4 = $funcType([$UnsafePointer, $Uintptr], [$Uintptr], false);
	funcType$5 = $funcType([$UnsafePointer, $UnsafePointer], [$Bool], false);
	ptrType$17 = $ptrType(structField);
	arrayType$12 = $arrayType($Uintptr, 2);
	ptrType$18 = $ptrType(ValueError);
	init = function() {
		var used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; used = $f.used; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		used = (function(i) {
			var i;
		});
		$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$1 = new uncommonType.ptr(0, 0, 0, 0, 0, sliceType$5.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$2 = new method.ptr(0, 0, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$3 = new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$4 = new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$5 = new funcType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), 0, 0, sliceType$2.nil, sliceType$2.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), new name.ptr(ptrType$4.nil), sliceType$6.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$7 = new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$8 = new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$9 = new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$10 = new structType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), new name.ptr(ptrType$4.nil), sliceType$7.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$11 = new imethod.ptr(0, 0), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$12 = new structField.ptr(new name.ptr(ptrType$4.nil), ptrType$1.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.used = used; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	jsType = function(typ) {
		var typ;
		return typ.jsType;
	};
	reflectType = function(typ) {
		var _1, _i, _i$1, _i$2, _i$3, _i$4, _key, _ref, _ref$1, _ref$2, _ref$3, _ref$4, dir, f, fields, i, i$1, i$2, i$3, i$4, imethods, in$1, m, m$1, methodSet, methods, offsetAnon, out, outCount, params, reflectFields, reflectMethods, results, rt, typ, ut;
		if (typ.reflectType === undefined) {
			rt = new rtype.ptr(((($parseInt(typ.size) >> 0) >>> 0)), 0, 0, 0, 0, 0, ((($parseInt(typ.kind) >> 0) << 24 >>> 24)), ptrType$3.nil, ptrType$4.nil, newNameOff($clone(newName(internalStr(typ.string), "", "", !!(typ.exported)), name)), 0);
			rt.jsType = typ;
			typ.reflectType = rt;
			methodSet = $methodSet(typ);
			if (!(($parseInt(methodSet.length) === 0)) || !!(typ.named)) {
				rt.tflag = (rt.tflag | (1)) >>> 0;
				if (!!(typ.named)) {
					rt.tflag = (rt.tflag | (4)) >>> 0;
				}
				reflectMethods = $makeSlice(sliceType$5, $parseInt(methodSet.length));
				_ref = reflectMethods;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					m = methodSet[i];
					method.copy(((i < 0 || i >= reflectMethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectMethods.$array[reflectMethods.$offset + i]), new method.ptr(newNameOff($clone(newName(internalStr(m.name), "", "", internalStr(m.pkg) === ""), name)), newTypeOff(reflectType(m.typ)), 0, 0));
					_i++;
				}
				ut = new uncommonType.ptr(newNameOff($clone(newName(internalStr(typ.pkg), "", "", false), name)), (($parseInt(methodSet.length) << 16 >>> 16)), 0, 0, 0, reflectMethods);
				_key = rt; (uncommonTypeMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: ut };
				ut.jsType = typ;
			}
			_1 = rt.Kind();
			if (_1 === (17)) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem), ptrType$1.nil, ((($parseInt(typ.len) >> 0) >>> 0))));
			} else if (_1 === (18)) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem), ((dir >>> 0))));
			} else if (_1 === (19)) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$2, $parseInt(params.length));
				_ref$1 = in$1;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					i$1 = _i$1;
					((i$1 < 0 || i$1 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i$1] = reflectType(params[i$1]));
					_i$1++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$2, $parseInt(results.length));
				_ref$2 = out;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$2 = _i$2;
					((i$2 < 0 || i$2 >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i$2] = reflectType(results[i$2]));
					_i$2++;
				}
				outCount = (($parseInt(results.length) << 16 >>> 16));
				if (!!(typ.variadic)) {
					outCount = (outCount | (32768)) >>> 0;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), (($parseInt(params.length) << 16 >>> 16)), outCount, in$1, out));
			} else if (_1 === (20)) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$6, $parseInt(methods.length));
				_ref$3 = imethods;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$3.$length)) { break; }
					i$3 = _i$3;
					m$1 = methods[i$3];
					imethod.copy(((i$3 < 0 || i$3 >= imethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : imethods.$array[imethods.$offset + i$3]), new imethod.ptr(newNameOff($clone(newName(internalStr(m$1.name), "", "", internalStr(m$1.pkg) === ""), name)), newTypeOff(reflectType(m$1.typ))));
					_i$3++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkg), "", "", false), name), imethods));
			} else if (_1 === (21)) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false));
			} else if (_1 === (22)) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (23)) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (25)) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$7, $parseInt(fields.length));
				_ref$4 = reflectFields;
				_i$4 = 0;
				while (true) {
					if (!(_i$4 < _ref$4.$length)) { break; }
					i$4 = _i$4;
					f = fields[i$4];
					offsetAnon = ((i$4 >>> 0)) << 1 >>> 0;
					if (!!(f.anonymous)) {
						offsetAnon = (offsetAnon | (1)) >>> 0;
					}
					structField.copy(((i$4 < 0 || i$4 >= reflectFields.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectFields.$array[reflectFields.$offset + i$4]), new structField.ptr($clone(newName(internalStr(f.name), internalStr(f.tag), "", !!(f.exported)), name), reflectType(f.typ), offsetAnon));
					_i$4++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkgPath), "", "", false), name), reflectFields));
			}
		}
		return ((typ.reflectType));
	};
	setKindType = function(rt, kindType) {
		var kindType, rt;
		rt.kindType = kindType;
		kindType.rtype = rt;
	};
	uncommonType.ptr.prototype.methods = function() {
		var t;
		t = this;
		return t._methods;
	};
	uncommonType.prototype.methods = function() { return this.$val.methods(); };
	rtype.ptr.prototype.uncommon = function() {
		var _entry, t;
		t = this;
		return (_entry = uncommonTypeMap[ptrType$1.keyFor(t)], _entry !== undefined ? _entry.v : ptrType$5.nil);
	};
	rtype.prototype.uncommon = function() { return this.$val.uncommon(); };
	funcType.ptr.prototype.in$ = function() {
		var t;
		t = this;
		return t._in;
	};
	funcType.prototype.in$ = function() { return this.$val.in$(); };
	funcType.ptr.prototype.out = function() {
		var t;
		t = this;
		return t._out;
	};
	funcType.prototype.out = function() { return this.$val.out(); };
	name.ptr.prototype.name = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = nameMap[ptrType$4.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$6.nil).name;
		return s;
	};
	name.prototype.name = function() { return this.$val.name(); };
	name.ptr.prototype.tag = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = nameMap[ptrType$4.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$6.nil).tag;
		return s;
	};
	name.prototype.tag = function() { return this.$val.tag(); };
	name.ptr.prototype.pkgPath = function() {
		var _entry, n;
		n = this;
		return (_entry = nameMap[ptrType$4.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$6.nil).pkgPath;
	};
	name.prototype.pkgPath = function() { return this.$val.pkgPath(); };
	name.ptr.prototype.isExported = function() {
		var _entry, n;
		n = this;
		return (_entry = nameMap[ptrType$4.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$6.nil).exported;
	};
	name.prototype.isExported = function() { return this.$val.isExported(); };
	newName = function(n, tag, pkgPath, exported) {
		var _key, b, exported, n, pkgPath, tag;
		b = $newDataPointer(0, ptrType$4);
		_key = b; (nameMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$4.keyFor(_key)] = { k: _key, v: new nameData.ptr(n, tag, pkgPath, exported) };
		return new name.ptr(b);
	};
	rtype.ptr.prototype.nameOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= nameOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : nameOffList.$array[nameOffList.$offset + x]));
	};
	rtype.prototype.nameOff = function(off) { return this.$val.nameOff(off); };
	newNameOff = function(n) {
		var i, n;
		i = nameOffList.$length;
		nameOffList = $append(nameOffList, n);
		return ((i >> 0));
	};
	rtype.ptr.prototype.typeOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= typeOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : typeOffList.$array[typeOffList.$offset + x]));
	};
	rtype.prototype.typeOff = function(off) { return this.$val.typeOff(off); };
	newTypeOff = function(t) {
		var i, t;
		i = typeOffList.$length;
		typeOffList = $append(typeOffList, t);
		return ((i >> 0));
	};
	internalStr = function(strObj) {
		var c, strObj;
		c = new structType$3.ptr("");
		c.str = strObj;
		return c.str;
	};
	isWrapped = function(typ) {
		var typ;
		return !!(jsType(typ).wrapped);
	};
	copyStruct = function(dst, src, typ) {
		var dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; _v$1 = $f._v$1; fl = $f.fl; rt = $f.rt; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rt = _r;
		_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
		_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 25; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3 === 22; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return new Value.ptr(rt, (v), (fl | ((_r$4 >>> 0))) >>> 0);
		/* } */ case 3:
		_r$5 = t.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(rt, ($newDataPointer(v, jsType(rt.ptrTo()))), (((fl | ((_r$5 >>> 0))) >>> 0) | 128) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeValue }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f._v$1 = _v$1; $f.fl = fl; $f.rt = rt; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	MakeSlice = function(typ, len, cap) {
		var _r, _r$1, cap, len, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; len = $f.len; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		typ = [typ];
		_r = typ[0].Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 23))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 23))) { */ case 1:
			$panic(new $String("reflect.MakeSlice of non-slice type"));
		/* } */ case 2:
		if (len < 0) {
			$panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			$panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			$panic(new $String("reflect.MakeSlice: len > cap"));
		}
		_r$1 = makeValue(typ[0], $makeSlice(jsType(typ[0]), len, cap, (function(typ) { return function $b() {
			var _r$1, _r$2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$1 = typ[0].Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = jsType(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2.zero();
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f.$s = $s; $f.$r = $r; return $f;
		}; })(typ)), 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeSlice }; } $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.len = len; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeSlice = MakeSlice;
	TypeOf = function(i) {
		var i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	$pkg.TypeOf = TypeOf;
	ValueOf = function(i) {
		var _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(i, $ifaceNil)) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ValueOf }; } $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ValueOf = ValueOf;
	FuncOf = function(in$1, out, variadic) {
		var _i, _i$1, _r, _ref, _ref$1, _v, _v$1, i, i$1, in$1, jsIn, jsOut, out, v, v$1, variadic, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; _v$1 = $f._v$1; i = $f.i; i$1 = $f.i$1; in$1 = $f.in$1; jsIn = $f.jsIn; jsOut = $f.jsOut; out = $f.out; v = $f.v; v$1 = $f.v$1; variadic = $f.variadic; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!(variadic)) { _v = false; $s = 3; continue s; }
		if (in$1.$length === 0) { _v$1 = true; $s = 4; continue s; }
		_r = (x = in$1.$length - 1 >> 0, ((x < 0 || x >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x])).Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v$1 = !((_r === 23)); case 4:
		_v = _v$1; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect.FuncOf: last arg of variadic func must be slice"));
		/* } */ case 2:
		jsIn = $makeSlice(sliceType$8, in$1.$length);
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= jsIn.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsIn.$array[jsIn.$offset + i] = jsType(v));
			_i++;
		}
		jsOut = $makeSlice(sliceType$8, out.$length);
		_ref$1 = out;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			((i$1 < 0 || i$1 >= jsOut.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsOut.$array[jsOut.$offset + i$1] = jsType(v$1));
			_i$1++;
		}
		$s = -1; return reflectType($funcType($externalize(jsIn, sliceType$8), $externalize(jsOut, sliceType$8), $externalize(variadic, $Bool)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncOf }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f._v$1 = _v$1; $f.i = i; $f.i$1 = i$1; $f.in$1 = in$1; $f.jsIn = jsIn; $f.jsOut = jsOut; $f.out = out; $f.v = v; $f.v$1 = v$1; $f.variadic = variadic; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FuncOf = FuncOf;
	rtype.ptr.prototype.ptrTo = function() {
		var t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = function(t) {
		var t;
		return reflectType($sliceType(jsType(t)));
	};
	$pkg.SliceOf = SliceOf;
	Zero = function(typ) {
		var _r, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeValue(typ, jsType(typ).zero(), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Zero }; } $f._r = _r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Zero = Zero;
	unsafe_New = function(typ) {
		var _1, typ;
		_1 = typ.Kind();
		if (_1 === (25)) {
			return (new (jsType(typ).ptr)());
		} else if (_1 === (17)) {
			return (jsType(typ).zero());
		} else {
			return ($newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo())));
		}
	};
	makeInt = function(f, bits, t) {
		var _1, _r, bits, f, ptr, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; bits = $f.bits; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.Kind();
		if (_1 === (3)) {
			(ptr).$set(((bits.$low << 24 >> 24)));
		} else if (_1 === (4)) {
			(ptr).$set(((bits.$low << 16 >> 16)));
		} else if ((_1 === (2)) || (_1 === (5))) {
			(ptr).$set(((bits.$low >> 0)));
		} else if (_1 === (6)) {
			(ptr).$set((new $Int64(bits.$high, bits.$low)));
		} else if (_1 === (8)) {
			(ptr).$set(((bits.$low << 24 >>> 24)));
		} else if (_1 === (9)) {
			(ptr).$set(((bits.$low << 16 >>> 16)));
		} else if ((_1 === (7)) || (_1 === (10)) || (_1 === (12))) {
			(ptr).$set(((bits.$low >>> 0)));
		} else if (_1 === (11)) {
			(ptr).$set((bits));
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeInt }; } $f._1 = _1; $f._r = _r; $f.bits = bits; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	typedmemmove = function(t, dst, src) {
		var dst, src, t;
		dst.$set(src.$get());
	};
	keyFor = function(t, key) {
		var k, key, kv, t;
		kv = key;
		if (!(kv.$get === undefined)) {
			kv = kv.$get();
		}
		k = $internalize(jsType(t.Key()).keyFor(kv), $String);
		return [kv, k];
	};
	mapaccess = function(t, m, key) {
		var _tuple, entry, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		entry = m[$externalize(k, $String)];
		if (entry === undefined) {
			return 0;
		}
		return ($newDataPointer(entry.v, jsType(PtrTo(t.Elem()))));
	};
	mapassign = function(t, m, key, val) {
		var _r, _tuple, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; entry = $f.entry; et = $f.et; jsVal = $f.jsVal; k = $f.k; key = $f.key; kv = $f.kv; m = $f.m; newVal = $f.newVal; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = keyFor(t, key);
		kv = _tuple[0];
		k = _tuple[1];
		jsVal = val.$get();
		et = t.Elem();
		_r = et.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 25) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 25) { */ case 1:
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		/* } */ case 2:
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m[$externalize(k, $String)] = entry;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapassign }; } $f._r = _r; $f._tuple = _tuple; $f.entry = entry; $f.et = et; $f.jsVal = jsVal; $f.k = k; $f.key = key; $f.kv = kv; $f.m = m; $f.newVal = newVal; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapdelete = function(t, m, key) {
		var _tuple, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		delete m[$externalize(k, $String)];
	};
	mapiterinit = function(t, m) {
		var m, t;
		return ((new mapIter.ptr(t, m, $keys(m), 0)));
	};
	mapiterkey = function(it) {
		var _r, _r$1, _r$2, it, iter, k, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; iter = $f.iter; k = $f.k; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		iter = ((it));
		k = iter.keys[iter.i];
		_r = iter.t.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return ($newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, _r$2));
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapiterkey }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.iter = iter; $f.k = k; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapiternext = function(it) {
		var it, iter;
		iter = ((it));
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		var m;
		return $parseInt($keys(m).length);
	};
	cvtDirect = function(v, typ) {
		var _1, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, k, slice, srcVal, typ, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; k = $f.k; slice = $f.slice; srcVal = $f.srcVal; typ = $f.typ; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		srcVal = $clone(v, Value).object();
		/* */ if (srcVal === jsType(v.typ).nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (srcVal === jsType(v.typ).nil) { */ case 1:
			_r = makeValue(typ, jsType(typ).nil, v.flag); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		val = null;
			_r$1 = typ.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			k = _r$1;
			_1 = k;
			/* */ if (_1 === (23)) { $s = 6; continue; }
			/* */ if (_1 === (22)) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (23)) { */ case 6:
				slice = new (jsType(typ))(srcVal.$array);
				slice.$offset = srcVal.$offset;
				slice.$length = srcVal.$length;
				slice.$capacity = srcVal.$capacity;
				val = $newDataPointer(slice, jsType(PtrTo(typ)));
				$s = 11; continue;
			/* } else if (_1 === (22)) { */ case 7:
				_r$2 = typ.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 25) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_r$3 === 25) { */ case 12:
					_r$4 = typ.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if ($interfaceIsEqual(_r$4, v.typ.Elem())) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if ($interfaceIsEqual(_r$4, v.typ.Elem())) { */ case 16:
						val = srcVal;
						/* break; */ $s = 4; continue;
					/* } */ case 17:
					val = new (jsType(typ))();
					_arg = val;
					_arg$1 = srcVal;
					_r$5 = typ.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg$2 = _r$5;
					$r = copyStruct(_arg, _arg$1, _arg$2); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 4; continue;
				/* } */ case 13:
				val = new (jsType(typ))(srcVal.$get, srcVal.$set);
				$s = 11; continue;
			/* } else if (_1 === (25)) { */ case 8:
				val = new (jsType(typ).ptr)();
				copyStruct(val, srcVal, typ);
				$s = 11; continue;
			/* } else if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24))) { */ case 9:
				val = v.ptr;
				$s = 11; continue;
			/* } else { */ case 10:
				$panic(new ValueError.ptr("reflect.Convert", k));
			/* } */ case 11:
		case 4:
		_r$6 = typ.common(); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = typ.Kind(); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$6, (val), (((v.flag & 224) >>> 0) | ((_r$7 >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtDirect }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.k = k; $f.slice = slice; $f.srcVal = srcVal; $f.typ = typ; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	methodReceiver = function(op, v, i) {
		var _$38, fn, i, m, m$1, op, prop, rcvr, t, tt, ut, v, x, x$1;
		_$38 = ptrType$1.nil;
		t = ptrType$1.nil;
		fn = 0;
		prop = "";
		if (v.typ.Kind() === 20) {
			tt = (v.typ.kindType);
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if (!$clone(tt.rtype.nameOff(m.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = tt.rtype.typeOff(m.typ);
			prop = $clone(tt.rtype.nameOff(m.name), name).name();
		} else {
			ut = v.typ.uncommon();
			if (ut === ptrType$5.nil || ((i >>> 0)) >= ((ut.mcount >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = $clone((x$1 = ut.methods(), ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])), method);
			if (!$clone(v.typ.nameOff(m$1.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = v.typ.typeOff(m$1.mtyp);
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		}
		rcvr = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = (rcvr[$externalize(prop, $String)]);
		return [_$38, t, fn];
	};
	valueInterface = function(v, safe) {
		var _r, safe, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; safe = $f.safe; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 96) >>> 0) === 0))) {
			$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Interface", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		if (isWrapped(v.typ)) {
			$s = -1; return ((new (jsType(v.typ))($clone(v, Value).object())));
		}
		$s = -1; return (($clone(v, Value).object()));
		/* */ } return; } if ($f === undefined) { $f = { $blk: valueInterface }; } $f._r = _r; $f.safe = safe; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ifaceE2I = function(t, src, dst) {
		var dst, src, t;
		dst.$set(src);
	};
	methodName = function() {
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var _r, _tuple, fn, fv, op, rcvr, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; fn = $f.fn; fv = $f.fv; op = $f.op; rcvr = $f.rcvr; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fn = [fn];
		rcvr = [rcvr];
		if (((v.flag & 512) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_tuple = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0);
		fn[0] = _tuple[2];
		rcvr[0] = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr[0] = new (jsType(v.typ))(rcvr[0]);
		}
		fv = js.MakeFunc((function(fn, rcvr) { return function(this$1, arguments$1) {
			var arguments$1, this$1;
			return new $jsObjectPtr(fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$8)));
		}; })(fn, rcvr));
		_r = $clone(v, Value).Type().common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r, (fv), (((v.flag & 96) >>> 0) | 19) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeMethodValue }; } $f._r = _r; $f._tuple = _tuple; $f.fn = fn; $f.fv = fv; $f.op = op; $f.rcvr = rcvr; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.ptr.prototype.pointers = function() {
		var _1, t;
		t = this;
		_1 = t.Kind();
		if ((_1 === (22)) || (_1 === (21)) || (_1 === (18)) || (_1 === (19)) || (_1 === (25)) || (_1 === (17))) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.Comparable = function() {
		var _1, _r, _r$1, i, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; i = $f.i; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
			_1 = t.Kind();
			/* */ if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { $s = 2; continue; }
			/* */ if (_1 === (17)) { $s = 3; continue; }
			/* */ if (_1 === (25)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { */ case 2:
				$s = -1; return false;
			/* } else if (_1 === (17)) { */ case 3:
				_r = t.Elem().Comparable(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (25)) { */ case 4:
				i = 0;
				/* while (true) { */ case 7:
					/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 8; continue; }
					_r$1 = t.Field(i).Type.Comparable(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (!_r$1) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!_r$1) { */ case 9:
						$s = -1; return false;
					/* } */ case 10:
					i = i + (1) >> 0;
				/* } */ $s = 7; continue; case 8:
			/* } */ case 5:
		case 1:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Comparable }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	rtype.ptr.prototype.Method = function(i) {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, arg, fl, fn, ft, i, in$1, m, methods, mt, mtyp, out, p, pname, prop, ret, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; arg = $f.arg; fl = $f.fl; fn = $f.fn; ft = $f.ft; i = $f.i; in$1 = $f.in$1; m = $f.m; methods = $f.methods; mt = $f.mt; mtyp = $f.mtyp; out = $f.out; p = $f.p; pname = $f.pname; prop = $f.prop; ret = $f.ret; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prop = [prop];
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			Method.copy(m, tt.Method(i));
			$s = -1; return m;
		}
		_r = t.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		methods = _r;
		if (i < 0 || i >= methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = $clone(((i < 0 || i >= methods.$length) ? ($throwRuntimeError("index out of range"), undefined) : methods.$array[methods.$offset + i]), method);
		pname = $clone(t.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		fl = 19;
		mtyp = t.typeOff(p.mtyp);
		ft = (mtyp.kindType);
		in$1 = $makeSlice(sliceType$10, 0, (1 + ft.in$().$length >> 0));
		in$1 = $append(in$1, t);
		_ref = ft.in$();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			in$1 = $append(in$1, arg);
			_i++;
		}
		out = $makeSlice(sliceType$10, 0, ft.out().$length);
		_ref$1 = ft.out();
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			ret = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			out = $append(out, ret);
			_i$1++;
		}
		_r$1 = FuncOf(in$1, out, ft.rtype.IsVariadic()); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		mt = _r$1;
		m.Type = mt;
		prop[0] = $internalize($methodSet(t.jsType)[i].prop, $String);
		fn = js.MakeFunc((function(prop) { return function(this$1, arguments$1) {
			var arguments$1, rcvr, this$1;
			rcvr = (0 >= arguments$1.$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1.$array[arguments$1.$offset + 0]);
			return new $jsObjectPtr(rcvr[$externalize(prop[0], $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$8)));
		}; })(prop));
		m.Func = new Value.ptr($assertType(mt, ptrType$1), (fn), fl);
		m.Index = i;
		Method.copy(m, m);
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Method }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.arg = arg; $f.fl = fl; $f.fn = fn; $f.ft = ft; $f.i = i; $f.in$1 = in$1; $f.m = m; $f.methods = methods; $f.mt = mt; $f.mtyp = mtyp; $f.out = out; $f.p = p; $f.pname = pname; $f.prop = prop; $f.ret = ret; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.object = function() {
		var _1, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				switch (0) { default:
					_1 = v.typ.Kind();
					if ((_1 === (11)) || (_1 === (6))) {
						val = new (jsType(v.typ))(val.$high, val.$low);
					} else if ((_1 === (15)) || (_1 === (16))) {
						val = new (jsType(v.typ))(val.$real, val.$imag);
					} else if (_1 === (23)) {
						if (val === val.constructor.nil) {
							val = jsType(v.typ).nil;
							break;
						}
						newVal = new (jsType(v.typ))(val.$array);
						newVal.$offset = val.$offset;
						newVal.$length = val.$length;
						newVal.$capacity = val.$capacity;
						val = newVal;
					}
				}
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.call = function(op, in$1) {
		var _1, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; arg = $f.arg; argsArray = $f.argsArray; elem = $f.elem; fn = $f.fn; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; in$1 = $f.in$1; isSlice = $f.isSlice; m = $f.m; n = $f.n; nin = $f.nin; nout = $f.nout; op = $f.op; origIn = $f.origIn; rcvr = $f.rcvr; results = $f.results; ret = $f.ret; slice = $f.slice; t = $f.t; targ = $f.targ; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; xt = $f.xt; xt$1 = $f.xt$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		t = ptrType$1.nil;
		fn = 0;
		rcvr = null;
		if (!((((v.flag & 512) >>> 0) === 0))) {
			_tuple = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0);
			t = _tuple[1];
			fn = _tuple[2];
			rcvr = $clone(v, Value).object();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
		} else {
			t = v.typ;
			fn = ($clone(v, Value).object());
			rcvr = undefined;
		}
		if (fn === 0) {
			$panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.NumIn();
		if (isSlice) {
			if (!t.IsVariadic()) {
				$panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.$length > n) {
				$panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.IsVariadic()) {
				n = n - (1) >> 0;
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.IsVariadic() && in$1.$length > n) {
				$panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if ($clone(x, Value).Kind() === 0) {
				$panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_tmp = $clone(((i < 0 || i >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i]), Value).Type();
			_tmp$1 = t.In(i);
			xt = _tmp;
			targ = _tmp$1;
			_r = xt.AssignableTo(targ); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				_r$1 = xt.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = targ.String(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$panic(new $String("reflect: " + op + " using " + _r$1 + " as type " + _r$2));
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!isSlice && t.IsVariadic()) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!isSlice && t.IsVariadic()) { */ case 8:
			m = in$1.$length - n >> 0;
			_r$3 = MakeSlice(t.In(n), m, m); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			slice = _r$3;
			_r$4 = t.In(n).Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			elem = _r$4;
			i$1 = 0;
			/* while (true) { */ case 12:
				/* if (!(i$1 < m)) { break; } */ if(!(i$1 < m)) { $s = 13; continue; }
				x$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x$1]));
				xt$1 = $clone(x$2, Value).Type();
				_r$5 = xt$1.AssignableTo(elem); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (!_r$5) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (!_r$5) { */ case 14:
					_r$6 = xt$1.String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = elem.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$panic(new $String("reflect: cannot use " + _r$6 + " as type " + _r$7 + " in " + op));
				/* } */ case 15:
				_r$8 = $clone(slice, Value).Index(i$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$r = $clone(_r$8, Value).Set($clone(x$2, Value)); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 12; continue; case 13:
			origIn = in$1;
			in$1 = $makeSlice(sliceType$9, (n + 1 >> 0));
			$copySlice($subslice(in$1, 0, n), origIn);
			((n < 0 || n >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + n] = slice);
		/* } */ case 9:
		nin = in$1.$length;
		if (!((nin === t.NumIn()))) {
			$panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.NumOut();
		argsArray = new ($global.Array)(t.NumIn());
		_ref$1 = in$1;
		_i$1 = 0;
		/* while (true) { */ case 21:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 22; continue; }
			i$2 = _i$1;
			arg = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			_arg = t.In(i$2);
			_r$9 = t.In(i$2).common(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_arg$1 = _r$9;
			_arg$2 = 0;
			_r$10 = $clone(arg, Value).assignTo("reflect.Value.Call", _arg$1, _arg$2); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = $clone(_r$10, Value).object(); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_arg$3 = _r$11;
			_r$12 = unwrapJsObject(_arg, _arg$3); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			argsArray[i$2] = _r$12;
			_i$1++;
		/* } */ $s = 21; continue; case 22:
		_r$13 = callHelper(new sliceType$3([new $jsObjectPtr(fn), new $jsObjectPtr(rcvr), new $jsObjectPtr(argsArray)])); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		results = _r$13;
			_1 = nout;
			/* */ if (_1 === (0)) { $s = 29; continue; }
			/* */ if (_1 === (1)) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (_1 === (0)) { */ case 29:
				$s = -1; return sliceType$9.nil;
			/* } else if (_1 === (1)) { */ case 30:
				_r$14 = makeValue(t.Out(0), wrapJsObject(t.Out(0), results), 0); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				$s = -1; return new sliceType$9([$clone(_r$14, Value)]);
			/* } else { */ case 31:
				ret = $makeSlice(sliceType$9, nout);
				_ref$2 = ret;
				_i$2 = 0;
				/* while (true) { */ case 34:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 35; continue; }
					i$3 = _i$2;
					_r$15 = makeValue(t.Out(i$3), wrapJsObject(t.Out(i$3), results[i$3]), 0); /* */ $s = 36; case 36: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					((i$3 < 0 || i$3 >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + i$3] = _r$15);
					_i$2++;
				/* } */ $s = 34; continue; case 35:
				$s = -1; return ret;
			/* } */ case 32:
		case 28:
		$s = -1; return sliceType$9.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.call }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.arg = arg; $f.argsArray = argsArray; $f.elem = elem; $f.fn = fn; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.in$1 = in$1; $f.isSlice = isSlice; $f.m = m; $f.n = n; $f.nin = nin; $f.nout = nout; $f.op = op; $f.origIn = origIn; $f.rcvr = rcvr; $f.results = results; $f.ret = ret; $f.slice = slice; $f.t = t; $f.targ = targ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.xt = xt; $f.xt$1 = xt$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.ptr.prototype.Cap = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (17)) {
			return v.typ.Len();
		} else if ((_1 === (18)) || (_1 === (23))) {
			return $parseInt($clone(v, Value).object().$capacity) >> 0;
		}
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	wrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return new (jsType(jsObjectPtr))(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return val.object;
		}
		return val;
	};
	Value.ptr.prototype.Elem = function() {
		var _1, _r, fl, k, tt, typ, v, val, val$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; fl = $f.fl; k = $f.k; tt = $f.tt; typ = $f.typ; v = $f.v; val = $f.val; val$1 = $f.val$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (20)) { $s = 2; continue; }
			/* */ if (_1 === (22)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (20)) { */ case 2:
				val = $clone(v, Value).object();
				if (val === $ifaceNil) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				typ = reflectType(val.constructor);
				_r = makeValue(typ, val.$val, (v.flag & 96) >>> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (22)) { */ case 3:
				if ($clone(v, Value).IsNil()) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				val$1 = $clone(v, Value).object();
				tt = (v.typ.kindType);
				fl = (((((v.flag & 96) >>> 0) | 128) >>> 0) | 256) >>> 0;
				fl = (fl | (((tt.elem.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(tt.elem, (wrapJsObject(tt.elem, val$1)), fl);
			/* } else { */ case 4:
				$panic(new ValueError.ptr("reflect.Value.Elem", k));
			/* } */ case 5:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Elem }; } $f._1 = _1; $f._r = _r; $f.fl = fl; $f.k = k; $f.tt = tt; $f.typ = typ; $f.v = v; $f.val = val; $f.val$1 = val$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.Field = function(i) {
		var _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; field = $f.field; fl = $f.fl; i = $f.i; jsTag = $f.jsTag; o = $f.o; prop = $f.prop; s = $f.s; tag = $f.tag; tt = $f.tt; typ = $f.typ; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsTag = [jsTag];
		prop = [prop];
		s = [s];
		typ = [typ];
		v = this;
		if (!((new flag(v.flag).kind() === 25))) {
			$panic(new ValueError.ptr("reflect.Value.Field", new flag(v.flag).kind()));
		}
		tt = (v.typ.kindType);
		if (((i >>> 0)) >= ((tt.fields.$length >>> 0))) {
			$panic(new $String("reflect: Field index out of range"));
		}
		prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		typ[0] = field.typ;
		fl = (((v.flag & 416) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
		if (!$clone(field.name, name).isExported()) {
			if (field.anon()) {
				fl = (fl | (64)) >>> 0;
			} else {
				fl = (fl | (32)) >>> 0;
			}
		}
		tag = $clone((x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).name, name).tag();
		/* */ if (!(tag === "") && !((i === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tag === "") && !((i === 0))) { */ case 1:
			jsTag[0] = getJsTag(tag);
			/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(jsTag[0] === "")) { */ case 3:
				/* while (true) { */ case 5:
					o = [o];
					_r = $clone(v, Value).Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (v.typ === jsObjectPtr) { */ case 8:
						o[0] = $clone(v, Value).object().object;
						$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ))), fl);
					/* } */ case 9:
					/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (v.typ.Kind() === 22) { */ case 10:
						_r$1 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						v = _r$1;
					/* } */ case 11:
				/* } */ $s = 5; continue; case 6:
			/* } */ case 4:
		/* } */ case 2:
		s[0] = v.ptr;
		/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
			$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ))), fl);
		/* } */ case 14:
		_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Field }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.field = field; $f.fl = fl; $f.i = i; $f.jsTag = jsTag; $f.o = o; $f.prop = prop; $f.s = s; $f.tag = tag; $f.tt = tt; $f.typ = typ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	getJsTag = function(tag) {
		var _tuple, i, name$1, qvalue, tag, value;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (name$1 === "js") {
				_tuple = strconv.Unquote(qvalue);
				value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	Value.ptr.prototype.Index = function(i) {
		var _1, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; a = $f.a; a$1 = $f.a$1; c = $f.c; fl = $f.fl; fl$1 = $f.fl$1; fl$2 = $f.fl$2; i = $f.i; k = $f.k; s = $f.s; str = $f.str; tt = $f.tt; tt$1 = $f.tt$1; typ = $f.typ; typ$1 = $f.typ$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		a$1 = [a$1];
		c = [c];
		i = [i];
		typ = [typ];
		typ$1 = [typ$1];
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				tt = (v.typ.kindType);
				if (i[0] < 0 || i[0] > ((tt.len >> 0))) {
					$panic(new $String("reflect: array index out of range"));
				}
				typ[0] = tt.elem;
				fl = (v.flag & 480) >>> 0;
				fl = (fl | (((typ[0].Kind() >>> 0)))) >>> 0;
				a[0] = v.ptr;
				/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 7:
					$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ[0], a[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a[0][i[0]] = unwrapJsObject(typ[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl);
				/* } */ case 8:
				_r = makeValue(typ[0], wrapJsObject(typ[0], a[0][i[0]]), fl); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (23)) { */ case 3:
				s = $clone(v, Value).object();
				if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
					$panic(new $String("reflect: slice index out of range"));
				}
				tt$1 = (v.typ.kindType);
				typ$1[0] = tt$1.elem;
				fl$1 = (384 | ((v.flag & 96) >>> 0)) >>> 0;
				fl$1 = (fl$1 | (((typ$1[0].Kind() >>> 0)))) >>> 0;
				i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
				a$1[0] = s.$array;
				/* */ if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 10:
					$s = -1; return new Value.ptr(typ$1[0], (new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ$1[0], a$1[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl$1);
				/* } */ case 11:
				_r$1 = makeValue(typ$1[0], wrapJsObject(typ$1[0], a$1[0][i[0]]), fl$1); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i[0] < 0 || i[0] >= str.length) {
					$panic(new $String("reflect: string index out of range"));
				}
				fl$2 = (((v.flag & 96) >>> 0) | 8) >>> 0;
				c[0] = str.charCodeAt(i[0]);
				$s = -1; return new Value.ptr(uint8Type, ((c.$ptr || (c.$ptr = new ptrType$4(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c)))), (fl$2 | 128) >>> 0);
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Index", k));
			/* } */ case 6:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Index }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.a$1 = a$1; $f.c = c; $f.fl = fl; $f.fl$1 = fl$1; $f.fl$2 = fl$2; $f.i = i; $f.k = k; $f.s = s; $f.str = str; $f.tt = tt; $f.tt$1 = tt$1; $f.typ = typ; $f.typ$1 = typ$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.InterfaceData = function() {
		var v;
		v = this;
		$panic(errors.New("InterfaceData is not supported by GopherJS"));
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsNil = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (22)) || (_1 === (23))) {
			return $clone(v, Value).object() === jsType(v.typ).nil;
		} else if (_1 === (18)) {
			return $clone(v, Value).object() === $chanNil;
		} else if (_1 === (19)) {
			return $clone(v, Value).object() === $throwNilPointerError;
		} else if (_1 === (21)) {
			return $clone(v, Value).object() === false;
		} else if (_1 === (20)) {
			return $clone(v, Value).object() === $ifaceNil;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (17)) || (_1 === (24))) {
			return $parseInt($clone(v, Value).object().length);
		} else if (_1 === (23)) {
			return $parseInt($clone(v, Value).object().$length) >> 0;
		} else if (_1 === (18)) {
			return $parseInt($clone(v, Value).object().$buffer.length) >> 0;
		} else if (_1 === (21)) {
			return $parseInt($keys($clone(v, Value).object()).length);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (18)) || (_1 === (21)) || (_1 === (22)) || (_1 === (26))) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object();
		} else if (_1 === (19)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return 1;
		} else if (_1 === (23)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var _1, _r, _r$1, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		/* */ if (!((((v.flag & 128) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((v.flag & 128) >>> 0) === 0))) { */ case 2:
				_1 = v.typ.Kind();
				/* */ if (_1 === (17)) { $s = 5; continue; }
				/* */ if (_1 === (20)) { $s = 6; continue; }
				/* */ if (_1 === (25)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (17)) { */ case 5:
					jsType(v.typ).copy(v.ptr, x.ptr);
					$s = 9; continue;
				/* } else if (_1 === (20)) { */ case 6:
					_r$1 = valueInterface($clone(x, Value), false); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					v.ptr.$set(_r$1);
					$s = 9; continue;
				/* } else if (_1 === (25)) { */ case 7:
					copyStruct(v.ptr, x.ptr, v.typ);
					$s = 9; continue;
				/* } else { */ case 8:
					v.ptr.$set($clone(x, Value).object());
				/* } */ case 9:
			case 4:
			$s = -1; return;
		/* } */ case 3:
		v.ptr = x.ptr;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Set }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.SetBytes = function(x) {
		var _r, _r$1, _v, slice, typedSlice, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; slice = $f.slice; typedSlice = $f.typedSlice; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		/* } */ case 2:
		slice = x;
		if (!(v.typ.Name() === "")) { _v = true; $s = 6; continue s; }
		_r$1 = v.typ.Elem().Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = !(_r$1 === ""); case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			typedSlice = new (jsType(v.typ))(slice.$array);
			typedSlice.$offset = slice.$offset;
			typedSlice.$length = slice.$length;
			typedSlice.$capacity = slice.$capacity;
			slice = typedSlice;
		/* } */ case 5:
		v.ptr.$set(slice);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetBytes }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.slice = slice; $f.typedSlice = typedSlice; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var _1, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; i = $f.i; j = $f.j; kind = $f.kind; s = $f.s; str = $f.str; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
			kind = new flag(v.flag).kind();
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				if (((v.flag & 256) >>> 0) === 0) {
					$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
				}
				tt = (v.typ.kindType);
				cap = ((tt.len >> 0));
				typ = SliceOf(tt.elem);
				s = new (jsType(typ))($clone(v, Value).object());
				$s = 6; continue;
			/* } else if (_1 === (23)) { */ case 3:
				typ = v.typ;
				s = $clone(v, Value).object();
				cap = $parseInt(s.$capacity) >> 0;
				$s = 6; continue;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i < 0 || j < i || j > str.length) {
					$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
				}
				_r = ValueOf(new $String($substring(str, i, j))); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Slice", kind));
			/* } */ case 6:
		case 1:
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		_r$1 = makeValue(typ, $subslice(s, i, j), (v.flag & 96) >>> 0); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.i = i; $f.j = j; $f.kind = kind; $f.s = s; $f.str = str; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var _1, _r, cap, i, j, k, kind, s, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; cap = $f.cap; i = $f.i; j = $f.j; k = $f.k; kind = $f.kind; s = $f.s; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_1 = kind;
		if (_1 === (17)) {
			if (((v.flag & 256) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = (v.typ.kindType);
			cap = ((tt.len >> 0));
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))($clone(v, Value).object());
		} else if (_1 === (23)) {
			typ = v.typ;
			s = $clone(v, Value).object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		_r = makeValue(typ, $subslice(s, i, j, k), (v.flag & 96) >>> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice3 }; } $f._1 = _1; $f._r = _r; $f.cap = cap; $f.i = i; $f.j = j; $f.k = k; $f.kind = kind; $f.s = s; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close($clone(v, Value).object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	chanrecv = function(ch, nb, val) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; ch = $f.ch; comms = $f.comms; nb = $f.nb; received = $f.received; recvRes = $f.recvRes; selectRes = $f.selectRes; selected = $f.selected; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		received = false;
		comms = new sliceType$11([new sliceType$8([ch])]);
		if (nb) {
			comms = $append(comms, new sliceType$8([]));
		}
		_r = selectHelper(new sliceType$3([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			_tmp = false;
			_tmp$1 = false;
			selected = _tmp;
			received = _tmp$1;
			$s = -1; return [selected, received];
		}
		recvRes = selectRes[1];
		val.$set(recvRes[0]);
		_tmp$2 = true;
		_tmp$3 = !!(recvRes[1]);
		selected = _tmp$2;
		received = _tmp$3;
		$s = -1; return [selected, received];
		/* */ } return; } if ($f === undefined) { $f = { $blk: chanrecv }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.received = received; $f.recvRes = recvRes; $f.selectRes = selectRes; $f.selected = selected; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	chansend = function(ch, val, nb) {
		var _r, ch, comms, nb, selectRes, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; ch = $f.ch; comms = $f.comms; nb = $f.nb; selectRes = $f.selectRes; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		comms = new sliceType$11([new sliceType$8([ch, val.$get()])]);
		if (nb) {
			comms = $append(comms, new sliceType$8([]));
		}
		_r = selectHelper(new sliceType$3([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			$s = -1; return false;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: chansend }; } $f._r = _r; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.selectRes = selectRes; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	structField.ptr.prototype.offset = function() {
		var f;
		f = this;
		return f.offsetAnon >>> 1 >>> 0;
	};
	structField.prototype.offset = function() { return this.$val.offset(); };
	structField.ptr.prototype.anon = function() {
		var f;
		f = this;
		return !((((f.offsetAnon & 1) >>> 0) === 0));
	};
	structField.prototype.anon = function() { return this.$val.anon(); };
	Kind.prototype.String = function() {
		var k;
		k = this.$val;
		if (((k >> 0)) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : kindNames.$array[kindNames.$offset + k]);
		}
		return "kind" + strconv.Itoa(((k >> 0)));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	rtype.ptr.prototype.String = function() {
		var s, t;
		t = this;
		s = $clone(t.nameOff(t.str), name).name();
		if (!((((t.tflag & 2) >>> 0) === 0))) {
			return $substring(s, 1);
		}
		return s;
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Bits = function() {
		var k, t;
		t = this;
		if (t === ptrType$1.nil) {
			$panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return $imul(((t.size >> 0)), 8);
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.ptr.prototype.Align = function() {
		var t;
		t = this;
		return ((t.align >> 0));
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.ptr.prototype.FieldAlign = function() {
		var t;
		t = this;
		return ((t.fieldAlign >> 0));
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.ptr.prototype.Kind = function() {
		var t;
		t = this;
		return ((((t.kind & 31) >>> 0) >>> 0));
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.common = function() {
		var t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	rtype.ptr.prototype.exportedMethods = function() {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, _tuple, _tuple$1, allExported, allm, found, m, m$1, methods, methodsi, name$1, name$2, t, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; allExported = $f.allExported; allm = $f.allm; found = $f.found; m = $f.m; m$1 = $f.m$1; methods = $f.methods; methodsi = $f.methodsi; name$1 = $f.name$1; name$2 = $f.name$2; t = $f.t; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = methodCache.Load(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		methodsi = _tuple[0];
		found = _tuple[1];
		if (found) {
			$s = -1; return $assertType(methodsi, sliceType$5);
		}
		ut = t.uncommon();
		if (ut === ptrType$5.nil) {
			$s = -1; return sliceType$5.nil;
		}
		allm = ut.methods();
		allExported = true;
		_ref = allm;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			m = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), method);
			name$1 = $clone(t.nameOff(m.name), name);
			if (!$clone(name$1, name).isExported()) {
				allExported = false;
				break;
			}
			_i++;
		}
		methods = sliceType$5.nil;
		if (allExported) {
			methods = allm;
		} else {
			methods = $makeSlice(sliceType$5, 0, allm.$length);
			_ref$1 = allm;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				m$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), method);
				name$2 = $clone(t.nameOff(m$1.name), name);
				if ($clone(name$2, name).isExported()) {
					methods = $append(methods, m$1);
				}
				_i$1++;
			}
			methods = $subslice(methods, 0, methods.$length, methods.$length);
		}
		_r$1 = methodCache.LoadOrStore(t, methods); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		methodsi = _tuple$1[0];
		$s = -1; return $assertType(methodsi, sliceType$5);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.exportedMethods }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.allExported = allExported; $f.allm = allm; $f.found = found; $f.m = m; $f.m$1 = m$1; $f.methods = methods; $f.methodsi = methodsi; $f.name$1 = name$1; $f.name$2 = name$2; $f.t = t; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.NumMethod = function() {
		var _r, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			$s = -1; return tt.NumMethod();
		}
		if (((t.tflag & 1) >>> 0) === 0) {
			$s = -1; return 0;
		}
		_r = t.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r.$length;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.NumMethod }; } $f._r = _r; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.MethodByName = function(name$1) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, i, m, name$1, ok, p, pname, t, tt, ut, utmethods, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; i = $f.i; m = $f.m; name$1 = $f.name$1; ok = $f.ok; p = $f.p; pname = $f.pname; t = $f.t; tt = $f.tt; ut = $f.ut; utmethods = $f.utmethods; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			_tuple = tt.MethodByName(name$1);
			Method.copy(m, _tuple[0]);
			ok = _tuple[1];
			$s = -1; return [m, ok];
		}
		ut = t.uncommon();
		if (ut === ptrType$5.nil) {
			_tmp = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
			_tmp$1 = false;
			Method.copy(m, _tmp);
			ok = _tmp$1;
			$s = -1; return [m, ok];
		}
		utmethods = ut.methods();
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < ((ut.mcount >> 0)))) { break; } */ if(!(i < ((ut.mcount >> 0)))) { $s = 2; continue; }
			p = $clone(((i < 0 || i >= utmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : utmethods.$array[utmethods.$offset + i]), method);
			pname = $clone(t.nameOff(p.name), name);
			/* */ if ($clone(pname, name).isExported() && $clone(pname, name).name() === name$1) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($clone(pname, name).isExported() && $clone(pname, name).name() === name$1) { */ case 3:
				_r = t.Method(i); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tmp$2 = $clone(_r, Method);
				_tmp$3 = true;
				Method.copy(m, _tmp$2);
				ok = _tmp$3;
				$s = -1; return [m, ok];
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_tmp$4 = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		_tmp$5 = false;
		Method.copy(m, _tmp$4);
		ok = _tmp$5;
		$s = -1; return [m, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.MethodByName }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.i = i; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.p = p; $f.pname = pname; $f.t = t; $f.tt = tt; $f.ut = ut; $f.utmethods = utmethods; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	rtype.ptr.prototype.PkgPath = function() {
		var t, ut;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		ut = t.uncommon();
		if (ut === ptrType$5.nil) {
			return "";
		}
		return $clone(t.nameOff(ut.pkgPath), name).name();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.Name = function() {
		var i, s, t;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		s = t.String();
		i = s.length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (s.charCodeAt(i) === 46) {
				break;
			}
			i = i - (1) >> 0;
		}
		return $substring(s, (i + 1 >> 0));
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.ChanDir = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: ChanDir of non-chan type"));
		}
		tt = (t.kindType);
		return ((tt.dir >> 0));
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = (t.kindType);
		return !((((tt.outCount & 32768) >>> 0) === 0));
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Elem = function() {
		var _1, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_1 = t.Kind();
		if (_1 === (17)) {
			tt = (t.kindType);
			return toType(tt.elem);
		} else if (_1 === (18)) {
			tt$1 = (t.kindType);
			return toType(tt$1.elem);
		} else if (_1 === (21)) {
			tt$2 = (t.kindType);
			return toType(tt$2.elem);
		} else if (_1 === (22)) {
			tt$3 = (t.kindType);
			return toType(tt$3.elem);
		} else if (_1 === (23)) {
			tt$4 = (t.kindType);
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.Field = function(i) {
		var i, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type"));
		}
		tt = (t.kindType);
		return tt.Field(i);
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.FieldByIndex = function(index) {
		var _r, index, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; index = $f.index; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByIndex of non-struct type"));
		}
		tt = (t.kindType);
		_r = tt.FieldByIndex(index); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByIndex }; } $f._r = _r; $f.index = index; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.ptr.prototype.FieldByName = function(name$1) {
		var _r, name$1, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; name$1 = $f.name$1; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByName of non-struct type"));
		}
		tt = (t.kindType);
		_r = tt.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByName }; } $f._r = _r; $f.name$1 = name$1; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	rtype.ptr.prototype.FieldByNameFunc = function(match) {
		var _r, match, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; match = $f.match; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByNameFunc of non-struct type"));
		}
		tt = (t.kindType);
		_r = tt.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByNameFunc }; } $f._r = _r; $f.match = match; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.ptr.prototype.In = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type"));
		}
		tt = (t.kindType);
		return toType((x = tt.in$(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Key = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type"));
		}
		tt = (t.kindType);
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.Len = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type"));
		}
		tt = (t.kindType);
		return ((tt.len >> 0));
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumField = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = (t.kindType);
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.NumIn = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = (t.kindType);
		return ((tt.inCount >> 0));
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = (t.kindType);
		return tt.out().$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type"));
		}
		tt = (t.kindType);
		return toType((x = tt.out(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var _1, d;
		d = this.$val;
		_1 = d;
		if (_1 === (2)) {
			return "chan<-";
		} else if (_1 === (1)) {
			return "<-chan";
		} else if (_1 === (3)) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa(((d >> 0)));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.ptr.prototype.Method = function(i) {
		var i, m, p, pname, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (i < 0 || i >= t.methods.$length) {
			return m;
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		pname = $clone(t.rtype.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		if (!$clone(pname, name).isExported()) {
			m.PkgPath = $clone(pname, name).pkgPath();
			if (m.PkgPath === "") {
				m.PkgPath = $clone(t.pkgPath, name).name();
			}
		}
		m.Type = toType(t.rtype.typeOff(p.typ));
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.ptr.prototype.MethodByName = function(name$1) {
		var _i, _ref, _tmp, _tmp$1, i, m, name$1, ok, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t === ptrType$7.nil) {
			return [m, ok];
		}
		p = ptrType$8.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if ($clone(t.rtype.nameOff(p.name), name).name() === name$1) {
				_tmp = $clone(t.Method(i), Method);
				_tmp$1 = true;
				Method.copy(m, _tmp);
				ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	StructTag.prototype.Get = function(key) {
		var _tuple, key, tag, v;
		tag = this.$val;
		_tuple = new StructTag(tag).Lookup(key);
		v = _tuple[0];
		return v;
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	StructTag.prototype.Lookup = function(key) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, i, key, name$1, ok, qvalue, tag, value, value$1;
		value = "";
		ok = false;
		tag = this.$val;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && tag.charCodeAt(i) > 32 && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)) && !((tag.charCodeAt(i) === 127)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i === 0) || (i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (key === name$1) {
				_tuple = strconv.Unquote(qvalue);
				value$1 = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					break;
				}
				_tmp = value$1;
				_tmp$1 = true;
				value = _tmp;
				ok = _tmp$1;
				return [value, ok];
			}
		}
		_tmp$2 = "";
		_tmp$3 = false;
		value = _tmp$2;
		ok = _tmp$3;
		return [value, ok];
	};
	$ptrType(StructTag).prototype.Lookup = function(key) { return new StructTag(this.$get()).Lookup(key); };
	structType.ptr.prototype.Field = function(i) {
		var f, i, p, t, tag, x;
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		t = this;
		if (i < 0 || i >= t.fields.$length) {
			$panic(new $String("reflect: Field index out of bounds"));
		}
		p = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		f.Type = toType(p.typ);
		f.Name = $clone(p.name, name).name();
		f.Anonymous = p.anon();
		if (!$clone(p.name, name).isExported()) {
			f.PkgPath = $clone(p.name, name).pkgPath();
			if (f.PkgPath === "") {
				f.PkgPath = $clone(t.pkgPath, name).name();
			}
		}
		tag = $clone(p.name, name).tag();
		if (!(tag === "")) {
			f.Tag = (tag);
		}
		f.Offset = p.offset();
		f.Index = new sliceType$13([i]);
		return f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.ptr.prototype.FieldByIndex = function(index) {
		var _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _v = $f._v; f = $f.f; ft = $f.ft; i = $f.i; index = $f.index; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				ft = f.Type;
				_r = ft.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				if (!(_r === 22)) { _v = false; $s = 7; continue s; }
				_r$1 = ft.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 25; case 7:
				/* */ if (_v) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_v) { */ case 5:
					_r$3 = ft.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ft = _r$3;
				/* } */ case 6:
				f.Type = ft;
			/* } */ case 4:
			_r$4 = f.Type.Field(x); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			StructField.copy(f, _r$4);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByIndex }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._v = _v; $f.f = f; $f.ft = ft; $f.i = i; $f.index = index; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.ptr.prototype.FieldByNameFunc = function(match) {
		var _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; count = $f.count; current = $f.current; f = $f.f; fname = $f.fname; i = $f.i; index = $f.index; match = $f.match; next = $f.next; nextCount = $f.nextCount; ntyp = $f.ntyp; ok = $f.ok; result = $f.result; scan = $f.scan; styp = $f.styp; t = $f.t; t$1 = $f.t$1; visited = $f.visited; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		ok = false;
		t = this;
		current = new sliceType$14([]);
		next = new sliceType$14([new fieldScan.ptr(t, sliceType$13.nil)]);
		nextCount = false;
		visited = $makeMap(ptrType$9.keyFor, []);
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next;
			_tmp$1 = $subslice(current, 0, 0);
			current = _tmp;
			next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				scan = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), fieldScan);
				t$1 = scan.typ;
				/* */ if ((_entry = visited[ptrType$9.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((_entry = visited[ptrType$9.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { */ case 5:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				_key = t$1; (visited || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key)] = { k: _key, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				/* while (true) { */ case 7:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }
					i = _i$1;
					f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
					fname = $clone(f.name, name).name();
					ntyp = ptrType$1.nil;
					/* */ if (f.anon()) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (f.anon()) { */ case 9:
						ntyp = f.typ;
						/* */ if (ntyp.Kind() === 22) { $s = 11; continue; }
						/* */ $s = 12; continue;
						/* if (ntyp.Kind() === 22) { */ case 11:
							_r = ntyp.Elem().common(); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							ntyp = _r;
						/* } */ case 12:
					/* } */ case 10:
					_r$1 = match(fname); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (_r$1) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (_r$1) { */ case 14:
						if ((_entry$1 = count[ptrType$9.keyFor(t$1)], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
							_tmp$3 = false;
							StructField.copy(result, _tmp$2);
							ok = _tmp$3;
							$s = -1; return [result, ok];
						}
						StructField.copy(result, t$1.Field(i));
						result.Index = sliceType$13.nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						/* continue; */ $s = 7; continue;
					/* } */ case 15:
					if (ok || ntyp === ptrType$1.nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					styp = (ntyp.kindType);
					if ((_entry$2 = nextCount[ptrType$9.keyFor(styp)], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$1 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key$1)] = { k: _key$1, v: 2 };
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					if (nextCount === false) {
						nextCount = $makeMap(ptrType$9.keyFor, []);
					}
					_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key$2)] = { k: _key$2, v: 1 };
					if ((_entry$3 = count[ptrType$9.keyFor(t$1)], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$3 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key$3)] = { k: _key$3, v: 2 };
					}
					index = sliceType$13.nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.ptr(styp, index));
					_i$1++;
				/* } */ $s = 7; continue; case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
			if (ok) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [result, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByNameFunc }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.count = count; $f.current = current; $f.f = f; $f.fname = fname; $f.i = i; $f.index = index; $f.match = match; $f.next = next; $f.nextCount = nextCount; $f.ntyp = ntyp; $f.ok = ok; $f.result = result; $f.scan = scan; $f.styp = styp; $f.t = t; $f.t$1 = t$1; $f.visited = visited; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.ptr.prototype.FieldByName = function(name$1) {
		var _i, _r, _ref, _tmp, _tmp$1, _tuple, f, hasAnon, i, name$1, present, t, tf, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; hasAnon = $f.hasAnon; i = $f.i; name$1 = $f.name$1; present = $f.present; t = $f.t; tf = $f.tf; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name$1 = [name$1];
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		present = false;
		t = this;
		hasAnon = false;
		if (!(name$1[0] === "")) {
			_ref = t.fields;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				tf = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				if ($clone(tf.name, name).name() === name$1[0]) {
					_tmp = $clone(t.Field(i), StructField);
					_tmp$1 = true;
					StructField.copy(f, _tmp);
					present = _tmp$1;
					$s = -1; return [f, present];
				}
				if (tf.anon()) {
					hasAnon = true;
				}
				_i++;
			}
		}
		if (!hasAnon) {
			$s = -1; return [f, present];
		}
		_r = t.FieldByNameFunc((function(name$1) { return function(s) {
			var s;
			return s === name$1[0];
		}; })(name$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		StructField.copy(f, _tuple[0]);
		present = _tuple[1];
		$s = -1; return [f, present];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByName }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.hasAnon = hasAnon; $f.i = i; $f.name$1 = name$1; $f.present = present; $f.t = t; $f.tf = tf; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	PtrTo = function(t) {
		var t;
		return $assertType(t, ptrType$1).ptrTo();
	};
	$pkg.PtrTo = PtrTo;
	rtype.ptr.prototype.Implements = function(u) {
		var _r, t, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 20))) { */ case 1:
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		/* } */ case 2:
		$s = -1; return implements$1($assertType(u, ptrType$1), t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Implements }; } $f._r = _r; $f.t = t; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = directlyAssignable(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r || implements$1(uu, t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.AssignableTo }; } $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.ptr.prototype.ConvertibleTo = function(u) {
		var _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = convertOp(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return !(_r === $throwNilPointerError);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.ConvertibleTo }; } $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var T, V, i, i$1, j, j$1, t, tm, tm$1, tmName, tmName$1, tmPkgPath, tmPkgPath$1, v, v$1, vm, vm$1, vmName, vmName$1, vmPkgPath, vmPkgPath$1, vmethods, x, x$1, x$2;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = (T.kindType);
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = (V.kindType);
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				tmName = $clone(t.rtype.nameOff(tm.name), name);
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j]));
				vmName = $clone(V.nameOff(vm.name), name);
				if ($clone(vmName, name).name() === $clone(tmName, name).name() && V.typeOff(vm.typ) === t.rtype.typeOff(tm.typ)) {
					if (!$clone(tmName, name).isExported()) {
						tmPkgPath = $clone(tmName, name).pkgPath();
						if (tmPkgPath === "") {
							tmPkgPath = $clone(t.pkgPath, name).name();
						}
						vmPkgPath = $clone(vmName, name).pkgPath();
						if (vmPkgPath === "") {
							vmPkgPath = $clone(v.pkgPath, name).name();
						}
						if (!(tmPkgPath === vmPkgPath)) {
							j = j + (1) >> 0;
							continue;
						}
					}
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommon();
		if (v$1 === ptrType$5.nil) {
			return false;
		}
		i$1 = 0;
		vmethods = v$1.methods();
		j$1 = 0;
		while (true) {
			if (!(j$1 < ((v$1.mcount >> 0)))) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			tmName$1 = $clone(t.rtype.nameOff(tm$1.name), name);
			vm$1 = $clone(((j$1 < 0 || j$1 >= vmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : vmethods.$array[vmethods.$offset + j$1]), method);
			vmName$1 = $clone(V.nameOff(vm$1.name), name);
			if ($clone(vmName$1, name).name() === $clone(tmName$1, name).name() && V.typeOff(vm$1.mtyp) === t.rtype.typeOff(tm$1.typ)) {
				if (!$clone(tmName$1, name).isExported()) {
					tmPkgPath$1 = $clone(tmName$1, name).pkgPath();
					if (tmPkgPath$1 === "") {
						tmPkgPath$1 = $clone(t.pkgPath, name).name();
					}
					vmPkgPath$1 = $clone(vmName$1, name).pkgPath();
					if (vmPkgPath$1 === "") {
						vmPkgPath$1 = $clone(V.nameOff(v$1.pkgPath), name).name();
					}
					if (!(tmPkgPath$1 === vmPkgPath$1)) {
						j$1 = j$1 + (1) >> 0;
						continue;
					}
				}
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		var T, V, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; V = $f.V; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
			$s = -1; return false;
		}
		_r = haveIdenticalUnderlyingType(T, V, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: directlyAssignable }; } $f.T = T; $f.V = V; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	haveIdenticalType = function(T, V, cmpTags) {
		var T, V, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _v, cmpTags, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; V = $f.V; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _v = $f._v; cmpTags = $f.cmpTags; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (cmpTags) {
			$s = -1; return $interfaceIsEqual(T, V);
		}
		_r = T.Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = V.Name(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (!(_r === _r$1)) { _v = true; $s = 3; continue s; }
		_r$2 = T.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = V.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = !((_r$2 === _r$3)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return false;
		/* } */ case 2:
		_r$4 = T.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = _r$4;
		_r$5 = V.common(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$1 = _r$5;
		_r$6 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: haveIdenticalType }; } $f.T = T; $f.V = V; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._v = _v; $f.cmpTags = cmpTags; $f.$s = $s; $f.$r = $r; return $f;
	};
	haveIdenticalUnderlyingType = function(T, V, cmpTags) {
		var T, V, _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _v, _v$1, _v$2, _v$3, cmpTags, i, i$1, i$2, kind, t, t$1, t$2, tf, tp, v, v$1, v$2, vf, vp, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; V = $f.V; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; cmpTags = $f.cmpTags; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; kind = $f.kind; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; tf = $f.tf; tp = $f.tp; v = $f.v; v$1 = $f.v$1; v$2 = $f.v$2; vf = $f.vf; vp = $f.vp; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			$s = -1; return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			$s = -1; return true;
		}
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (18)) { $s = 3; continue; }
			/* */ if (_1 === (19)) { $s = 4; continue; }
			/* */ if (_1 === (20)) { $s = 5; continue; }
			/* */ if (_1 === (21)) { $s = 6; continue; }
			/* */ if ((_1 === (22)) || (_1 === (23))) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === (17)) { */ case 2:
				if (!(T.Len() === V.Len())) { _v = false; $s = 10; continue s; }
				_r = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 10:
				$s = -1; return _v;
			/* } else if (_1 === (18)) { */ case 3:
				if (!(V.ChanDir() === 3)) { _v$1 = false; $s = 14; continue s; }
				_r$1 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = _r$1; case 14:
				/* */ if (_v$1) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_v$1) { */ case 12:
					$s = -1; return true;
				/* } */ case 13:
				if (!(V.ChanDir() === T.ChanDir())) { _v$2 = false; $s = 16; continue s; }
				_r$2 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 16:
				$s = -1; return _v$2;
			/* } else if (_1 === (19)) { */ case 4:
				t = (T.kindType);
				v = (V.kindType);
				if (!((t.outCount === v.outCount)) || !((t.inCount === v.inCount))) {
					$s = -1; return false;
				}
				i = 0;
				/* while (true) { */ case 18:
					/* if (!(i < t.rtype.NumIn())) { break; } */ if(!(i < t.rtype.NumIn())) { $s = 19; continue; }
					_r$3 = haveIdenticalType(t.rtype.In(i), v.rtype.In(i), cmpTags); /* */ $s = 22; case 22: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (!_r$3) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (!_r$3) { */ case 20:
						$s = -1; return false;
					/* } */ case 21:
					i = i + (1) >> 0;
				/* } */ $s = 18; continue; case 19:
				i$1 = 0;
				/* while (true) { */ case 23:
					/* if (!(i$1 < t.rtype.NumOut())) { break; } */ if(!(i$1 < t.rtype.NumOut())) { $s = 24; continue; }
					_r$4 = haveIdenticalType(t.rtype.Out(i$1), v.rtype.Out(i$1), cmpTags); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if (!_r$4) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (!_r$4) { */ case 25:
						$s = -1; return false;
					/* } */ case 26:
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 23; continue; case 24:
				$s = -1; return true;
			/* } else if (_1 === (20)) { */ case 5:
				t$1 = (T.kindType);
				v$1 = (V.kindType);
				if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
					$s = -1; return true;
				}
				$s = -1; return false;
			/* } else if (_1 === (21)) { */ case 6:
				_r$5 = haveIdenticalType(T.Key(), V.Key(), cmpTags); /* */ $s = 29; case 29: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				if (!(_r$5)) { _v$3 = false; $s = 28; continue s; }
				_r$6 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 30; case 30: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_v$3 = _r$6; case 28:
				$s = -1; return _v$3;
			/* } else if ((_1 === (22)) || (_1 === (23))) { */ case 7:
				_r$7 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 31; case 31: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$s = -1; return _r$7;
			/* } else if (_1 === (25)) { */ case 8:
				t$2 = (T.kindType);
				v$2 = (V.kindType);
				if (!((t$2.fields.$length === v$2.fields.$length))) {
					$s = -1; return false;
				}
				_ref = t$2.fields;
				_i = 0;
				/* while (true) { */ case 32:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 33; continue; }
					i$2 = _i;
					tf = (x = t$2.fields, ((i$2 < 0 || i$2 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$2]));
					vf = (x$1 = v$2.fields, ((i$2 < 0 || i$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$2]));
					if (!($clone(tf.name, name).name() === $clone(vf.name, name).name())) {
						$s = -1; return false;
					}
					_r$8 = haveIdenticalType(tf.typ, vf.typ, cmpTags); /* */ $s = 36; case 36: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					/* */ if (!_r$8) { $s = 34; continue; }
					/* */ $s = 35; continue;
					/* if (!_r$8) { */ case 34:
						$s = -1; return false;
					/* } */ case 35:
					if (cmpTags && !($clone(tf.name, name).tag() === $clone(vf.name, name).tag())) {
						$s = -1; return false;
					}
					if (!((tf.offsetAnon === vf.offsetAnon))) {
						$s = -1; return false;
					}
					if (!$clone(tf.name, name).isExported()) {
						tp = $clone(tf.name, name).pkgPath();
						if (tp === "") {
							tp = $clone(t$2.pkgPath, name).name();
						}
						vp = $clone(vf.name, name).pkgPath();
						if (vp === "") {
							vp = $clone(v$2.pkgPath, name).name();
						}
						if (!(tp === vp)) {
							$s = -1; return false;
						}
					}
					_i++;
				/* } */ $s = 32; continue; case 33:
				$s = -1; return true;
			/* } */ case 9:
		case 1:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: haveIdenticalUnderlyingType }; } $f.T = T; $f.V = V; $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.cmpTags = cmpTags; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.kind = kind; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.tf = tf; $f.tp = tp; $f.v = v; $f.v$1 = v$1; $f.v$2 = v$2; $f.vf = vf; $f.vp = vp; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	toType = function(t) {
		var t;
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	flag.prototype.kind = function() {
		var f;
		f = this.$val;
		return ((((f & 31) >>> 0) >>> 0));
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	Value.ptr.prototype.pointer = function() {
		var v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			return (v.ptr).$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBe = function(expected) {
		var expected, f;
		f = this.$val;
		if (!((new flag(f).kind() === expected))) {
			$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 256) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.ptr.prototype.Addr = function() {
		var v;
		v = this;
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		return new Value.ptr(v.typ.ptrTo(), v.ptr, ((((v.flag & 96) >>> 0)) | 22) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.ptr.prototype.Bool = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(1);
		return (v.ptr).$get();
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.ptr.prototype.Bytes = function() {
		var _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-byte slice"));
		/* } */ case 2:
		$s = -1; return (v.ptr).$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Bytes }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.ptr.prototype.runes = function() {
		var _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-rune slice"));
		/* } */ case 2:
		$s = -1; return (v.ptr).$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.runes }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.ptr.prototype.CanAddr = function() {
		var v;
		v = this;
		return !((((v.flag & 256) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.ptr.prototype.CanSet = function() {
		var v;
		v = this;
		return ((v.flag & 352) >>> 0) === 256;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.Call = function(in$1) {
		var _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).call("Call", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Call }; } $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.ptr.prototype.CallSlice = function(in$1) {
		var _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).call("CallSlice", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.CallSlice }; } $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.ptr.prototype.Complex = function() {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return ((x = (v.ptr).$get(), new $Complex128(x.$real, x.$imag)));
		} else if (_1 === (16)) {
			return (v.ptr).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Complex", new flag(v.flag).kind()));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.ptr.prototype.FieldByIndex = function(index) {
		var _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _v = $f._v; i = $f.i; index = $f.index; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (index.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index.$length === 1) { */ case 1:
			_r = $clone(v, Value).Field((0 >= index.$length ? ($throwRuntimeError("index out of range"), undefined) : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (i > 0) { */ case 6:
				if (!($clone(v, Value).Kind() === 22)) { _v = false; $s = 10; continue s; }
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1 === 25; case 10:
				/* */ if (_v) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_v) { */ case 8:
					if ($clone(v, Value).IsNil()) {
						$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					_r$2 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					v = _r$2;
				/* } */ case 9:
			/* } */ case 7:
			_r$3 = $clone(v, Value).Field(x); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByIndex }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._v = _v; $f.i = i; $f.index = index; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.ptr.prototype.FieldByName = function(name$1) {
		var _r, _r$1, _tuple, f, name$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(25);
		_r = v.typ.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByName }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	Value.ptr.prototype.FieldByNameFunc = function(match) {
		var _r, _r$1, _tuple, f, match, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; match = $f.match; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		_r = v.typ.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByNameFunc }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.match = match; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.ptr.prototype.Float = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return ((v.ptr).$get());
		} else if (_1 === (14)) {
			return (v.ptr).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Float", new flag(v.flag).kind()));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Int = function() {
		var _1, k, p, v;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (2)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (3)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (4)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (5)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (6)) {
			return (p).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Int", new flag(v.flag).kind()));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.CanInterface = function() {
		var v;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 96) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.ptr.prototype.Interface = function() {
		var _r, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = $ifaceNil;
		v = this;
		_r = valueInterface($clone(v, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Interface }; } $f._r = _r; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.ptr.prototype.IsValid = function() {
		var v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.Kind = function() {
		var v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var _r, c, e, fl, k, key, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; e = $f.e; fl = $f.fl; k = $f.k; key = $f.key; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		_r = $clone(key, Value).assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
		}
		e = mapaccess(v.typ, $clone(v, Value).pointer(), k);
		if (e === 0) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = ((((v.flag | key.flag) >>> 0)) & 96) >>> 0;
		fl = (fl | (((typ.Kind() >>> 0)))) >>> 0;
		if (ifaceIndir(typ)) {
			c = unsafe_New(typ);
			typedmemmove(typ, c, e);
			$s = -1; return new Value.ptr(typ, c, (fl | 128) >>> 0);
		} else {
			$s = -1; return new Value.ptr(typ, (e).$get(), fl);
		}
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapIndex }; } $f._r = _r; $f.c = c; $f.e = e; $f.fl = fl; $f.k = k; $f.key = key; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.MapKeys = function() {
		var _r, a, c, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; c = $f.c; fl = $f.fl; i = $f.i; it = $f.it; key = $f.key; keyType = $f.keyType; m = $f.m; mlen = $f.mlen; tt = $f.tt; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		keyType = tt.key;
		fl = (((v.flag & 96) >>> 0) | ((keyType.Kind() >>> 0))) >>> 0;
		m = $clone(v, Value).pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = $makeSlice(sliceType$9, mlen);
		i = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			_r = mapiterkey(it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			if (key === 0) {
				/* break; */ $s = 2; continue;
			}
			if (ifaceIndir(keyType)) {
				c = unsafe_New(keyType);
				typedmemmove(keyType, c, key);
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = new Value.ptr(keyType, c, (fl | 128) >>> 0));
			} else {
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = new Value.ptr(keyType, (key).$get(), fl));
			}
			mapiternext(it);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $subslice(a, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapKeys }; } $f._r = _r; $f.a = a; $f.c = c; $f.fl = fl; $f.i = i; $f.it = it; $f.key = key; $f.keyType = keyType; $f.m = m; $f.mlen = mlen; $f.tt = tt; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.ptr.prototype.Method = function(i) {
		var _r, _v, fl, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _v = $f._v; fl = $f.fl; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) { _v = true; $s = 3; continue s; }
		_r = v.typ.NumMethod(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = ((i >>> 0)) >= ((_r >>> 0)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect: Method index out of range"));
		/* } */ case 2:
		if ((v.typ.Kind() === 20) && $clone(v, Value).IsNil()) {
			$panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (v.flag & 160) >>> 0;
		fl = (fl | (19)) >>> 0;
		fl = (fl | ((((((i >>> 0)) << 10 >>> 0) | 512) >>> 0))) >>> 0;
		$s = -1; return new Value.ptr(v.typ, v.ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Method }; } $f._r = _r; $f._v = _v; $f.fl = fl; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.NumMethod = function() {
		var _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return 0;
		}
		_r = v.typ.NumMethod(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.NumMethod }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.ptr.prototype.MethodByName = function(name$1) {
		var _r, _r$1, _tuple, m, name$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; m = $f.m; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = v.typ.MethodByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = $clone(_tuple[0], Method);
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r$1 = $clone(v, Value).Method(m.Index); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MethodByName }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	Value.ptr.prototype.NumField = function() {
		var tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = (v.typ.kindType);
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.OverflowComplex = function(x) {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
		} else if (_1 === (16)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowComplex", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
	Value.ptr.prototype.OverflowFloat = function(x) {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return overflowFloat32(x);
		} else if (_1 === (14)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowFloat", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		var x;
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.ptr.prototype.OverflowInt = function(x) {
		var _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowInt", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
	Value.ptr.prototype.OverflowUint = function(x) {
		var _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (7)) || (_1 === (12)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowUint", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
	Value.ptr.prototype.Recv = function() {
		var _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).recv(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$s = -1; return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Recv }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	Value.ptr.prototype.recv = function(nb) {
		var _r, _tuple, nb, ok, p, selected, t, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; nb = $f.nb; ok = $f.ok; p = $f.p; selected = $f.selected; t = $f.t; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		tt = (v.typ.kindType);
		if ((((tt.dir >> 0)) & 1) === 0) {
			$panic(new $String("reflect: recv on send-only channel"));
		}
		t = tt.elem;
		val = new Value.ptr(t, 0, ((t.Kind() >>> 0)));
		p = 0;
		if (ifaceIndir(t)) {
			p = unsafe_New(t);
			val.ptr = p;
			val.flag = (val.flag | (128)) >>> 0;
		} else {
			p = ((val.$ptr_ptr || (val.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val))));
		}
		_r = chanrecv($clone(v, Value).pointer(), nb, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		selected = _tuple[0];
		ok = _tuple[1];
		if (!selected) {
			val = new Value.ptr(ptrType$1.nil, 0, 0);
		}
		$s = -1; return [val, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.recv }; } $f._r = _r; $f._tuple = _tuple; $f.nb = nb; $f.ok = ok; $f.p = p; $f.selected = selected; $f.t = t; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.recv = function(nb) { return this.$val.recv(nb); };
	Value.ptr.prototype.Send = function(x) {
		var _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).send($clone(x, Value), false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Send }; } $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Send = function(x) { return this.$val.Send(x); };
	Value.ptr.prototype.send = function(x, nb) {
		var _r, _r$1, nb, p, selected, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; nb = $f.nb; p = $f.p; selected = $f.selected; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		v = this;
		tt = (v.typ.kindType);
		if ((((tt.dir >> 0)) & 2) === 0) {
			$panic(new $String("reflect: send on recv-only channel"));
		}
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Value.Send", tt.elem, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		p = 0;
		if (!((((x.flag & 128) >>> 0) === 0))) {
			p = x.ptr;
		} else {
			p = ((x.$ptr_ptr || (x.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, x))));
		}
		_r$1 = chansend($clone(v, Value).pointer(), p, nb); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		selected = _r$1;
		$s = -1; return selected;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.send }; } $f._r = _r; $f._r$1 = _r$1; $f.nb = nb; $f.p = p; $f.selected = selected; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.send = function(x, nb) { return this.$val.send(x, nb); };
	Value.ptr.prototype.SetBool = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(1);
		(v.ptr).$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
	Value.ptr.prototype.setRunes = function(x) {
		var _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.setRunes of non-rune slice"));
		/* } */ case 2:
		(v.ptr).$set(x);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.setRunes }; } $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
	Value.ptr.prototype.SetComplex = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			(v.ptr).$set((new $Complex64(x.$real, x.$imag)));
		} else if (_1 === (16)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetComplex", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
	Value.ptr.prototype.SetFloat = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			(v.ptr).$set(($fround(x)));
		} else if (_1 === (14)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetFloat", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
	Value.ptr.prototype.SetInt = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (2)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		} else if (_1 === (3)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24)));
		} else if (_1 === (4)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16)));
		} else if (_1 === (5)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		} else if (_1 === (6)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetInt", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Value.ptr.prototype.SetMapIndex = function(key, val) {
		var _r, _r$1, e, k, key, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; e = $f.e; k = $f.k; key = $f.key; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		new flag(v.flag).mustBeExported();
		new flag(key.flag).mustBeExported();
		tt = (v.typ.kindType);
		_r = $clone(key, Value).assignTo("reflect.Value.SetMapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
		}
		if (val.typ === ptrType$1.nil) {
			mapdelete(v.typ, $clone(v, Value).pointer(), k);
			$s = -1; return;
		}
		new flag(val.flag).mustBeExported();
		_r$1 = $clone(val, Value).assignTo("reflect.Value.SetMapIndex", tt.elem, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		val = _r$1;
		e = 0;
		if (!((((val.flag & 128) >>> 0) === 0))) {
			e = val.ptr;
		} else {
			e = ((val.$ptr_ptr || (val.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val))));
		}
		$r = mapassign(v.typ, $clone(v, Value).pointer(), k, e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetMapIndex }; } $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.k = k; $f.key = key; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetMapIndex = function(key, val) { return this.$val.SetMapIndex(key, val); };
	Value.ptr.prototype.SetUint = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (7)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else if (_1 === (8)) {
			(v.ptr).$set(((x.$low << 24 >>> 24)));
		} else if (_1 === (9)) {
			(v.ptr).$set(((x.$low << 16 >>> 16)));
		} else if (_1 === (10)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else if (_1 === (11)) {
			(v.ptr).$set(x);
		} else if (_1 === (12)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetUint", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
	Value.ptr.prototype.SetPointer = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(26);
		(v.ptr).$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
	Value.ptr.prototype.SetString = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(24);
		(v.ptr).$set(x);
	};
	Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
	Value.ptr.prototype.String = function() {
		var _1, _r, k, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; k = $f.k; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (0)) {
			$s = -1; return "<invalid Value>";
		} else if (_1 === (24)) {
			$s = -1; return (v.ptr).$get();
		}
		_r = $clone(v, Value).Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return "<" + _r + " Value>";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.String }; } $f._1 = _1; $f._r = _r; $f.k = k; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.TryRecv = function() {
		var _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).recv(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$s = -1; return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TryRecv }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.ptr.prototype.TrySend = function(x) {
		var _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).send($clone(x, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TrySend }; } $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
	Value.ptr.prototype.Type = function() {
		var f, i, m, m$1, tt, ut, v, x, x$1;
		v = this;
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.ptr("reflect.Value.Type", 0));
		}
		if (((f & 512) >>> 0) === 0) {
			return v.typ;
		}
		i = ((v.flag >> 0)) >> 10 >> 0;
		if (v.typ.Kind() === 20) {
			tt = (v.typ.kindType);
			if (((i >>> 0)) >= ((tt.methods.$length >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			return v.typ.typeOff(m.typ);
		}
		ut = v.typ.uncommon();
		if (ut === ptrType$5.nil || ((i >>> 0)) >= ((ut.mcount >>> 0))) {
			$panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = $clone((x$1 = ut.methods(), ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])), method);
		return v.typ.typeOff(m$1.mtyp);
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.Uint = function() {
		var _1, k, p, v, x;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (7)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (8)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (9)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (10)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (11)) {
			return (p).$get();
		} else if (_1 === (12)) {
			return ((x = (p).$get(), new $Uint64(0, x.constructor === Number ? x : 1)));
		}
		$panic(new ValueError.ptr("reflect.Value.Uint", new flag(v.flag).kind()));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.ptr.prototype.UnsafeAddr = function() {
		var v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return (v.ptr);
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	New = function(typ) {
		var _r, _r$1, fl, ptr, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; fl = $f.fl; ptr = $f.ptr; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$panic(new $String("reflect: New(nil)"));
		}
		ptr = unsafe_New($assertType(typ, ptrType$1));
		fl = 22;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.ptrTo(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$1, ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: New }; } $f._r = _r; $f._r$1 = _r$1; $f.fl = fl; $f.ptr = ptr; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var _r, _r$1, _r$2, _r$3, context, dst, fl, target, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; context = $f.context; dst = $f.dst; fl = $f.fl; target = $f.target; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue(context, $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
			_r$1 = directlyAssignable(dst, v.typ); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 5; continue; }
			/* */ if (implements$1(dst, v.typ)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$1) { */ case 5:
				fl = (v.flag & 480) >>> 0;
				fl = (fl | (((dst.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(dst, v.ptr, fl);
			/* } else if (implements$1(dst, v.typ)) { */ case 6:
				if (target === 0) {
					target = unsafe_New(dst);
				}
				_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				x = _r$2;
				_r$3 = dst.NumMethod(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 0) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_r$3 === 0) { */ case 10:
					(target).$set(x);
					$s = 12; continue;
				/* } else { */ case 11:
					ifaceE2I(dst, x, target);
				/* } */ case 12:
				$s = -1; return new Value.ptr(dst, target, 148);
			/* } */ case 7:
		case 4:
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.assignTo }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.context = context; $f.dst = dst; $f.fl = fl; $f.target = target; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.Convert = function(t) {
		var _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; op = $f.op; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Convert", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		_r$1 = t.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = convertOp(_r$1, v.typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		/* */ if (op === $throwNilPointerError) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (op === $throwNilPointerError) { */ case 6:
			_r$3 = t.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + _r$3));
		/* } */ case 7:
		_r$4 = op($clone(v, Value), t); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Convert }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.op = op; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	convertOp = function(dst, src) {
		var _1, _2, _3, _4, _5, _6, _7, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _v, _v$1, _v$2, dst, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _7 = $f._7; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; dst = $f.dst; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = src.Kind();
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 2; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 3; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 4; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 5; continue; }
			/* */ if (_1 === (24)) { $s = 6; continue; }
			/* */ if (_1 === (23)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 2:
				_2 = dst.Kind();
				if ((_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6)) || (_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10)) || (_2 === (11)) || (_2 === (12))) {
					$s = -1; return cvtInt;
				} else if ((_2 === (13)) || (_2 === (14))) {
					$s = -1; return cvtIntFloat;
				} else if (_2 === (24)) {
					$s = -1; return cvtIntString;
				}
				$s = 8; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 3:
				_3 = dst.Kind();
				if ((_3 === (2)) || (_3 === (3)) || (_3 === (4)) || (_3 === (5)) || (_3 === (6)) || (_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10)) || (_3 === (11)) || (_3 === (12))) {
					$s = -1; return cvtUint;
				} else if ((_3 === (13)) || (_3 === (14))) {
					$s = -1; return cvtUintFloat;
				} else if (_3 === (24)) {
					$s = -1; return cvtUintString;
				}
				$s = 8; continue;
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 4:
				_4 = dst.Kind();
				if ((_4 === (2)) || (_4 === (3)) || (_4 === (4)) || (_4 === (5)) || (_4 === (6))) {
					$s = -1; return cvtFloatInt;
				} else if ((_4 === (7)) || (_4 === (8)) || (_4 === (9)) || (_4 === (10)) || (_4 === (11)) || (_4 === (12))) {
					$s = -1; return cvtFloatUint;
				} else if ((_4 === (13)) || (_4 === (14))) {
					$s = -1; return cvtFloat;
				}
				$s = 8; continue;
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 5:
				_5 = dst.Kind();
				if ((_5 === (15)) || (_5 === (16))) {
					$s = -1; return cvtComplex;
				}
				$s = 8; continue;
			/* } else if (_1 === (24)) { */ case 6:
				if (!(dst.Kind() === 23)) { _v = false; $s = 11; continue s; }
				_r = dst.Elem().PkgPath(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r === ""; case 11:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 9:
						_r$1 = dst.Elem().Kind(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_6 = _r$1;
						if (_6 === (8)) {
							$s = -1; return cvtStringBytes;
						} else if (_6 === (5)) {
							$s = -1; return cvtStringRunes;
						}
					case 13:
				/* } */ case 10:
				$s = 8; continue;
			/* } else if (_1 === (23)) { */ case 7:
				if (!(dst.Kind() === 24)) { _v$1 = false; $s = 17; continue s; }
				_r$2 = src.Elem().PkgPath(); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$1 = _r$2 === ""; case 17:
				/* */ if (_v$1) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (_v$1) { */ case 15:
						_r$3 = src.Elem().Kind(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_7 = _r$3;
						if (_7 === (8)) {
							$s = -1; return cvtBytesString;
						} else if (_7 === (5)) {
							$s = -1; return cvtRunesString;
						}
					case 19:
				/* } */ case 16:
			/* } */ case 8:
		case 1:
		_r$4 = haveIdenticalUnderlyingType(dst, src, false); /* */ $s = 23; case 23: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (_r$4) { */ case 21:
			$s = -1; return cvtDirect;
		/* } */ case 22:
		if (!((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "")) { _v$2 = false; $s = 26; continue s; }
		_r$5 = dst.Elem().common(); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg = _r$5;
		_r$6 = src.Elem().common(); /* */ $s = 28; case 28: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_arg$1 = _r$6;
		_r$7 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 29; case 29: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_v$2 = _r$7; case 26:
		/* */ if (_v$2) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (_v$2) { */ case 24:
			$s = -1; return cvtDirect;
		/* } */ case 25:
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				$s = -1; return cvtI2I;
			}
			$s = -1; return cvtT2I;
		}
		$s = -1; return $throwNilPointerError;
		/* */ } return; } if ($f === undefined) { $f = { $blk: convertOp }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._7 = _7; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.dst = dst; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeFloat = function(f, v, t) {
		var _1, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (4)) {
			(ptr).$set(($fround(v)));
		} else if (_1 === (8)) {
			(ptr).$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeFloat }; } $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeComplex = function(f, v, t) {
		var _1, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (8)) {
			(ptr).$set((new $Complex64(v.$real, v.$imag)));
		} else if (_1 === (16)) {
			(ptr).$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeComplex }; } $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeString = function(f, v, t) {
		var _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$clone(ret, Value).SetString(v);
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeString }; } $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeBytes = function(f, v, t) {
		var _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = $clone(ret, Value).SetBytes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeBytes }; } $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeRunes = function(f, v, t) {
		var _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = $clone(ret, Value).setRunes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeRunes }; } $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtInt = function(v, t) {
		var _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt((v.flag & 96) >>> 0, ((x = $clone(v, Value).Int(), new $Uint64(x.$high, x.$low))), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtInt }; } $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUint = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt((v.flag & 96) >>> 0, $clone(v, Value).Uint(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUint }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatInt = function(v, t) {
		var _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt((v.flag & 96) >>> 0, ((x = (new $Int64(0, $clone(v, Value).Float())), new $Uint64(x.$high, x.$low))), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatInt }; } $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatUint = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt((v.flag & 96) >>> 0, (new $Uint64(0, $clone(v, Value).Float())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatUint }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntFloat = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat((v.flag & 96) >>> 0, ($flatten64($clone(v, Value).Int())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntFloat }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintFloat = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat((v.flag & 96) >>> 0, ($flatten64($clone(v, Value).Uint())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintFloat }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloat = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat((v.flag & 96) >>> 0, $clone(v, Value).Float(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloat }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtComplex = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeComplex((v.flag & 96) >>> 0, $clone(v, Value).Complex(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtComplex }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntString = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeString((v.flag & 96) >>> 0, ($encodeRune($clone(v, Value).Int().$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntString }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintString = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeString((v.flag & 96) >>> 0, ($encodeRune($clone(v, Value).Uint().$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintString }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtBytesString = function(v, t) {
		var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = (v.flag & 96) >>> 0;
		_r = $clone(v, Value).Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = ($bytesToString(_r));
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtBytesString }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringBytes = function(v, t) {
		var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = (v.flag & 96) >>> 0;
		_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = (new sliceType$15($stringToBytes(_r)));
		_arg$2 = t;
		_r$1 = makeBytes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringBytes }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtRunesString = function(v, t) {
		var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = (v.flag & 96) >>> 0;
		_r = $clone(v, Value).runes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = ($runesToString(_r));
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtRunesString }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringRunes = function(v, t) {
		var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = (v.flag & 96) >>> 0;
		_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = (new sliceType$17($stringToRunes(_r)));
		_arg$2 = t;
		_r$1 = makeRunes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringRunes }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtT2I = function(v, typ) {
		var _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; target = $f.target; typ = $f.typ; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = unsafe_New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		target = _r$1;
		_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		x = _r$2;
		_r$3 = typ.NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 0) { */ case 4:
			(target).$set(x);
			$s = 6; continue;
		/* } else { */ case 5:
			ifaceE2I($assertType(typ, ptrType$1), x, target);
		/* } */ case 6:
		_r$4 = typ.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$4, target, (((((v.flag & 96) >>> 0) | 128) >>> 0) | 20) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtT2I }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.target = target; $f.typ = typ; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtI2I = function(v, typ) {
		var _r, _r$1, _r$2, ret, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ret = $f.ret; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if ($clone(v, Value).IsNil()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(v, Value).IsNil()) { */ case 1:
			_r = Zero(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ret = _r;
			ret.flag = (ret.flag | (((v.flag & 96) >>> 0))) >>> 0;
			$s = -1; return ret;
		/* } */ case 2:
		_r$1 = $clone(v, Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = cvtT2I($clone(_r$1, Value), typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtI2I }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ret = ret; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType$5.methods = [{prop: "methods", name: "methods", pkg: "reflect", typ: $funcType([], [sliceType$5], false)}];
	ptrType$16.methods = [{prop: "in$", name: "in", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}, {prop: "out", name: "out", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}];
	name.methods = [{prop: "name", name: "name", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "tag", name: "tag", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "isExported", name: "isExported", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "data", name: "data", pkg: "reflect", typ: $funcType([$Int], [ptrType$4], false)}, {prop: "nameLen", name: "nameLen", pkg: "reflect", typ: $funcType([], [$Int], false)}, {prop: "tagLen", name: "tagLen", pkg: "reflect", typ: $funcType([], [$Int], false)}];
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$5], false)}, {prop: "nameOff", name: "nameOff", pkg: "reflect", typ: $funcType([nameOff], [name], false)}, {prop: "typeOff", name: "typeOff", pkg: "reflect", typ: $funcType([typeOff], [ptrType$1], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "textOff", name: "textOff", pkg: "reflect", typ: $funcType([textOff], [$UnsafePointer], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "reflect", typ: $funcType([], [sliceType$5], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}];
	ChanDir.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$7.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ptrType$17.methods = [{prop: "offset", name: "offset", pkg: "reflect", typ: $funcType([], [$Uintptr], false)}, {prop: "anon", name: "anon", pkg: "reflect", typ: $funcType([], [$Bool], false)}];
	ptrType$9.methods = [{prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}];
	StructTag.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [$String, $Bool], false)}];
	Value.methods = [{prop: "object", name: "object", pkg: "reflect", typ: $funcType([], [ptrType$2], false)}, {prop: "call", name: "call", pkg: "reflect", typ: $funcType([$String, sliceType$9], [sliceType$9], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$12], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$15], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "pointer", name: "pointer", pkg: "reflect", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$15], false)}, {prop: "runes", name: "runes", pkg: "reflect", typ: $funcType([], [sliceType$17], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$9], [sliceType$9], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", typ: $funcType([sliceType$9], [sliceType$9], false)}, {prop: "Complex", name: "Complex", pkg: "", typ: $funcType([], [$Complex128], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [Value], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [Value], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$9], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", typ: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", typ: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", typ: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", typ: $funcType([$Uint64], [$Bool], false)}, {prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "recv", name: "recv", pkg: "reflect", typ: $funcType([$Bool], [Value, $Bool], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([Value], [], false)}, {prop: "send", name: "send", pkg: "reflect", typ: $funcType([Value, $Bool], [$Bool], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", typ: $funcType([sliceType$17], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", typ: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", typ: $funcType([Value, Value], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", typ: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "TrySend", name: "TrySend", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Type], [Value], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "reflect", typ: $funcType([], [Kind], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", typ: $funcType([Kind], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", typ: $funcType([], [], false)}];
	ptrType$18.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	uncommonType.init("reflect", [{prop: "pkgPath", name: "pkgPath", anonymous: false, exported: false, typ: nameOff, tag: ""}, {prop: "mcount", name: "mcount", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "_$2", name: "_", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "moff", name: "moff", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "_$4", name: "_", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "_methods", name: "_methods", anonymous: false, exported: false, typ: sliceType$5, tag: ""}]);
	funcType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"func\""}, {prop: "inCount", name: "inCount", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "outCount", name: "outCount", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "_in", name: "_in", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "_out", name: "_out", anonymous: false, exported: false, typ: sliceType$2, tag: ""}]);
	name.init("reflect", [{prop: "bytes", name: "bytes", anonymous: false, exported: false, typ: ptrType$4, tag: ""}]);
	nameData.init("reflect", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "tag", name: "tag", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "pkgPath", name: "pkgPath", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "exported", name: "exported", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	mapIter.init("reflect", [{prop: "t", name: "t", anonymous: false, exported: false, typ: Type, tag: ""}, {prop: "m", name: "m", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "keys", name: "keys", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "i", name: "i", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	Type.init([{prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$5], false)}]);
	rtype.init("reflect", [{prop: "size", name: "size", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "ptrdata", name: "ptrdata", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "tflag", name: "tflag", anonymous: false, exported: false, typ: tflag, tag: ""}, {prop: "align", name: "align", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "alg", name: "alg", anonymous: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "gcdata", name: "gcdata", anonymous: false, exported: false, typ: ptrType$4, tag: ""}, {prop: "str", name: "str", anonymous: false, exported: false, typ: nameOff, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", anonymous: false, exported: false, typ: typeOff, tag: ""}]);
	typeAlg.init("reflect", [{prop: "hash", name: "hash", anonymous: false, exported: false, typ: funcType$4, tag: ""}, {prop: "equal", name: "equal", anonymous: false, exported: false, typ: funcType$5, tag: ""}]);
	method.init("reflect", [{prop: "name", name: "name", anonymous: false, exported: false, typ: nameOff, tag: ""}, {prop: "mtyp", name: "mtyp", anonymous: false, exported: false, typ: typeOff, tag: ""}, {prop: "ifn", name: "ifn", anonymous: false, exported: false, typ: textOff, tag: ""}, {prop: "tfn", name: "tfn", anonymous: false, exported: false, typ: textOff, tag: ""}]);
	arrayType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"array\""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "len", name: "len", anonymous: false, exported: false, typ: $Uintptr, tag: ""}]);
	chanType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"chan\""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", anonymous: false, exported: false, typ: $Uintptr, tag: ""}]);
	imethod.init("reflect", [{prop: "name", name: "name", anonymous: false, exported: false, typ: nameOff, tag: ""}, {prop: "typ", name: "typ", anonymous: false, exported: false, typ: typeOff, tag: ""}]);
	interfaceType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"interface\""}, {prop: "pkgPath", name: "pkgPath", anonymous: false, exported: false, typ: name, tag: ""}, {prop: "methods", name: "methods", anonymous: false, exported: false, typ: sliceType$6, tag: ""}]);
	mapType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"map\""}, {prop: "key", name: "key", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "hmap", name: "hmap", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "keysize", name: "keysize", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "indirectkey", name: "indirectkey", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "indirectvalue", name: "indirectvalue", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "reflexivekey", name: "reflexivekey", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "needkeyupdate", name: "needkeyupdate", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	ptrType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"ptr\""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}]);
	sliceType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"slice\""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}]);
	structField.init("reflect", [{prop: "name", name: "name", anonymous: false, exported: false, typ: name, tag: ""}, {prop: "typ", name: "typ", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "offsetAnon", name: "offsetAnon", anonymous: false, exported: false, typ: $Uintptr, tag: ""}]);
	structType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"struct\""}, {prop: "pkgPath", name: "pkgPath", anonymous: false, exported: false, typ: name, tag: ""}, {prop: "fields", name: "fields", anonymous: false, exported: false, typ: sliceType$7, tag: ""}]);
	Method.init("", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: Type, tag: ""}, {prop: "Func", name: "Func", anonymous: false, exported: true, typ: Value, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	StructField.init("", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: Type, tag: ""}, {prop: "Tag", name: "Tag", anonymous: false, exported: true, typ: StructTag, tag: ""}, {prop: "Offset", name: "Offset", anonymous: false, exported: true, typ: $Uintptr, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: sliceType$13, tag: ""}, {prop: "Anonymous", name: "Anonymous", anonymous: false, exported: true, typ: $Bool, tag: ""}]);
	fieldScan.init("reflect", [{prop: "typ", name: "typ", anonymous: false, exported: false, typ: ptrType$9, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: sliceType$13, tag: ""}]);
	Value.init("reflect", [{prop: "typ", name: "typ", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "flag", anonymous: true, exported: false, typ: flag, tag: ""}]);
	ValueError.init("", [{prop: "Method", name: "Method", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Kind", name: "Kind", anonymous: false, exported: true, typ: Kind, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		nameOffList = sliceType$1.nil;
		typeOffList = sliceType$2.nil;
		methodCache = new sync.Map.ptr(new sync.Mutex.ptr(0, 0), new $packages["sync/atomic"].Value.ptr(new $packages["sync/atomic"].noCopy.ptr(), $ifaceNil), false, 0);
		initialized = false;
		uncommonTypeMap = {};
		nameMap = {};
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
		jsObjectPtr = reflectType($jsObjectPtr);
		kindNames = new sliceType$4(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$r = init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, $init, errors, io, math, os, reflect, strconv, sync, utf8, fmtFlags, fmt, State, Formatter, Stringer, GoStringer, buffer, pp, scanError, ss, ssave, sliceType, ptrType, ptrType$1, arrayType, arrayType$1, sliceType$1, sliceType$2, arrayType$2, ptrType$2, ptrType$5, ptrType$25, funcType, ppFree, space, ssFree, complexError, boolError, newPrinter, Fprintf, Printf, Sprintf, Fprint, Print, Sprint, Fprintln, Println, getField, tooLarge, parsenum, intFromArg, parseArgNumber, isSpace, notSpace, indexRune;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	utf8 = $packages["unicode/utf8"];
	fmtFlags = $pkg.fmtFlags = $newType(0, $kindStruct, "fmt.fmtFlags", true, "fmt", false, function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, zero_, plusV_, sharpV_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.widPresent = false;
			this.precPresent = false;
			this.minus = false;
			this.plus = false;
			this.sharp = false;
			this.space = false;
			this.zero = false;
			this.plusV = false;
			this.sharpV = false;
			return;
		}
		this.widPresent = widPresent_;
		this.precPresent = precPresent_;
		this.minus = minus_;
		this.plus = plus_;
		this.sharp = sharp_;
		this.space = space_;
		this.zero = zero_;
		this.plusV = plusV_;
		this.sharpV = sharpV_;
	});
	fmt = $pkg.fmt = $newType(0, $kindStruct, "fmt.fmt", true, "fmt", false, function(buf_, fmtFlags_, wid_, prec_, intbuf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = ptrType$1.nil;
			this.fmtFlags = new fmtFlags.ptr(false, false, false, false, false, false, false, false, false);
			this.wid = 0;
			this.prec = 0;
			this.intbuf = arrayType.zero();
			return;
		}
		this.buf = buf_;
		this.fmtFlags = fmtFlags_;
		this.wid = wid_;
		this.prec = prec_;
		this.intbuf = intbuf_;
	});
	State = $pkg.State = $newType(8, $kindInterface, "fmt.State", true, "fmt", true, null);
	Formatter = $pkg.Formatter = $newType(8, $kindInterface, "fmt.Formatter", true, "fmt", true, null);
	Stringer = $pkg.Stringer = $newType(8, $kindInterface, "fmt.Stringer", true, "fmt", true, null);
	GoStringer = $pkg.GoStringer = $newType(8, $kindInterface, "fmt.GoStringer", true, "fmt", true, null);
	buffer = $pkg.buffer = $newType(12, $kindSlice, "fmt.buffer", true, "fmt", false, null);
	pp = $pkg.pp = $newType(0, $kindStruct, "fmt.pp", true, "fmt", false, function(buf_, arg_, value_, fmt_, reordered_, goodArgNum_, panicking_, erroring_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = buffer.nil;
			this.arg = $ifaceNil;
			this.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
			this.fmt = new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType.zero());
			this.reordered = false;
			this.goodArgNum = false;
			this.panicking = false;
			this.erroring = false;
			return;
		}
		this.buf = buf_;
		this.arg = arg_;
		this.value = value_;
		this.fmt = fmt_;
		this.reordered = reordered_;
		this.goodArgNum = goodArgNum_;
		this.panicking = panicking_;
		this.erroring = erroring_;
	});
	scanError = $pkg.scanError = $newType(0, $kindStruct, "fmt.scanError", true, "fmt", false, function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	ss = $pkg.ss = $newType(0, $kindStruct, "fmt.ss", true, "fmt", false, function(rs_, buf_, count_, atEOF_, ssave_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rs = $ifaceNil;
			this.buf = buffer.nil;
			this.count = 0;
			this.atEOF = false;
			this.ssave = new ssave.ptr(false, false, false, 0, 0, 0);
			return;
		}
		this.rs = rs_;
		this.buf = buf_;
		this.count = count_;
		this.atEOF = atEOF_;
		this.ssave = ssave_;
	});
	ssave = $pkg.ssave = $newType(0, $kindStruct, "fmt.ssave", true, "fmt", false, function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.validSave = false;
			this.nlIsEnd = false;
			this.nlIsSpace = false;
			this.argLimit = 0;
			this.limit = 0;
			this.maxWid = 0;
			return;
		}
		this.validSave = validSave_;
		this.nlIsEnd = nlIsEnd_;
		this.nlIsSpace = nlIsSpace_;
		this.argLimit = argLimit_;
		this.limit = limit_;
		this.maxWid = maxWid_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(reflect.rtype);
	ptrType$1 = $ptrType(buffer);
	arrayType = $arrayType($Uint8, 68);
	arrayType$1 = $arrayType($Uint16, 2);
	sliceType$1 = $sliceType(arrayType$1);
	sliceType$2 = $sliceType($Uint8);
	arrayType$2 = $arrayType($Uint8, 5);
	ptrType$2 = $ptrType(pp);
	ptrType$5 = $ptrType(ss);
	ptrType$25 = $ptrType(fmt);
	funcType = $funcType([$Int32], [$Bool], false);
	fmt.ptr.prototype.clearflags = function() {
		var f;
		f = this;
		fmtFlags.copy(f.fmtFlags, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false));
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.ptr.prototype.init = function(buf) {
		var buf, f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.ptr.prototype.writePadding = function(n) {
		var _i, _ref, buf, f, i, n, newLen, oldLen, padByte, padding;
		f = this;
		if (n <= 0) {
			return;
		}
		buf = f.buf.$get();
		oldLen = buf.$length;
		newLen = oldLen + n >> 0;
		if (newLen > buf.$capacity) {
			buf = $makeSlice(buffer, (($imul(buf.$capacity, 2)) + n >> 0));
			$copySlice(buf, f.buf.$get());
		}
		padByte = 32;
		if (f.fmtFlags.zero) {
			padByte = 48;
		}
		padding = $subslice(buf, oldLen, newLen);
		_ref = padding;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= padding.$length) ? ($throwRuntimeError("index out of range"), undefined) : padding.$array[padding.$offset + i] = padByte);
			_i++;
		}
		f.buf.$set($subslice(buf, 0, newLen));
	};
	fmt.prototype.writePadding = function(n) { return this.$val.writePadding(n); };
	fmt.ptr.prototype.pad = function(b) {
		var b, f, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.Write(b);
			return;
		}
		width = f.wid - utf8.RuneCount(b) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.Write(b);
		} else {
			f.buf.Write(b);
			f.writePadding(width);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.ptr.prototype.padString = function(s) {
		var f, s, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.WriteString(s);
			return;
		}
		width = f.wid - utf8.RuneCountInString(s) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.WriteString(s);
		} else {
			f.buf.WriteString(s);
			f.writePadding(width);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.ptr.prototype.fmt_boolean = function(v) {
		var f, v;
		f = this;
		if (v) {
			f.padString("true");
		} else {
			f.padString("false");
		}
	};
	fmt.prototype.fmt_boolean = function(v) { return this.$val.fmt_boolean(v); };
	fmt.ptr.prototype.fmt_unicode = function(u) {
		var buf, f, i, oldZero, prec, u, width;
		f = this;
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		prec = 4;
		if (f.fmtFlags.precPresent && f.prec > 4) {
			prec = f.prec;
			width = (((2 + prec >> 0) + 2 >> 0) + 4 >> 0) + 1 >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		i = buf.$length;
		if (f.fmtFlags.sharp && (u.$high < 0 || (u.$high === 0 && u.$low <= 1114111)) && strconv.IsPrint(((u.$low >> 0)))) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 39);
			i = i - (utf8.RuneLen(((u.$low >> 0)))) >> 0;
			utf8.EncodeRune($subslice(buf, i), ((u.$low >> 0)));
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 39);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 32);
		}
		while (true) {
			if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
			prec = prec - (1) >> 0;
			u = $shiftRightUint64(u, (4));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(u)));
		prec = prec - (1) >> 0;
		while (true) {
			if (!(prec > 0)) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			prec = prec - (1) >> 0;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 43);
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 85);
		oldZero = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero;
	};
	fmt.prototype.fmt_unicode = function(u) { return this.$val.fmt_unicode(u); };
	fmt.ptr.prototype.fmt_integer = function(u, base, isSigned, digits) {
		var _1, _2, base, buf, digits, f, i, isSigned, negative, next, oldZero, oldZero$1, prec, u, width, x, x$1, x$2, x$3, x$4;
		f = this;
		negative = isSigned && (x = (new $Int64(u.$high, u.$low)), (x.$high < 0 || (x.$high === 0 && x.$low < 0)));
		if (negative) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		if (f.fmtFlags.widPresent || f.fmtFlags.precPresent) {
			width = (3 + f.wid >> 0) + f.prec >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		prec = 0;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
			if ((prec === 0) && (u.$high === 0 && u.$low === 0)) {
				oldZero = f.fmtFlags.zero;
				f.fmtFlags.zero = false;
				f.writePadding(f.wid);
				f.fmtFlags.zero = oldZero;
				return;
			}
		} else if (f.fmtFlags.zero && f.fmtFlags.widPresent) {
			prec = f.wid;
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				prec = prec - (1) >> 0;
			}
		}
		i = buf.$length;
		_1 = base;
		if (_1 === (10)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 10)))) { break; }
				i = i - (1) >> 0;
				next = $div64(u, new $Uint64(0, 10), false);
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$1 = new $Uint64(0 + u.$high, 48 + u.$low), x$2 = $mul64(next, new $Uint64(0, 10)), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low)).$low << 24 >>> 24)));
				u = next;
			}
		} else if (_1 === (16)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
				u = $shiftRightUint64(u, (4));
			}
		} else if (_1 === (8)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 8)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$3 = new $Uint64(u.$high & 0, (u.$low & 7) >>> 0), new $Uint64(0 + x$3.$high, 48 + x$3.$low)).$low << 24 >>> 24)));
				u = $shiftRightUint64(u, (3));
			}
		} else if (_1 === (2)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 2)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$4 = new $Uint64(u.$high & 0, (u.$low & 1) >>> 0), new $Uint64(0 + x$4.$high, 48 + x$4.$low)).$low << 24 >>> 24)));
				u = $shiftRightUint64(u, (1));
			}
		} else {
			$panic(new $String("fmt: unknown base; can't happen"));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(u)));
		while (true) {
			if (!(i > 0 && prec > (buf.$length - i >> 0))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
		}
		if (f.fmtFlags.sharp) {
			_2 = base;
			if (_2 === (8)) {
				if (!((((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i]) === 48))) {
					i = i - (1) >> 0;
					((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
				}
			} else if (_2 === (16)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt(16));
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			}
		}
		if (negative) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 45);
		} else if (f.fmtFlags.plus) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 43);
		} else if (f.fmtFlags.space) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 32);
		}
		oldZero$1 = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero$1;
	};
	fmt.prototype.fmt_integer = function(u, base, isSigned, digits) { return this.$val.fmt_integer(u, base, isSigned, digits); };
	fmt.ptr.prototype.truncate = function(s) {
		var _i, _ref, _rune, f, i, n, s;
		f = this;
		if (f.fmtFlags.precPresent) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				n = n - (1) >> 0;
				if (n < 0) {
					return $substring(s, 0, i);
				}
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncate = function(s) { return this.$val.truncate(s); };
	fmt.ptr.prototype.fmt_s = function(s) {
		var f, s;
		f = this;
		s = f.truncate(s);
		f.padString(s);
	};
	fmt.prototype.fmt_s = function(s) { return this.$val.fmt_s(s); };
	fmt.ptr.prototype.fmt_sbx = function(s, b, digits) {
		var b, buf, c, digits, f, i, length, s, width;
		f = this;
		length = b.$length;
		if (b === sliceType$2.nil) {
			length = s.length;
		}
		if (f.fmtFlags.precPresent && f.prec < length) {
			length = f.prec;
		}
		width = $imul(2, length);
		if (width > 0) {
			if (f.fmtFlags.space) {
				if (f.fmtFlags.sharp) {
					width = $imul(width, (2));
				}
				width = width + ((length - 1 >> 0)) >> 0;
			} else if (f.fmtFlags.sharp) {
				width = width + (2) >> 0;
			}
		} else {
			if (f.fmtFlags.widPresent) {
				f.writePadding(f.wid);
			}
			return;
		}
		if (f.fmtFlags.widPresent && f.wid > width && !f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
		buf = f.buf.$get();
		if (f.fmtFlags.sharp) {
			buf = $append(buf, 48, digits.charCodeAt(16));
		}
		c = 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			if (f.fmtFlags.space && i > 0) {
				buf = $append(buf, 32);
				if (f.fmtFlags.sharp) {
					buf = $append(buf, 48, digits.charCodeAt(16));
				}
			}
			if (!(b === sliceType$2.nil)) {
				c = ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]);
			} else {
				c = s.charCodeAt(i);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + (1) >> 0;
		}
		f.buf.$set(buf);
		if (f.fmtFlags.widPresent && f.wid > width && f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
	};
	fmt.prototype.fmt_sbx = function(s, b, digits) { return this.$val.fmt_sbx(s, b, digits); };
	fmt.ptr.prototype.fmt_sx = function(s, digits) {
		var digits, f, s;
		f = this;
		f.fmt_sbx(s, sliceType$2.nil, digits);
	};
	fmt.prototype.fmt_sx = function(s, digits) { return this.$val.fmt_sx(s, digits); };
	fmt.ptr.prototype.fmt_bx = function(b, digits) {
		var b, digits, f;
		f = this;
		f.fmt_sbx("", b, digits);
	};
	fmt.prototype.fmt_bx = function(b, digits) { return this.$val.fmt_bx(b, digits); };
	fmt.ptr.prototype.fmt_q = function(s) {
		var buf, f, s;
		f = this;
		s = f.truncate(s);
		if (f.fmtFlags.sharp && strconv.CanBackquote(s)) {
			f.padString("`" + s + "`");
			return;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteToASCII(buf, s));
		} else {
			f.pad(strconv.AppendQuote(buf, s));
		}
	};
	fmt.prototype.fmt_q = function(s) { return this.$val.fmt_q(s); };
	fmt.ptr.prototype.fmt_c = function(c) {
		var buf, c, f, r, w;
		f = this;
		r = ((c.$low >> 0));
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		w = utf8.EncodeRune($subslice(buf, 0, 4), r);
		f.pad($subslice(buf, 0, w));
	};
	fmt.prototype.fmt_c = function(c) { return this.$val.fmt_c(c); };
	fmt.ptr.prototype.fmt_qc = function(c) {
		var buf, c, f, r;
		f = this;
		r = ((c.$low >> 0));
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteRuneToASCII(buf, r));
		} else {
			f.pad(strconv.AppendQuoteRune(buf, r));
		}
	};
	fmt.prototype.fmt_qc = function(c) { return this.$val.fmt_qc(c); };
	fmt.ptr.prototype.fmt_float = function(v, size, verb, prec) {
		var _1, _2, digits, f, hasDecimalPoint, i, num, oldZero, prec, size, tail, tailBuf, v, verb;
		f = this;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
		}
		num = strconv.AppendFloat($subslice(new sliceType$2(f.intbuf), 0, 1), v, ((verb << 24 >>> 24)), prec, size);
		if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 45) || ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 43)) {
			num = $subslice(num, 1);
		} else {
			(0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0] = 43);
		}
		if (f.fmtFlags.space && ((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]) === 43) && !f.fmtFlags.plus) {
			(0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0] = 32);
		}
		if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 73) || ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 78)) {
			oldZero = f.fmtFlags.zero;
			f.fmtFlags.zero = false;
			if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 78) && !f.fmtFlags.space && !f.fmtFlags.plus) {
				num = $subslice(num, 1);
			}
			f.pad(num);
			f.fmtFlags.zero = oldZero;
			return;
		}
		if (f.fmtFlags.sharp && !((verb === 98))) {
			digits = 0;
			_1 = verb;
			if ((_1 === (118)) || (_1 === (103)) || (_1 === (71))) {
				digits = prec;
				if (digits === -1) {
					digits = 6;
				}
			}
			tailBuf = arrayType$2.zero();
			tail = $subslice(new sliceType$2(tailBuf), 0, 0);
			hasDecimalPoint = false;
			i = 1;
			while (true) {
				if (!(i < num.$length)) { break; }
				_2 = ((i < 0 || i >= num.$length) ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + i]);
				if (_2 === (46)) {
					hasDecimalPoint = true;
				} else if ((_2 === (101)) || (_2 === (69))) {
					tail = $appendSlice(tail, $subslice(num, i));
					num = $subslice(num, 0, i);
				} else {
					digits = digits - (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (!hasDecimalPoint) {
				num = $append(num, 46);
			}
			while (true) {
				if (!(digits > 0)) { break; }
				num = $append(num, 48);
				digits = digits - (1) >> 0;
			}
			num = $appendSlice(num, tail);
		}
		if (f.fmtFlags.plus || !(((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]) === 43))) {
			if (f.fmtFlags.zero && f.fmtFlags.widPresent && f.wid > num.$length) {
				f.buf.WriteByte((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]));
				f.writePadding(f.wid - num.$length >> 0);
				f.buf.Write($subslice(num, 1));
				return;
			}
			f.pad(num);
			return;
		}
		f.pad($subslice(num, 1));
	};
	fmt.prototype.fmt_float = function(v, size, verb, prec) { return this.$val.fmt_float(v, size, verb, prec); };
	$ptrType(buffer).prototype.Write = function(p) {
		var b, p;
		b = this;
		b.$set($appendSlice(b.$get(), p));
	};
	$ptrType(buffer).prototype.WriteString = function(s) {
		var b, s;
		b = this;
		b.$set($appendSlice(b.$get(), s));
	};
	$ptrType(buffer).prototype.WriteByte = function(c) {
		var b, c;
		b = this;
		b.$set($append(b.$get(), c));
	};
	$ptrType(buffer).prototype.WriteRune = function(r) {
		var b, bp, n, r, w, x;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), ((r << 24 >>> 24))));
			return;
		}
		b = bp.$get();
		n = b.$length;
		while (true) {
			if (!((n + 4 >> 0) > b.$capacity)) { break; }
			b = $append(b, 0);
		}
		w = utf8.EncodeRune((x = $subslice(b, n, (n + 4 >> 0)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length)), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
	};
	newPrinter = function() {
		var _r, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = ppFree.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = $assertType(_r, ptrType$2);
		p.panicking = false;
		p.erroring = false;
		p.fmt.init((p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))));
		$s = -1; return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newPrinter }; } $f._r = _r; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.ptr.prototype.free = function() {
		var p;
		p = this;
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = $ifaceNil;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.ptr.prototype.Width = function() {
		var _tmp, _tmp$1, ok, p, wid;
		wid = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.wid;
		_tmp$1 = p.fmt.fmtFlags.widPresent;
		wid = _tmp;
		ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.ptr.prototype.Precision = function() {
		var _tmp, _tmp$1, ok, p, prec;
		prec = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.prec;
		_tmp$1 = p.fmt.fmtFlags.precPresent;
		prec = _tmp;
		ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.ptr.prototype.Flag = function(b) {
		var _1, b, p;
		p = this;
		_1 = b;
		if (_1 === (45)) {
			return p.fmt.fmtFlags.minus;
		} else if (_1 === (43)) {
			return p.fmt.fmtFlags.plus || p.fmt.fmtFlags.plusV;
		} else if (_1 === (35)) {
			return p.fmt.fmtFlags.sharp || p.fmt.fmtFlags.sharpV;
		} else if (_1 === (32)) {
			return p.fmt.fmtFlags.space;
		} else if (_1 === (48)) {
			return p.fmt.fmtFlags.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.ptr.prototype.Write = function(b) {
		var _tmp, _tmp$1, b, err, p, ret;
		ret = 0;
		err = $ifaceNil;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(b);
		_tmp = b.$length;
		_tmp$1 = $ifaceNil;
		ret = _tmp;
		err = _tmp$1;
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	Fprintf = function(w, format, a) {
		var _r, _r$1, _tuple, a, err, format, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; err = $f.err; format = $f.format; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = w.Write((x = p.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprintf }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.format = format; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprintf = Fprintf;
	Printf = function(format, a) {
		var _r, _tuple, a, err, format, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; a = $f.a; err = $f.err; format = $f.format; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = Fprintf(os.Stdout, format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Printf }; } $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.format = format; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Printf = Printf;
	Sprintf = function(format, a) {
		var _r, a, format, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; format = $f.format; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = ($bytesToString(p.buf));
		p.free();
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintf }; } $f._r = _r; $f.a = a; $f.format = format; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintf = Sprintf;
	Fprint = function(w, a) {
		var _r, _r$1, _tuple, a, err, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrint(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = w.Write((x = p.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprint }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprint = Fprint;
	Print = function(a) {
		var _r, _tuple, a, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = Fprint(os.Stdout, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Print }; } $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Print = Print;
	Sprint = function(a) {
		var _r, a, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrint(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = ($bytesToString(p.buf));
		p.free();
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprint }; } $f._r = _r; $f.a = a; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprint = Sprint;
	Fprintln = function(w, a) {
		var _r, _r$1, _tuple, a, err, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintln(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = w.Write((x = p.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprintln }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprintln = Fprintln;
	Println = function(a) {
		var _r, _tuple, a, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = Fprintln(os.Stdout, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Println }; } $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Println = Println;
	getField = function(v, i) {
		var _r, _r$1, i, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; i = $f.i; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $clone(v, reflect.Value).Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		val = _r;
		/* */ if (($clone(val, reflect.Value).Kind() === 20) && !$clone(val, reflect.Value).IsNil()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (($clone(val, reflect.Value).Kind() === 20) && !$clone(val, reflect.Value).IsNil()) { */ case 2:
			_r$1 = $clone(val, reflect.Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			val = _r$1;
		/* } */ case 3:
		$s = -1; return val;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getField }; } $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	tooLarge = function(x) {
		var x;
		return x > 1000000 || x < -1000000;
	};
	parsenum = function(s, start, end) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, end, isnum, newi, num, s, start;
		num = 0;
		isnum = false;
		newi = 0;
		if (start >= end) {
			_tmp = 0;
			_tmp$1 = false;
			_tmp$2 = end;
			num = _tmp;
			isnum = _tmp$1;
			newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (true) {
			if (!(newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57)) { break; }
			if (tooLarge(num)) {
				_tmp$3 = 0;
				_tmp$4 = false;
				_tmp$5 = end;
				num = _tmp$3;
				isnum = _tmp$4;
				newi = _tmp$5;
				return [num, isnum, newi];
			}
			num = ($imul(num, 10)) + (((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0)) >> 0;
			isnum = true;
			newi = newi + (1) >> 0;
		}
		return [num, isnum, newi];
	};
	pp.ptr.prototype.unknownType = function(v) {
		var _r, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!$clone(v, reflect.Value).IsValid()) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
			$s = -1; return;
		}
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		_r = $clone(v, reflect.Value).Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.unknownType }; } $f._r = _r; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.ptr.prototype.badVerb = function(verb) {
		var _r, _r$1, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.erroring = true;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
			/* */ if (!($interfaceIsEqual(p.arg, $ifaceNil))) { $s = 2; continue; }
			/* */ if ($clone(p.value, reflect.Value).IsValid()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(p.arg, $ifaceNil))) { */ case 2:
				_r = reflect.TypeOf(p.arg).String(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				$r = p.printArg(p.arg, 118); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else if ($clone(p.value, reflect.Value).IsValid()) { */ case 3:
				_r$1 = $clone(p.value, reflect.Value).Type().String(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				$r = p.printValue($clone(p.value, reflect.Value), 118, 0); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
			/* } */ case 5:
		case 1:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		p.erroring = false;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.badVerb }; } $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.ptr.prototype.fmtBool = function(v, verb) {
		var _1, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (116)) || (_1 === (118))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (116)) || (_1 === (118))) { */ case 2:
				p.fmt.fmt_boolean(v);
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBool }; } $f._1 = _1; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.ptr.prototype.fmt0x64 = function(v, leading0x) {
		var leading0x, p, sharp, v;
		p = this;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = leading0x;
		p.fmt.fmt_integer(v, 16, false, "0123456789abcdefx");
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.ptr.prototype.fmtInteger = function(v, isSigned, verb) {
		var _1, isSigned, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; isSigned = $f.isSigned; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (100)) { $s = 3; continue; }
			/* */ if (_1 === (98)) { $s = 4; continue; }
			/* */ if (_1 === (111)) { $s = 5; continue; }
			/* */ if (_1 === (120)) { $s = 6; continue; }
			/* */ if (_1 === (88)) { $s = 7; continue; }
			/* */ if (_1 === (99)) { $s = 8; continue; }
			/* */ if (_1 === (113)) { $s = 9; continue; }
			/* */ if (_1 === (85)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV && !isSigned) {
					p.fmt0x64(v, true);
				} else {
					p.fmt.fmt_integer(v, 10, isSigned, "0123456789abcdefx");
				}
				$s = 12; continue;
			/* } else if (_1 === (100)) { */ case 3:
				p.fmt.fmt_integer(v, 10, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (98)) { */ case 4:
				p.fmt.fmt_integer(v, 2, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (111)) { */ case 5:
				p.fmt.fmt_integer(v, 8, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (120)) { */ case 6:
				p.fmt.fmt_integer(v, 16, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (88)) { */ case 7:
				p.fmt.fmt_integer(v, 16, isSigned, "0123456789ABCDEFX");
				$s = 12; continue;
			/* } else if (_1 === (99)) { */ case 8:
				p.fmt.fmt_c(v);
				$s = 12; continue;
			/* } else if (_1 === (113)) { */ case 9:
				/* */ if ((v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ((v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 13:
					p.fmt.fmt_qc(v);
					$s = 15; continue;
				/* } else { */ case 14:
					$r = p.badVerb(verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 15:
				$s = 12; continue;
			/* } else if (_1 === (85)) { */ case 10:
				p.fmt.fmt_unicode(v);
				$s = 12; continue;
			/* } else { */ case 11:
				$r = p.badVerb(verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtInteger }; } $f._1 = _1; $f.isSigned = isSigned; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtInteger = function(v, isSigned, verb) { return this.$val.fmtInteger(v, isSigned, verb); };
	pp.ptr.prototype.fmtFloat = function(v, size, verb) {
		var _1, p, size, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; size = $f.size; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if ((_1 === (98)) || (_1 === (103)) || (_1 === (71))) { $s = 3; continue; }
			/* */ if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { $s = 4; continue; }
			/* */ if (_1 === (70)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (118)) { */ case 2:
				p.fmt.fmt_float(v, size, 103, -1);
				$s = 7; continue;
			/* } else if ((_1 === (98)) || (_1 === (103)) || (_1 === (71))) { */ case 3:
				p.fmt.fmt_float(v, size, verb, -1);
				$s = 7; continue;
			/* } else if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { */ case 4:
				p.fmt.fmt_float(v, size, verb, 6);
				$s = 7; continue;
			/* } else if (_1 === (70)) { */ case 5:
				p.fmt.fmt_float(v, size, 102, 6);
				$s = 7; continue;
			/* } else { */ case 6:
				$r = p.badVerb(verb); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 7:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat }; } $f._1 = _1; $f.p = p; $f.size = size; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtFloat = function(v, size, verb) { return this.$val.fmtFloat(v, size, verb); };
	pp.ptr.prototype.fmtComplex = function(v, size, verb) {
		var _1, _q, _q$1, oldPlus, p, size, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; oldPlus = $f.oldPlus; p = $f.p; size = $f.size; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { */ case 2:
				oldPlus = p.fmt.fmtFlags.plus;
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
				$r = p.fmtFloat(v.$real, (_q = size / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p.fmt.fmtFlags.plus = true;
				$r = p.fmtFloat(v.$imag, (_q$1 = size / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("i)");
				p.fmt.fmtFlags.plus = oldPlus;
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex }; } $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f.oldPlus = oldPlus; $f.p = p; $f.size = size; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtComplex = function(v, size, verb) { return this.$val.fmtComplex(v, size, verb); };
	pp.ptr.prototype.fmtString = function(v, verb) {
		var _1, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					p.fmt.fmt_q(v);
				} else {
					p.fmt.fmt_s(v);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmt_s(v);
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmt_sx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmt_sx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmt_q(v);
				$s = 8; continue;
			/* } else { */ case 7:
				$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtString }; } $f._1 = _1; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtString = function(v, verb) { return this.$val.fmtString(v, verb); };
	pp.ptr.prototype.fmtBytes = function(v, verb, typeString) {
		var _1, _i, _i$1, _r, _ref, _ref$1, c, c$1, i, i$1, p, typeString, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; c$1 = $f.c$1; i = $f.i; i$1 = $f.i$1; p = $f.p; typeString = $f.typeString; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (100))) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_1 === (118)) || (_1 === (100))) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(typeString);
					if (v === sliceType$2.nil) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					_ref = v;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						i = _i;
						c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
						if (i > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						}
						p.fmt0x64((new $Uint64(0, c)), true);
						_i++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
					_ref$1 = v;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						i$1 = _i$1;
						c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (i$1 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
						p.fmt.fmt_integer((new $Uint64(0, c$1)), 10, false, "0123456789abcdefx");
						_i$1++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmt_s(($bytesToString(v)));
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmt_bx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmt_bx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmt_q(($bytesToString(v)));
				$s = 8; continue;
			/* } else { */ case 7:
				_r = reflect.ValueOf(v); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.printValue($clone(_r, reflect.Value), verb, 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBytes }; } $f._1 = _1; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.c$1 = c$1; $f.i = i; $f.i$1 = i$1; $f.p = p; $f.typeString = typeString; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBytes = function(v, verb, typeString) { return this.$val.fmtBytes(v, verb, typeString); };
	pp.ptr.prototype.fmtPointer = function(value, verb) {
		var _1, _2, _r, p, u, value, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r = $f._r; p = $f.p; u = $f.u; value = $f.value; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		u = 0;
			_1 = $clone(value, reflect.Value).Kind();
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { */ case 2:
				u = $clone(value, reflect.Value).Pointer();
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
		case 1:
			_2 = verb;
			/* */ if (_2 === (118)) { $s = 7; continue; }
			/* */ if (_2 === (112)) { $s = 8; continue; }
			/* */ if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_2 === (118)) { */ case 7:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 12:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
					_r = $clone(value, reflect.Value).Type().String(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(")(");
					if (u === 0) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("nil");
					} else {
						p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), true);
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
					$s = 14; continue;
				/* } else { */ case 13:
					if (u === 0) {
						p.fmt.padString("<nil>");
					} else {
						p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), !p.fmt.fmtFlags.sharp);
					}
				/* } */ case 14:
				$s = 11; continue;
			/* } else if (_2 === (112)) { */ case 8:
				p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), !p.fmt.fmtFlags.sharp);
				$s = 11; continue;
			/* } else if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { */ case 9:
				$r = p.fmtInteger((new $Uint64(0, u.constructor === Number ? u : 1)), false, verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 11; continue;
			/* } else { */ case 10:
				$r = p.badVerb(verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
		case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtPointer }; } $f._1 = _1; $f._2 = _2; $f._r = _r; $f.p = p; $f.u = u; $f.value = value; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtPointer = function(value, verb) { return this.$val.fmtPointer(value, verb); };
	pp.ptr.prototype.catchPanic = function(arg, verb) {
		var _r, arg, err, oldFlags, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; arg = $f.arg; err = $f.err; oldFlags = $f.oldFlags; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		err = $recover();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			_r = reflect.ValueOf(arg); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
			if (($clone(v, reflect.Value).Kind() === 22) && $clone(v, reflect.Value).IsNil()) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
				$s = -1; return;
			}
			if (p.panicking) {
				$panic(err);
			}
			oldFlags = $clone(p.fmt.fmtFlags, fmtFlags);
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(PANIC=");
			p.panicking = true;
			$r = p.printArg(err, 118); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p.panicking = false;
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
			fmtFlags.copy(p.fmt.fmtFlags, oldFlags);
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.catchPanic }; } $f._r = _r; $f.arg = arg; $f.err = err; $f.oldFlags = oldFlags; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.catchPanic = function(arg, verb) { return this.$val.catchPanic(arg, verb); };
	pp.ptr.prototype.handleMethods = function(verb) {
		var _1, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, formatter, handled, ok, ok$1, p, stringer, v, v$1, verb, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; formatter = $f.formatter; handled = $f.handled; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; stringer = $f.stringer; v = $f.v; v$1 = $f.v$1; verb = $f.verb; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		handled = false;
		p = this;
		if (p.erroring) {
			$s = -1; return handled;
		}
		_tuple = $assertType(p.arg, Formatter, true);
		formatter = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			handled = true;
			$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
			$r = formatter.Format(p, verb); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return handled;
		/* } */ case 2:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 4:
			_tuple$1 = $assertType(p.arg, GoStringer, true);
			stringer = _tuple$1[0];
			ok$1 = _tuple$1[1];
			/* */ if (ok$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (ok$1) { */ case 7:
				handled = true;
				$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
				_r = stringer.GoString(); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return handled;
			/* } */ case 8:
			$s = 6; continue;
		/* } else { */ case 5:
				_1 = verb;
				/* */ if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { */ case 12:
					_ref = p.arg;
					/* */ if ($assertType(_ref, $error, true)[1]) { $s = 14; continue; }
					/* */ if ($assertType(_ref, Stringer, true)[1]) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if ($assertType(_ref, $error, true)[1]) { */ case 14:
						v = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$1 = v.Error(); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$1, verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return handled;
					/* } else if ($assertType(_ref, Stringer, true)[1]) { */ case 15:
						v$1 = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$2 = v$1.String(); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$2, verb); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return handled;
					/* } */ case 16:
				/* } */ case 13:
			case 11:
		/* } */ case 6:
		handled = false;
		$s = -1; return handled;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  handled; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: pp.ptr.prototype.handleMethods }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.formatter = formatter; $f.handled = handled; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.stringer = stringer; $f.v = v; $f.v$1 = v$1; $f.verb = verb; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	pp.prototype.handleMethods = function(verb) { return this.$val.handleMethods(verb); };
	pp.ptr.prototype.printArg = function(arg, verb) {
		var _1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, arg, f, f$1, f$10, f$11, f$12, f$13, f$14, f$15, f$16, f$17, f$18, f$19, f$2, f$3, f$4, f$5, f$6, f$7, f$8, f$9, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; arg = $f.arg; f = $f.f; f$1 = $f.f$1; f$10 = $f.f$10; f$11 = $f.f$11; f$12 = $f.f$12; f$13 = $f.f$13; f$14 = $f.f$14; f$15 = $f.f$15; f$16 = $f.f$16; f$17 = $f.f$17; f$18 = $f.f$18; f$19 = $f.f$19; f$2 = $f.f$2; f$3 = $f.f$3; f$4 = $f.f$4; f$5 = $f.f$5; f$6 = $f.f$6; f$7 = $f.f$7; f$8 = $f.f$8; f$9 = $f.f$9; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 1:
				_1 = verb;
				/* */ if ((_1 === (84)) || (_1 === (118))) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if ((_1 === (84)) || (_1 === (118))) { */ case 4:
					p.fmt.padString("<nil>");
					$s = 6; continue;
				/* } else { */ case 5:
					$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
			case 3:
			$s = -1; return;
		/* } */ case 2:
			_2 = verb;
			/* */ if (_2 === (84)) { $s = 9; continue; }
			/* */ if (_2 === (112)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_2 === (84)) { */ case 9:
				_r = reflect.TypeOf(arg).String(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } else if (_2 === (112)) { */ case 10:
				_r$1 = reflect.ValueOf(arg); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = p.fmtPointer($clone(_r$1, reflect.Value), 112); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 11:
		case 8:
		_ref = arg;
		/* */ if ($assertType(_ref, $Bool, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, $Float32, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, $Float64, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, $Complex64, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, $Complex128, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, $Int, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref, $Int8, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref, $Int16, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref, $Int32, true)[1]) { $s = 24; continue; }
		/* */ if ($assertType(_ref, $Int64, true)[1]) { $s = 25; continue; }
		/* */ if ($assertType(_ref, $Uint, true)[1]) { $s = 26; continue; }
		/* */ if ($assertType(_ref, $Uint8, true)[1]) { $s = 27; continue; }
		/* */ if ($assertType(_ref, $Uint16, true)[1]) { $s = 28; continue; }
		/* */ if ($assertType(_ref, $Uint32, true)[1]) { $s = 29; continue; }
		/* */ if ($assertType(_ref, $Uint64, true)[1]) { $s = 30; continue; }
		/* */ if ($assertType(_ref, $Uintptr, true)[1]) { $s = 31; continue; }
		/* */ if ($assertType(_ref, $String, true)[1]) { $s = 32; continue; }
		/* */ if ($assertType(_ref, sliceType$2, true)[1]) { $s = 33; continue; }
		/* */ if ($assertType(_ref, reflect.Value, true)[1]) { $s = 34; continue; }
		/* */ $s = 35; continue;
		/* if ($assertType(_ref, $Bool, true)[1]) { */ case 16:
			f = _ref.$val;
			$r = p.fmtBool(f, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float32, true)[1]) { */ case 17:
			f$1 = _ref.$val;
			$r = p.fmtFloat((f$1), 32, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float64, true)[1]) { */ case 18:
			f$2 = _ref.$val;
			$r = p.fmtFloat(f$2, 64, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex64, true)[1]) { */ case 19:
			f$3 = _ref.$val;
			$r = p.fmtComplex((new $Complex128(f$3.$real, f$3.$imag)), 64, verb); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex128, true)[1]) { */ case 20:
			f$4 = _ref.$val;
			$r = p.fmtComplex(f$4, 128, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int, true)[1]) { */ case 21:
			f$5 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$5)), true, verb); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int8, true)[1]) { */ case 22:
			f$6 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$6)), true, verb); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int16, true)[1]) { */ case 23:
			f$7 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$7)), true, verb); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int32, true)[1]) { */ case 24:
			f$8 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$8)), true, verb); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int64, true)[1]) { */ case 25:
			f$9 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(f$9.$high, f$9.$low)), true, verb); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint, true)[1]) { */ case 26:
			f$10 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$10)), false, verb); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint8, true)[1]) { */ case 27:
			f$11 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$11)), false, verb); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint16, true)[1]) { */ case 28:
			f$12 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$12)), false, verb); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint32, true)[1]) { */ case 29:
			f$13 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$13)), false, verb); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint64, true)[1]) { */ case 30:
			f$14 = _ref.$val;
			$r = p.fmtInteger(f$14, false, verb); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uintptr, true)[1]) { */ case 31:
			f$15 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$15.constructor === Number ? f$15 : 1)), false, verb); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $String, true)[1]) { */ case 32:
			f$16 = _ref.$val;
			$r = p.fmtString(f$16, verb); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, sliceType$2, true)[1]) { */ case 33:
			f$17 = _ref.$val;
			$r = p.fmtBytes(f$17, verb, "[]byte"); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, reflect.Value, true)[1]) { */ case 34:
			f$18 = _ref.$val;
			/* */ if ($clone(f$18, reflect.Value).IsValid() && $clone(f$18, reflect.Value).CanInterface()) { $s = 55; continue; }
			/* */ $s = 56; continue;
			/* if ($clone(f$18, reflect.Value).IsValid() && $clone(f$18, reflect.Value).CanInterface()) { */ case 55:
				_r$2 = $clone(f$18, reflect.Value).Interface(); /* */ $s = 57; case 57: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				p.arg = _r$2;
				_r$3 = p.handleMethods(verb); /* */ $s = 60; case 60: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3) { $s = 58; continue; }
				/* */ $s = 59; continue;
				/* if (_r$3) { */ case 58:
					$s = -1; return;
				/* } */ case 59:
			/* } */ case 56:
			$r = p.printValue($clone(f$18, reflect.Value), verb, 0); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else { */ case 35:
			f$19 = _ref;
			_r$4 = p.handleMethods(verb); /* */ $s = 64; case 64: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 62; continue; }
			/* */ $s = 63; continue;
			/* if (!_r$4) { */ case 62:
				_r$5 = reflect.ValueOf(f$19); /* */ $s = 65; case 65: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$r = p.printValue($clone(_r$5, reflect.Value), verb, 0); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 63:
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printArg }; } $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.arg = arg; $f.f = f; $f.f$1 = f$1; $f.f$10 = f$10; $f.f$11 = f$11; $f.f$12 = f$12; $f.f$13 = f$13; $f.f$14 = f$14; $f.f$15 = f$15; $f.f$16 = f$16; $f.f$17 = f$17; $f.f$18 = f$18; $f.f$19 = f$19; $f.f$2 = f$2; $f.f$3 = f$3; $f.f$4 = f$4; $f.f$5 = f$5; $f.f$6 = f$6; $f.f$7 = f$7; $f.f$8 = f$8; $f.f$9 = f$9; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printArg = function(arg, verb) { return this.$val.printArg(arg, verb); };
	pp.ptr.prototype.printValue = function(value, verb, depth) {
		var _1, _2, _3, _4, _arg, _arg$1, _arg$2, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, a, bytes, depth, f, i, i$1, i$2, i$3, i$4, key, keys, name, p, t, value, value$1, verb, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; a = $f.a; bytes = $f.bytes; depth = $f.depth; f = $f.f; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; key = $f.key; keys = $f.keys; name = $f.name; p = $f.p; t = $f.t; value = $f.value; value$1 = $f.value$1; verb = $f.verb; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (depth > 0 && $clone(value, reflect.Value).IsValid() && $clone(value, reflect.Value).CanInterface()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (depth > 0 && $clone(value, reflect.Value).IsValid() && $clone(value, reflect.Value).CanInterface()) { */ case 1:
			_r = $clone(value, reflect.Value).Interface(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			p.arg = _r;
			_r$1 = p.handleMethods(verb); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1) { */ case 4:
				$s = -1; return;
			/* } */ case 5:
		/* } */ case 2:
		p.arg = $ifaceNil;
		p.value = value;
			f = value;
			_1 = $clone(value, reflect.Value).Kind();
			/* */ if (_1 === (0)) { $s = 8; continue; }
			/* */ if (_1 === (1)) { $s = 9; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 10; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 11; continue; }
			/* */ if (_1 === (13)) { $s = 12; continue; }
			/* */ if (_1 === (14)) { $s = 13; continue; }
			/* */ if (_1 === (15)) { $s = 14; continue; }
			/* */ if (_1 === (16)) { $s = 15; continue; }
			/* */ if (_1 === (24)) { $s = 16; continue; }
			/* */ if (_1 === (21)) { $s = 17; continue; }
			/* */ if (_1 === (25)) { $s = 18; continue; }
			/* */ if (_1 === (20)) { $s = 19; continue; }
			/* */ if ((_1 === (17)) || (_1 === (23))) { $s = 20; continue; }
			/* */ if (_1 === (22)) { $s = 21; continue; }
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (_1 === (0)) { */ case 8:
				/* */ if (depth === 0) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (depth === 0) { */ case 25:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<invalid reflect.Value>");
					$s = 27; continue;
				/* } else { */ case 26:
						_2 = verb;
						/* */ if (_2 === (118)) { $s = 29; continue; }
						/* */ $s = 30; continue;
						/* if (_2 === (118)) { */ case 29:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
							$s = 31; continue;
						/* } else { */ case 30:
							$r = p.badVerb(verb); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 31:
					case 28:
				/* } */ case 27:
				$s = 24; continue;
			/* } else if (_1 === (1)) { */ case 9:
				$r = p.fmtBool($clone(f, reflect.Value).Bool(), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 10:
				$r = p.fmtInteger(((x = $clone(f, reflect.Value).Int(), new $Uint64(x.$high, x.$low))), true, verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 11:
				$r = p.fmtInteger($clone(f, reflect.Value).Uint(), false, verb); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (13)) { */ case 12:
				$r = p.fmtFloat($clone(f, reflect.Value).Float(), 32, verb); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (14)) { */ case 13:
				$r = p.fmtFloat($clone(f, reflect.Value).Float(), 64, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (15)) { */ case 14:
				$r = p.fmtComplex($clone(f, reflect.Value).Complex(), 64, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (16)) { */ case 15:
				$r = p.fmtComplex($clone(f, reflect.Value).Complex(), 128, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (24)) { */ case 16:
				_r$2 = $clone(f, reflect.Value).String(); /* */ $s = 40; case 40: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = p.fmtString(_r$2, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (21)) { */ case 17:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 42:
					_r$3 = $clone(f, reflect.Value).Type().String(); /* */ $s = 45; case 45: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$3); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if ($clone(f, reflect.Value).IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					$s = 44; continue;
				/* } else { */ case 43:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("map[");
				/* } */ case 44:
				_r$4 = $clone(f, reflect.Value).MapKeys(); /* */ $s = 47; case 47: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				keys = _r$4;
				_ref = keys;
				_i = 0;
				/* while (true) { */ case 48:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 49; continue; }
					i = _i;
					key = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					if (i > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					$r = p.printValue($clone(key, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
					_r$5 = $clone(f, reflect.Value).MapIndex($clone(key, reflect.Value)); /* */ $s = 51; case 51: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$r = p.printValue($clone(_r$5, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
				/* } */ $s = 48; continue; case 49:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 24; continue;
			/* } else if (_1 === (25)) { */ case 18:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 53; continue; }
				/* */ $s = 54; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 53:
					_r$6 = $clone(f, reflect.Value).Type().String(); /* */ $s = 55; case 55: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$6); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 54:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
				i$1 = 0;
				/* while (true) { */ case 57:
					/* if (!(i$1 < $clone(f, reflect.Value).NumField())) { break; } */ if(!(i$1 < $clone(f, reflect.Value).NumField())) { $s = 58; continue; }
					if (i$1 > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					/* */ if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { $s = 59; continue; }
					/* */ $s = 60; continue;
					/* if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { */ case 59:
						_r$7 = $clone(f, reflect.Value).Type().Field(i$1); /* */ $s = 61; case 61: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						name = _r$7.Name;
						if (!(name === "")) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(name);
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
						}
					/* } */ case 60:
					_r$8 = getField($clone(f, reflect.Value), i$1); /* */ $s = 62; case 62: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					$r = p.printValue($clone(_r$8, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 63; case 63: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 57; continue; case 58:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				$s = 24; continue;
			/* } else if (_1 === (20)) { */ case 19:
				_r$9 = $clone(f, reflect.Value).Elem(); /* */ $s = 64; case 64: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				value$1 = _r$9;
				/* */ if (!$clone(value$1, reflect.Value).IsValid()) { $s = 65; continue; }
				/* */ $s = 66; continue;
				/* if (!$clone(value$1, reflect.Value).IsValid()) { */ case 65:
					/* */ if (p.fmt.fmtFlags.sharpV) { $s = 68; continue; }
					/* */ $s = 69; continue;
					/* if (p.fmt.fmtFlags.sharpV) { */ case 68:
						_r$10 = $clone(f, reflect.Value).Type().String(); /* */ $s = 71; case 71: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$10); /* */ $s = 72; case 72: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = 70; continue;
					/* } else { */ case 69:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
					/* } */ case 70:
					$s = 67; continue;
				/* } else { */ case 66:
					$r = p.printValue($clone(value$1, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 73; case 73: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 67:
				$s = 24; continue;
			/* } else if ((_1 === (17)) || (_1 === (23))) { */ case 20:
					_3 = verb;
					/* */ if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { $s = 75; continue; }
					/* */ $s = 76; continue;
					/* if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { */ case 75:
						t = $clone(f, reflect.Value).Type();
						_r$11 = t.Elem(); /* */ $s = 79; case 79: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						_r$12 = _r$11.Kind(); /* */ $s = 80; case 80: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						/* */ if (_r$12 === 8) { $s = 77; continue; }
						/* */ $s = 78; continue;
						/* if (_r$12 === 8) { */ case 77:
							bytes = sliceType$2.nil;
							/* */ if ($clone(f, reflect.Value).Kind() === 23) { $s = 81; continue; }
							/* */ if ($clone(f, reflect.Value).CanAddr()) { $s = 82; continue; }
							/* */ $s = 83; continue;
							/* if ($clone(f, reflect.Value).Kind() === 23) { */ case 81:
								_r$13 = $clone(f, reflect.Value).Bytes(); /* */ $s = 85; case 85: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
								bytes = _r$13;
								$s = 84; continue;
							/* } else if ($clone(f, reflect.Value).CanAddr()) { */ case 82:
								_r$14 = $clone(f, reflect.Value).Slice(0, $clone(f, reflect.Value).Len()); /* */ $s = 86; case 86: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
								_r$15 = $clone(_r$14, reflect.Value).Bytes(); /* */ $s = 87; case 87: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
								bytes = _r$15;
								$s = 84; continue;
							/* } else { */ case 83:
								bytes = $makeSlice(sliceType$2, $clone(f, reflect.Value).Len());
								_ref$1 = bytes;
								_i$1 = 0;
								/* while (true) { */ case 88:
									/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 89; continue; }
									i$2 = _i$1;
									_r$16 = $clone(f, reflect.Value).Index(i$2); /* */ $s = 90; case 90: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
									_r$17 = $clone(_r$16, reflect.Value).Uint(); /* */ $s = 91; case 91: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
									((i$2 < 0 || i$2 >= bytes.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + i$2] = ((_r$17.$low << 24 >>> 24)));
									_i$1++;
								/* } */ $s = 88; continue; case 89:
							/* } */ case 84:
							_arg = bytes;
							_arg$1 = verb;
							_r$18 = t.String(); /* */ $s = 92; case 92: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
							_arg$2 = _r$18;
							$r = p.fmtBytes(_arg, _arg$1, _arg$2); /* */ $s = 93; case 93: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 78:
					/* } */ case 76:
				case 74:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 94; continue; }
				/* */ $s = 95; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 94:
					_r$19 = $clone(f, reflect.Value).Type().String(); /* */ $s = 97; case 97: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$19); /* */ $s = 98; case 98: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (($clone(f, reflect.Value).Kind() === 23) && $clone(f, reflect.Value).IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					i$3 = 0;
					/* while (true) { */ case 99:
						/* if (!(i$3 < $clone(f, reflect.Value).Len())) { break; } */ if(!(i$3 < $clone(f, reflect.Value).Len())) { $s = 100; continue; }
						if (i$3 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						}
						_r$20 = $clone(f, reflect.Value).Index(i$3); /* */ $s = 101; case 101: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
						$r = p.printValue($clone(_r$20, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 102; case 102: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$3 = i$3 + (1) >> 0;
					/* } */ $s = 99; continue; case 100:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
					$s = 96; continue;
				/* } else { */ case 95:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
					i$4 = 0;
					/* while (true) { */ case 103:
						/* if (!(i$4 < $clone(f, reflect.Value).Len())) { break; } */ if(!(i$4 < $clone(f, reflect.Value).Len())) { $s = 104; continue; }
						if (i$4 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
						_r$21 = $clone(f, reflect.Value).Index(i$4); /* */ $s = 105; case 105: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
						$r = p.printValue($clone(_r$21, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 106; case 106: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$4 = i$4 + (1) >> 0;
					/* } */ $s = 103; continue; case 104:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				/* } */ case 96:
				$s = 24; continue;
			/* } else if (_1 === (22)) { */ case 21:
				/* */ if ((depth === 0) && !(($clone(f, reflect.Value).Pointer() === 0))) { $s = 107; continue; }
				/* */ $s = 108; continue;
				/* if ((depth === 0) && !(($clone(f, reflect.Value).Pointer() === 0))) { */ case 107:
						_r$22 = $clone(f, reflect.Value).Elem(); /* */ $s = 110; case 110: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
						a = _r$22;
						_4 = $clone(a, reflect.Value).Kind();
						/* */ if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { $s = 111; continue; }
						/* */ $s = 112; continue;
						/* if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { */ case 111:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
							$r = p.printValue($clone(a, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 113; case 113: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 112:
					case 109:
				/* } */ case 108:
				$r = p.fmtPointer($clone(f, reflect.Value), verb); /* */ $s = 114; case 114: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { */ case 22:
				$r = p.fmtPointer($clone(f, reflect.Value), verb); /* */ $s = 115; case 115: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else { */ case 23:
				$r = p.unknownType($clone(f, reflect.Value)); /* */ $s = 116; case 116: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 24:
		case 7:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printValue }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.a = a; $f.bytes = bytes; $f.depth = depth; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.key = key; $f.keys = keys; $f.name = name; $f.p = p; $f.t = t; $f.value = value; $f.value$1 = value$1; $f.verb = verb; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printValue = function(value, verb, depth) { return this.$val.printValue(value, verb, depth); };
	intFromArg = function(a, argNum) {
		var _1, _r, _tuple, a, argNum, isInt, n, n$1, newArgNum, num, v, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _tuple = $f._tuple; a = $f.a; argNum = $f.argNum; isInt = $f.isInt; n = $f.n; n$1 = $f.n$1; newArgNum = $f.newArgNum; num = $f.num; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		num = 0;
		isInt = false;
		newArgNum = 0;
		newArgNum = argNum;
		/* */ if (argNum < a.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (argNum < a.$length) { */ case 1:
			_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), $Int, true);
			num = _tuple[0];
			isInt = _tuple[1];
			/* */ if (!isInt) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!isInt) { */ case 3:
					_r = reflect.ValueOf(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					_1 = $clone(v, reflect.Value).Kind();
					if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
						n = $clone(v, reflect.Value).Int();
						if ((x = (new $Int64(0, (((n.$low + ((n.$high >> 31) * 4294967296)) >> 0)))), (x.$high === n.$high && x.$low === n.$low))) {
							num = (((n.$low + ((n.$high >> 31) * 4294967296)) >> 0));
							isInt = true;
						}
					} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) {
						n$1 = $clone(v, reflect.Value).Uint();
						if ((x$1 = (new $Int64(n$1.$high, n$1.$low)), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0))) && (x$2 = (new $Uint64(0, ((n$1.$low >> 0)))), (x$2.$high === n$1.$high && x$2.$low === n$1.$low))) {
							num = ((n$1.$low >> 0));
							isInt = true;
						}
					}
				case 5:
			/* } */ case 4:
			newArgNum = argNum + 1 >> 0;
			if (tooLarge(num)) {
				num = 0;
				isInt = false;
			}
		/* } */ case 2:
		$s = -1; return [num, isInt, newArgNum];
		/* */ } return; } if ($f === undefined) { $f = { $blk: intFromArg }; } $f._1 = _1; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.argNum = argNum; $f.isInt = isInt; $f.n = n; $f.n$1 = n$1; $f.newArgNum = newArgNum; $f.num = num; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseArgNumber = function(format) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, format, i, index, newi, ok, ok$1, wid, width;
		index = 0;
		wid = 0;
		ok = false;
		if (format.length < 3) {
			_tmp = 0;
			_tmp$1 = 1;
			_tmp$2 = false;
			index = _tmp;
			wid = _tmp$1;
			ok = _tmp$2;
			return [index, wid, ok];
		}
		i = 1;
		while (true) {
			if (!(i < format.length)) { break; }
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i);
				width = _tuple[0];
				ok$1 = _tuple[1];
				newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp$3 = 0;
					_tmp$4 = i + 1 >> 0;
					_tmp$5 = false;
					index = _tmp$3;
					wid = _tmp$4;
					ok = _tmp$5;
					return [index, wid, ok];
				}
				_tmp$6 = width - 1 >> 0;
				_tmp$7 = i + 1 >> 0;
				_tmp$8 = true;
				index = _tmp$6;
				wid = _tmp$7;
				ok = _tmp$8;
				return [index, wid, ok];
			}
			i = i + (1) >> 0;
		}
		_tmp$9 = 0;
		_tmp$10 = 1;
		_tmp$11 = false;
		index = _tmp$9;
		wid = _tmp$10;
		ok = _tmp$11;
		return [index, wid, ok];
	};
	pp.ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, argNum, format, found, i, index, newArgNum, newi, numArgs, ok, p, wid;
		newArgNum = 0;
		newi = 0;
		found = false;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum;
			_tmp$1 = i;
			_tmp$2 = false;
			newArgNum = _tmp;
			newi = _tmp$1;
			found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber($substring(format, i));
		index = _tuple[0];
		wid = _tuple[1];
		ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index;
			_tmp$4 = i + wid >> 0;
			_tmp$5 = true;
			newArgNum = _tmp$3;
			newi = _tmp$4;
			found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum;
		_tmp$7 = i + wid >> 0;
		_tmp$8 = ok;
		newArgNum = _tmp$6;
		newi = _tmp$7;
		found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.ptr.prototype.badArgNum = function(verb) {
		var p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(BADINDEX)");
	};
	pp.prototype.badArgNum = function(verb) { return this.$val.badArgNum(verb); };
	pp.ptr.prototype.missingArg = function(verb) {
		var p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(MISSING)");
	};
	pp.prototype.missingArg = function(verb) { return this.$val.missingArg(verb); };
	pp.ptr.prototype.doPrintf = function(format, a) {
		var _1, _i, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, argNum, c, end, format, i, i$1, lasti, p, verb, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; a = $f.a; afterIndex = $f.afterIndex; arg = $f.arg; argNum = $f.argNum; c = $f.c; end = $f.end; format = $f.format; i = $f.i; i$1 = $f.i$1; lasti = $f.lasti; p = $f.p; verb = $f.verb; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 2; continue; }
			p.goodArgNum = true;
			lasti = i;
			while (true) {
				if (!(i < end && !((format.charCodeAt(i) === 37)))) { break; }
				i = i + (1) >> 0;
			}
			if (i > lasti) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString($substring(format, lasti, i));
			}
			if (i >= end) {
				/* break; */ $s = 2; continue;
			}
			i = i + (1) >> 0;
			p.fmt.clearflags();
			/* while (true) { */ case 3:
				/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 4; continue; }
				c = format.charCodeAt(i);
					_1 = c;
					/* */ if (_1 === (35)) { $s = 6; continue; }
					/* */ if (_1 === (48)) { $s = 7; continue; }
					/* */ if (_1 === (43)) { $s = 8; continue; }
					/* */ if (_1 === (45)) { $s = 9; continue; }
					/* */ if (_1 === (32)) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (_1 === (35)) { */ case 6:
						p.fmt.fmtFlags.sharp = true;
						$s = 12; continue;
					/* } else if (_1 === (48)) { */ case 7:
						p.fmt.fmtFlags.zero = !p.fmt.fmtFlags.minus;
						$s = 12; continue;
					/* } else if (_1 === (43)) { */ case 8:
						p.fmt.fmtFlags.plus = true;
						$s = 12; continue;
					/* } else if (_1 === (45)) { */ case 9:
						p.fmt.fmtFlags.minus = true;
						p.fmt.fmtFlags.zero = false;
						$s = 12; continue;
					/* } else if (_1 === (32)) { */ case 10:
						p.fmt.fmtFlags.space = true;
						$s = 12; continue;
					/* } else { */ case 11:
						/* */ if (97 <= c && c <= 122 && argNum < a.$length) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (97 <= c && c <= 122 && argNum < a.$length) { */ case 13:
							if (c === 118) {
								p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
								p.fmt.fmtFlags.sharp = false;
								p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
								p.fmt.fmtFlags.plus = false;
							}
							$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), ((c >> 0))); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							argNum = argNum + (1) >> 0;
							i = i + (1) >> 0;
							/* continue formatLoop; */ $s = 1; continue s;
						/* } */ case 14:
						/* break simpleFormat; */ $s = 4; continue s;
					/* } */ case 12:
				case 5:
				i = i + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			_tuple = p.argNumber(argNum, format, i, a.$length);
			argNum = _tuple[0];
			i = _tuple[1];
			afterIndex = _tuple[2];
			/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 16:
				i = i + (1) >> 0;
				_r = intFromArg(a, argNum); /* */ $s = 19; case 19: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				p.fmt.wid = _tuple$1[0];
				p.fmt.fmtFlags.widPresent = _tuple$1[1];
				argNum = _tuple$1[2];
				if (!p.fmt.fmtFlags.widPresent) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(BADWIDTH)");
				}
				if (p.fmt.wid < 0) {
					p.fmt.wid = -p.fmt.wid;
					p.fmt.fmtFlags.minus = true;
					p.fmt.fmtFlags.zero = false;
				}
				afterIndex = false;
				$s = 18; continue;
			/* } else { */ case 17:
				_tuple$2 = parsenum(format, i, end);
				p.fmt.wid = _tuple$2[0];
				p.fmt.fmtFlags.widPresent = _tuple$2[1];
				i = _tuple$2[2];
				if (afterIndex && p.fmt.fmtFlags.widPresent) {
					p.goodArgNum = false;
				}
			/* } */ case 18:
			/* */ if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { */ case 20:
				i = i + (1) >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$3[0];
				i = _tuple$3[1];
				afterIndex = _tuple$3[2];
				/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 22:
					i = i + (1) >> 0;
					_r$1 = intFromArg(a, argNum); /* */ $s = 25; case 25: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$4 = _r$1;
					p.fmt.prec = _tuple$4[0];
					p.fmt.fmtFlags.precPresent = _tuple$4[1];
					argNum = _tuple$4[2];
					if (p.fmt.prec < 0) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = false;
					}
					if (!p.fmt.fmtFlags.precPresent) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(BADPREC)");
					}
					afterIndex = false;
					$s = 24; continue;
				/* } else { */ case 23:
					_tuple$5 = parsenum(format, i, end);
					p.fmt.prec = _tuple$5[0];
					p.fmt.fmtFlags.precPresent = _tuple$5[1];
					i = _tuple$5[2];
					if (!p.fmt.fmtFlags.precPresent) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = true;
					}
				/* } */ case 24:
			/* } */ case 21:
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$6[0];
				i = _tuple$6[1];
				afterIndex = _tuple$6[2];
			}
			if (i >= end) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(NOVERB)");
				/* break; */ $s = 2; continue;
			}
			_tuple$7 = utf8.DecodeRuneInString($substring(format, i));
			verb = _tuple$7[0];
			w = _tuple$7[1];
			i = i + (w) >> 0;
				/* */ if ((verb === 37)) { $s = 27; continue; }
				/* */ if (!p.goodArgNum) { $s = 28; continue; }
				/* */ if (argNum >= a.$length) { $s = 29; continue; }
				/* */ if ((verb === 118)) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if ((verb === 37)) { */ case 27:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(37);
					$s = 32; continue;
				/* } else if (!p.goodArgNum) { */ case 28:
					p.badArgNum(verb);
					$s = 32; continue;
				/* } else if (argNum >= a.$length) { */ case 29:
					p.missingArg(verb);
					$s = 32; continue;
				/* } else if ((verb === 118)) { */ case 30:
					p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
					p.fmt.fmtFlags.sharp = false;
					p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
					p.fmt.fmtFlags.plus = false;
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
					$s = 32; continue;
				/* } else { */ case 31:
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
				/* } */ case 32:
			case 26:
		/* } */ $s = 1; continue; case 2:
		/* */ if (!p.reordered && argNum < a.$length) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (!p.reordered && argNum < a.$length) { */ case 35:
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(EXTRA ");
			_ref = $subslice(a, argNum);
			_i = 0;
			/* while (true) { */ case 37:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 38; continue; }
				i$1 = _i;
				arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (i$1 > 0) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
				}
				/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 39:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
					$s = 41; continue;
				/* } else { */ case 40:
					_r$2 = reflect.TypeOf(arg).String(); /* */ $s = 42; case 42: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
					$r = p.printArg(arg, 118); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 41:
				_i++;
			/* } */ $s = 37; continue; case 38:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintf }; } $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.a = a; $f.afterIndex = afterIndex; $f.arg = arg; $f.argNum = argNum; $f.c = c; $f.end = end; $f.format = format; $f.i = i; $f.i$1 = i$1; $f.lasti = lasti; $f.p = p; $f.verb = verb; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	pp.ptr.prototype.doPrint = function(a) {
		var _i, _r, _ref, _v, a, arg, argNum, isString, p, prevString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _v = $f._v; a = $f.a; arg = $f.arg; argNum = $f.argNum; isString = $f.isString; p = $f.p; prevString = $f.prevString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		prevString = false;
		_ref = a;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			argNum = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!(!($interfaceIsEqual(arg, $ifaceNil)))) { _v = false; $s = 3; continue s; }
			_r = reflect.TypeOf(arg).Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r === 24; case 3:
			isString = _v;
			if (argNum > 0 && !isString && !prevString) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
			}
			$r = p.printArg(arg, 118); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			prevString = isString;
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrint }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._v = _v; $f.a = a; $f.arg = arg; $f.argNum = argNum; $f.isString = isString; $f.p = p; $f.prevString = prevString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrint = function(a) { return this.$val.doPrint(a); };
	pp.ptr.prototype.doPrintln = function(a) {
		var _i, _ref, a, arg, argNum, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; a = $f.a; arg = $f.arg; argNum = $f.argNum; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = a;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			argNum = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (argNum > 0) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
			}
			$r = p.printArg(arg, 118); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(10);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintln }; } $f._i = _i; $f._ref = _ref; $f.a = a; $f.arg = arg; $f.argNum = argNum; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintln = function(a) { return this.$val.doPrintln(a); };
	ss.ptr.prototype.Read = function(buf) {
		var _tmp, _tmp$1, buf, err, n, s;
		n = 0;
		err = $ifaceNil;
		s = this;
		_tmp = 0;
		_tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune");
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.ptr.prototype.ReadRune = function() {
		var _r, _tuple, err, r, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		s = this;
		if (s.atEOF || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			$s = -1; return [r, size, err];
		}
		_r = s.rs.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		size = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			s.count = s.count + (1) >> 0;
			if (s.ssave.nlIsEnd && (r === 10)) {
				s.atEOF = true;
			}
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		$s = -1; return [r, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.ReadRune }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.ptr.prototype.Width = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, ok, s, wid;
		wid = 0;
		ok = false;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0;
			_tmp$1 = false;
			wid = _tmp;
			ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid;
		_tmp$3 = true;
		wid = _tmp$2;
		ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.ptr.prototype.getRune = function() {
		var _r, _tuple, err, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		s = this;
		_r = s.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				$s = -1; return r;
			}
			s.error(err);
		}
		$s = -1; return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.getRune }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.ptr.prototype.UnreadRune = function() {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.rs.UnreadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		s.atEOF = false;
		s.count = s.count - (1) >> 0;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.UnreadRune }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.ptr.prototype.error = function(err) {
		var err, s, x;
		s = this;
		$panic((x = new scanError.ptr(err), new x.constructor.elem(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.ptr.prototype.errorString = function(err) {
		var err, s, x;
		s = this;
		$panic((x = new scanError.ptr(errors.New(err)), new x.constructor.elem(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.ptr.prototype.Token = function(skipSpace, f) {
		var _r, err, f, s, skipSpace, tok, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; f = $f.f; s = $f.s; skipSpace = $f.skipSpace; tok = $f.tok; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		tok = sliceType$2.nil;
		err[0] = $ifaceNil;
		s = this;
		$deferred.push([(function(err) { return function() {
			var _tuple, e, ok, se;
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple = $assertType(e, scanError, true);
				se = $clone(_tuple[0], scanError);
				ok = _tuple[1];
				if (ok) {
					err[0] = se.err;
				} else {
					$panic(e);
				}
			}
		}; })(err), []]);
		if (f === $throwNilPointerError) {
			f = notSpace;
		}
		s.buf = $subslice(s.buf, 0, 0);
		_r = s.token(skipSpace, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		tok = _r;
		$s = -1; return [tok, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tok, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ss.ptr.prototype.Token }; } $f._r = _r; $f.err = err; $f.f = f; $f.s = s; $f.skipSpace = skipSpace; $f.tok = tok; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var _i, _ref, r, rng, rx;
		if (r >= 65536) {
			return false;
		}
		rx = ((r << 16 >>> 16));
		_ref = space;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rng = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), arrayType$1);
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		var r;
		return !isSpace(r);
	};
	ss.ptr.prototype.SkipSpace = function() {
		var s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.skipSpace(false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.SkipSpace }; } $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	ss.ptr.prototype.free = function(old) {
		var old, s;
		s = this;
		if (old.validSave) {
			ssave.copy(s.ssave, old);
			return;
		}
		if (s.buf.$capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rs = $ifaceNil;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.ptr.prototype.skipSpace = function(stopAtNewline) {
		var _r, _r$1, _r$2, _v, r, s, stopAtNewline, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _v = $f._v; r = $f.r; s = $f.s; stopAtNewline = $f.stopAtNewline; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			_r = s.getRune(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				$s = -1; return;
			}
			if (!(r === 13)) { _v = false; $s = 6; continue s; }
			_r$1 = s.peek("\n"); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			/* */ if (r === 10) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (r === 10) { */ case 8:
				if (stopAtNewline) {
					/* break; */ $s = 2; continue;
				}
				if (s.ssave.nlIsSpace) {
					/* continue; */ $s = 1; continue;
				}
				s.errorString("unexpected newline");
				$s = -1; return;
			/* } */ case 9:
			/* */ if (!isSpace(r)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!isSpace(r)) { */ case 10:
				_r$2 = s.UnreadRune(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 2; continue;
			/* } */ case 11:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.skipSpace }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._v = _v; $f.r = r; $f.s = s; $f.stopAtNewline = stopAtNewline; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.skipSpace = function(stopAtNewline) { return this.$val.skipSpace(stopAtNewline); };
	ss.ptr.prototype.token = function(skipSpace, f) {
		var _r, _r$1, _r$2, f, r, s, skipSpace, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; r = $f.r; s = $f.s; skipSpace = $f.skipSpace; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (skipSpace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (skipSpace) { */ case 1:
			$r = s.skipSpace(false); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* while (true) { */ case 4:
			_r = s.getRune(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				/* break; */ $s = 5; continue;
			}
			_r$1 = f(r); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				_r$2 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 5; continue;
			/* } */ case 8:
			(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r);
		/* } */ $s = 4; continue; case 5:
		$s = -1; return (x = s.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.token }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.r = r; $f.s = s; $f.skipSpace = skipSpace; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var _i, _ref, _rune, c, i, r, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.ptr.prototype.peek = function(ok) {
		var _r, _r$1, ok, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; ok = $f.ok; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = _r;
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$1 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		$s = -1; return indexRune(ok, r) >= 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.peek }; } $f._r = _r; $f._r$1 = _r$1; $f.ok = ok; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	ptrType$25.methods = [{prop: "clearflags", name: "clearflags", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "init", name: "init", pkg: "fmt", typ: $funcType([ptrType$1], [], false)}, {prop: "writePadding", name: "writePadding", pkg: "fmt", typ: $funcType([$Int], [], false)}, {prop: "pad", name: "pad", pkg: "fmt", typ: $funcType([sliceType$2], [], false)}, {prop: "padString", name: "padString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_boolean", name: "fmt_boolean", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "fmt_unicode", name: "fmt_unicode", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_integer", name: "fmt_integer", pkg: "fmt", typ: $funcType([$Uint64, $Int, $Bool, $String], [], false)}, {prop: "truncate", name: "truncate", pkg: "fmt", typ: $funcType([$String], [$String], false)}, {prop: "fmt_s", name: "fmt_s", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_sbx", name: "fmt_sbx", pkg: "fmt", typ: $funcType([$String, sliceType$2, $String], [], false)}, {prop: "fmt_sx", name: "fmt_sx", pkg: "fmt", typ: $funcType([$String, $String], [], false)}, {prop: "fmt_bx", name: "fmt_bx", pkg: "fmt", typ: $funcType([sliceType$2, $String], [], false)}, {prop: "fmt_q", name: "fmt_q", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_c", name: "fmt_c", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_qc", name: "fmt_qc", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_float", name: "fmt_float", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32, $Int], [], false)}];
	ptrType$1.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [], false)}];
	ptrType$2.methods = [{prop: "free", name: "free", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "unknownType", name: "unknownType", pkg: "fmt", typ: $funcType([reflect.Value], [], false)}, {prop: "badVerb", name: "badVerb", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "fmtBool", name: "fmtBool", pkg: "fmt", typ: $funcType([$Bool, $Int32], [], false)}, {prop: "fmt0x64", name: "fmt0x64", pkg: "fmt", typ: $funcType([$Uint64, $Bool], [], false)}, {prop: "fmtInteger", name: "fmtInteger", pkg: "fmt", typ: $funcType([$Uint64, $Bool, $Int32], [], false)}, {prop: "fmtFloat", name: "fmtFloat", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32], [], false)}, {prop: "fmtComplex", name: "fmtComplex", pkg: "fmt", typ: $funcType([$Complex128, $Int, $Int32], [], false)}, {prop: "fmtString", name: "fmtString", pkg: "fmt", typ: $funcType([$String, $Int32], [], false)}, {prop: "fmtBytes", name: "fmtBytes", pkg: "fmt", typ: $funcType([sliceType$2, $Int32, $String], [], false)}, {prop: "fmtPointer", name: "fmtPointer", pkg: "fmt", typ: $funcType([reflect.Value, $Int32], [], false)}, {prop: "catchPanic", name: "catchPanic", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "handleMethods", name: "handleMethods", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "printArg", name: "printArg", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "printValue", name: "printValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [], false)}, {prop: "argNumber", name: "argNumber", pkg: "fmt", typ: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: "badArgNum", name: "badArgNum", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "missingArg", name: "missingArg", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "doPrintf", name: "doPrintf", pkg: "fmt", typ: $funcType([$String, sliceType], [], false)}, {prop: "doPrint", name: "doPrint", pkg: "fmt", typ: $funcType([sliceType], [], false)}, {prop: "doPrintln", name: "doPrintln", pkg: "fmt", typ: $funcType([sliceType], [], false)}];
	ptrType$5.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "getRune", name: "getRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "mustReadRune", name: "mustReadRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "error", name: "error", pkg: "fmt", typ: $funcType([$error], [], false)}, {prop: "errorString", name: "errorString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType$2, $error], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "free", name: "free", pkg: "fmt", typ: $funcType([ssave], [], false)}, {prop: "skipSpace", name: "skipSpace", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "token", name: "token", pkg: "fmt", typ: $funcType([$Bool, funcType], [sliceType$2], false)}, {prop: "consume", name: "consume", pkg: "fmt", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: "peek", name: "peek", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "notEOF", name: "notEOF", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "accept", name: "accept", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "okVerb", name: "okVerb", pkg: "fmt", typ: $funcType([$Int32, $String, $String], [$Bool], false)}, {prop: "scanBool", name: "scanBool", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "getBase", name: "getBase", pkg: "fmt", typ: $funcType([$Int32], [$Int, $String], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "fmt", typ: $funcType([$String, $Bool], [$String], false)}, {prop: "scanRune", name: "scanRune", pkg: "fmt", typ: $funcType([$Int], [$Int64], false)}, {prop: "scanBasePrefix", name: "scanBasePrefix", pkg: "fmt", typ: $funcType([], [$Int, $String, $Bool], false)}, {prop: "scanInt", name: "scanInt", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Int64], false)}, {prop: "scanUint", name: "scanUint", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Uint64], false)}, {prop: "floatToken", name: "floatToken", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "complexTokens", name: "complexTokens", pkg: "fmt", typ: $funcType([], [$String, $String], false)}, {prop: "convertFloat", name: "convertFloat", pkg: "fmt", typ: $funcType([$String, $Int], [$Float64], false)}, {prop: "scanComplex", name: "scanComplex", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Complex128], false)}, {prop: "convertString", name: "convertString", pkg: "fmt", typ: $funcType([$Int32], [$String], false)}, {prop: "quotedString", name: "quotedString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "hexByte", name: "hexByte", pkg: "fmt", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "hexString", name: "hexString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "scanOne", name: "scanOne", pkg: "fmt", typ: $funcType([$Int32, $emptyInterface], [], false)}, {prop: "doScan", name: "doScan", pkg: "fmt", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "advance", name: "advance", pkg: "fmt", typ: $funcType([$String], [$Int], false)}, {prop: "doScanf", name: "doScanf", pkg: "fmt", typ: $funcType([$String, sliceType], [$Int, $error], false)}];
	fmtFlags.init("fmt", [{prop: "widPresent", name: "widPresent", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "precPresent", name: "precPresent", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "minus", name: "minus", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "plus", name: "plus", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "sharp", name: "sharp", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "space", name: "space", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "zero", name: "zero", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "plusV", name: "plusV", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "sharpV", name: "sharpV", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	fmt.init("fmt", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "fmtFlags", name: "fmtFlags", anonymous: true, exported: false, typ: fmtFlags, tag: ""}, {prop: "wid", name: "wid", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "prec", name: "prec", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "intbuf", name: "intbuf", anonymous: false, exported: false, typ: arrayType, tag: ""}]);
	State.init([{prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}]);
	Formatter.init([{prop: "Format", name: "Format", pkg: "", typ: $funcType([State, $Int32], [], false)}]);
	Stringer.init([{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	GoStringer.init([{prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}]);
	buffer.init($Uint8);
	pp.init("fmt", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: buffer, tag: ""}, {prop: "arg", name: "arg", anonymous: false, exported: false, typ: $emptyInterface, tag: ""}, {prop: "value", name: "value", anonymous: false, exported: false, typ: reflect.Value, tag: ""}, {prop: "fmt", name: "fmt", anonymous: false, exported: false, typ: fmt, tag: ""}, {prop: "reordered", name: "reordered", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "goodArgNum", name: "goodArgNum", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "panicking", name: "panicking", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "erroring", name: "erroring", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	scanError.init("fmt", [{prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}]);
	ss.init("fmt", [{prop: "rs", name: "rs", anonymous: false, exported: false, typ: io.RuneScanner, tag: ""}, {prop: "buf", name: "buf", anonymous: false, exported: false, typ: buffer, tag: ""}, {prop: "count", name: "count", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "atEOF", name: "atEOF", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "ssave", name: "ssave", anonymous: true, exported: false, typ: ssave, tag: ""}]);
	ssave.init("fmt", [{prop: "validSave", name: "validSave", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "nlIsEnd", name: "nlIsEnd", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "nlIsSpace", name: "nlIsSpace", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "argLimit", name: "argLimit", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "limit", name: "limit", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "maxWid", name: "maxWid", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ppFree = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			return new pp.ptr(buffer.nil, $ifaceNil, new reflect.Value.ptr(ptrType.nil, 0, 0), new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType.zero()), false, false, false, false);
		}));
		space = new sliceType$1([$toNativeArray($kindUint16, [9, 13]), $toNativeArray($kindUint16, [32, 32]), $toNativeArray($kindUint16, [133, 133]), $toNativeArray($kindUint16, [160, 160]), $toNativeArray($kindUint16, [5760, 5760]), $toNativeArray($kindUint16, [8192, 8202]), $toNativeArray($kindUint16, [8232, 8233]), $toNativeArray($kindUint16, [8239, 8239]), $toNativeArray($kindUint16, [8287, 8287]), $toNativeArray($kindUint16, [12288, 12288])]);
		ssFree = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			return new ss.ptr($ifaceNil, buffer.nil, 0, false, new ssave.ptr(false, false, false, 0, 0, 0));
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bytes"] = (function() {
	var $pkg = {}, $init, errors, io, unicode, utf8;
	errors = $packages["errors"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/hex"] = (function() {
	var $pkg = {}, $init, bytes, errors, fmt, io, sliceType$1, EncodedLen, Encode, EncodeToString;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	sliceType$1 = $sliceType($Uint8);
	EncodedLen = function(n) {
		var n;
		return $imul(n, 2);
	};
	$pkg.EncodedLen = EncodedLen;
	Encode = function(dst, src) {
		var _i, _ref, dst, i, src, v, x, x$1;
		_ref = src;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			(x = $imul(i, 2), ((x < 0 || x >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x] = "0123456789abcdef".charCodeAt((v >>> 4 << 24 >>> 24))));
			(x$1 = ($imul(i, 2)) + 1 >> 0, ((x$1 < 0 || x$1 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$1] = "0123456789abcdef".charCodeAt(((v & 15) >>> 0))));
			_i++;
		}
		return $imul(src.$length, 2);
	};
	$pkg.Encode = Encode;
	EncodeToString = function(src) {
		var dst, src;
		dst = $makeSlice(sliceType$1, EncodedLen(src.$length));
		Encode(dst, src);
		return ($bytesToString(dst));
	};
	$pkg.EncodeToString = EncodeToString;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrLength = errors.New("encoding/hex: odd length hex string");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sort"] = (function() {
	var $pkg = {}, $init, reflect, IntSlice, sliceType, Search, SearchInts, insertionSort, siftDown, heapSort, medianOfThree, doPivot, quickSort, Sort, maxDepth, Ints;
	reflect = $packages["reflect"];
	IntSlice = $pkg.IntSlice = $newType(12, $kindSlice, "sort.IntSlice", true, "sort", true, null);
	sliceType = $sliceType($Int);
	Search = function(n, f) {
		var _r, _tmp, _tmp$1, f, h, i, j, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; f = $f.f; h = $f.h; i = $f.i; j = $f.j; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = 0;
		_tmp$1 = n;
		i = _tmp;
		j = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(i < j)) { break; } */ if(!(i < j)) { $s = 2; continue; }
			h = ((((((i + j >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
			_r = f(h); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				i = h + 1 >> 0;
				$s = 5; continue;
			/* } else { */ case 4:
				j = h;
			/* } */ case 5:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Search }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.f = f; $f.h = h; $f.i = i; $f.j = j; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Search = Search;
	SearchInts = function(a, x) {
		var _r, a, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		x = [x];
		_r = Search(a[0].$length, (function(a, x) { return function(i) {
			var i;
			return ((i < 0 || i >= a[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : a[0].$array[a[0].$offset + i]) >= x[0];
		}; })(a, x)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SearchInts }; } $f._r = _r; $f.a = a; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SearchInts = SearchInts;
	IntSlice.prototype.Search = function(x) {
		var _r, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = SearchInts($subslice(new sliceType(p.$array), p.$offset, p.$offset + p.$length), x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IntSlice.prototype.Search }; } $f._r = _r; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(IntSlice).prototype.Search = function(x) { return this.$get().Search(x); };
	insertionSort = function(data, a, b) {
		var _r, _v, a, b, data, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _v = $f._v; a = $f.a; b = $f.b; data = $f.data; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
			j = i;
			/* while (true) { */ case 3:
				if (!(j > a)) { _v = false; $s = 5; continue s; }
				_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: insertionSort }; } $f._r = _r; $f._v = _v; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	siftDown = function(data, lo, hi, first) {
		var _r, _r$1, _v, child, data, first, hi, lo, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; child = $f.child; data = $f.data; first = $f.first; hi = $f.hi; lo = $f.lo; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = lo;
		/* while (true) { */ case 1:
			child = ($imul(2, root)) + 1 >> 0;
			if (child >= hi) {
				/* break; */ $s = 2; continue;
			}
			if (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }
			_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				child = child + (1) >> 0;
			/* } */ case 4:
			_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				$s = -1; return;
			/* } */ case 8:
			$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			root = child;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: siftDown }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.child = child; $f.data = data; $f.first = first; $f.hi = hi; $f.lo = lo; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	heapSort = function(data, a, b) {
		var _q, a, b, data, first, hi, i, i$1, lo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; a = $f.a; b = $f.b; data = $f.data; first = $f.first; hi = $f.hi; i = $f.i; i$1 = $f.i$1; lo = $f.lo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			$r = siftDown(data, i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		i$1 = hi - 1 >> 0;
		/* while (true) { */ case 4:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }
			$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = siftDown(data, lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 - (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: heapSort }; } $f._q = _q; $f.a = a; $f.b = b; $f.data = data; $f.first = first; $f.hi = hi; $f.i = i; $f.i$1 = i$1; $f.lo = lo; $f.$s = $s; $f.$r = $r; return $f;
	};
	medianOfThree = function(data, m1, m0, m2) {
		var _r, _r$1, _r$2, data, m0, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; data = $f.data; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Less(m1, m0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$r = data.Swap(m1, m0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$1 = data.Less(m2, m1); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$1) { */ case 5:
			$r = data.Swap(m2, m1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = data.Less(m1, m0); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r$2) { */ case 9:
				$r = data.Swap(m1, m0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
		/* } */ case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: medianOfThree }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.data = data; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	doPivot = function(data, lo, hi) {
		var _q, _q$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tmp$3, _v, _v$1, _v$2, _v$3, _v$4, a, b, c, data, dups, hi, lo, m, midhi, midlo, pivot, protect, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; a = $f.a; b = $f.b; c = $f.c; data = $f.data; dups = $f.dups; hi = $f.hi; lo = $f.lo; m = $f.m; midhi = $f.midhi; midlo = $f.midlo; pivot = $f.pivot; protect = $f.protect; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		midlo = 0;
		midhi = 0;
		m = ((((((lo + hi >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
		/* */ if ((hi - lo >> 0) > 40) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((hi - lo >> 0) > 40) { */ case 1:
			s = (_q = ((hi - lo >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			$r = medianOfThree(data, lo, lo + s >> 0, lo + ($imul(2, s)) >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, m, m - s >> 0, m + s >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - ($imul(2, s)) >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = medianOfThree(data, lo, m, hi - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pivot = lo;
		_tmp = lo + 1 >> 0;
		_tmp$1 = hi - 1 >> 0;
		a = _tmp;
		c = _tmp$1;
		/* while (true) { */ case 7:
			if (!(a < c)) { _v = false; $s = 9; continue s; }
			_r = data.Less(a, pivot); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 9:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 8; continue; }
			a = a + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		b = a;
		/* while (true) { */ case 11:
			/* while (true) { */ case 13:
				if (!(b < c)) { _v$1 = false; $s = 15; continue s; }
				_r$1 = data.Less(pivot, b); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = !_r$1; case 15:
				/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 14; continue; }
				b = b + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			/* while (true) { */ case 17:
				if (!(b < c)) { _v$2 = false; $s = 19; continue s; }
				_r$2 = data.Less(pivot, c - 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 19:
				/* if (!(_v$2)) { break; } */ if(!(_v$2)) { $s = 18; continue; }
				c = c - (1) >> 0;
			/* } */ $s = 17; continue; case 18:
			if (b >= c) {
				/* break; */ $s = 12; continue;
			}
			$r = data.Swap(b, c - 1 >> 0); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			b = b + (1) >> 0;
			c = c - (1) >> 0;
		/* } */ $s = 11; continue; case 12:
		protect = (hi - c >> 0) < 5;
		/* */ if (!protect && (hi - c >> 0) < (_q$1 = ((hi - lo >> 0)) / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (!protect && (hi - c >> 0) < (_q$1 = ((hi - lo >> 0)) / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) { */ case 22:
			dups = 0;
			_r$3 = data.Less(pivot, hi - 1 >> 0); /* */ $s = 26; case 26: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (!_r$3) { */ case 24:
				$r = data.Swap(c, hi - 1 >> 0); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				c = c + (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 25:
			_r$4 = data.Less(b - 1 >> 0, pivot); /* */ $s = 30; case 30: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (!_r$4) { */ case 28:
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 29:
			_r$5 = data.Less(m, pivot); /* */ $s = 33; case 33: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (!_r$5) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (!_r$5) { */ case 31:
				$r = data.Swap(m, b - 1 >> 0); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 32:
			protect = dups > 1;
		/* } */ case 23:
		/* */ if (protect) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (protect) { */ case 35:
			/* while (true) { */ case 37:
				/* while (true) { */ case 39:
					if (!(a < b)) { _v$3 = false; $s = 41; continue s; }
					_r$6 = data.Less(b - 1 >> 0, pivot); /* */ $s = 42; case 42: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_v$3 = !_r$6; case 41:
					/* if (!(_v$3)) { break; } */ if(!(_v$3)) { $s = 40; continue; }
					b = b - (1) >> 0;
				/* } */ $s = 39; continue; case 40:
				/* while (true) { */ case 43:
					if (!(a < b)) { _v$4 = false; $s = 45; continue s; }
					_r$7 = data.Less(a, pivot); /* */ $s = 46; case 46: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_v$4 = _r$7; case 45:
					/* if (!(_v$4)) { break; } */ if(!(_v$4)) { $s = 44; continue; }
					a = a + (1) >> 0;
				/* } */ $s = 43; continue; case 44:
				if (a >= b) {
					/* break; */ $s = 38; continue;
				}
				$r = data.Swap(a, b - 1 >> 0); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = a + (1) >> 0;
				b = b - (1) >> 0;
			/* } */ $s = 37; continue; case 38:
		/* } */ case 36:
		$r = data.Swap(pivot, b - 1 >> 0); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$2 = b - 1 >> 0;
		_tmp$3 = c;
		midlo = _tmp$2;
		midhi = _tmp$3;
		$s = -1; return [midlo, midhi];
		/* */ } return; } if ($f === undefined) { $f = { $blk: doPivot }; } $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f.a = a; $f.b = b; $f.c = c; $f.data = data; $f.dups = dups; $f.hi = hi; $f.lo = lo; $f.m = m; $f.midhi = midhi; $f.midlo = midlo; $f.pivot = pivot; $f.protect = protect; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	quickSort = function(data, a, b, maxDepth$1) {
		var _r, _r$1, _tuple, a, b, data, i, maxDepth$1, mhi, mlo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; b = $f.b; data = $f.data; i = $f.i; maxDepth$1 = $f.maxDepth$1; mhi = $f.mhi; mlo = $f.mlo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			/* if (!((b - a >> 0) > 12)) { break; } */ if(!((b - a >> 0) > 12)) { $s = 2; continue; }
			/* */ if (maxDepth$1 === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (maxDepth$1 === 0) { */ case 3:
				$r = heapSort(data, a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
			maxDepth$1 = maxDepth$1 - (1) >> 0;
			_r = doPivot(data, a, b); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			mlo = _tuple[0];
			mhi = _tuple[1];
			/* */ if ((mlo - a >> 0) < (b - mhi >> 0)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((mlo - a >> 0) < (b - mhi >> 0)) { */ case 7:
				$r = quickSort(data, a, mlo, maxDepth$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = mhi;
				$s = 9; continue;
			/* } else { */ case 8:
				$r = quickSort(data, mhi, b, maxDepth$1); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = mlo;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		/* */ if ((b - a >> 0) > 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((b - a >> 0) > 1) { */ case 12:
			i = a + 6 >> 0;
			/* while (true) { */ case 14:
				/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 15; continue; }
				_r$1 = data.Less(i, i - 6 >> 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_r$1) { */ case 16:
					$r = data.Swap(i, i - 6 >> 0); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 17:
				i = i + (1) >> 0;
			/* } */ $s = 14; continue; case 15:
			$r = insertionSort(data, a, b); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: quickSort }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.maxDepth$1 = maxDepth$1; $f.mhi = mhi; $f.mlo = mlo; $f.$s = $s; $f.$r = $r; return $f;
	};
	Sort = function(data) {
		var _r, data, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; data = $f.data; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		$r = quickSort(data, 0, n, maxDepth(n)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sort }; } $f._r = _r; $f.data = data; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sort = Sort;
	maxDepth = function(n) {
		var depth, i, n;
		depth = 0;
		i = n;
		while (true) {
			if (!(i > 0)) { break; }
			depth = depth + (1) >> 0;
			i = (i >> $min((1), 31)) >> 0;
		}
		return $imul(depth, 2);
	};
	IntSlice.prototype.Len = function() {
		var p;
		p = this;
		return p.$length;
	};
	$ptrType(IntSlice).prototype.Len = function() { return this.$get().Len(); };
	IntSlice.prototype.Less = function(i, j) {
		var i, j, p;
		p = this;
		return ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]) < ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]);
	};
	$ptrType(IntSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	IntSlice.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, p;
		p = this;
		_tmp = ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]);
		_tmp$1 = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
		((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i] = _tmp);
		((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j] = _tmp$1);
	};
	$ptrType(IntSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	IntSlice.prototype.Sort = function() {
		var p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = Sort(p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IntSlice.prototype.Sort }; } $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(IntSlice).prototype.Sort = function() { return this.$get().Sort(); };
	Ints = function(a) {
		var a, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = Sort(($subslice(new IntSlice(a.$array), a.$offset, a.$offset + a.$length))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Ints }; } $f.a = a; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Ints = Ints;
	IntSlice.methods = [{prop: "Search", name: "Search", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Sort", name: "Sort", pkg: "", typ: $funcType([], [], false)}];
	IntSlice.init($Int);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = reflect.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, $init, errors, js, io, unicode, utf8, sliceType, Index, Count, Join, Map, ToUpper, Replace;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	sliceType = $sliceType($Uint8);
	Index = function(s, sep) {
		var s, sep;
		return $parseInt(s.indexOf(sep)) >> 0;
	};
	$pkg.Index = Index;
	Count = function(s, sep) {
		var n, pos, s, sep;
		n = 0;
		if ((sep.length === 0)) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length > s.length) {
			return 0;
		} else if ((sep.length === s.length)) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		while (true) {
			pos = Index(s, sep);
			if (pos === -1) {
				break;
			}
			n = n + (1) >> 0;
			s = $substring(s, (pos + sep.length >> 0));
		}
		return n;
	};
	$pkg.Count = Count;
	Join = function(a, sep) {
		var _1, _i, _ref, a, b, bp, i, n, s, sep;
		_1 = a.$length;
		if (_1 === (0)) {
			return "";
		} else if (_1 === (1)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]);
		} else if (_1 === (2)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) + sep + (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]);
		} else if (_1 === (3)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) + sep + (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]) + sep + (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]);
		}
		n = $imul(sep.length, ((a.$length - 1 >> 0)));
		i = 0;
		while (true) {
			if (!(i < a.$length)) { break; }
			n = n + (((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]).length) >> 0;
			i = i + (1) >> 0;
		}
		b = $makeSlice(sliceType, n);
		bp = $copyString(b, (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]));
		_ref = $subslice(a, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			bp = bp + ($copyString($subslice(b, bp), sep)) >> 0;
			bp = bp + ($copyString($subslice(b, bp), s)) >> 0;
			_i++;
		}
		return ($bytesToString(b));
	};
	$pkg.Join = Join;
	Map = function(mapping, s) {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, _rune, _rune$1, _tuple, b, c, c$1, i, mapping, nb, nbytes, r, r$1, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _rune = $f._rune; _rune$1 = $f._rune$1; _tuple = $f._tuple; b = $f.b; c = $f.c; c$1 = $f.c$1; i = $f.i; mapping = $f.mapping; nb = $f.nb; nbytes = $f.nbytes; r = $f.r; r$1 = $f.r$1; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = sliceType.nil;
		nbytes = 0;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			_r = mapping(c); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === c) {
				_i += _rune[1];
				/* continue; */ $s = 1; continue;
			}
			b = $makeSlice(sliceType, (s.length + 4 >> 0));
			nbytes = $copyString(b, $substring(s, 0, i));
			if (r >= 0) {
				if (r <= 128) {
					((nbytes < 0 || nbytes >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + nbytes] = ((r << 24 >>> 24)));
					nbytes = nbytes + (1) >> 0;
				} else {
					nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes), r)) >> 0;
				}
			}
			if (c === 65533) {
				_tuple = utf8.DecodeRuneInString($substring(s, i));
				w = _tuple[1];
				i = i + (w) >> 0;
			} else {
				i = i + (utf8.RuneLen(c)) >> 0;
			}
			s = $substring(s, i);
			/* break; */ $s = 2; continue;
		/* } */ $s = 1; continue; case 2:
		if (b === sliceType.nil) {
			$s = -1; return s;
		}
		_ref$1 = s;
		_i$1 = 0;
		/* while (true) { */ case 4:
			/* if (!(_i$1 < _ref$1.length)) { break; } */ if(!(_i$1 < _ref$1.length)) { $s = 5; continue; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			c$1 = _rune$1[0];
			_r$1 = mapping(c$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			r$1 = _r$1;
			if ((0 <= r$1 && r$1 <= 128) && nbytes < b.$length) {
				((nbytes < 0 || nbytes >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + nbytes] = ((r$1 << 24 >>> 24)));
				nbytes = nbytes + (1) >> 0;
				_i$1 += _rune$1[1];
				/* continue; */ $s = 4; continue;
			}
			if (r$1 >= 0) {
				if ((nbytes + 4 >> 0) >= b.$length) {
					nb = $makeSlice(sliceType, ($imul(2, b.$length)));
					$copySlice(nb, $subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes), r$1)) >> 0;
			}
			_i$1 += _rune$1[1];
		/* } */ $s = 4; continue; case 5:
		$s = -1; return ($bytesToString($subslice(b, 0, nbytes)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._rune = _rune; $f._rune$1 = _rune$1; $f._tuple = _tuple; $f.b = b; $f.c = c; $f.c$1 = c$1; $f.i = i; $f.mapping = mapping; $f.nb = nb; $f.nbytes = nbytes; $f.r = r; $f.r$1 = r$1; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Map = Map;
	ToUpper = function(s) {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Map(unicode.ToUpper, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ToUpper }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ToUpper = ToUpper;
	Replace = function(s, old, new$1, n) {
		var _tuple, i, j, m, n, new$1, old, s, start, t, w, wid;
		if (old === new$1 || (n === 0)) {
			return s;
		}
		m = Count(s, old);
		if (m === 0) {
			return s;
		} else if (n < 0 || m < n) {
			n = m;
		}
		t = $makeSlice(sliceType, (s.length + ($imul(n, ((new$1.length - old.length >> 0)))) >> 0));
		w = 0;
		start = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			j = start;
			if (old.length === 0) {
				if (i > 0) {
					_tuple = utf8.DecodeRuneInString($substring(s, start));
					wid = _tuple[1];
					j = j + (wid) >> 0;
				}
			} else {
				j = j + (Index($substring(s, start), old)) >> 0;
			}
			w = w + ($copyString($subslice(t, w), $substring(s, start, j))) >> 0;
			w = w + ($copyString($subslice(t, w), new$1)) >> 0;
			start = j + old.length >> 0;
			i = i + (1) >> 0;
		}
		w = w + ($copyString($subslice(t, w), $substring(s, start))) >> 0;
		return ($bytesToString($subslice(t, 0, w)));
	};
	$pkg.Replace = Replace;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf16"] = (function() {
	var $pkg = {}, $init, sliceType$1, DecodeRune, Decode;
	sliceType$1 = $sliceType($Int32);
	DecodeRune = function(r1, r2) {
		var r1, r2;
		if (55296 <= r1 && r1 < 56320 && 56320 <= r2 && r2 < 57344) {
			return ((((r1 - 55296 >> 0)) << 10 >> 0) | ((r2 - 56320 >> 0))) + 65536 >> 0;
		}
		return 65533;
	};
	$pkg.DecodeRune = DecodeRune;
	Decode = function(s) {
		var a, i, n, r, s, x, x$1, x$2;
		a = $makeSlice(sliceType$1, s.$length);
		n = 0;
		i = 0;
		while (true) {
			if (!(i < s.$length)) { break; }
			r = ((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]);
			if ((r < 55296) || (57344 <= r)) {
				((n < 0 || n >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + n] = ((r >> 0)));
			} else if (55296 <= r && r < 56320 && (i + 1 >> 0) < s.$length && 56320 <= (x = i + 1 >> 0, ((x < 0 || x >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x])) && (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x$1])) < 57344) {
				((n < 0 || n >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + n] = DecodeRune(((r >> 0)), (((x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x$2])) >> 0))));
				i = i + (1) >> 0;
			} else {
				((n < 0 || n >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + n] = 65533);
			}
			n = n + (1) >> 0;
			i = i + (1) >> 0;
		}
		return $subslice(a, 0, n);
	};
	$pkg.Decode = Decode;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/antlr/antlr4/runtime/Go/antlr"] = (function() {
	var $pkg = {}, $init, bytes, hex, errors, fmt, io, os, reflect, sort, strconv, strings, sync, utf16, ATN, comparable, ATNConfig, BaseATNConfig, LexerATNConfig, ATNConfigSet, BaseATNConfigSet, OrderedATNConfigSet, ATNDeserializationOptions, LoopEndStateIntPair, BlockStartStateIntPair, ATNDeserializer, BaseATNSimulator, ATNState, BaseATNState, BasicState, DecisionState, BaseDecisionState, BlockStartState, BaseBlockStartState, BasicBlockStartState, BlockEndState, RuleStopState, RuleStartState, PlusLoopbackState, PlusBlockStartState, StarBlockStartState, StarLoopbackState, StarLoopEntryState, LoopEndState, TokensStartState, CharStream, TokenFactory, CommonTokenFactory, CommonTokenStream, DFA, dfaStateList, DFASerializer, LexerDFASerializer, PredPrediction, DFAState, ErrorListener, DefaultErrorListener, ConsoleErrorListener, ProxyErrorListener, ErrorStrategy, DefaultErrorStrategy, RecognitionException, BaseRecognitionException, LexerNoViableAltException, NoViableAltException, InputMisMatchException, FailedPredicateException, InputStream, IntStream, Interval, IntervalSet, Lexer, BaseLexer, LexerAction, BaseLexerAction, LexerSkipAction, LexerTypeAction, LexerPushModeAction, LexerPopModeAction, LexerMoreAction, LexerModeAction, LexerCustomAction, LexerChannelAction, LexerIndexedCustomAction, LexerActionExecutor, ILexerATNSimulator, LexerATNSimulator, SimState, LL1Analyzer, Parser, BaseParser, ParserATNSimulator, ParserRuleContext, BaseParserRuleContext, PredictionContext, BasePredictionContext, PredictionContextCache, BaseSingletonPredictionContext, EmptyPredictionContext, ArrayPredictionContext, Recognizer, BaseRecognizer, RuleContext, BaseRuleContext, SemanticContext, Predicate, PrecedencePredicate, AND, OR, TokenSourceCharStreamPair, Token, BaseToken, CommonToken, TokenSource, TokenStream, TraceListener, Transition, BaseTransition, AtomTransition, RuleTransition, EpsilonTransition, RangeTransition, AbstractPredicateTransition, BaseAbstractPredicateTransition, PredicateTransition, ActionTransition, SetTransition, NotSetTransition, WildcardTransition, PrecedencePredicateTransition, Tree, ParseTree, RuleNode, TerminalNode, ErrorNode, ParseTreeVisitor, ParseTreeListener, TerminalNodeImpl, ErrorNodeImpl, ParseTreeWalker, IntStack, Set, hasher, BitSet, AltDict, DoubleDict, sliceType, ptrType, ptrType$1, ptrType$2, sliceType$1, sliceType$2, ptrType$3, sliceType$3, ptrType$4, sliceType$4, ptrType$5, sliceType$5, sliceType$6, sliceType$7, ptrType$6, ptrType$7, sliceType$8, ptrType$8, ptrType$9, ptrType$10, sliceType$9, ptrType$11, sliceType$10, ptrType$12, ptrType$13, ptrType$14, sliceType$11, sliceType$12, sliceType$13, sliceType$14, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, sliceType$15, ptrType$22, sliceType$16, ptrType$23, ptrType$24, ptrType$25, sliceType$17, ptrType$26, ptrType$27, ptrType$28, sliceType$18, ptrType$29, ptrType$30, sliceType$19, ptrType$31, sliceType$20, ptrType$32, ptrType$33, sliceType$21, ptrType$34, ptrType$35, ptrType$36, ptrType$37, ptrType$38, ptrType$40, sliceType$22, ptrType$41, ptrType$42, ptrType$43, ptrType$44, ptrType$45, ptrType$46, ptrType$47, ptrType$48, ptrType$49, ptrType$50, ptrType$51, ptrType$52, ptrType$53, ptrType$54, ptrType$55, ptrType$56, ptrType$57, ptrType$58, sliceType$23, sliceType$24, sliceType$25, ptrType$59, ptrType$60, ptrType$61, sliceType$26, sliceType$27, sliceType$28, ptrType$62, ptrType$63, ptrType$64, sliceType$29, ptrType$65, ptrType$66, ptrType$67, ptrType$68, sliceType$30, ptrType$69, ptrType$70, sliceType$31, ptrType$71, ptrType$72, ptrType$73, ptrType$77, ptrType$78, ptrType$79, ptrType$80, mapType, sliceType$34, funcType, ptrType$81, ptrType$82, ptrType$83, mapType$1, ptrType$84, ptrType$86, ptrType$87, ptrType$89, ptrType$90, ptrType$91, ptrType$92, ptrType$93, ptrType$94, ptrType$95, ptrType$96, mapType$2, mapType$3, ptrType$97, ptrType$101, ptrType$102, ptrType$105, mapType$5, funcType$1, funcType$2, mapType$6, ptrType$106, mapType$7, mapType$8, mapType$9, byteToHex, bypassAltsAtnCache, tokenTypeMapCache, ruleIndexMapCache, _r, _r$1, NewATN, NewBaseATNConfig6, NewBaseATNConfig5, NewBaseATNConfig4, NewBaseATNConfig3, NewBaseATNConfig2, NewBaseATNConfig1, NewBaseATNConfig, NewLexerATNConfig6, NewLexerATNConfig4, NewLexerATNConfig3, NewLexerATNConfig2, checkNonGreedyDecision, NewBaseATNConfigSet, NewOrderedATNConfigSet, equalATNConfigs, NewATNDeserializer, stringInSlice, createByteToHex, NewBaseATNSimulator, NewBaseATNState, NewBasicState, NewBaseDecisionState, NewBlockStartState, NewBasicBlockStartState, NewBlockEndState, NewRuleStopState, NewRuleStartState, NewPlusLoopbackState, NewPlusBlockStartState, NewStarBlockStartState, NewStarLoopbackState, NewStarLoopEntryState, NewLoopEndState, NewTokensStartState, NewCommonTokenFactory, NewCommonTokenStream, NewDFA, NewDFASerializer, NewLexerDFASerializer, NewPredPrediction, NewDFAState, NewConsoleErrorListener, NewProxyErrorListener, NewDefaultErrorStrategy, NewBaseRecognitionException, NewLexerNoViableAltException, NewNoViableAltException, NewInputMisMatchException, NewFailedPredicateException, NewInputStream, NewInterval, NewIntervalSet, NewBaseLexer, NewBaseLexerAction, NewLexerSkipAction, NewLexerTypeAction, NewLexerPushModeAction, NewLexerPopModeAction, NewLexerMoreAction, NewLexerModeAction, NewLexerCustomAction, NewLexerChannelAction, NewLexerIndexedCustomAction, NewLexerActionExecutor, LexerActionExecutorappend, NewLexerATNSimulator, resetSimState, NewSimState, NewLL1Analyzer, NewBaseParser, NewParserATNSimulator, NewBaseParserRuleContext, NewBasePredictionContext, calculateHash, calculateEmptyHash, NewPredictionContextCache, NewBaseSingletonPredictionContext, SingletonBasePredictionContextCreate, NewEmptyPredictionContext, NewArrayPredictionContext, predictionContextFromRuleContext, merge, mergeSingletons, mergeRoot, mergeArrays, combineCommonParents, getCachedBasePredictionContext, PredictionModehasSLLConflictTerminatingPrediction, PredictionModehasConfigInRuleStopState, PredictionModeallConfigsInRuleStopStates, PredictionModeresolvesToJustOneViableAlt, PredictionModeallSubsetsConflict, PredictionModehasNonConflictingAltSet, PredictionModehasConflictingAltSet, PredictionModeallSubsetsEqual, PredictionModegetUniqueAlt, PredictionModeGetAlts, PredictionModegetConflictingAltSubsets, PredictionModeGetStateToAltMap, PredictionModehasStateAssociatedWithOneAlt, PredictionModegetSingleViableAlt, NewBaseRecognizer, NewBaseRuleContext, SemanticContextandContext, SemanticContextorContext, NewPredicate, NewPrecedencePredicate, PrecedencePredicatefilterPrecedencePredicates, NewAND, NewOR, NewCommonToken, NewTraceListener, NewBaseTransition, NewAtomTransition, NewRuleTransition, NewEpsilonTransition, NewRangeTransition, NewBasePredicateTransition, NewPredicateTransition, NewActionTransition, NewSetTransition, NewNotSetTransition, NewWildcardTransition, NewPrecedencePredicateTransition, NewTerminalNodeImpl, NewErrorNodeImpl, NewParseTreeWalker, TreesStringTree, TreesGetNodeText, intMin, intMax, NewSet, standardEqualsFunction, standardHashFunction, NewBitSet, NewAltDict, NewDoubleDict, EscapeWhitespace, murmurInit, murmurUpdate, murmurFinish;
	bytes = $packages["bytes"];
	hex = $packages["encoding/hex"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	utf16 = $packages["unicode/utf16"];
	ATN = $pkg.ATN = $newType(0, $kindStruct, "antlr.ATN", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(DecisionToState_, grammarType_, lexerActions_, maxTokenType_, modeNameToStartState_, modeToStartState_, ruleToStartState_, ruleToStopState_, ruleToTokenType_, states_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.DecisionToState = sliceType$1.nil;
			this.grammarType = 0;
			this.lexerActions = sliceType$2.nil;
			this.maxTokenType = 0;
			this.modeNameToStartState = false;
			this.modeToStartState = sliceType$3.nil;
			this.ruleToStartState = sliceType$4.nil;
			this.ruleToStopState = sliceType$5.nil;
			this.ruleToTokenType = sliceType$6.nil;
			this.states = sliceType$7.nil;
			return;
		}
		this.DecisionToState = DecisionToState_;
		this.grammarType = grammarType_;
		this.lexerActions = lexerActions_;
		this.maxTokenType = maxTokenType_;
		this.modeNameToStartState = modeNameToStartState_;
		this.modeToStartState = modeToStartState_;
		this.ruleToStartState = ruleToStartState_;
		this.ruleToStopState = ruleToStopState_;
		this.ruleToTokenType = ruleToTokenType_;
		this.states = states_;
	});
	comparable = $pkg.comparable = $newType(8, $kindInterface, "antlr.comparable", true, "github.com/antlr/antlr4/runtime/Go/antlr", false, null);
	ATNConfig = $pkg.ATNConfig = $newType(8, $kindInterface, "antlr.ATNConfig", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	BaseATNConfig = $pkg.BaseATNConfig = $newType(0, $kindStruct, "antlr.BaseATNConfig", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(precedenceFilterSuppressed_, state_, alt_, context_, semanticContext_, reachesIntoOuterContext_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.precedenceFilterSuppressed = false;
			this.state = $ifaceNil;
			this.alt = 0;
			this.context = $ifaceNil;
			this.semanticContext = $ifaceNil;
			this.reachesIntoOuterContext = 0;
			return;
		}
		this.precedenceFilterSuppressed = precedenceFilterSuppressed_;
		this.state = state_;
		this.alt = alt_;
		this.context = context_;
		this.semanticContext = semanticContext_;
		this.reachesIntoOuterContext = reachesIntoOuterContext_;
	});
	LexerATNConfig = $pkg.LexerATNConfig = $newType(0, $kindStruct, "antlr.LexerATNConfig", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseATNConfig_, lexerActionExecutor_, passedThroughNonGreedyDecision_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseATNConfig = ptrType$7.nil;
			this.lexerActionExecutor = ptrType$8.nil;
			this.passedThroughNonGreedyDecision = false;
			return;
		}
		this.BaseATNConfig = BaseATNConfig_;
		this.lexerActionExecutor = lexerActionExecutor_;
		this.passedThroughNonGreedyDecision = passedThroughNonGreedyDecision_;
	});
	ATNConfigSet = $pkg.ATNConfigSet = $newType(8, $kindInterface, "antlr.ATNConfigSet", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	BaseATNConfigSet = $pkg.BaseATNConfigSet = $newType(0, $kindStruct, "antlr.BaseATNConfigSet", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(cachedHash_, configLookup_, configs_, conflictingAlts_, dipsIntoOuterContext_, fullCtx_, hasSemanticContext_, readOnly_, uniqueAlt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.cachedHash = 0;
			this.configLookup = ptrType$10.nil;
			this.configs = sliceType$9.nil;
			this.conflictingAlts = ptrType$11.nil;
			this.dipsIntoOuterContext = false;
			this.fullCtx = false;
			this.hasSemanticContext = false;
			this.readOnly = false;
			this.uniqueAlt = 0;
			return;
		}
		this.cachedHash = cachedHash_;
		this.configLookup = configLookup_;
		this.configs = configs_;
		this.conflictingAlts = conflictingAlts_;
		this.dipsIntoOuterContext = dipsIntoOuterContext_;
		this.fullCtx = fullCtx_;
		this.hasSemanticContext = hasSemanticContext_;
		this.readOnly = readOnly_;
		this.uniqueAlt = uniqueAlt_;
	});
	OrderedATNConfigSet = $pkg.OrderedATNConfigSet = $newType(0, $kindStruct, "antlr.OrderedATNConfigSet", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseATNConfigSet_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseATNConfigSet = ptrType$13.nil;
			return;
		}
		this.BaseATNConfigSet = BaseATNConfigSet_;
	});
	ATNDeserializationOptions = $pkg.ATNDeserializationOptions = $newType(0, $kindStruct, "antlr.ATNDeserializationOptions", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(readOnly_, verifyATN_, generateRuleBypassTransitions_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.readOnly = false;
			this.verifyATN = false;
			this.generateRuleBypassTransitions = false;
			return;
		}
		this.readOnly = readOnly_;
		this.verifyATN = verifyATN_;
		this.generateRuleBypassTransitions = generateRuleBypassTransitions_;
	});
	LoopEndStateIntPair = $pkg.LoopEndStateIntPair = $newType(0, $kindStruct, "antlr.LoopEndStateIntPair", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(item0_, item1_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.item0 = ptrType$15.nil;
			this.item1 = 0;
			return;
		}
		this.item0 = item0_;
		this.item1 = item1_;
	});
	BlockStartStateIntPair = $pkg.BlockStartStateIntPair = $newType(0, $kindStruct, "antlr.BlockStartStateIntPair", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(item0_, item1_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.item0 = $ifaceNil;
			this.item1 = 0;
			return;
		}
		this.item0 = item0_;
		this.item1 = item1_;
	});
	ATNDeserializer = $pkg.ATNDeserializer = $newType(0, $kindStruct, "antlr.ATNDeserializer", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(deserializationOptions_, data_, pos_, uuid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.deserializationOptions = ptrType$14.nil;
			this.data = sliceType$11.nil;
			this.pos = 0;
			this.uuid = "";
			return;
		}
		this.deserializationOptions = deserializationOptions_;
		this.data = data_;
		this.pos = pos_;
		this.uuid = uuid_;
	});
	BaseATNSimulator = $pkg.BaseATNSimulator = $newType(0, $kindStruct, "antlr.BaseATNSimulator", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(atn_, sharedContextCache_, decisionToDFA_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.atn = ptrType$23.nil;
			this.sharedContextCache = ptrType$24.nil;
			this.decisionToDFA = sliceType$17.nil;
			return;
		}
		this.atn = atn_;
		this.sharedContextCache = sharedContextCache_;
		this.decisionToDFA = decisionToDFA_;
	});
	ATNState = $pkg.ATNState = $newType(8, $kindInterface, "antlr.ATNState", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	BaseATNState = $pkg.BaseATNState = $newType(0, $kindStruct, "antlr.BaseATNState", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(NextTokenWithinRule_, atn_, epsilonOnlyTransitions_, ruleIndex_, stateNumber_, stateType_, transitions_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NextTokenWithinRule = ptrType.nil;
			this.atn = ptrType$23.nil;
			this.epsilonOnlyTransitions = false;
			this.ruleIndex = 0;
			this.stateNumber = 0;
			this.stateType = 0;
			this.transitions = sliceType$15.nil;
			return;
		}
		this.NextTokenWithinRule = NextTokenWithinRule_;
		this.atn = atn_;
		this.epsilonOnlyTransitions = epsilonOnlyTransitions_;
		this.ruleIndex = ruleIndex_;
		this.stateNumber = stateNumber_;
		this.stateType = stateType_;
		this.transitions = transitions_;
	});
	BasicState = $pkg.BasicState = $newType(0, $kindStruct, "antlr.BasicState", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseATNState_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseATNState = ptrType$26.nil;
			return;
		}
		this.BaseATNState = BaseATNState_;
	});
	DecisionState = $pkg.DecisionState = $newType(8, $kindInterface, "antlr.DecisionState", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	BaseDecisionState = $pkg.BaseDecisionState = $newType(0, $kindStruct, "antlr.BaseDecisionState", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseATNState_, decision_, nonGreedy_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseATNState = ptrType$26.nil;
			this.decision = 0;
			this.nonGreedy = false;
			return;
		}
		this.BaseATNState = BaseATNState_;
		this.decision = decision_;
		this.nonGreedy = nonGreedy_;
	});
	BlockStartState = $pkg.BlockStartState = $newType(8, $kindInterface, "antlr.BlockStartState", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	BaseBlockStartState = $pkg.BaseBlockStartState = $newType(0, $kindStruct, "antlr.BaseBlockStartState", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseDecisionState_, endState_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseDecisionState = ptrType$27.nil;
			this.endState = ptrType$16.nil;
			return;
		}
		this.BaseDecisionState = BaseDecisionState_;
		this.endState = endState_;
	});
	BasicBlockStartState = $pkg.BasicBlockStartState = $newType(0, $kindStruct, "antlr.BasicBlockStartState", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseBlockStartState_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseBlockStartState = ptrType$17.nil;
			return;
		}
		this.BaseBlockStartState = BaseBlockStartState_;
	});
	BlockEndState = $pkg.BlockEndState = $newType(0, $kindStruct, "antlr.BlockEndState", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseATNState_, startState_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseATNState = ptrType$26.nil;
			this.startState = $ifaceNil;
			return;
		}
		this.BaseATNState = BaseATNState_;
		this.startState = startState_;
	});
	RuleStopState = $pkg.RuleStopState = $newType(0, $kindStruct, "antlr.RuleStopState", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseATNState_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseATNState = ptrType$26.nil;
			return;
		}
		this.BaseATNState = BaseATNState_;
	});
	RuleStartState = $pkg.RuleStartState = $newType(0, $kindStruct, "antlr.RuleStartState", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseATNState_, stopState_, isPrecedenceRule_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseATNState = ptrType$26.nil;
			this.stopState = $ifaceNil;
			this.isPrecedenceRule = false;
			return;
		}
		this.BaseATNState = BaseATNState_;
		this.stopState = stopState_;
		this.isPrecedenceRule = isPrecedenceRule_;
	});
	PlusLoopbackState = $pkg.PlusLoopbackState = $newType(0, $kindStruct, "antlr.PlusLoopbackState", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseDecisionState_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseDecisionState = ptrType$27.nil;
			return;
		}
		this.BaseDecisionState = BaseDecisionState_;
	});
	PlusBlockStartState = $pkg.PlusBlockStartState = $newType(0, $kindStruct, "antlr.PlusBlockStartState", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseBlockStartState_, loopBackState_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseBlockStartState = ptrType$17.nil;
			this.loopBackState = $ifaceNil;
			return;
		}
		this.BaseBlockStartState = BaseBlockStartState_;
		this.loopBackState = loopBackState_;
	});
	StarBlockStartState = $pkg.StarBlockStartState = $newType(0, $kindStruct, "antlr.StarBlockStartState", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseBlockStartState_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseBlockStartState = ptrType$17.nil;
			return;
		}
		this.BaseBlockStartState = BaseBlockStartState_;
	});
	StarLoopbackState = $pkg.StarLoopbackState = $newType(0, $kindStruct, "antlr.StarLoopbackState", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseATNState_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseATNState = ptrType$26.nil;
			return;
		}
		this.BaseATNState = BaseATNState_;
	});
	StarLoopEntryState = $pkg.StarLoopEntryState = $newType(0, $kindStruct, "antlr.StarLoopEntryState", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseDecisionState_, loopBackState_, precedenceRuleDecision_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseDecisionState = ptrType$27.nil;
			this.loopBackState = $ifaceNil;
			this.precedenceRuleDecision = false;
			return;
		}
		this.BaseDecisionState = BaseDecisionState_;
		this.loopBackState = loopBackState_;
		this.precedenceRuleDecision = precedenceRuleDecision_;
	});
	LoopEndState = $pkg.LoopEndState = $newType(0, $kindStruct, "antlr.LoopEndState", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseATNState_, loopBackState_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseATNState = ptrType$26.nil;
			this.loopBackState = $ifaceNil;
			return;
		}
		this.BaseATNState = BaseATNState_;
		this.loopBackState = loopBackState_;
	});
	TokensStartState = $pkg.TokensStartState = $newType(0, $kindStruct, "antlr.TokensStartState", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseDecisionState_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseDecisionState = ptrType$27.nil;
			return;
		}
		this.BaseDecisionState = BaseDecisionState_;
	});
	CharStream = $pkg.CharStream = $newType(8, $kindInterface, "antlr.CharStream", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	TokenFactory = $pkg.TokenFactory = $newType(8, $kindInterface, "antlr.TokenFactory", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	CommonTokenFactory = $pkg.CommonTokenFactory = $newType(0, $kindStruct, "antlr.CommonTokenFactory", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(copyText_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.copyText = false;
			return;
		}
		this.copyText = copyText_;
	});
	CommonTokenStream = $pkg.CommonTokenStream = $newType(0, $kindStruct, "antlr.CommonTokenStream", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(channel_, fetchedEOF_, index_, tokenSource_, tokens_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.channel = 0;
			this.fetchedEOF = false;
			this.index = 0;
			this.tokenSource = $ifaceNil;
			this.tokens = sliceType$18.nil;
			return;
		}
		this.channel = channel_;
		this.fetchedEOF = fetchedEOF_;
		this.index = index_;
		this.tokenSource = tokenSource_;
		this.tokens = tokens_;
	});
	DFA = $pkg.DFA = $newType(0, $kindStruct, "antlr.DFA", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(atnStartState_, decision_, states_, statesMu_, s0_, s0Mu_, precedenceDfa_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.atnStartState = $ifaceNil;
			this.decision = 0;
			this.states = false;
			this.statesMu = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
			this.s0 = ptrType$30.nil;
			this.s0Mu = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
			this.precedenceDfa = false;
			return;
		}
		this.atnStartState = atnStartState_;
		this.decision = decision_;
		this.states = states_;
		this.statesMu = statesMu_;
		this.s0 = s0_;
		this.s0Mu = s0Mu_;
		this.precedenceDfa = precedenceDfa_;
	});
	dfaStateList = $pkg.dfaStateList = $newType(12, $kindSlice, "antlr.dfaStateList", true, "github.com/antlr/antlr4/runtime/Go/antlr", false, null);
	DFASerializer = $pkg.DFASerializer = $newType(0, $kindStruct, "antlr.DFASerializer", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(dfa_, literalNames_, symbolicNames_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.dfa = ptrType$25.nil;
			this.literalNames = sliceType.nil;
			this.symbolicNames = sliceType.nil;
			return;
		}
		this.dfa = dfa_;
		this.literalNames = literalNames_;
		this.symbolicNames = symbolicNames_;
	});
	LexerDFASerializer = $pkg.LexerDFASerializer = $newType(0, $kindStruct, "antlr.LexerDFASerializer", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(DFASerializer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.DFASerializer = ptrType$32.nil;
			return;
		}
		this.DFASerializer = DFASerializer_;
	});
	PredPrediction = $pkg.PredPrediction = $newType(0, $kindStruct, "antlr.PredPrediction", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(alt_, pred_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.alt = 0;
			this.pred = $ifaceNil;
			return;
		}
		this.alt = alt_;
		this.pred = pred_;
	});
	DFAState = $pkg.DFAState = $newType(0, $kindStruct, "antlr.DFAState", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(stateNumber_, configs_, edges_, isAcceptState_, prediction_, lexerActionExecutor_, requiresFullContext_, predicates_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.stateNumber = 0;
			this.configs = $ifaceNil;
			this.edges = sliceType$19.nil;
			this.isAcceptState = false;
			this.prediction = 0;
			this.lexerActionExecutor = ptrType$8.nil;
			this.requiresFullContext = false;
			this.predicates = sliceType$20.nil;
			return;
		}
		this.stateNumber = stateNumber_;
		this.configs = configs_;
		this.edges = edges_;
		this.isAcceptState = isAcceptState_;
		this.prediction = prediction_;
		this.lexerActionExecutor = lexerActionExecutor_;
		this.requiresFullContext = requiresFullContext_;
		this.predicates = predicates_;
	});
	ErrorListener = $pkg.ErrorListener = $newType(8, $kindInterface, "antlr.ErrorListener", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	DefaultErrorListener = $pkg.DefaultErrorListener = $newType(0, $kindStruct, "antlr.DefaultErrorListener", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	ConsoleErrorListener = $pkg.ConsoleErrorListener = $newType(0, $kindStruct, "antlr.ConsoleErrorListener", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(DefaultErrorListener_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.DefaultErrorListener = ptrType$33.nil;
			return;
		}
		this.DefaultErrorListener = DefaultErrorListener_;
	});
	ProxyErrorListener = $pkg.ProxyErrorListener = $newType(0, $kindStruct, "antlr.ProxyErrorListener", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(DefaultErrorListener_, delegates_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.DefaultErrorListener = ptrType$33.nil;
			this.delegates = sliceType$21.nil;
			return;
		}
		this.DefaultErrorListener = DefaultErrorListener_;
		this.delegates = delegates_;
	});
	ErrorStrategy = $pkg.ErrorStrategy = $newType(8, $kindInterface, "antlr.ErrorStrategy", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	DefaultErrorStrategy = $pkg.DefaultErrorStrategy = $newType(0, $kindStruct, "antlr.DefaultErrorStrategy", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(errorRecoveryMode_, lastErrorIndex_, lastErrorStates_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.errorRecoveryMode = false;
			this.lastErrorIndex = 0;
			this.lastErrorStates = ptrType.nil;
			return;
		}
		this.errorRecoveryMode = errorRecoveryMode_;
		this.lastErrorIndex = lastErrorIndex_;
		this.lastErrorStates = lastErrorStates_;
	});
	RecognitionException = $pkg.RecognitionException = $newType(8, $kindInterface, "antlr.RecognitionException", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	BaseRecognitionException = $pkg.BaseRecognitionException = $newType(0, $kindStruct, "antlr.BaseRecognitionException", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(message_, recognizer_, offendingToken_, offendingState_, ctx_, input_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.message = "";
			this.recognizer = $ifaceNil;
			this.offendingToken = $ifaceNil;
			this.offendingState = 0;
			this.ctx = $ifaceNil;
			this.input = $ifaceNil;
			return;
		}
		this.message = message_;
		this.recognizer = recognizer_;
		this.offendingToken = offendingToken_;
		this.offendingState = offendingState_;
		this.ctx = ctx_;
		this.input = input_;
	});
	LexerNoViableAltException = $pkg.LexerNoViableAltException = $newType(0, $kindStruct, "antlr.LexerNoViableAltException", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseRecognitionException_, startIndex_, deadEndConfigs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseRecognitionException = ptrType$37.nil;
			this.startIndex = 0;
			this.deadEndConfigs = $ifaceNil;
			return;
		}
		this.BaseRecognitionException = BaseRecognitionException_;
		this.startIndex = startIndex_;
		this.deadEndConfigs = deadEndConfigs_;
	});
	NoViableAltException = $pkg.NoViableAltException = $newType(0, $kindStruct, "antlr.NoViableAltException", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseRecognitionException_, startToken_, offendingToken_, ctx_, deadEndConfigs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseRecognitionException = ptrType$37.nil;
			this.startToken = $ifaceNil;
			this.offendingToken = $ifaceNil;
			this.ctx = $ifaceNil;
			this.deadEndConfigs = $ifaceNil;
			return;
		}
		this.BaseRecognitionException = BaseRecognitionException_;
		this.startToken = startToken_;
		this.offendingToken = offendingToken_;
		this.ctx = ctx_;
		this.deadEndConfigs = deadEndConfigs_;
	});
	InputMisMatchException = $pkg.InputMisMatchException = $newType(0, $kindStruct, "antlr.InputMisMatchException", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseRecognitionException_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseRecognitionException = ptrType$37.nil;
			return;
		}
		this.BaseRecognitionException = BaseRecognitionException_;
	});
	FailedPredicateException = $pkg.FailedPredicateException = $newType(0, $kindStruct, "antlr.FailedPredicateException", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseRecognitionException_, ruleIndex_, predicateIndex_, predicate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseRecognitionException = ptrType$37.nil;
			this.ruleIndex = 0;
			this.predicateIndex = 0;
			this.predicate = "";
			return;
		}
		this.BaseRecognitionException = BaseRecognitionException_;
		this.ruleIndex = ruleIndex_;
		this.predicateIndex = predicateIndex_;
		this.predicate = predicate_;
	});
	InputStream = $pkg.InputStream = $newType(0, $kindStruct, "antlr.InputStream", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(name_, index_, data_, size_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.index = 0;
			this.data = sliceType$11.nil;
			this.size = 0;
			return;
		}
		this.name = name_;
		this.index = index_;
		this.data = data_;
		this.size = size_;
	});
	IntStream = $pkg.IntStream = $newType(8, $kindInterface, "antlr.IntStream", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	Interval = $pkg.Interval = $newType(0, $kindStruct, "antlr.Interval", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(Start_, Stop_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Start = 0;
			this.Stop = 0;
			return;
		}
		this.Start = Start_;
		this.Stop = Stop_;
	});
	IntervalSet = $pkg.IntervalSet = $newType(0, $kindStruct, "antlr.IntervalSet", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(intervals_, readOnly_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.intervals = sliceType$22.nil;
			this.readOnly = false;
			return;
		}
		this.intervals = intervals_;
		this.readOnly = readOnly_;
	});
	Lexer = $pkg.Lexer = $newType(8, $kindInterface, "antlr.Lexer", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	BaseLexer = $pkg.BaseLexer = $newType(0, $kindStruct, "antlr.BaseLexer", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseRecognizer_, Interpreter_, TokenStartCharIndex_, TokenStartLine_, TokenStartColumn_, ActionType_, Virt_, input_, factory_, tokenFactorySourcePair_, token_, hitEOF_, channel_, thetype_, modeStack_, mode_, text_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseRecognizer = ptrType$41.nil;
			this.Interpreter = $ifaceNil;
			this.TokenStartCharIndex = 0;
			this.TokenStartLine = 0;
			this.TokenStartColumn = 0;
			this.ActionType = 0;
			this.Virt = $ifaceNil;
			this.input = $ifaceNil;
			this.factory = $ifaceNil;
			this.tokenFactorySourcePair = ptrType$28.nil;
			this.token = $ifaceNil;
			this.hitEOF = false;
			this.channel = 0;
			this.thetype = 0;
			this.modeStack = IntStack.nil;
			this.mode = 0;
			this.text = "";
			return;
		}
		this.BaseRecognizer = BaseRecognizer_;
		this.Interpreter = Interpreter_;
		this.TokenStartCharIndex = TokenStartCharIndex_;
		this.TokenStartLine = TokenStartLine_;
		this.TokenStartColumn = TokenStartColumn_;
		this.ActionType = ActionType_;
		this.Virt = Virt_;
		this.input = input_;
		this.factory = factory_;
		this.tokenFactorySourcePair = tokenFactorySourcePair_;
		this.token = token_;
		this.hitEOF = hitEOF_;
		this.channel = channel_;
		this.thetype = thetype_;
		this.modeStack = modeStack_;
		this.mode = mode_;
		this.text = text_;
	});
	LexerAction = $pkg.LexerAction = $newType(8, $kindInterface, "antlr.LexerAction", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	BaseLexerAction = $pkg.BaseLexerAction = $newType(0, $kindStruct, "antlr.BaseLexerAction", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(actionType_, isPositionDependent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.actionType = 0;
			this.isPositionDependent = false;
			return;
		}
		this.actionType = actionType_;
		this.isPositionDependent = isPositionDependent_;
	});
	LexerSkipAction = $pkg.LexerSkipAction = $newType(0, $kindStruct, "antlr.LexerSkipAction", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseLexerAction_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseLexerAction = ptrType$44.nil;
			return;
		}
		this.BaseLexerAction = BaseLexerAction_;
	});
	LexerTypeAction = $pkg.LexerTypeAction = $newType(0, $kindStruct, "antlr.LexerTypeAction", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseLexerAction_, thetype_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseLexerAction = ptrType$44.nil;
			this.thetype = 0;
			return;
		}
		this.BaseLexerAction = BaseLexerAction_;
		this.thetype = thetype_;
	});
	LexerPushModeAction = $pkg.LexerPushModeAction = $newType(0, $kindStruct, "antlr.LexerPushModeAction", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseLexerAction_, mode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseLexerAction = ptrType$44.nil;
			this.mode = 0;
			return;
		}
		this.BaseLexerAction = BaseLexerAction_;
		this.mode = mode_;
	});
	LexerPopModeAction = $pkg.LexerPopModeAction = $newType(0, $kindStruct, "antlr.LexerPopModeAction", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseLexerAction_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseLexerAction = ptrType$44.nil;
			return;
		}
		this.BaseLexerAction = BaseLexerAction_;
	});
	LexerMoreAction = $pkg.LexerMoreAction = $newType(0, $kindStruct, "antlr.LexerMoreAction", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseLexerAction_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseLexerAction = ptrType$44.nil;
			return;
		}
		this.BaseLexerAction = BaseLexerAction_;
	});
	LexerModeAction = $pkg.LexerModeAction = $newType(0, $kindStruct, "antlr.LexerModeAction", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseLexerAction_, mode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseLexerAction = ptrType$44.nil;
			this.mode = 0;
			return;
		}
		this.BaseLexerAction = BaseLexerAction_;
		this.mode = mode_;
	});
	LexerCustomAction = $pkg.LexerCustomAction = $newType(0, $kindStruct, "antlr.LexerCustomAction", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseLexerAction_, ruleIndex_, actionIndex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseLexerAction = ptrType$44.nil;
			this.ruleIndex = 0;
			this.actionIndex = 0;
			return;
		}
		this.BaseLexerAction = BaseLexerAction_;
		this.ruleIndex = ruleIndex_;
		this.actionIndex = actionIndex_;
	});
	LexerChannelAction = $pkg.LexerChannelAction = $newType(0, $kindStruct, "antlr.LexerChannelAction", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseLexerAction_, channel_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseLexerAction = ptrType$44.nil;
			this.channel = 0;
			return;
		}
		this.BaseLexerAction = BaseLexerAction_;
		this.channel = channel_;
	});
	LexerIndexedCustomAction = $pkg.LexerIndexedCustomAction = $newType(0, $kindStruct, "antlr.LexerIndexedCustomAction", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseLexerAction_, offset_, lexerAction_, isPositionDependent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseLexerAction = ptrType$44.nil;
			this.offset = 0;
			this.lexerAction = $ifaceNil;
			this.isPositionDependent = false;
			return;
		}
		this.BaseLexerAction = BaseLexerAction_;
		this.offset = offset_;
		this.lexerAction = lexerAction_;
		this.isPositionDependent = isPositionDependent_;
	});
	LexerActionExecutor = $pkg.LexerActionExecutor = $newType(0, $kindStruct, "antlr.LexerActionExecutor", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(lexerActions_, cachedHash_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lexerActions = sliceType$2.nil;
			this.cachedHash = 0;
			return;
		}
		this.lexerActions = lexerActions_;
		this.cachedHash = cachedHash_;
	});
	ILexerATNSimulator = $pkg.ILexerATNSimulator = $newType(8, $kindInterface, "antlr.ILexerATNSimulator", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	LexerATNSimulator = $pkg.LexerATNSimulator = $newType(0, $kindStruct, "antlr.LexerATNSimulator", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseATNSimulator_, recog_, predictionMode_, mergeCache_, startIndex_, Line_, CharPositionInLine_, mode_, prevAccept_, MatchCalls_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseATNSimulator = ptrType$52.nil;
			this.recog = $ifaceNil;
			this.predictionMode = 0;
			this.mergeCache = new DoubleDict.ptr(false);
			this.startIndex = 0;
			this.Line = 0;
			this.CharPositionInLine = 0;
			this.mode = 0;
			this.prevAccept = ptrType$53.nil;
			this.MatchCalls = 0;
			return;
		}
		this.BaseATNSimulator = BaseATNSimulator_;
		this.recog = recog_;
		this.predictionMode = predictionMode_;
		this.mergeCache = mergeCache_;
		this.startIndex = startIndex_;
		this.Line = Line_;
		this.CharPositionInLine = CharPositionInLine_;
		this.mode = mode_;
		this.prevAccept = prevAccept_;
		this.MatchCalls = MatchCalls_;
	});
	SimState = $pkg.SimState = $newType(0, $kindStruct, "antlr.SimState", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(index_, line_, column_, dfaState_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.index = 0;
			this.line = 0;
			this.column = 0;
			this.dfaState = ptrType$30.nil;
			return;
		}
		this.index = index_;
		this.line = line_;
		this.column = column_;
		this.dfaState = dfaState_;
	});
	LL1Analyzer = $pkg.LL1Analyzer = $newType(0, $kindStruct, "antlr.LL1Analyzer", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(atn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.atn = ptrType$23.nil;
			return;
		}
		this.atn = atn_;
	});
	Parser = $pkg.Parser = $newType(8, $kindInterface, "antlr.Parser", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	BaseParser = $pkg.BaseParser = $newType(0, $kindStruct, "antlr.BaseParser", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseRecognizer_, Interpreter_, BuildParseTrees_, input_, errHandler_, precedenceStack_, ctx_, tracer_, parseListeners_, _SyntaxErrors_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseRecognizer = ptrType$41.nil;
			this.Interpreter = ptrType$57.nil;
			this.BuildParseTrees = false;
			this.input = $ifaceNil;
			this.errHandler = $ifaceNil;
			this.precedenceStack = IntStack.nil;
			this.ctx = $ifaceNil;
			this.tracer = ptrType$58.nil;
			this.parseListeners = sliceType$23.nil;
			this._SyntaxErrors = 0;
			return;
		}
		this.BaseRecognizer = BaseRecognizer_;
		this.Interpreter = Interpreter_;
		this.BuildParseTrees = BuildParseTrees_;
		this.input = input_;
		this.errHandler = errHandler_;
		this.precedenceStack = precedenceStack_;
		this.ctx = ctx_;
		this.tracer = tracer_;
		this.parseListeners = parseListeners_;
		this._SyntaxErrors = _SyntaxErrors_;
	});
	ParserATNSimulator = $pkg.ParserATNSimulator = $newType(0, $kindStruct, "antlr.ParserATNSimulator", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseATNSimulator_, parser_, predictionMode_, input_, startIndex_, dfa_, mergeCache_, outerContext_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseATNSimulator = ptrType$52.nil;
			this.parser = $ifaceNil;
			this.predictionMode = 0;
			this.input = $ifaceNil;
			this.startIndex = 0;
			this.dfa = ptrType$25.nil;
			this.mergeCache = ptrType$12.nil;
			this.outerContext = $ifaceNil;
			return;
		}
		this.BaseATNSimulator = BaseATNSimulator_;
		this.parser = parser_;
		this.predictionMode = predictionMode_;
		this.input = input_;
		this.startIndex = startIndex_;
		this.dfa = dfa_;
		this.mergeCache = mergeCache_;
		this.outerContext = outerContext_;
	});
	ParserRuleContext = $pkg.ParserRuleContext = $newType(8, $kindInterface, "antlr.ParserRuleContext", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	BaseParserRuleContext = $pkg.BaseParserRuleContext = $newType(0, $kindStruct, "antlr.BaseParserRuleContext", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseRuleContext_, start_, stop_, exception_, children_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseRuleContext = ptrType$61.nil;
			this.start = $ifaceNil;
			this.stop = $ifaceNil;
			this.exception = $ifaceNil;
			this.children = sliceType$26.nil;
			return;
		}
		this.BaseRuleContext = BaseRuleContext_;
		this.start = start_;
		this.stop = stop_;
		this.exception = exception_;
		this.children = children_;
	});
	PredictionContext = $pkg.PredictionContext = $newType(8, $kindInterface, "antlr.PredictionContext", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	BasePredictionContext = $pkg.BasePredictionContext = $newType(0, $kindStruct, "antlr.BasePredictionContext", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(cachedHash_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.cachedHash = 0;
			return;
		}
		this.cachedHash = cachedHash_;
	});
	PredictionContextCache = $pkg.PredictionContextCache = $newType(0, $kindStruct, "antlr.PredictionContextCache", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(cache_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.cache = false;
			return;
		}
		this.cache = cache_;
	});
	BaseSingletonPredictionContext = $pkg.BaseSingletonPredictionContext = $newType(0, $kindStruct, "antlr.BaseSingletonPredictionContext", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BasePredictionContext_, parentCtx_, returnState_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasePredictionContext = ptrType$63.nil;
			this.parentCtx = $ifaceNil;
			this.returnState = 0;
			return;
		}
		this.BasePredictionContext = BasePredictionContext_;
		this.parentCtx = parentCtx_;
		this.returnState = returnState_;
	});
	EmptyPredictionContext = $pkg.EmptyPredictionContext = $newType(0, $kindStruct, "antlr.EmptyPredictionContext", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseSingletonPredictionContext_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseSingletonPredictionContext = ptrType$64.nil;
			return;
		}
		this.BaseSingletonPredictionContext = BaseSingletonPredictionContext_;
	});
	ArrayPredictionContext = $pkg.ArrayPredictionContext = $newType(0, $kindStruct, "antlr.ArrayPredictionContext", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BasePredictionContext_, parents_, returnStates_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BasePredictionContext = ptrType$63.nil;
			this.parents = sliceType$29.nil;
			this.returnStates = sliceType$6.nil;
			return;
		}
		this.BasePredictionContext = BasePredictionContext_;
		this.parents = parents_;
		this.returnStates = returnStates_;
	});
	Recognizer = $pkg.Recognizer = $newType(8, $kindInterface, "antlr.Recognizer", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	BaseRecognizer = $pkg.BaseRecognizer = $newType(0, $kindStruct, "antlr.BaseRecognizer", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(listeners_, state_, RuleNames_, LiteralNames_, SymbolicNames_, GrammarFileName_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.listeners = sliceType$21.nil;
			this.state = 0;
			this.RuleNames = sliceType.nil;
			this.LiteralNames = sliceType.nil;
			this.SymbolicNames = sliceType.nil;
			this.GrammarFileName = "";
			return;
		}
		this.listeners = listeners_;
		this.state = state_;
		this.RuleNames = RuleNames_;
		this.LiteralNames = LiteralNames_;
		this.SymbolicNames = SymbolicNames_;
		this.GrammarFileName = GrammarFileName_;
	});
	RuleContext = $pkg.RuleContext = $newType(8, $kindInterface, "antlr.RuleContext", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	BaseRuleContext = $pkg.BaseRuleContext = $newType(0, $kindStruct, "antlr.BaseRuleContext", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(parentCtx_, invokingState_, RuleIndex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.parentCtx = $ifaceNil;
			this.invokingState = 0;
			this.RuleIndex = 0;
			return;
		}
		this.parentCtx = parentCtx_;
		this.invokingState = invokingState_;
		this.RuleIndex = RuleIndex_;
	});
	SemanticContext = $pkg.SemanticContext = $newType(8, $kindInterface, "antlr.SemanticContext", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	Predicate = $pkg.Predicate = $newType(0, $kindStruct, "antlr.Predicate", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(ruleIndex_, predIndex_, isCtxDependent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ruleIndex = 0;
			this.predIndex = 0;
			this.isCtxDependent = false;
			return;
		}
		this.ruleIndex = ruleIndex_;
		this.predIndex = predIndex_;
		this.isCtxDependent = isCtxDependent_;
	});
	PrecedencePredicate = $pkg.PrecedencePredicate = $newType(0, $kindStruct, "antlr.PrecedencePredicate", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(precedence_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.precedence = 0;
			return;
		}
		this.precedence = precedence_;
	});
	AND = $pkg.AND = $newType(0, $kindStruct, "antlr.AND", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(opnds_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.opnds = sliceType$10.nil;
			return;
		}
		this.opnds = opnds_;
	});
	OR = $pkg.OR = $newType(0, $kindStruct, "antlr.OR", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(opnds_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.opnds = sliceType$10.nil;
			return;
		}
		this.opnds = opnds_;
	});
	TokenSourceCharStreamPair = $pkg.TokenSourceCharStreamPair = $newType(0, $kindStruct, "antlr.TokenSourceCharStreamPair", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(tokenSource_, charStream_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.tokenSource = $ifaceNil;
			this.charStream = $ifaceNil;
			return;
		}
		this.tokenSource = tokenSource_;
		this.charStream = charStream_;
	});
	Token = $pkg.Token = $newType(8, $kindInterface, "antlr.Token", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	BaseToken = $pkg.BaseToken = $newType(0, $kindStruct, "antlr.BaseToken", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(source_, tokenType_, channel_, start_, stop_, tokenIndex_, line_, column_, text_, readOnly_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.source = ptrType$28.nil;
			this.tokenType = 0;
			this.channel = 0;
			this.start = 0;
			this.stop = 0;
			this.tokenIndex = 0;
			this.line = 0;
			this.column = 0;
			this.text = "";
			this.readOnly = false;
			return;
		}
		this.source = source_;
		this.tokenType = tokenType_;
		this.channel = channel_;
		this.start = start_;
		this.stop = stop_;
		this.tokenIndex = tokenIndex_;
		this.line = line_;
		this.column = column_;
		this.text = text_;
		this.readOnly = readOnly_;
	});
	CommonToken = $pkg.CommonToken = $newType(0, $kindStruct, "antlr.CommonToken", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseToken_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseToken = ptrType$73.nil;
			return;
		}
		this.BaseToken = BaseToken_;
	});
	TokenSource = $pkg.TokenSource = $newType(8, $kindInterface, "antlr.TokenSource", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	TokenStream = $pkg.TokenStream = $newType(8, $kindInterface, "antlr.TokenStream", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	TraceListener = $pkg.TraceListener = $newType(0, $kindStruct, "antlr.TraceListener", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(parser_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.parser = ptrType$77.nil;
			return;
		}
		this.parser = parser_;
	});
	Transition = $pkg.Transition = $newType(8, $kindInterface, "antlr.Transition", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	BaseTransition = $pkg.BaseTransition = $newType(0, $kindStruct, "antlr.BaseTransition", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(target_, isEpsilon_, label_, intervalSet_, serializationType_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.target = $ifaceNil;
			this.isEpsilon = false;
			this.label = 0;
			this.intervalSet = ptrType.nil;
			this.serializationType = 0;
			return;
		}
		this.target = target_;
		this.isEpsilon = isEpsilon_;
		this.label = label_;
		this.intervalSet = intervalSet_;
		this.serializationType = serializationType_;
	});
	AtomTransition = $pkg.AtomTransition = $newType(0, $kindStruct, "antlr.AtomTransition", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseTransition_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseTransition = ptrType$78.nil;
			return;
		}
		this.BaseTransition = BaseTransition_;
	});
	RuleTransition = $pkg.RuleTransition = $newType(0, $kindStruct, "antlr.RuleTransition", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseTransition_, followState_, ruleIndex_, precedence_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseTransition = ptrType$78.nil;
			this.followState = $ifaceNil;
			this.ruleIndex = 0;
			this.precedence = 0;
			return;
		}
		this.BaseTransition = BaseTransition_;
		this.followState = followState_;
		this.ruleIndex = ruleIndex_;
		this.precedence = precedence_;
	});
	EpsilonTransition = $pkg.EpsilonTransition = $newType(0, $kindStruct, "antlr.EpsilonTransition", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseTransition_, outermostPrecedenceReturn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseTransition = ptrType$78.nil;
			this.outermostPrecedenceReturn = 0;
			return;
		}
		this.BaseTransition = BaseTransition_;
		this.outermostPrecedenceReturn = outermostPrecedenceReturn_;
	});
	RangeTransition = $pkg.RangeTransition = $newType(0, $kindStruct, "antlr.RangeTransition", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseTransition_, start_, stop_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseTransition = ptrType$78.nil;
			this.start = 0;
			this.stop = 0;
			return;
		}
		this.BaseTransition = BaseTransition_;
		this.start = start_;
		this.stop = stop_;
	});
	AbstractPredicateTransition = $pkg.AbstractPredicateTransition = $newType(8, $kindInterface, "antlr.AbstractPredicateTransition", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	BaseAbstractPredicateTransition = $pkg.BaseAbstractPredicateTransition = $newType(0, $kindStruct, "antlr.BaseAbstractPredicateTransition", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseTransition_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseTransition = ptrType$78.nil;
			return;
		}
		this.BaseTransition = BaseTransition_;
	});
	PredicateTransition = $pkg.PredicateTransition = $newType(0, $kindStruct, "antlr.PredicateTransition", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseAbstractPredicateTransition_, isCtxDependent_, ruleIndex_, predIndex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseAbstractPredicateTransition = ptrType$79.nil;
			this.isCtxDependent = false;
			this.ruleIndex = 0;
			this.predIndex = 0;
			return;
		}
		this.BaseAbstractPredicateTransition = BaseAbstractPredicateTransition_;
		this.isCtxDependent = isCtxDependent_;
		this.ruleIndex = ruleIndex_;
		this.predIndex = predIndex_;
	});
	ActionTransition = $pkg.ActionTransition = $newType(0, $kindStruct, "antlr.ActionTransition", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseTransition_, isCtxDependent_, ruleIndex_, actionIndex_, predIndex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseTransition = ptrType$78.nil;
			this.isCtxDependent = false;
			this.ruleIndex = 0;
			this.actionIndex = 0;
			this.predIndex = 0;
			return;
		}
		this.BaseTransition = BaseTransition_;
		this.isCtxDependent = isCtxDependent_;
		this.ruleIndex = ruleIndex_;
		this.actionIndex = actionIndex_;
		this.predIndex = predIndex_;
	});
	SetTransition = $pkg.SetTransition = $newType(0, $kindStruct, "antlr.SetTransition", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseTransition_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseTransition = ptrType$78.nil;
			return;
		}
		this.BaseTransition = BaseTransition_;
	});
	NotSetTransition = $pkg.NotSetTransition = $newType(0, $kindStruct, "antlr.NotSetTransition", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(SetTransition_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.SetTransition = ptrType$80.nil;
			return;
		}
		this.SetTransition = SetTransition_;
	});
	WildcardTransition = $pkg.WildcardTransition = $newType(0, $kindStruct, "antlr.WildcardTransition", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseTransition_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseTransition = ptrType$78.nil;
			return;
		}
		this.BaseTransition = BaseTransition_;
	});
	PrecedencePredicateTransition = $pkg.PrecedencePredicateTransition = $newType(0, $kindStruct, "antlr.PrecedencePredicateTransition", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(BaseAbstractPredicateTransition_, precedence_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseAbstractPredicateTransition = ptrType$79.nil;
			this.precedence = 0;
			return;
		}
		this.BaseAbstractPredicateTransition = BaseAbstractPredicateTransition_;
		this.precedence = precedence_;
	});
	Tree = $pkg.Tree = $newType(8, $kindInterface, "antlr.Tree", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	ParseTree = $pkg.ParseTree = $newType(8, $kindInterface, "antlr.ParseTree", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	RuleNode = $pkg.RuleNode = $newType(8, $kindInterface, "antlr.RuleNode", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	TerminalNode = $pkg.TerminalNode = $newType(8, $kindInterface, "antlr.TerminalNode", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	ErrorNode = $pkg.ErrorNode = $newType(8, $kindInterface, "antlr.ErrorNode", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	ParseTreeVisitor = $pkg.ParseTreeVisitor = $newType(8, $kindInterface, "antlr.ParseTreeVisitor", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	ParseTreeListener = $pkg.ParseTreeListener = $newType(8, $kindInterface, "antlr.ParseTreeListener", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	TerminalNodeImpl = $pkg.TerminalNodeImpl = $newType(0, $kindStruct, "antlr.TerminalNodeImpl", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(parentCtx_, symbol_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.parentCtx = $ifaceNil;
			this.symbol = $ifaceNil;
			return;
		}
		this.parentCtx = parentCtx_;
		this.symbol = symbol_;
	});
	ErrorNodeImpl = $pkg.ErrorNodeImpl = $newType(0, $kindStruct, "antlr.ErrorNodeImpl", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(TerminalNodeImpl_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.TerminalNodeImpl = ptrType$2.nil;
			return;
		}
		this.TerminalNodeImpl = TerminalNodeImpl_;
	});
	ParseTreeWalker = $pkg.ParseTreeWalker = $newType(0, $kindStruct, "antlr.ParseTreeWalker", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	IntStack = $pkg.IntStack = $newType(12, $kindSlice, "antlr.IntStack", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, null);
	Set = $pkg.Set = $newType(0, $kindStruct, "antlr.Set", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(data_, hashcodeFunction_, equalsFunction_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.data = false;
			this.hashcodeFunction = $throwNilPointerError;
			this.equalsFunction = $throwNilPointerError;
			return;
		}
		this.data = data_;
		this.hashcodeFunction = hashcodeFunction_;
		this.equalsFunction = equalsFunction_;
	});
	hasher = $pkg.hasher = $newType(8, $kindInterface, "antlr.hasher", true, "github.com/antlr/antlr4/runtime/Go/antlr", false, null);
	BitSet = $pkg.BitSet = $newType(0, $kindStruct, "antlr.BitSet", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(data_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.data = false;
			return;
		}
		this.data = data_;
	});
	AltDict = $pkg.AltDict = $newType(0, $kindStruct, "antlr.AltDict", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(data_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.data = false;
			return;
		}
		this.data = data_;
	});
	DoubleDict = $pkg.DoubleDict = $newType(0, $kindStruct, "antlr.DoubleDict", true, "github.com/antlr/antlr4/runtime/Go/antlr", true, function(data_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.data = false;
			return;
		}
		this.data = data_;
	});
	sliceType = $sliceType($String);
	ptrType = $ptrType(IntervalSet);
	ptrType$1 = $ptrType(DefaultErrorStrategy);
	ptrType$2 = $ptrType(TerminalNodeImpl);
	sliceType$1 = $sliceType(DecisionState);
	sliceType$2 = $sliceType(LexerAction);
	ptrType$3 = $ptrType(TokensStartState);
	sliceType$3 = $sliceType(ptrType$3);
	ptrType$4 = $ptrType(RuleStartState);
	sliceType$4 = $sliceType(ptrType$4);
	ptrType$5 = $ptrType(RuleStopState);
	sliceType$5 = $sliceType(ptrType$5);
	sliceType$6 = $sliceType($Int);
	sliceType$7 = $sliceType(ATNState);
	ptrType$6 = $ptrType(RuleTransition);
	ptrType$7 = $ptrType(BaseATNConfig);
	sliceType$8 = $sliceType($emptyInterface);
	ptrType$8 = $ptrType(LexerActionExecutor);
	ptrType$9 = $ptrType(LexerATNConfig);
	ptrType$10 = $ptrType(Set);
	sliceType$9 = $sliceType(ATNConfig);
	ptrType$11 = $ptrType(BitSet);
	sliceType$10 = $sliceType(SemanticContext);
	ptrType$12 = $ptrType(DoubleDict);
	ptrType$13 = $ptrType(BaseATNConfigSet);
	ptrType$14 = $ptrType(ATNDeserializationOptions);
	sliceType$11 = $sliceType($Int32);
	sliceType$12 = $sliceType(ptrType);
	sliceType$13 = $sliceType(LoopEndStateIntPair);
	sliceType$14 = $sliceType(BlockStartStateIntPair);
	ptrType$15 = $ptrType(LoopEndState);
	ptrType$16 = $ptrType(BlockEndState);
	ptrType$17 = $ptrType(BaseBlockStartState);
	ptrType$18 = $ptrType(PlusLoopbackState);
	ptrType$19 = $ptrType(PlusBlockStartState);
	ptrType$20 = $ptrType(StarLoopbackState);
	ptrType$21 = $ptrType(StarLoopEntryState);
	sliceType$15 = $sliceType(Transition);
	ptrType$22 = $ptrType(StarBlockStartState);
	sliceType$16 = $sliceType($Uint8);
	ptrType$23 = $ptrType(ATN);
	ptrType$24 = $ptrType(PredictionContextCache);
	ptrType$25 = $ptrType(DFA);
	sliceType$17 = $sliceType(ptrType$25);
	ptrType$26 = $ptrType(BaseATNState);
	ptrType$27 = $ptrType(BaseDecisionState);
	ptrType$28 = $ptrType(TokenSourceCharStreamPair);
	sliceType$18 = $sliceType(Token);
	ptrType$29 = $ptrType(Interval);
	ptrType$30 = $ptrType(DFAState);
	sliceType$19 = $sliceType(ptrType$30);
	ptrType$31 = $ptrType(PredPrediction);
	sliceType$20 = $sliceType(ptrType$31);
	ptrType$32 = $ptrType(DFASerializer);
	ptrType$33 = $ptrType(DefaultErrorListener);
	sliceType$21 = $sliceType(ErrorListener);
	ptrType$34 = $ptrType(NoViableAltException);
	ptrType$35 = $ptrType(InputMisMatchException);
	ptrType$36 = $ptrType(FailedPredicateException);
	ptrType$37 = $ptrType(BaseRecognitionException);
	ptrType$38 = $ptrType(PredicateTransition);
	ptrType$40 = $ptrType(InputStream);
	sliceType$22 = $sliceType(ptrType$29);
	ptrType$41 = $ptrType(BaseRecognizer);
	ptrType$42 = $ptrType(IntStack);
	ptrType$43 = $ptrType(LexerNoViableAltException);
	ptrType$44 = $ptrType(BaseLexerAction);
	ptrType$45 = $ptrType(LexerTypeAction);
	ptrType$46 = $ptrType(LexerPushModeAction);
	ptrType$47 = $ptrType(LexerModeAction);
	ptrType$48 = $ptrType(LexerCustomAction);
	ptrType$49 = $ptrType(LexerChannelAction);
	ptrType$50 = $ptrType(LexerIndexedCustomAction);
	ptrType$51 = $ptrType(sliceType$2);
	ptrType$52 = $ptrType(BaseATNSimulator);
	ptrType$53 = $ptrType(SimState);
	ptrType$54 = $ptrType(ActionTransition);
	ptrType$55 = $ptrType(WildcardTransition);
	ptrType$56 = $ptrType(NotSetTransition);
	ptrType$57 = $ptrType(ParserATNSimulator);
	ptrType$58 = $ptrType(TraceListener);
	sliceType$23 = $sliceType(ParseTreeListener);
	sliceType$24 = $sliceType(ptrType$7);
	sliceType$25 = $sliceType(ATNConfigSet);
	ptrType$59 = $ptrType(EpsilonTransition);
	ptrType$60 = $ptrType(PrecedencePredicateTransition);
	ptrType$61 = $ptrType(BaseRuleContext);
	sliceType$26 = $sliceType(Tree);
	sliceType$27 = $sliceType(TerminalNode);
	sliceType$28 = $sliceType(RuleContext);
	ptrType$62 = $ptrType(BaseParserRuleContext);
	ptrType$63 = $ptrType(BasePredictionContext);
	ptrType$64 = $ptrType(BaseSingletonPredictionContext);
	sliceType$29 = $sliceType(PredictionContext);
	ptrType$65 = $ptrType(ArrayPredictionContext);
	ptrType$66 = $ptrType(sliceType$6);
	ptrType$67 = $ptrType(sliceType$29);
	ptrType$68 = $ptrType(EmptyPredictionContext);
	sliceType$30 = $sliceType(ptrType$11);
	ptrType$69 = $ptrType(Predicate);
	ptrType$70 = $ptrType(PrecedencePredicate);
	sliceType$31 = $sliceType(ptrType$70);
	ptrType$71 = $ptrType(AND);
	ptrType$72 = $ptrType(OR);
	ptrType$73 = $ptrType(BaseToken);
	ptrType$77 = $ptrType(BaseParser);
	ptrType$78 = $ptrType(BaseTransition);
	ptrType$79 = $ptrType(BaseAbstractPredicateTransition);
	ptrType$80 = $ptrType(SetTransition);
	mapType = $mapType($String, ptrType$3);
	sliceType$34 = $sliceType($Uint16);
	funcType = $funcType([], [$Int], false);
	ptrType$81 = $ptrType(ATNDeserializer);
	ptrType$82 = $ptrType(CommonTokenFactory);
	ptrType$83 = $ptrType(CommonTokenStream);
	mapType$1 = $mapType($Int, ptrType$30);
	ptrType$84 = $ptrType(LexerDFASerializer);
	ptrType$86 = $ptrType(ConsoleErrorListener);
	ptrType$87 = $ptrType(ProxyErrorListener);
	ptrType$89 = $ptrType(BaseLexer);
	ptrType$90 = $ptrType(LexerSkipAction);
	ptrType$91 = $ptrType(LexerPopModeAction);
	ptrType$92 = $ptrType(LexerMoreAction);
	ptrType$93 = $ptrType(LexerATNSimulator);
	ptrType$94 = $ptrType(OrderedATNConfigSet);
	ptrType$95 = $ptrType(LL1Analyzer);
	ptrType$96 = $ptrType(ErrorNodeImpl);
	mapType$2 = $mapType(PredictionContext, PredictionContext);
	mapType$3 = $mapType($String, $Int);
	ptrType$97 = $ptrType(CommonToken);
	ptrType$101 = $ptrType(AtomTransition);
	ptrType$102 = $ptrType(RangeTransition);
	ptrType$105 = $ptrType(ParseTreeWalker);
	mapType$5 = $mapType($Int, sliceType$8);
	funcType$1 = $funcType([$emptyInterface], [$Int], false);
	funcType$2 = $funcType([$emptyInterface, $emptyInterface], [$Bool], false);
	mapType$6 = $mapType($Int, $Bool);
	ptrType$106 = $ptrType(AltDict);
	mapType$7 = $mapType($String, $emptyInterface);
	mapType$8 = $mapType($Int, $emptyInterface);
	mapType$9 = $mapType($Int, mapType$8);
	NewATN = function(grammarType, maxTokenType) {
		var grammarType, maxTokenType;
		return new ATN.ptr(sliceType$1.nil, grammarType, sliceType$2.nil, maxTokenType, {}, sliceType$3.nil, sliceType$4.nil, sliceType$5.nil, sliceType$6.nil, sliceType$7.nil);
	};
	$pkg.NewATN = NewATN;
	ATN.ptr.prototype.NextTokensInContext = function(s, ctx) {
		var _r$2, a, ctx, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; a = $f.a; ctx = $f.ctx; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_r$2 = NewLL1Analyzer(a).Look(s, $ifaceNil, ctx); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ATN.ptr.prototype.NextTokensInContext }; } $f._r$2 = _r$2; $f.a = a; $f.ctx = ctx; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ATN.prototype.NextTokensInContext = function(s, ctx) { return this.$val.NextTokensInContext(s, ctx); };
	ATN.ptr.prototype.NextTokensNoContext = function(s) {
		var _r$2, _r$3, _r$4, _r$5, _r$6, a, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; a = $f.a; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_r$2 = s.GetNextTokenWithinRule(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (!(_r$2 === ptrType.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(_r$2 === ptrType.nil)) { */ case 1:
			_r$3 = s.GetNextTokenWithinRule(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		_r$4 = a.NextTokensInContext(s, $ifaceNil); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$r = s.SetNextTokenWithinRule(_r$4); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$5 = s.GetNextTokenWithinRule(); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5.readOnly = true;
		_r$6 = s.GetNextTokenWithinRule(); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ATN.ptr.prototype.NextTokensNoContext }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.a = a; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ATN.prototype.NextTokensNoContext = function(s) { return this.$val.NextTokensNoContext(s); };
	ATN.ptr.prototype.NextTokens = function(s, ctx) {
		var _r$2, _r$3, a, ctx, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; a = $f.a; ctx = $f.ctx; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		/* */ if ($interfaceIsEqual(ctx, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(ctx, $ifaceNil)) { */ case 1:
			_r$2 = a.NextTokensNoContext(s); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } */ case 2:
		_r$3 = a.NextTokensInContext(s, ctx); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ATN.ptr.prototype.NextTokens }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.a = a; $f.ctx = ctx; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ATN.prototype.NextTokens = function(s, ctx) { return this.$val.NextTokens(s, ctx); };
	ATN.ptr.prototype.addState = function(state) {
		var a, state, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		/* */ if (!($interfaceIsEqual(state, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(state, $ifaceNil))) { */ case 1:
			$r = state.SetATN(a); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = state.SetStateNumber(a.states.$length); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		a.states = $append(a.states, state);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ATN.ptr.prototype.addState }; } $f.a = a; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
	};
	ATN.prototype.addState = function(state) { return this.$val.addState(state); };
	ATN.ptr.prototype.defineDecisionState = function(s) {
		var _r$2, a, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; a = $f.a; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		a.DecisionToState = $append(a.DecisionToState, s);
		$r = s.setDecision(a.DecisionToState.$length - 1 >> 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$2 = s.getDecision(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ATN.ptr.prototype.defineDecisionState }; } $f._r$2 = _r$2; $f.a = a; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ATN.prototype.defineDecisionState = function(s) { return this.$val.defineDecisionState(s); };
	ATN.ptr.prototype.getDecisionState = function(decision) {
		var a, decision, x;
		a = this;
		if (a.DecisionToState.$length === 0) {
			return $ifaceNil;
		}
		return (x = a.DecisionToState, ((decision < 0 || decision >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + decision]));
	};
	ATN.prototype.getDecisionState = function(decision) { return this.$val.getDecisionState(decision); };
	ATN.ptr.prototype.getExpectedTokens = function(stateNumber, ctx) {
		var _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _v, a, ctx, expected, following, invokingState, rt, s, stateNumber, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _v = $f._v; a = $f.a; ctx = $f.ctx; expected = $f.expected; following = $f.following; invokingState = $f.invokingState; rt = $f.rt; s = $f.s; stateNumber = $f.stateNumber; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		if (stateNumber < 0 || stateNumber >= a.states.$length) {
			$panic(new $String("Invalid state number."));
		}
		s = (x = a.states, ((stateNumber < 0 || stateNumber >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + stateNumber]));
		_r$2 = a.NextTokens(s, $ifaceNil); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		following = _r$2;
		if (!following.contains(-2)) {
			$s = -1; return following;
		}
		expected = NewIntervalSet();
		expected.addSet(following);
		expected.removeOne(-2);
		/* while (true) { */ case 2:
			if (!(!($interfaceIsEqual(ctx, $ifaceNil)))) { _v = false; $s = 4; continue s; }
			_r$3 = ctx.GetInvokingState(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_v = _r$3 >= 0; case 4:
			/* if (!(_v && following.contains(-2))) { break; } */ if(!(_v && following.contains(-2))) { $s = 3; continue; }
			_r$4 = ctx.GetInvokingState(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			invokingState = (x$1 = a.states, x$2 = _r$4, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2]));
			_r$5 = invokingState.GetTransitions(); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			rt = (x$3 = _r$5, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0]));
			_r$6 = a.NextTokens($assertType(rt, ptrType$6).followState, $ifaceNil); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			following = _r$6;
			expected.addSet(following);
			expected.removeOne(-2);
			_r$7 = ctx.GetParent(); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			ctx = $assertType(_r$7, RuleContext);
		/* } */ $s = 2; continue; case 3:
		if (following.contains(-2)) {
			expected.addOne(-1);
		}
		$s = -1; return expected;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ATN.ptr.prototype.getExpectedTokens }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._v = _v; $f.a = a; $f.ctx = ctx; $f.expected = expected; $f.following = following; $f.invokingState = invokingState; $f.rt = rt; $f.s = s; $f.stateNumber = stateNumber; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	ATN.prototype.getExpectedTokens = function(stateNumber, ctx) { return this.$val.getExpectedTokens(stateNumber, ctx); };
	NewBaseATNConfig6 = function(state, alt, context) {
		var alt, context, state;
		return NewBaseATNConfig5(state, alt, context, $pkg.SemanticContextNone);
	};
	$pkg.NewBaseATNConfig6 = NewBaseATNConfig6;
	NewBaseATNConfig5 = function(state, alt, context, semanticContext) {
		var alt, context, semanticContext, state;
		if ($interfaceIsEqual(semanticContext, $ifaceNil)) {
			$panic(new $String("semanticContext cannot be nil"));
		}
		return new BaseATNConfig.ptr(false, state, alt, context, semanticContext, 0);
	};
	$pkg.NewBaseATNConfig5 = NewBaseATNConfig5;
	NewBaseATNConfig4 = function(c, state) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$2, _r$3, _r$4, c, state, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; c = $f.c; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = c;
		_arg$1 = state;
		_r$2 = c.GetContext(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$2 = _r$2;
		_r$3 = c.GetSemanticContext(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$3 = _r$3;
		_r$4 = NewBaseATNConfig(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewBaseATNConfig4 }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.c = c; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewBaseATNConfig4 = NewBaseATNConfig4;
	NewBaseATNConfig3 = function(c, state, semanticContext) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$2, _r$3, c, semanticContext, state, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$2 = $f._r$2; _r$3 = $f._r$3; c = $f.c; semanticContext = $f.semanticContext; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = c;
		_arg$1 = state;
		_r$2 = c.GetContext(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$2 = _r$2;
		_arg$3 = semanticContext;
		_r$3 = NewBaseATNConfig(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewBaseATNConfig3 }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.c = c; $f.semanticContext = semanticContext; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewBaseATNConfig3 = NewBaseATNConfig3;
	NewBaseATNConfig2 = function(c, semanticContext) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$2, _r$3, _r$4, c, semanticContext, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; c = $f.c; semanticContext = $f.semanticContext; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = c;
		_r$2 = c.GetState(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$1 = _r$2;
		_r$3 = c.GetContext(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$2 = _r$3;
		_arg$3 = semanticContext;
		_r$4 = NewBaseATNConfig(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewBaseATNConfig2 }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.c = c; $f.semanticContext = semanticContext; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewBaseATNConfig2 = NewBaseATNConfig2;
	NewBaseATNConfig1 = function(c, state, context) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$2, _r$3, c, context, state, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$2 = $f._r$2; _r$3 = $f._r$3; c = $f.c; context = $f.context; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = c;
		_arg$1 = state;
		_arg$2 = context;
		_r$2 = c.GetSemanticContext(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$3 = _r$2;
		_r$3 = NewBaseATNConfig(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewBaseATNConfig1 }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.c = c; $f.context = context; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewBaseATNConfig1 = NewBaseATNConfig1;
	NewBaseATNConfig = function(c, state, context, semanticContext) {
		var _r$2, _r$3, _r$4, c, context, semanticContext, state, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; c = $f.c; context = $f.context; semanticContext = $f.semanticContext; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(semanticContext, $ifaceNil)) {
			$panic(new $String("semanticContext cannot be nil"));
		}
		_r$2 = c.GetAlt(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = c.GetReachesIntoOuterContext(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = c.getPrecedenceFilterSuppressed(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return new BaseATNConfig.ptr(_r$4, state, _r$2, context, semanticContext, _r$3);
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewBaseATNConfig }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.c = c; $f.context = context; $f.semanticContext = semanticContext; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewBaseATNConfig = NewBaseATNConfig;
	BaseATNConfig.ptr.prototype.getPrecedenceFilterSuppressed = function() {
		var b;
		b = this;
		return b.precedenceFilterSuppressed;
	};
	BaseATNConfig.prototype.getPrecedenceFilterSuppressed = function() { return this.$val.getPrecedenceFilterSuppressed(); };
	BaseATNConfig.ptr.prototype.setPrecedenceFilterSuppressed = function(v) {
		var b, v;
		b = this;
		b.precedenceFilterSuppressed = v;
	};
	BaseATNConfig.prototype.setPrecedenceFilterSuppressed = function(v) { return this.$val.setPrecedenceFilterSuppressed(v); };
	BaseATNConfig.ptr.prototype.GetState = function() {
		var b;
		b = this;
		return b.state;
	};
	BaseATNConfig.prototype.GetState = function() { return this.$val.GetState(); };
	BaseATNConfig.ptr.prototype.GetAlt = function() {
		var b;
		b = this;
		return b.alt;
	};
	BaseATNConfig.prototype.GetAlt = function() { return this.$val.GetAlt(); };
	BaseATNConfig.ptr.prototype.SetContext = function(v) {
		var b, v;
		b = this;
		b.context = v;
	};
	BaseATNConfig.prototype.SetContext = function(v) { return this.$val.SetContext(v); };
	BaseATNConfig.ptr.prototype.GetContext = function() {
		var b;
		b = this;
		return b.context;
	};
	BaseATNConfig.prototype.GetContext = function() { return this.$val.GetContext(); };
	BaseATNConfig.ptr.prototype.GetSemanticContext = function() {
		var b;
		b = this;
		return b.semanticContext;
	};
	BaseATNConfig.prototype.GetSemanticContext = function() { return this.$val.GetSemanticContext(); };
	BaseATNConfig.ptr.prototype.GetReachesIntoOuterContext = function() {
		var b;
		b = this;
		return b.reachesIntoOuterContext;
	};
	BaseATNConfig.prototype.GetReachesIntoOuterContext = function() { return this.$val.GetReachesIntoOuterContext(); };
	BaseATNConfig.ptr.prototype.SetReachesIntoOuterContext = function(v) {
		var b, v;
		b = this;
		b.reachesIntoOuterContext = v;
	};
	BaseATNConfig.prototype.SetReachesIntoOuterContext = function(v) { return this.$val.SetReachesIntoOuterContext(v); };
	BaseATNConfig.ptr.prototype.equals = function(o) {
		var _r$2, _r$3, _r$4, _r$5, _tuple, alts, b, cons, equal, nums, o, ok, other, sups, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; alts = $f.alts; b = $f.b; cons = $f.cons; equal = $f.equal; nums = $f.nums; o = $f.o; ok = $f.ok; other = $f.other; sups = $f.sups; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if ($interfaceIsEqual(b, o)) {
			$s = -1; return true;
		}
		_tuple = $assertType(o, ptrType$7, true);
		other = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		equal = false;
		/* */ if ($interfaceIsEqual(b.context, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(b.context, $ifaceNil)) { */ case 1:
			equal = $interfaceIsEqual(other.context, $ifaceNil);
			$s = 3; continue;
		/* } else { */ case 2:
			_r$2 = b.context.equals(other.context); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			equal = _r$2;
		/* } */ case 3:
		_r$3 = b.state.GetStateNumber(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = other.state.GetStateNumber(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		nums = _r$3 === _r$4;
		alts = b.alt === other.alt;
		_r$5 = b.semanticContext.equals(other.semanticContext); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		cons = _r$5;
		sups = b.precedenceFilterSuppressed === other.precedenceFilterSuppressed;
		$s = -1; return nums && alts && cons && sups && equal;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseATNConfig.ptr.prototype.equals }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.alts = alts; $f.b = b; $f.cons = cons; $f.equal = equal; $f.nums = nums; $f.o = o; $f.ok = ok; $f.other = other; $f.sups = sups; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseATNConfig.prototype.equals = function(o) { return this.$val.equals(o); };
	BaseATNConfig.ptr.prototype.hash = function() {
		var _arg, _arg$1, _arg$2, _arg$3, _r$2, _r$3, _r$4, _r$5, _r$6, b, c, h, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; b = $f.b; c = $f.c; h = $f.h; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		c = 0;
		/* */ if (!($interfaceIsEqual(b.context, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(b.context, $ifaceNil))) { */ case 1:
			_r$2 = b.context.hash(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			c = _r$2;
		/* } */ case 2:
		h = murmurInit(7);
		_arg = h;
		_r$3 = b.state.GetStateNumber(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$1 = _r$3;
		_r$4 = murmurUpdate(_arg, _arg$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		h = _r$4;
		h = murmurUpdate(h, b.alt);
		h = murmurUpdate(h, c);
		_arg$2 = h;
		_r$5 = b.semanticContext.hash(); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$3 = _r$5;
		_r$6 = murmurUpdate(_arg$2, _arg$3); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		h = _r$6;
		$s = -1; return murmurFinish(h, 4);
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseATNConfig.ptr.prototype.hash }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.b = b; $f.c = c; $f.h = h; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseATNConfig.prototype.hash = function() { return this.$val.hash(); };
	BaseATNConfig.ptr.prototype.String = function() {
		var _r$2, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tmp$2, b, s1, s2, s3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; b = $f.b; s1 = $f.s1; s2 = $f.s2; s3 = $f.s3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_tmp = "";
		_tmp$1 = "";
		_tmp$2 = "";
		s1 = _tmp;
		s2 = _tmp$1;
		s3 = _tmp$2;
		/* */ if (!($interfaceIsEqual(b.context, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(b.context, $ifaceNil))) { */ case 1:
			_r$2 = fmt.Sprint(new sliceType$8([b.context])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			s1 = ",[" + _r$2 + "]";
		/* } */ case 2:
		/* */ if (!($interfaceIsEqual(b.semanticContext, $pkg.SemanticContextNone))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!($interfaceIsEqual(b.semanticContext, $pkg.SemanticContextNone))) { */ case 4:
			_r$3 = fmt.Sprint(new sliceType$8([b.semanticContext])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			s2 = "," + _r$3;
		/* } */ case 5:
		/* */ if (b.reachesIntoOuterContext > 0) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (b.reachesIntoOuterContext > 0) { */ case 7:
			_r$4 = fmt.Sprint(new sliceType$8([new $Int(b.reachesIntoOuterContext)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			s3 = ",up=" + _r$4;
		/* } */ case 8:
		_r$5 = fmt.Sprintf("(%v,%v%v%v%v)", new sliceType$8([b.state, new $Int(b.alt), new $String(s1), new $String(s2), new $String(s3)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return _r$5;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseATNConfig.ptr.prototype.String }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f.b = b; $f.s1 = s1; $f.s2 = s2; $f.s3 = s3; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseATNConfig.prototype.String = function() { return this.$val.String(); };
	NewLexerATNConfig6 = function(state, alt, context) {
		var alt, context, state;
		return new LexerATNConfig.ptr(NewBaseATNConfig5(state, alt, context, $pkg.SemanticContextNone), ptrType$8.nil, false);
	};
	$pkg.NewLexerATNConfig6 = NewLexerATNConfig6;
	NewLexerATNConfig4 = function(c, state) {
		var _r$2, _r$3, c, state, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; c = $f.c; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = NewBaseATNConfig(c, state, c.BaseATNConfig.GetContext(), c.BaseATNConfig.GetSemanticContext()); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = checkNonGreedyDecision(c, state); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return new LexerATNConfig.ptr(_r$2, c.lexerActionExecutor, _r$3);
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewLexerATNConfig4 }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.c = c; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewLexerATNConfig4 = NewLexerATNConfig4;
	NewLexerATNConfig3 = function(c, state, lexerActionExecutor) {
		var _r$2, _r$3, c, lexerActionExecutor, state, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; c = $f.c; lexerActionExecutor = $f.lexerActionExecutor; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = NewBaseATNConfig(c, state, c.BaseATNConfig.GetContext(), c.BaseATNConfig.GetSemanticContext()); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = checkNonGreedyDecision(c, state); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return new LexerATNConfig.ptr(_r$2, lexerActionExecutor, _r$3);
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewLexerATNConfig3 }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.c = c; $f.lexerActionExecutor = lexerActionExecutor; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewLexerATNConfig3 = NewLexerATNConfig3;
	NewLexerATNConfig2 = function(c, state, context) {
		var _r$2, _r$3, c, context, state, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; c = $f.c; context = $f.context; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = NewBaseATNConfig(c, state, context, c.BaseATNConfig.GetSemanticContext()); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = checkNonGreedyDecision(c, state); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return new LexerATNConfig.ptr(_r$2, c.lexerActionExecutor, _r$3);
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewLexerATNConfig2 }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.c = c; $f.context = context; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewLexerATNConfig2 = NewLexerATNConfig2;
	LexerATNConfig.ptr.prototype.hash = function() {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, f, h, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; f = $f.f; h = $f.h; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		f = 0;
		if (l.passedThroughNonGreedyDecision) {
			f = 1;
		} else {
			f = 0;
		}
		h = murmurInit(7);
		_arg = h;
		_r$2 = l.BaseATNConfig.state.hash(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$1 = _r$2;
		_r$3 = murmurUpdate(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		h = _r$3;
		h = murmurUpdate(h, l.BaseATNConfig.alt);
		_arg$2 = h;
		_r$4 = l.BaseATNConfig.context.hash(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg$3 = _r$4;
		_r$5 = murmurUpdate(_arg$2, _arg$3); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		h = _r$5;
		_arg$4 = h;
		_r$6 = l.BaseATNConfig.semanticContext.hash(); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_arg$5 = _r$6;
		_r$7 = murmurUpdate(_arg$4, _arg$5); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		h = _r$7;
		h = murmurUpdate(h, f);
		h = murmurUpdate(h, l.lexerActionExecutor.hash());
		h = murmurFinish(h, 6);
		$s = -1; return h;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerATNConfig.ptr.prototype.hash }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.f = f; $f.h = h; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerATNConfig.prototype.hash = function() { return this.$val.hash(); };
	LexerATNConfig.ptr.prototype.equals = function(other) {
		var _r$2, _tuple, b, l, ok, other, othert, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _tuple = $f._tuple; b = $f.b; l = $f.l; ok = $f.ok; other = $f.other; othert = $f.othert; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_tuple = $assertType(other, ptrType$9, true);
		othert = _tuple[0];
		ok = _tuple[1];
		if ($interfaceIsEqual(l, other)) {
			$s = -1; return true;
		} else if (!ok) {
			$s = -1; return false;
		} else if (!(l.passedThroughNonGreedyDecision === othert.passedThroughNonGreedyDecision)) {
			$s = -1; return false;
		}
		b = false;
		if (!(l.lexerActionExecutor === ptrType$8.nil)) {
			b = !l.lexerActionExecutor.equals(othert.lexerActionExecutor);
		} else {
			b = !(othert.lexerActionExecutor === ptrType$8.nil);
		}
		if (b) {
			$s = -1; return false;
		}
		_r$2 = l.BaseATNConfig.equals(othert.BaseATNConfig); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerATNConfig.ptr.prototype.equals }; } $f._r$2 = _r$2; $f._tuple = _tuple; $f.b = b; $f.l = l; $f.ok = ok; $f.other = other; $f.othert = othert; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerATNConfig.prototype.equals = function(other) { return this.$val.equals(other); };
	checkNonGreedyDecision = function(source, target) {
		var _r$2, _tuple, _v, _v$1, ds, ok, source, target, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _tuple = $f._tuple; _v = $f._v; _v$1 = $f._v$1; ds = $f.ds; ok = $f.ok; source = $f.source; target = $f.target; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(target, DecisionState, true);
		ds = _tuple[0];
		ok = _tuple[1];
		if (source.passedThroughNonGreedyDecision) { _v = true; $s = 1; continue s; }
		if (!(ok)) { _v$1 = false; $s = 2; continue s; }
		_r$2 = ds.getNonGreedy(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2; case 2:
		_v = _v$1; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: checkNonGreedyDecision }; } $f._r$2 = _r$2; $f._tuple = _tuple; $f._v = _v; $f._v$1 = _v$1; $f.ds = ds; $f.ok = ok; $f.source = source; $f.target = target; $f.$s = $s; $f.$r = $r; return $f;
	};
	NewBaseATNConfigSet = function(fullCtx) {
		var fullCtx;
		return new BaseATNConfigSet.ptr(-1, NewSet($throwNilPointerError, equalATNConfigs), sliceType$9.nil, ptrType$11.nil, false, fullCtx, false, false, 0);
	};
	$pkg.NewBaseATNConfigSet = NewBaseATNConfigSet;
	BaseATNConfigSet.ptr.prototype.Add = function(config, mergeCache) {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, b, config, existing, mergeCache, merged, rootIsWildcard, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; b = $f.b; config = $f.config; existing = $f.existing; mergeCache = $f.mergeCache; merged = $f.merged; rootIsWildcard = $f.rootIsWildcard; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (b.readOnly) {
			$panic(new $String("set is read-only"));
		}
		_r$2 = config.GetSemanticContext(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (!($interfaceIsEqual(_r$2, $pkg.SemanticContextNone))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(_r$2, $pkg.SemanticContextNone))) { */ case 1:
			b.hasSemanticContext = true;
		/* } */ case 2:
		_r$3 = config.GetReachesIntoOuterContext(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 > 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 > 0) { */ case 4:
			b.dipsIntoOuterContext = true;
		/* } */ case 5:
		_r$4 = b.configLookup.add(config); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		existing = $assertType(_r$4, ATNConfig);
		if ($interfaceIsEqual(existing, config)) {
			b.cachedHash = -1;
			b.configs = $append(b.configs, config);
			$s = -1; return true;
		}
		rootIsWildcard = !b.fullCtx;
		_r$5 = existing.GetContext(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg = _r$5;
		_r$6 = config.GetContext(); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_arg$1 = _r$6;
		_arg$2 = rootIsWildcard;
		_arg$3 = mergeCache;
		_r$7 = merge(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		merged = _r$7;
		_r$8 = existing.GetReachesIntoOuterContext(); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_arg$4 = _r$8;
		_r$9 = config.GetReachesIntoOuterContext(); /* */ $s = 12; case 12: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_arg$5 = _r$9;
		_r$10 = intMax(_arg$4, _arg$5); /* */ $s = 13; case 13: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		$r = existing.SetReachesIntoOuterContext(_r$10); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$11 = config.getPrecedenceFilterSuppressed(); /* */ $s = 17; case 17: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		/* */ if (_r$11) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (_r$11) { */ case 15:
			$r = existing.setPrecedenceFilterSuppressed(true); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 16:
		$r = existing.SetContext(merged); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseATNConfigSet.ptr.prototype.Add }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.b = b; $f.config = config; $f.existing = existing; $f.mergeCache = mergeCache; $f.merged = merged; $f.rootIsWildcard = rootIsWildcard; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseATNConfigSet.prototype.Add = function(config, mergeCache) { return this.$val.Add(config, mergeCache); };
	BaseATNConfigSet.ptr.prototype.GetStates = function() {
		var _r$2, _r$3, b, i, states, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; b = $f.b; i = $f.i; states = $f.states; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		states = NewSet($throwNilPointerError, $throwNilPointerError);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < b.configs.$length)) { break; } */ if(!(i < b.configs.$length)) { $s = 2; continue; }
			_r$2 = (x = b.configs, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).GetState(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = states.add(_r$2); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return states;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseATNConfigSet.ptr.prototype.GetStates }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.b = b; $f.i = i; $f.states = states; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseATNConfigSet.prototype.GetStates = function() { return this.$val.GetStates(); };
	BaseATNConfigSet.ptr.prototype.HasSemanticContext = function() {
		var b;
		b = this;
		return b.hasSemanticContext;
	};
	BaseATNConfigSet.prototype.HasSemanticContext = function() { return this.$val.HasSemanticContext(); };
	BaseATNConfigSet.ptr.prototype.SetHasSemanticContext = function(v) {
		var b, v;
		b = this;
		b.hasSemanticContext = v;
	};
	BaseATNConfigSet.prototype.SetHasSemanticContext = function(v) { return this.$val.SetHasSemanticContext(v); };
	BaseATNConfigSet.ptr.prototype.GetPredicates = function() {
		var _r$2, b, c, i, preds, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; b = $f.b; c = $f.c; i = $f.i; preds = $f.preds; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		preds = $makeSlice(sliceType$10, 0);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < b.configs.$length)) { break; } */ if(!(i < b.configs.$length)) { $s = 2; continue; }
			_r$2 = (x = b.configs, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).GetSemanticContext(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			c = _r$2;
			if (!($interfaceIsEqual(c, $pkg.SemanticContextNone))) {
				preds = $append(preds, c);
			}
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return preds;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseATNConfigSet.ptr.prototype.GetPredicates }; } $f._r$2 = _r$2; $f.b = b; $f.c = c; $f.i = i; $f.preds = preds; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseATNConfigSet.prototype.GetPredicates = function() { return this.$val.GetPredicates(); };
	BaseATNConfigSet.ptr.prototype.GetItems = function() {
		var b;
		b = this;
		return b.configs;
	};
	BaseATNConfigSet.prototype.GetItems = function() { return this.$val.GetItems(); };
	BaseATNConfigSet.ptr.prototype.OptimizeConfigs = function(interpreter) {
		var _r$2, _r$3, b, config, i, interpreter, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; b = $f.b; config = $f.config; i = $f.i; interpreter = $f.interpreter; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (b.readOnly) {
			$panic(new $String("set is read-only"));
		}
		if (b.configLookup.length() === 0) {
			$s = -1; return;
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < b.configs.$length)) { break; } */ if(!(i < b.configs.$length)) { $s = 2; continue; }
			config = (x = b.configs, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			_r$2 = config.GetContext(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = interpreter.getCachedContext(_r$2); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$r = config.SetContext(_r$3); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseATNConfigSet.ptr.prototype.OptimizeConfigs }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.b = b; $f.config = config; $f.i = i; $f.interpreter = interpreter; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseATNConfigSet.prototype.OptimizeConfigs = function(interpreter) { return this.$val.OptimizeConfigs(interpreter); };
	BaseATNConfigSet.ptr.prototype.AddAll = function(coll) {
		var _r$2, b, coll, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; b = $f.b; coll = $f.coll; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < coll.$length)) { break; } */ if(!(i < coll.$length)) { $s = 2; continue; }
			_r$2 = b.Add(((i < 0 || i >= coll.$length) ? ($throwRuntimeError("index out of range"), undefined) : coll.$array[coll.$offset + i]), ptrType$12.nil); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseATNConfigSet.ptr.prototype.AddAll }; } $f._r$2 = _r$2; $f.b = b; $f.coll = coll; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseATNConfigSet.prototype.AddAll = function(coll) { return this.$val.AddAll(coll); };
	BaseATNConfigSet.ptr.prototype.Equals = function(other) {
		var _tuple, b, ok, other, other2;
		b = this;
		if ($interfaceIsEqual(b, other)) {
			return true;
		} else {
			_tuple = $assertType(other, ptrType$13, true);
			ok = _tuple[1];
			if (!ok) {
				return false;
			}
		}
		other2 = $assertType(other, ptrType$13);
		return !(b.configs === sliceType$9.nil) && b.fullCtx === other2.fullCtx && (b.uniqueAlt === other2.uniqueAlt) && b.conflictingAlts === other2.conflictingAlts && b.hasSemanticContext === other2.hasSemanticContext && b.dipsIntoOuterContext === other2.dipsIntoOuterContext;
	};
	BaseATNConfigSet.prototype.Equals = function(other) { return this.$val.Equals(other); };
	BaseATNConfigSet.ptr.prototype.hash = function() {
		var _r$2, _r$3, b, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; b = $f.b; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		/* */ if (b.readOnly) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.readOnly) { */ case 1:
			/* */ if (b.cachedHash === -1) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (b.cachedHash === -1) { */ case 3:
				_r$2 = b.hashCodeConfigs(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				b.cachedHash = _r$2;
			/* } */ case 4:
			$s = -1; return b.cachedHash;
		/* } */ case 2:
		_r$3 = b.hashCodeConfigs(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseATNConfigSet.ptr.prototype.hash }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.b = b; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseATNConfigSet.prototype.hash = function() { return this.$val.hash(); };
	BaseATNConfigSet.ptr.prototype.hashCodeConfigs = function() {
		var _arg, _arg$1, _i, _r$2, _r$3, _ref, b, c, h, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; b = $f.b; c = $f.c; h = $f.h; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		h = murmurInit(1);
		_ref = b.configs;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (!($interfaceIsEqual(c, $ifaceNil))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(c, $ifaceNil))) { */ case 3:
				_arg = h;
				_r$2 = c.hash(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_arg$1 = _r$2;
				_r$3 = murmurUpdate(_arg, _arg$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				h = _r$3;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return murmurFinish(h, b.configs.$length);
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseATNConfigSet.ptr.prototype.hashCodeConfigs }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.b = b; $f.c = c; $f.h = h; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseATNConfigSet.prototype.hashCodeConfigs = function() { return this.$val.hashCodeConfigs(); };
	BaseATNConfigSet.ptr.prototype.Length = function() {
		var b;
		b = this;
		return b.configs.$length;
	};
	BaseATNConfigSet.prototype.Length = function() { return this.$val.Length(); };
	BaseATNConfigSet.ptr.prototype.IsEmpty = function() {
		var b;
		b = this;
		return b.configs.$length === 0;
	};
	BaseATNConfigSet.prototype.IsEmpty = function() { return this.$val.IsEmpty(); };
	BaseATNConfigSet.ptr.prototype.Contains = function(item) {
		var _r$2, b, item, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; b = $f.b; item = $f.item; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (b.configLookup === ptrType$10.nil) {
			$panic(new $String("not implemented for read-only sets"));
		}
		_r$2 = b.configLookup.contains(item); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseATNConfigSet.ptr.prototype.Contains }; } $f._r$2 = _r$2; $f.b = b; $f.item = item; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseATNConfigSet.prototype.Contains = function(item) { return this.$val.Contains(item); };
	BaseATNConfigSet.ptr.prototype.ContainsFast = function(item) {
		var _r$2, b, item, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; b = $f.b; item = $f.item; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (b.configLookup === ptrType$10.nil) {
			$panic(new $String("not implemented for read-only sets"));
		}
		_r$2 = b.configLookup.contains(item); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseATNConfigSet.ptr.prototype.ContainsFast }; } $f._r$2 = _r$2; $f.b = b; $f.item = item; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseATNConfigSet.prototype.ContainsFast = function(item) { return this.$val.ContainsFast(item); };
	BaseATNConfigSet.ptr.prototype.Clear = function() {
		var b;
		b = this;
		if (b.readOnly) {
			$panic(new $String("set is read-only"));
		}
		b.configs = $makeSlice(sliceType$9, 0);
		b.cachedHash = -1;
		b.configLookup = NewSet($throwNilPointerError, equalATNConfigs);
	};
	BaseATNConfigSet.prototype.Clear = function() { return this.$val.Clear(); };
	BaseATNConfigSet.ptr.prototype.FullContext = function() {
		var b;
		b = this;
		return b.fullCtx;
	};
	BaseATNConfigSet.prototype.FullContext = function() { return this.$val.FullContext(); };
	BaseATNConfigSet.ptr.prototype.GetDipsIntoOuterContext = function() {
		var b;
		b = this;
		return b.dipsIntoOuterContext;
	};
	BaseATNConfigSet.prototype.GetDipsIntoOuterContext = function() { return this.$val.GetDipsIntoOuterContext(); };
	BaseATNConfigSet.ptr.prototype.SetDipsIntoOuterContext = function(v) {
		var b, v;
		b = this;
		b.dipsIntoOuterContext = v;
	};
	BaseATNConfigSet.prototype.SetDipsIntoOuterContext = function(v) { return this.$val.SetDipsIntoOuterContext(v); };
	BaseATNConfigSet.ptr.prototype.GetUniqueAlt = function() {
		var b;
		b = this;
		return b.uniqueAlt;
	};
	BaseATNConfigSet.prototype.GetUniqueAlt = function() { return this.$val.GetUniqueAlt(); };
	BaseATNConfigSet.ptr.prototype.SetUniqueAlt = function(v) {
		var b, v;
		b = this;
		b.uniqueAlt = v;
	};
	BaseATNConfigSet.prototype.SetUniqueAlt = function(v) { return this.$val.SetUniqueAlt(v); };
	BaseATNConfigSet.ptr.prototype.GetConflictingAlts = function() {
		var b;
		b = this;
		return b.conflictingAlts;
	};
	BaseATNConfigSet.prototype.GetConflictingAlts = function() { return this.$val.GetConflictingAlts(); };
	BaseATNConfigSet.ptr.prototype.SetConflictingAlts = function(v) {
		var b, v;
		b = this;
		b.conflictingAlts = v;
	};
	BaseATNConfigSet.prototype.SetConflictingAlts = function(v) { return this.$val.SetConflictingAlts(v); };
	BaseATNConfigSet.ptr.prototype.ReadOnly = function() {
		var b;
		b = this;
		return b.readOnly;
	};
	BaseATNConfigSet.prototype.ReadOnly = function() { return this.$val.ReadOnly(); };
	BaseATNConfigSet.ptr.prototype.SetReadOnly = function(readOnly) {
		var b, readOnly;
		b = this;
		b.readOnly = readOnly;
		if (readOnly) {
			b.configLookup = ptrType$10.nil;
		}
	};
	BaseATNConfigSet.prototype.SetReadOnly = function(readOnly) { return this.$val.SetReadOnly(readOnly); };
	BaseATNConfigSet.ptr.prototype.String = function() {
		var _i, _r$2, _r$3, _r$4, _r$5, _ref, b, c, i, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; b = $f.b; c = $f.c; i = $f.i; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		s = "[";
		_ref = b.configs;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$2 = c.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			s = s + (_r$2);
			if (!((i === (b.configs.$length - 1 >> 0)))) {
				s = s + (", ");
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		s = s + ("]");
		/* */ if (b.hasSemanticContext) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (b.hasSemanticContext) { */ case 4:
			_r$3 = fmt.Sprint(new sliceType$8([new $Bool(b.hasSemanticContext)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			s = s + (",hasSemanticContext=" + _r$3);
		/* } */ case 5:
		/* */ if (!((b.uniqueAlt === $pkg.ATNInvalidAltNumber))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!((b.uniqueAlt === $pkg.ATNInvalidAltNumber))) { */ case 7:
			_r$4 = fmt.Sprint(new sliceType$8([new $Int(b.uniqueAlt)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			s = s + (",uniqueAlt=" + _r$4);
		/* } */ case 8:
		/* */ if (!(b.conflictingAlts === ptrType$11.nil)) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (!(b.conflictingAlts === ptrType$11.nil)) { */ case 10:
			_r$5 = b.conflictingAlts.String(); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			s = s + (",conflictingAlts=" + _r$5);
		/* } */ case 11:
		if (b.dipsIntoOuterContext) {
			s = s + (",dipsIntoOuterContext");
		}
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseATNConfigSet.ptr.prototype.String }; } $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.b = b; $f.c = c; $f.i = i; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseATNConfigSet.prototype.String = function() { return this.$val.String(); };
	NewOrderedATNConfigSet = function() {
		var b;
		b = NewBaseATNConfigSet(false);
		b.configLookup = NewSet($throwNilPointerError, $throwNilPointerError);
		return new OrderedATNConfigSet.ptr(b);
	};
	$pkg.NewOrderedATNConfigSet = NewOrderedATNConfigSet;
	equalATNConfigs = function(a, b) {
		var _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, a, ai, alts, b, bi, cons, nums, ok, ok1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; ai = $f.ai; alts = $f.alts; b = $f.b; bi = $f.bi; cons = $f.cons; nums = $f.nums; ok = $f.ok; ok1 = $f.ok1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(a, $ifaceNil) || $interfaceIsEqual(b, $ifaceNil)) {
			$s = -1; return false;
		}
		if ($interfaceIsEqual(a, b)) {
			$s = -1; return true;
		}
		_tuple = $assertType(a, ATNConfig, true);
		ai = _tuple[0];
		ok = _tuple[1];
		_tuple$1 = $assertType(b, ATNConfig, true);
		bi = _tuple$1[0];
		ok1 = _tuple$1[1];
		if (!ok || !ok1) {
			$s = -1; return false;
		}
		_r$2 = ai.GetState(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = _r$2.GetStateNumber(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = bi.GetState(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = _r$4.GetStateNumber(); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		nums = _r$3 === _r$5;
		_r$6 = ai.GetAlt(); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = bi.GetAlt(); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		alts = _r$6 === _r$7;
		_r$8 = ai.GetSemanticContext(); /* */ $s = 7; case 7: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$9 = bi.GetSemanticContext(); /* */ $s = 8; case 8: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_r$10 = _r$8.equals(_r$9); /* */ $s = 9; case 9: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		cons = _r$10;
		$s = -1; return nums && alts && cons;
		/* */ } return; } if ($f === undefined) { $f = { $blk: equalATNConfigs }; } $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.ai = ai; $f.alts = alts; $f.b = b; $f.bi = bi; $f.cons = cons; $f.nums = nums; $f.ok = ok; $f.ok1 = ok1; $f.$s = $s; $f.$r = $r; return $f;
	};
	NewATNDeserializer = function(options) {
		var options;
		if (options === ptrType$14.nil) {
			options = $pkg.ATNDeserializationOptionsdefaultOptions;
		}
		return new ATNDeserializer.ptr(options, sliceType$11.nil, 0, "");
	};
	$pkg.NewATNDeserializer = NewATNDeserializer;
	stringInSlice = function(a, list) {
		var _i, _ref, a, b, i, list;
		_ref = list;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === a) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	ATNDeserializer.ptr.prototype.isFeatureSupported = function(feature, actualUUID) {
		var a, actualUUID, feature, idx1, idx2;
		a = this;
		idx1 = stringInSlice(feature, $pkg.SupportedUUIDs);
		if (idx1 < 0) {
			return false;
		}
		idx2 = stringInSlice(actualUUID, $pkg.SupportedUUIDs);
		return idx2 >= idx1;
	};
	ATNDeserializer.prototype.isFeatureSupported = function(feature, actualUUID) { return this.$val.isFeatureSupported(feature, actualUUID); };
	ATNDeserializer.ptr.prototype.DeserializeFromUInt16 = function(data) {
		var _r$2, _r$3, a, atn, data, sets, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; a = $f.a; atn = $f.atn; data = $f.data; sets = $f.sets; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		a.reset(utf16.Decode(data));
		a.checkVersion();
		a.checkUUID();
		atn = a.readATN();
		$r = a.readStates(atn); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		a.readRules(atn);
		a.readModes(atn);
		sets = $makeSlice(sliceType$12, 0);
		_r$2 = a.readSets(atn, sets, $methodVal(a, "readInt")); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		sets = _r$2;
		/* */ if (a.isFeatureSupported($pkg.AddedUnicodeSMP, a.uuid)) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (a.isFeatureSupported($pkg.AddedUnicodeSMP, a.uuid)) { */ case 3:
			_r$3 = a.readSets(atn, sets, $methodVal(a, "readInt32")); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			sets = _r$3;
		/* } */ case 4:
		$r = a.readEdges(atn, sets); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = a.readDecisions(atn); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = a.readLexerActions(atn); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = a.markPrecedenceDecisions(atn); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = a.verifyATN(atn); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (a.deserializationOptions.generateRuleBypassTransitions && (atn.grammarType === 1)) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (a.deserializationOptions.generateRuleBypassTransitions && (atn.grammarType === 1)) { */ case 11:
			$r = a.generateRuleBypassTransitions(atn); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = a.verifyATN(atn); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 12:
		$s = -1; return atn;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ATNDeserializer.ptr.prototype.DeserializeFromUInt16 }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.a = a; $f.atn = atn; $f.data = data; $f.sets = sets; $f.$s = $s; $f.$r = $r; return $f;
	};
	ATNDeserializer.prototype.DeserializeFromUInt16 = function(data) { return this.$val.DeserializeFromUInt16(data); };
	ATNDeserializer.ptr.prototype.reset = function(data) {
		var _i, _ref, a, c, data, i, temp;
		a = this;
		temp = $makeSlice(sliceType$11, data.$length);
		_ref = data;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (i === 0) {
				((i < 0 || i >= temp.$length) ? ($throwRuntimeError("index out of range"), undefined) : temp.$array[temp.$offset + i] = c);
			} else if (c > 1) {
				((i < 0 || i >= temp.$length) ? ($throwRuntimeError("index out of range"), undefined) : temp.$array[temp.$offset + i] = (c - 2 >> 0));
			} else {
				((i < 0 || i >= temp.$length) ? ($throwRuntimeError("index out of range"), undefined) : temp.$array[temp.$offset + i] = (c + 65533 >> 0));
			}
			_i++;
		}
		a.data = temp;
		a.pos = 0;
	};
	ATNDeserializer.prototype.reset = function(data) { return this.$val.reset(data); };
	ATNDeserializer.ptr.prototype.checkVersion = function() {
		var a, version;
		a = this;
		version = a.readInt();
		if (!((version === $pkg.SerializedVersion))) {
			$panic(new $String("Could not deserialize ATN with version " + strconv.Itoa(version) + " (expected " + strconv.Itoa($pkg.SerializedVersion) + ")."));
		}
	};
	ATNDeserializer.prototype.checkVersion = function() { return this.$val.checkVersion(); };
	ATNDeserializer.ptr.prototype.checkUUID = function() {
		var a, uuid;
		a = this;
		uuid = a.readUUID();
		if (stringInSlice(uuid, $pkg.SupportedUUIDs) < 0) {
			$panic(new $String("Could not deserialize ATN with UUID: " + uuid + " (expected " + $pkg.SerializedUUID + " or a legacy UUID)."));
		}
		a.uuid = uuid;
	};
	ATNDeserializer.prototype.checkUUID = function() { return this.$val.checkUUID(); };
	ATNDeserializer.ptr.prototype.readATN = function() {
		var a, grammarType, maxTokenType;
		a = this;
		grammarType = a.readInt();
		maxTokenType = a.readInt();
		return NewATN(grammarType, maxTokenType);
	};
	ATNDeserializer.prototype.readATN = function() { return this.$val.readATN(); };
	ATNDeserializer.ptr.prototype.readStates = function(atn) {
		var _r$2, _tuple, a, atn, endStateNumber, endStateNumbers, i, j, j$1, j$2, j$3, loopBackStateNumber, loopBackStateNumbers, nstates, numNonGreedyStates, numPrecedenceStates, ok, pair, pair$1, ruleIndex, s, s2, stateNumber, stateNumber$1, stype, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _tuple = $f._tuple; a = $f.a; atn = $f.atn; endStateNumber = $f.endStateNumber; endStateNumbers = $f.endStateNumbers; i = $f.i; j = $f.j; j$1 = $f.j$1; j$2 = $f.j$2; j$3 = $f.j$3; loopBackStateNumber = $f.loopBackStateNumber; loopBackStateNumbers = $f.loopBackStateNumbers; nstates = $f.nstates; numNonGreedyStates = $f.numNonGreedyStates; numPrecedenceStates = $f.numPrecedenceStates; ok = $f.ok; pair = $f.pair; pair$1 = $f.pair$1; ruleIndex = $f.ruleIndex; s = $f.s; s2 = $f.s2; stateNumber = $f.stateNumber; stateNumber$1 = $f.stateNumber$1; stype = $f.stype; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		loopBackStateNumbers = $makeSlice(sliceType$13, 0);
		endStateNumbers = $makeSlice(sliceType$14, 0);
		nstates = a.readInt();
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < nstates)) { break; } */ if(!(i < nstates)) { $s = 2; continue; }
			stype = a.readInt();
			/* */ if (stype === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (stype === 0) { */ case 3:
				$r = atn.addState($ifaceNil); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i = i + (1) >> 0;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			ruleIndex = a.readInt();
			if (ruleIndex === 65535) {
				ruleIndex = -1;
			}
			_r$2 = a.stateFactory(stype, ruleIndex); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			s = _r$2;
			if (stype === 12) {
				loopBackStateNumber = a.readInt();
				loopBackStateNumbers = $append(loopBackStateNumbers, new LoopEndStateIntPair.ptr($assertType(s, ptrType$15), loopBackStateNumber));
			} else {
				_tuple = $assertType(s, BlockStartState, true);
				s2 = _tuple[0];
				ok = _tuple[1];
				if (ok) {
					endStateNumber = a.readInt();
					endStateNumbers = $append(endStateNumbers, new BlockStartStateIntPair.ptr(s2, endStateNumber));
				}
			}
			$r = atn.addState(s); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		j = 0;
		while (true) {
			if (!(j < loopBackStateNumbers.$length)) { break; }
			pair = $clone(((j < 0 || j >= loopBackStateNumbers.$length) ? ($throwRuntimeError("index out of range"), undefined) : loopBackStateNumbers.$array[loopBackStateNumbers.$offset + j]), LoopEndStateIntPair);
			pair.item0.loopBackState = (x = atn.states, x$1 = pair.item1, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
			j = j + (1) >> 0;
		}
		j$1 = 0;
		/* while (true) { */ case 8:
			/* if (!(j$1 < endStateNumbers.$length)) { break; } */ if(!(j$1 < endStateNumbers.$length)) { $s = 9; continue; }
			pair$1 = $clone(((j$1 < 0 || j$1 >= endStateNumbers.$length) ? ($throwRuntimeError("index out of range"), undefined) : endStateNumbers.$array[endStateNumbers.$offset + j$1]), BlockStartStateIntPair);
			$r = pair$1.item0.setEndState($assertType((x$2 = atn.states, x$3 = pair$1.item1, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])), ptrType$16)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			j$1 = j$1 + (1) >> 0;
		/* } */ $s = 8; continue; case 9:
		numNonGreedyStates = a.readInt();
		j$2 = 0;
		/* while (true) { */ case 11:
			/* if (!(j$2 < numNonGreedyStates)) { break; } */ if(!(j$2 < numNonGreedyStates)) { $s = 12; continue; }
			stateNumber = a.readInt();
			$r = $assertType((x$4 = atn.states, ((stateNumber < 0 || stateNumber >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + stateNumber])), DecisionState).setNonGreedy(true); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			j$2 = j$2 + (1) >> 0;
		/* } */ $s = 11; continue; case 12:
		numPrecedenceStates = a.readInt();
		j$3 = 0;
		while (true) {
			if (!(j$3 < numPrecedenceStates)) { break; }
			stateNumber$1 = a.readInt();
			$assertType((x$5 = atn.states, ((stateNumber$1 < 0 || stateNumber$1 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + stateNumber$1])), ptrType$4).isPrecedenceRule = true;
			j$3 = j$3 + (1) >> 0;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ATNDeserializer.ptr.prototype.readStates }; } $f._r$2 = _r$2; $f._tuple = _tuple; $f.a = a; $f.atn = atn; $f.endStateNumber = endStateNumber; $f.endStateNumbers = endStateNumbers; $f.i = i; $f.j = j; $f.j$1 = j$1; $f.j$2 = j$2; $f.j$3 = j$3; $f.loopBackStateNumber = loopBackStateNumber; $f.loopBackStateNumbers = loopBackStateNumbers; $f.nstates = nstates; $f.numNonGreedyStates = numNonGreedyStates; $f.numPrecedenceStates = numPrecedenceStates; $f.ok = ok; $f.pair = pair; $f.pair$1 = pair$1; $f.ruleIndex = ruleIndex; $f.s = s; $f.s2 = s2; $f.stateNumber = stateNumber; $f.stateNumber$1 = stateNumber$1; $f.stype = stype; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	ATNDeserializer.prototype.readStates = function(atn) { return this.$val.readStates(atn); };
	ATNDeserializer.ptr.prototype.readRules = function(atn) {
		var _tuple, a, atn, i, i$1, nrules, ok, s, s2, startState, state, tokenType, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		a = this;
		nrules = a.readInt();
		if (atn.grammarType === 0) {
			atn.ruleToTokenType = $makeSlice(sliceType$6, nrules);
		}
		atn.ruleToStartState = $makeSlice(sliceType$4, nrules);
		i = 0;
		while (true) {
			if (!(i < nrules)) { break; }
			s = a.readInt();
			startState = $assertType((x = atn.states, ((s < 0 || s >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + s])), ptrType$4);
			(x$1 = atn.ruleToStartState, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i] = startState));
			if (atn.grammarType === 0) {
				tokenType = a.readInt();
				if (tokenType === 65535) {
					tokenType = -1;
				}
				(x$2 = atn.ruleToTokenType, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i] = tokenType));
			}
			i = i + (1) >> 0;
		}
		atn.ruleToStopState = $makeSlice(sliceType$5, nrules);
		i$1 = 0;
		while (true) {
			if (!(i$1 < atn.states.$length)) { break; }
			state = (x$3 = atn.states, ((i$1 < 0 || i$1 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$1]));
			_tuple = $assertType(state, ptrType$5, true);
			s2 = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				(x$4 = atn.ruleToStopState, x$5 = s2.BaseATNState.ruleIndex, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5] = s2));
				(x$6 = atn.ruleToStartState, x$7 = s2.BaseATNState.ruleIndex, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7])).stopState = s2;
			}
			i$1 = i$1 + (1) >> 0;
		}
	};
	ATNDeserializer.prototype.readRules = function(atn) { return this.$val.readRules(atn); };
	ATNDeserializer.ptr.prototype.readModes = function(atn) {
		var a, atn, i, nmodes, s, x;
		a = this;
		nmodes = a.readInt();
		i = 0;
		while (true) {
			if (!(i < nmodes)) { break; }
			s = a.readInt();
			atn.modeToStartState = $append(atn.modeToStartState, $assertType((x = atn.states, ((s < 0 || s >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + s])), ptrType$3));
			i = i + (1) >> 0;
		}
	};
	ATNDeserializer.prototype.readModes = function(atn) { return this.$val.readModes(atn); };
	ATNDeserializer.ptr.prototype.readSets = function(atn, sets, readUnicode) {
		var _r$2, _r$3, a, atn, containsEOF, i, i1, i2, iset, j, m, n, readUnicode, sets, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; a = $f.a; atn = $f.atn; containsEOF = $f.containsEOF; i = $f.i; i1 = $f.i1; i2 = $f.i2; iset = $f.iset; j = $f.j; m = $f.m; n = $f.n; readUnicode = $f.readUnicode; sets = $f.sets; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		m = a.readInt();
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < m)) { break; } */ if(!(i < m)) { $s = 2; continue; }
			iset = NewIntervalSet();
			sets = $append(sets, iset);
			n = a.readInt();
			containsEOF = a.readInt();
			if (!((containsEOF === 0))) {
				iset.addOne(-1);
			}
			j = 0;
			/* while (true) { */ case 3:
				/* if (!(j < n)) { break; } */ if(!(j < n)) { $s = 4; continue; }
				_r$2 = readUnicode(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				i1 = _r$2;
				_r$3 = readUnicode(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				i2 = _r$3;
				iset.addRange(i1, i2);
				j = j + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return sets;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ATNDeserializer.ptr.prototype.readSets }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.a = a; $f.atn = atn; $f.containsEOF = containsEOF; $f.i = i; $f.i1 = i1; $f.i2 = i2; $f.iset = iset; $f.j = j; $f.m = m; $f.n = n; $f.readUnicode = readUnicode; $f.sets = sets; $f.$s = $s; $f.$r = $r; return $f;
	};
	ATNDeserializer.prototype.readSets = function(atn, sets, readUnicode) { return this.$val.readSets(atn, sets, readUnicode); };
	ATNDeserializer.ptr.prototype.readEdges = function(atn, sets) {
		var _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, a, arg1, arg2, arg3, atn, i, i$1, i$2, j, j$1, j$2, nedges, ok, ok$1, ok$2, ok$3, ok$4, ok$5, outermostPrecedenceReturn, s2, s2$1, s2$2, sets, src, srcState, state, state$1, t, t2, t2$1, target, target$1, trans, trans$1, trg, ttype, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; a = $f.a; arg1 = $f.arg1; arg2 = $f.arg2; arg3 = $f.arg3; atn = $f.atn; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; j = $f.j; j$1 = $f.j$1; j$2 = $f.j$2; nedges = $f.nedges; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; ok$4 = $f.ok$4; ok$5 = $f.ok$5; outermostPrecedenceReturn = $f.outermostPrecedenceReturn; s2 = $f.s2; s2$1 = $f.s2$1; s2$2 = $f.s2$2; sets = $f.sets; src = $f.src; srcState = $f.srcState; state = $f.state; state$1 = $f.state$1; t = $f.t; t2 = $f.t2; t2$1 = $f.t2$1; target = $f.target; target$1 = $f.target$1; trans = $f.trans; trans$1 = $f.trans$1; trg = $f.trg; ttype = $f.ttype; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		nedges = a.readInt();
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < nedges)) { break; } */ if(!(i < nedges)) { $s = 2; continue; }
			src = a.readInt();
			trg = a.readInt();
			ttype = a.readInt();
			arg1 = a.readInt();
			arg2 = a.readInt();
			arg3 = a.readInt();
			trans = a.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
			srcState = (x = atn.states, ((src < 0 || src >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + src]));
			$r = srcState.AddTransition(trans, -1); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		i$1 = 0;
		/* while (true) { */ case 4:
			/* if (!(i$1 < atn.states.$length)) { break; } */ if(!(i$1 < atn.states.$length)) { $s = 5; continue; }
			state = (x$1 = atn.states, ((i$1 < 0 || i$1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$1]));
			j = 0;
			/* while (true) { */ case 6:
				_r$2 = state.GetTransitions(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* if (!(j < _r$2.$length)) { break; } */ if(!(j < _r$2.$length)) { $s = 7; continue; }
				_r$3 = state.GetTransitions(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple = $assertType((x$2 = _r$3, ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j])), ptrType$6, true);
				t = _tuple[0];
				ok = _tuple[1];
				/* */ if (!ok) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!ok) { */ case 10:
					j = j + (1) >> 0;
					/* continue; */ $s = 6; continue;
				/* } */ case 11:
				outermostPrecedenceReturn = -1;
				_r$4 = t.BaseTransition.getTarget().GetRuleIndex(); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ if ((x$3 = atn.ruleToStartState, x$4 = _r$4, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4])).isPrecedenceRule) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if ((x$3 = atn.ruleToStartState, x$4 = _r$4, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4])).isPrecedenceRule) { */ case 12:
					/* */ if (t.precedence === 0) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (t.precedence === 0) { */ case 15:
						_r$5 = t.BaseTransition.getTarget().GetRuleIndex(); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						outermostPrecedenceReturn = _r$5;
					/* } */ case 16:
				/* } */ case 13:
				trans$1 = NewEpsilonTransition(t.followState, outermostPrecedenceReturn);
				_r$6 = t.BaseTransition.getTarget().GetRuleIndex(); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$r = (x$5 = atn.ruleToStopState, x$6 = _r$6, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])).BaseATNState.AddTransition(trans$1, -1); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j + (1) >> 0;
			/* } */ $s = 6; continue; case 7:
			i$1 = i$1 + (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		i$2 = 0;
		/* while (true) { */ case 20:
			/* if (!(i$2 < atn.states.$length)) { break; } */ if(!(i$2 < atn.states.$length)) { $s = 21; continue; }
			state$1 = (x$7 = atn.states, ((i$2 < 0 || i$2 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i$2]));
			_tuple$1 = $assertType(state$1, ptrType$17, true);
			s2 = _tuple$1[0];
			ok$1 = _tuple$1[1];
			if (ok$1) {
				if (s2.endState === ptrType$16.nil) {
					$panic(new $String("IllegalState"));
				}
				if (!($interfaceIsEqual(s2.endState.startState, $ifaceNil))) {
					$panic(new $String("IllegalState"));
				}
				s2.endState.startState = state$1;
			}
			_tuple$2 = $assertType(state$1, ptrType$18, true);
			s2$1 = _tuple$2[0];
			ok$2 = _tuple$2[1];
			/* */ if (ok$2) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (ok$2) { */ case 22:
				j$1 = 0;
				/* while (true) { */ case 25:
					/* if (!(j$1 < s2$1.BaseDecisionState.BaseATNState.GetTransitions().$length)) { break; } */ if(!(j$1 < s2$1.BaseDecisionState.BaseATNState.GetTransitions().$length)) { $s = 26; continue; }
					_r$7 = (x$8 = s2$1.BaseDecisionState.BaseATNState.GetTransitions(), ((j$1 < 0 || j$1 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + j$1])).getTarget(); /* */ $s = 27; case 27: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					target = _r$7;
					_tuple$3 = $assertType(target, ptrType$19, true);
					t2 = _tuple$3[0];
					ok$3 = _tuple$3[1];
					if (ok$3) {
						t2.loopBackState = state$1;
					}
					j$1 = j$1 + (1) >> 0;
				/* } */ $s = 25; continue; case 26:
				$s = 24; continue;
			/* } else { */ case 23:
				_tuple$4 = $assertType(state$1, ptrType$20, true);
				s2$2 = _tuple$4[0];
				ok$4 = _tuple$4[1];
				/* */ if (ok$4) { $s = 28; continue; }
				/* */ $s = 29; continue;
				/* if (ok$4) { */ case 28:
					j$2 = 0;
					/* while (true) { */ case 30:
						/* if (!(j$2 < s2$2.BaseATNState.GetTransitions().$length)) { break; } */ if(!(j$2 < s2$2.BaseATNState.GetTransitions().$length)) { $s = 31; continue; }
						_r$8 = (x$9 = s2$2.BaseATNState.GetTransitions(), ((j$2 < 0 || j$2 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + j$2])).getTarget(); /* */ $s = 32; case 32: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						target$1 = _r$8;
						_tuple$5 = $assertType(target$1, ptrType$21, true);
						t2$1 = _tuple$5[0];
						ok$5 = _tuple$5[1];
						if (ok$5) {
							t2$1.loopBackState = state$1;
						}
						j$2 = j$2 + (1) >> 0;
					/* } */ $s = 30; continue; case 31:
				/* } */ case 29:
			/* } */ case 24:
			i$2 = i$2 + (1) >> 0;
		/* } */ $s = 20; continue; case 21:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ATNDeserializer.ptr.prototype.readEdges }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.a = a; $f.arg1 = arg1; $f.arg2 = arg2; $f.arg3 = arg3; $f.atn = atn; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.j = j; $f.j$1 = j$1; $f.j$2 = j$2; $f.nedges = nedges; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.ok$4 = ok$4; $f.ok$5 = ok$5; $f.outermostPrecedenceReturn = outermostPrecedenceReturn; $f.s2 = s2; $f.s2$1 = s2$1; $f.s2$2 = s2$2; $f.sets = sets; $f.src = src; $f.srcState = srcState; $f.state = state; $f.state$1 = state$1; $f.t = t; $f.t2 = t2; $f.t2$1 = t2$1; $f.target = target; $f.target$1 = target$1; $f.trans = trans; $f.trans$1 = trans$1; $f.trg = trg; $f.ttype = ttype; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	ATNDeserializer.prototype.readEdges = function(atn, sets) { return this.$val.readEdges(atn, sets); };
	ATNDeserializer.ptr.prototype.readDecisions = function(atn) {
		var a, atn, decState, i, ndecisions, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; atn = $f.atn; decState = $f.decState; i = $f.i; ndecisions = $f.ndecisions; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		ndecisions = a.readInt();
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < ndecisions)) { break; } */ if(!(i < ndecisions)) { $s = 2; continue; }
			s = a.readInt();
			decState = $assertType((x = atn.states, ((s < 0 || s >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + s])), DecisionState);
			atn.DecisionToState = $append(atn.DecisionToState, decState);
			$r = decState.setDecision(i); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ATNDeserializer.ptr.prototype.readDecisions }; } $f.a = a; $f.atn = atn; $f.decState = decState; $f.i = i; $f.ndecisions = ndecisions; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ATNDeserializer.prototype.readDecisions = function(atn) { return this.$val.readDecisions(atn); };
	ATNDeserializer.ptr.prototype.readLexerActions = function(atn) {
		var _r$2, a, actionType, atn, count, data1, data2, i, lexerAction, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; a = $f.a; actionType = $f.actionType; atn = $f.atn; count = $f.count; data1 = $f.data1; data2 = $f.data2; i = $f.i; lexerAction = $f.lexerAction; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		/* */ if (atn.grammarType === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (atn.grammarType === 0) { */ case 1:
			count = a.readInt();
			atn.lexerActions = $makeSlice(sliceType$2, count);
			i = 0;
			/* while (true) { */ case 3:
				/* if (!(i < count)) { break; } */ if(!(i < count)) { $s = 4; continue; }
				actionType = a.readInt();
				data1 = a.readInt();
				if (data1 === 65535) {
					data1 = -1;
				}
				data2 = a.readInt();
				if (data2 === 65535) {
					data2 = -1;
				}
				_r$2 = a.lexerActionFactory(actionType, data1, data2); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				lexerAction = _r$2;
				(x = atn.lexerActions, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = lexerAction));
				i = i + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ATNDeserializer.ptr.prototype.readLexerActions }; } $f._r$2 = _r$2; $f.a = a; $f.actionType = actionType; $f.atn = atn; $f.count = count; $f.data1 = data1; $f.data2 = data2; $f.i = i; $f.lexerAction = lexerAction; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ATNDeserializer.prototype.readLexerActions = function(atn) { return this.$val.readLexerActions(atn); };
	ATNDeserializer.ptr.prototype.generateRuleBypassTransitions = function(atn) {
		var a, atn, count, i, i$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; atn = $f.atn; count = $f.count; i = $f.i; i$1 = $f.i$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		count = atn.ruleToStartState.$length;
		i = 0;
		while (true) {
			if (!(i < count)) { break; }
			(x = atn.ruleToTokenType, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = ((atn.maxTokenType + i >> 0) + 1 >> 0)));
			i = i + (1) >> 0;
		}
		i$1 = 0;
		/* while (true) { */ case 1:
			/* if (!(i$1 < count)) { break; } */ if(!(i$1 < count)) { $s = 2; continue; }
			$r = a.generateRuleBypassTransition(atn, i$1); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ATNDeserializer.ptr.prototype.generateRuleBypassTransitions }; } $f.a = a; $f.atn = atn; $f.count = count; $f.i = i; $f.i$1 = i$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ATNDeserializer.prototype.generateRuleBypassTransitions = function(atn) { return this.$val.generateRuleBypassTransitions(atn); };
	ATNDeserializer.ptr.prototype.generateRuleBypassTransition = function(atn, idx) {
		var MatchState, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, a, atn, bypassStart, bypassStop, count, endState, excludeTransition, i, i$1, idx, j, ruleToStartState, state, state$1, transition, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; MatchState = $f.MatchState; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; a = $f.a; atn = $f.atn; bypassStart = $f.bypassStart; bypassStop = $f.bypassStop; count = $f.count; endState = $f.endState; excludeTransition = $f.excludeTransition; i = $f.i; i$1 = $f.i$1; idx = $f.idx; j = $f.j; ruleToStartState = $f.ruleToStartState; state = $f.state; state$1 = $f.state$1; transition = $f.transition; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		bypassStart = NewBasicBlockStartState();
		bypassStart.BaseBlockStartState.BaseDecisionState.BaseATNState.ruleIndex = idx;
		$r = atn.addState(bypassStart); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		bypassStop = NewBlockEndState();
		bypassStop.BaseATNState.ruleIndex = idx;
		$r = atn.addState(bypassStop); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		bypassStart.BaseBlockStartState.endState = bypassStop;
		_r$2 = atn.defineDecisionState(bypassStart.BaseBlockStartState.BaseDecisionState); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		bypassStop.startState = bypassStart;
		excludeTransition = $ifaceNil;
		endState = $ifaceNil;
		/* */ if ((x = atn.ruleToStartState, ((idx < 0 || idx >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + idx])).isPrecedenceRule) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((x = atn.ruleToStartState, ((idx < 0 || idx >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + idx])).isPrecedenceRule) { */ case 4:
			endState = $ifaceNil;
			i = 0;
			/* while (true) { */ case 7:
				/* if (!(i < atn.states.$length)) { break; } */ if(!(i < atn.states.$length)) { $s = 8; continue; }
				state = (x$1 = atn.states, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i]));
				_r$3 = a.stateIsEndStateFor(state, idx); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (!($interfaceIsEqual(_r$3, $ifaceNil))) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (!($interfaceIsEqual(_r$3, $ifaceNil))) { */ case 9:
					endState = state;
					_r$4 = $assertType(state, ptrType$21).loopBackState.GetTransitions(); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					excludeTransition = (x$2 = _r$4, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0]));
					/* break; */ $s = 8; continue;
				/* } */ case 10:
				i = i + (1) >> 0;
			/* } */ $s = 7; continue; case 8:
			if ($interfaceIsEqual(excludeTransition, $ifaceNil)) {
				$panic(new $String("Couldn't identify final state of the precedence rule prefix section."));
			}
			$s = 6; continue;
		/* } else { */ case 5:
			endState = (x$3 = atn.ruleToStopState, ((idx < 0 || idx >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + idx]));
		/* } */ case 6:
		i$1 = 0;
		/* while (true) { */ case 13:
			/* if (!(i$1 < atn.states.$length)) { break; } */ if(!(i$1 < atn.states.$length)) { $s = 14; continue; }
			state$1 = (x$4 = atn.states, ((i$1 < 0 || i$1 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i$1]));
			j = 0;
			/* while (true) { */ case 15:
				_r$5 = state$1.GetTransitions(); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* if (!(j < _r$5.$length)) { break; } */ if(!(j < _r$5.$length)) { $s = 16; continue; }
				_r$6 = state$1.GetTransitions(); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				transition = (x$5 = _r$6, ((j < 0 || j >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + j]));
				/* */ if ($interfaceIsEqual(transition, excludeTransition)) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if ($interfaceIsEqual(transition, excludeTransition)) { */ case 19:
					j = j + (1) >> 0;
					/* continue; */ $s = 15; continue;
				/* } */ case 20:
				_r$7 = transition.getTarget(); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				/* */ if ($interfaceIsEqual(_r$7, endState)) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if ($interfaceIsEqual(_r$7, endState)) { */ case 21:
					$r = transition.setTarget(bypassStop); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 22:
				j = j + (1) >> 0;
			/* } */ $s = 15; continue; case 16:
			i$1 = i$1 + (1) >> 0;
		/* } */ $s = 13; continue; case 14:
		ruleToStartState = (x$6 = atn.ruleToStartState, ((idx < 0 || idx >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + idx]));
		count = ruleToStartState.BaseATNState.GetTransitions().$length;
		/* while (true) { */ case 25:
			/* if (!(count > 0)) { break; } */ if(!(count > 0)) { $s = 26; continue; }
			$r = bypassStart.BaseBlockStartState.BaseDecisionState.BaseATNState.AddTransition((x$7 = ruleToStartState.BaseATNState.GetTransitions(), x$8 = count - 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])), -1); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			ruleToStartState.BaseATNState.SetTransitions(new sliceType$15([(x$9 = ruleToStartState.BaseATNState.GetTransitions(), x$10 = ruleToStartState.BaseATNState.GetTransitions().$length - 1 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10]))]));
		/* } */ $s = 25; continue; case 26:
		$r = (x$11 = atn.ruleToStartState, ((idx < 0 || idx >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + idx])).BaseATNState.AddTransition(NewEpsilonTransition(bypassStart, -1), -1); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bypassStop.BaseATNState.AddTransition(NewEpsilonTransition(endState, -1), -1); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		MatchState = NewBasicState();
		$r = atn.addState(MatchState); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = MatchState.BaseATNState.AddTransition(NewAtomTransition(bypassStop, (x$12 = atn.ruleToTokenType, ((idx < 0 || idx >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + idx]))), -1); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bypassStart.BaseBlockStartState.BaseDecisionState.BaseATNState.AddTransition(NewEpsilonTransition(MatchState, -1), -1); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ATNDeserializer.ptr.prototype.generateRuleBypassTransition }; } $f.MatchState = MatchState; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.a = a; $f.atn = atn; $f.bypassStart = bypassStart; $f.bypassStop = bypassStop; $f.count = count; $f.endState = endState; $f.excludeTransition = excludeTransition; $f.i = i; $f.i$1 = i$1; $f.idx = idx; $f.j = j; $f.ruleToStartState = ruleToStartState; $f.state = state; $f.state$1 = state$1; $f.transition = transition; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	ATNDeserializer.prototype.generateRuleBypassTransition = function(atn, idx) { return this.$val.generateRuleBypassTransition(atn, idx); };
	ATNDeserializer.ptr.prototype.stateIsEndStateFor = function(state, idx) {
		var _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _tuple$1, _tuple$2, a, idx, maybeLoopEndState, ok, ok$1, ok$2, state, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; a = $f.a; idx = $f.idx; maybeLoopEndState = $f.maybeLoopEndState; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; state = $f.state; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_r$2 = state.GetRuleIndex(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (!((_r$2 === idx))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r$2 === idx))) { */ case 1:
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		_tuple = $assertType(state, ptrType$21, true);
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return $ifaceNil;
		}
		_r$3 = state.GetTransitions(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = state.GetTransitions(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = (x = _r$3, x$1 = _r$4.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).getTarget(); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		maybeLoopEndState = _r$5;
		_tuple$1 = $assertType(maybeLoopEndState, ptrType$15, true);
		ok$1 = _tuple$1[1];
		if (!ok$1) {
			$s = -1; return $ifaceNil;
		}
		_r$6 = maybeLoopEndState.GetTransitions(); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = (x$2 = _r$6, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])).getTarget(); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_tuple$2 = $assertType(_r$7, ptrType$5, true);
		ok$2 = _tuple$2[1];
		if ($assertType(maybeLoopEndState, ptrType$15).BaseATNState.epsilonOnlyTransitions && ok$2) {
			$s = -1; return state;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ATNDeserializer.ptr.prototype.stateIsEndStateFor }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.a = a; $f.idx = idx; $f.maybeLoopEndState = maybeLoopEndState; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.state = state; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	ATNDeserializer.prototype.stateIsEndStateFor = function(state, idx) { return this.$val.stateIsEndStateFor(state, idx); };
	ATNDeserializer.ptr.prototype.markPrecedenceDecisions = function(atn) {
		var _i, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _tuple, _tuple$1, _tuple$2, a, atn, maybeLoopEndState, ok, ok$1, ok2, s3, state, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; a = $f.a; atn = $f.atn; maybeLoopEndState = $f.maybeLoopEndState; ok = $f.ok; ok$1 = $f.ok$1; ok2 = $f.ok2; s3 = $f.s3; state = $f.state; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_ref = atn.states;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			state = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_tuple = $assertType(state, ptrType$21, true);
			ok = _tuple[1];
			if (!ok) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			_r$2 = state.GetRuleIndex(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if ((x = atn.ruleToStartState, x$1 = _r$2, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).isPrecedenceRule) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((x = atn.ruleToStartState, x$1 = _r$2, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).isPrecedenceRule) { */ case 3:
				_r$3 = state.GetTransitions(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$4 = state.GetTransitions(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$5 = (x$2 = _r$3, x$3 = _r$4.$length - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])).getTarget(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				maybeLoopEndState = _r$5;
				_tuple$1 = $assertType(maybeLoopEndState, ptrType$15, true);
				s3 = _tuple$1[0];
				ok$1 = _tuple$1[1];
				/* */ if (ok$1) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (ok$1) { */ case 9:
					_r$6 = maybeLoopEndState.GetTransitions(); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = (x$4 = _r$6, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])).getTarget(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_tuple$2 = $assertType(_r$7, ptrType$5, true);
					ok2 = _tuple$2[1];
					if (s3.BaseATNState.epsilonOnlyTransitions && ok2) {
						$assertType(state, ptrType$21).precedenceRuleDecision = true;
					}
				/* } */ case 10:
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ATNDeserializer.ptr.prototype.markPrecedenceDecisions }; } $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.a = a; $f.atn = atn; $f.maybeLoopEndState = maybeLoopEndState; $f.ok = ok; $f.ok$1 = ok$1; $f.ok2 = ok2; $f.s3 = s3; $f.state = state; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	ATNDeserializer.prototype.markPrecedenceDecisions = function(atn) { return this.$val.markPrecedenceDecisions(atn); };
	ATNDeserializer.ptr.prototype.verifyATN = function(atn) {
		var _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _v, _v$1, a, atn, i, ok, ok2, ok2$1, ok2$2, s2, s2$1, s2$10, s2$11, s2$2, s2$3, s2$4, s2$5, s2$6, s2$7, s2$8, s2$9, s3, state, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _v = $f._v; _v$1 = $f._v$1; a = $f.a; atn = $f.atn; i = $f.i; ok = $f.ok; ok2 = $f.ok2; ok2$1 = $f.ok2$1; ok2$2 = $f.ok2$2; s2 = $f.s2; s2$1 = $f.s2$1; s2$10 = $f.s2$10; s2$11 = $f.s2$11; s2$2 = $f.s2$2; s2$3 = $f.s2$3; s2$4 = $f.s2$4; s2$5 = $f.s2$5; s2$6 = $f.s2$6; s2$7 = $f.s2$7; s2$8 = $f.s2$8; s2$9 = $f.s2$9; s3 = $f.s3; state = $f.state; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		if (!a.deserializationOptions.verifyATN) {
			$s = -1; return;
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < atn.states.$length)) { break; } */ if(!(i < atn.states.$length)) { $s = 2; continue; }
			state = (x = atn.states, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			/* */ if ($interfaceIsEqual(state, $ifaceNil)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($interfaceIsEqual(state, $ifaceNil)) { */ case 3:
				i = i + (1) >> 0;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_r$2 = state.GetEpsilonOnlyTransitions(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			if (_r$2) { _v = true; $s = 5; continue s; }
			_r$3 = state.GetTransitions(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_v = _r$3.$length <= 1; case 5:
			$r = a.checkCondition(_v, ""); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_ref = state;
			/* */ if ($assertType(_ref, ptrType$19, true)[1]) { $s = 9; continue; }
			/* */ if ($assertType(_ref, ptrType$21, true)[1]) { $s = 10; continue; }
			/* */ if ($assertType(_ref, ptrType$20, true)[1]) { $s = 11; continue; }
			/* */ if ($assertType(_ref, ptrType$15, true)[1]) { $s = 12; continue; }
			/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 13; continue; }
			/* */ if ($assertType(_ref, ptrType$17, true)[1]) { $s = 14; continue; }
			/* */ if ($assertType(_ref, ptrType$16, true)[1]) { $s = 15; continue; }
			/* */ if ($assertType(_ref, DecisionState, true)[1]) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if ($assertType(_ref, ptrType$19, true)[1]) { */ case 9:
				s2 = _ref.$val;
				a.checkCondition(!($interfaceIsEqual(s2.loopBackState, $ifaceNil)), "");
				$s = 18; continue;
			/* } else if ($assertType(_ref, ptrType$21, true)[1]) { */ case 10:
				s2$1 = _ref.$val;
				a.checkCondition(!($interfaceIsEqual(s2$1.loopBackState, $ifaceNil)), "");
				a.checkCondition(s2$1.BaseDecisionState.BaseATNState.GetTransitions().$length === 2, "");
				_ref$1 = state;
				/* */ if ($assertType(_ref$1, ptrType$22, true)[1]) { $s = 19; continue; }
				/* */ if ($assertType(_ref$1, ptrType$15, true)[1]) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if ($assertType(_ref$1, ptrType$22, true)[1]) { */ case 19:
					s2$9 = _ref$1.$val;
					_r$4 = (x$1 = s2$9.BaseBlockStartState.BaseDecisionState.BaseATNState.GetTransitions(), (1 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 1])).getTarget(); /* */ $s = 23; case 23: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_tuple = $assertType(_r$4, ptrType$15, true);
					ok2 = _tuple[1];
					a.checkCondition(ok2, "");
					a.checkCondition(!s2$9.BaseBlockStartState.BaseDecisionState.nonGreedy, "");
					$s = 22; continue;
				/* } else if ($assertType(_ref$1, ptrType$15, true)[1]) { */ case 20:
					s2$10 = _ref$1.$val;
					_r$5 = (x$2 = s2$10.BaseATNState.GetTransitions(), (1 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 1])).getTarget(); /* */ $s = 24; case 24: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$1 = $assertType(_r$5, ptrType$22, true);
					s3 = _tuple$1[0];
					ok2$1 = _tuple$1[1];
					a.checkCondition(ok2$1, "");
					a.checkCondition(s3.BaseBlockStartState.BaseDecisionState.nonGreedy, "");
					$s = 22; continue;
				/* } else { */ case 21:
					s2$11 = _ref$1;
					$panic(new $String("IllegalState"));
				/* } */ case 22:
				$s = 18; continue;
			/* } else if ($assertType(_ref, ptrType$20, true)[1]) { */ case 11:
				s2$2 = _ref.$val;
				_r$6 = state.GetTransitions(); /* */ $s = 25; case 25: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$r = a.checkCondition(_r$6.$length === 1, ""); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$7 = state.GetTransitions(); /* */ $s = 27; case 27: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$8 = (x$3 = _r$7, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).getTarget(); /* */ $s = 28; case 28: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_tuple$2 = $assertType(_r$8, ptrType$21, true);
				ok2$2 = _tuple$2[1];
				a.checkCondition(ok2$2, "");
				$s = 18; continue;
			/* } else if ($assertType(_ref, ptrType$15, true)[1]) { */ case 12:
				s2$3 = _ref.$val;
				a.checkCondition(!($interfaceIsEqual(s2$3.loopBackState, $ifaceNil)), "");
				$s = 18; continue;
			/* } else if ($assertType(_ref, ptrType$4, true)[1]) { */ case 13:
				s2$4 = _ref.$val;
				a.checkCondition(!($interfaceIsEqual(s2$4.stopState, $ifaceNil)), "");
				$s = 18; continue;
			/* } else if ($assertType(_ref, ptrType$17, true)[1]) { */ case 14:
				s2$5 = _ref.$val;
				a.checkCondition(!(s2$5.endState === ptrType$16.nil), "");
				$s = 18; continue;
			/* } else if ($assertType(_ref, ptrType$16, true)[1]) { */ case 15:
				s2$6 = _ref.$val;
				a.checkCondition(!($interfaceIsEqual(s2$6.startState, $ifaceNil)), "");
				$s = 18; continue;
			/* } else if ($assertType(_ref, DecisionState, true)[1]) { */ case 16:
				s2$7 = _ref;
				_r$9 = s2$7.GetTransitions(); /* */ $s = 30; case 30: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				if (_r$9.$length <= 1) { _v$1 = true; $s = 29; continue s; }
				_r$10 = s2$7.getDecision(); /* */ $s = 31; case 31: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_v$1 = _r$10 >= 0; case 29:
				$r = a.checkCondition(_v$1, ""); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 18; continue;
			/* } else { */ case 17:
				s2$8 = _ref;
				_tuple$3 = $assertType(s2$8, ptrType$5, true);
				ok = _tuple$3[1];
				_r$11 = s2$8.GetTransitions(); /* */ $s = 33; case 33: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				$r = a.checkCondition(_r$11.$length <= 1 || ok, ""); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 18:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ATNDeserializer.ptr.prototype.verifyATN }; } $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._v = _v; $f._v$1 = _v$1; $f.a = a; $f.atn = atn; $f.i = i; $f.ok = ok; $f.ok2 = ok2; $f.ok2$1 = ok2$1; $f.ok2$2 = ok2$2; $f.s2 = s2; $f.s2$1 = s2$1; $f.s2$10 = s2$10; $f.s2$11 = s2$11; $f.s2$2 = s2$2; $f.s2$3 = s2$3; $f.s2$4 = s2$4; $f.s2$5 = s2$5; $f.s2$6 = s2$6; $f.s2$7 = s2$7; $f.s2$8 = s2$8; $f.s2$9 = s2$9; $f.s3 = s3; $f.state = state; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	ATNDeserializer.prototype.verifyATN = function(atn) { return this.$val.verifyATN(atn); };
	ATNDeserializer.ptr.prototype.checkCondition = function(condition, message) {
		var a, condition, message;
		a = this;
		if (!condition) {
			if (message === "") {
				message = "IllegalState";
			}
			$panic(new $String(message));
		}
	};
	ATNDeserializer.prototype.checkCondition = function(condition, message) { return this.$val.checkCondition(condition, message); };
	ATNDeserializer.ptr.prototype.readInt = function() {
		var a, v, x, x$1;
		a = this;
		v = (x = a.data, x$1 = a.pos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		a.pos = a.pos + (1) >> 0;
		return ((v >> 0));
	};
	ATNDeserializer.prototype.readInt = function() { return this.$val.readInt(); };
	ATNDeserializer.ptr.prototype.readInt32 = function() {
		var a, high, low;
		a = this;
		low = a.readInt();
		high = a.readInt();
		return low | ((high << 16 >> 0));
	};
	ATNDeserializer.prototype.readInt32 = function() { return this.$val.readInt32(); };
	createByteToHex = function() {
		var _r$2, bth, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; bth = $f.bth; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bth = $makeSlice(sliceType, 256);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 256)) { break; } */ if(!(i < 256)) { $s = 2; continue; }
			_r$2 = strings.ToUpper(hex.EncodeToString(new sliceType$16([((i << 24 >>> 24))]))); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			((i < 0 || i >= bth.$length) ? ($throwRuntimeError("index out of range"), undefined) : bth.$array[bth.$offset + i] = _r$2);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return bth;
		/* */ } return; } if ($f === undefined) { $f = { $blk: createByteToHex }; } $f._r$2 = _r$2; $f.bth = bth; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	ATNDeserializer.ptr.prototype.readUUID = function() {
		var a, bb, i, integer, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		a = this;
		bb = $makeSlice(sliceType$6, 16);
		i = 7;
		while (true) {
			if (!(i >= 0)) { break; }
			integer = a.readInt();
			(x = (($imul(2, i))) + 1 >> 0, ((x < 0 || x >= bb.$length) ? ($throwRuntimeError("index out of range"), undefined) : bb.$array[bb.$offset + x] = (integer & 255)));
			(x$1 = $imul(2, i), ((x$1 < 0 || x$1 >= bb.$length) ? ($throwRuntimeError("index out of range"), undefined) : bb.$array[bb.$offset + x$1] = (((integer >> 8 >> 0)) & 255)));
			i = i - (1) >> 0;
		}
		return (x$2 = (0 >= bb.$length ? ($throwRuntimeError("index out of range"), undefined) : bb.$array[bb.$offset + 0]), ((x$2 < 0 || x$2 >= byteToHex.$length) ? ($throwRuntimeError("index out of range"), undefined) : byteToHex.$array[byteToHex.$offset + x$2])) + (x$3 = (1 >= bb.$length ? ($throwRuntimeError("index out of range"), undefined) : bb.$array[bb.$offset + 1]), ((x$3 < 0 || x$3 >= byteToHex.$length) ? ($throwRuntimeError("index out of range"), undefined) : byteToHex.$array[byteToHex.$offset + x$3])) + (x$4 = (2 >= bb.$length ? ($throwRuntimeError("index out of range"), undefined) : bb.$array[bb.$offset + 2]), ((x$4 < 0 || x$4 >= byteToHex.$length) ? ($throwRuntimeError("index out of range"), undefined) : byteToHex.$array[byteToHex.$offset + x$4])) + (x$5 = (3 >= bb.$length ? ($throwRuntimeError("index out of range"), undefined) : bb.$array[bb.$offset + 3]), ((x$5 < 0 || x$5 >= byteToHex.$length) ? ($throwRuntimeError("index out of range"), undefined) : byteToHex.$array[byteToHex.$offset + x$5])) + "-" + (x$6 = (4 >= bb.$length ? ($throwRuntimeError("index out of range"), undefined) : bb.$array[bb.$offset + 4]), ((x$6 < 0 || x$6 >= byteToHex.$length) ? ($throwRuntimeError("index out of range"), undefined) : byteToHex.$array[byteToHex.$offset + x$6])) + (x$7 = (5 >= bb.$length ? ($throwRuntimeError("index out of range"), undefined) : bb.$array[bb.$offset + 5]), ((x$7 < 0 || x$7 >= byteToHex.$length) ? ($throwRuntimeError("index out of range"), undefined) : byteToHex.$array[byteToHex.$offset + x$7])) + "-" + (x$8 = (6 >= bb.$length ? ($throwRuntimeError("index out of range"), undefined) : bb.$array[bb.$offset + 6]), ((x$8 < 0 || x$8 >= byteToHex.$length) ? ($throwRuntimeError("index out of range"), undefined) : byteToHex.$array[byteToHex.$offset + x$8])) + (x$9 = (7 >= bb.$length ? ($throwRuntimeError("index out of range"), undefined) : bb.$array[bb.$offset + 7]), ((x$9 < 0 || x$9 >= byteToHex.$length) ? ($throwRuntimeError("index out of range"), undefined) : byteToHex.$array[byteToHex.$offset + x$9])) + "-" + (x$10 = (8 >= bb.$length ? ($throwRuntimeError("index out of range"), undefined) : bb.$array[bb.$offset + 8]), ((x$10 < 0 || x$10 >= byteToHex.$length) ? ($throwRuntimeError("index out of range"), undefined) : byteToHex.$array[byteToHex.$offset + x$10])) + (x$11 = (9 >= bb.$length ? ($throwRuntimeError("index out of range"), undefined) : bb.$array[bb.$offset + 9]), ((x$11 < 0 || x$11 >= byteToHex.$length) ? ($throwRuntimeError("index out of range"), undefined) : byteToHex.$array[byteToHex.$offset + x$11])) + "-" + (x$12 = (10 >= bb.$length ? ($throwRuntimeError("index out of range"), undefined) : bb.$array[bb.$offset + 10]), ((x$12 < 0 || x$12 >= byteToHex.$length) ? ($throwRuntimeError("index out of range"), undefined) : byteToHex.$array[byteToHex.$offset + x$12])) + (x$13 = (11 >= bb.$length ? ($throwRuntimeError("index out of range"), undefined) : bb.$array[bb.$offset + 11]), ((x$13 < 0 || x$13 >= byteToHex.$length) ? ($throwRuntimeError("index out of range"), undefined) : byteToHex.$array[byteToHex.$offset + x$13])) + (x$14 = (12 >= bb.$length ? ($throwRuntimeError("index out of range"), undefined) : bb.$array[bb.$offset + 12]), ((x$14 < 0 || x$14 >= byteToHex.$length) ? ($throwRuntimeError("index out of range"), undefined) : byteToHex.$array[byteToHex.$offset + x$14])) + (x$15 = (13 >= bb.$length ? ($throwRuntimeError("index out of range"), undefined) : bb.$array[bb.$offset + 13]), ((x$15 < 0 || x$15 >= byteToHex.$length) ? ($throwRuntimeError("index out of range"), undefined) : byteToHex.$array[byteToHex.$offset + x$15])) + (x$16 = (14 >= bb.$length ? ($throwRuntimeError("index out of range"), undefined) : bb.$array[bb.$offset + 14]), ((x$16 < 0 || x$16 >= byteToHex.$length) ? ($throwRuntimeError("index out of range"), undefined) : byteToHex.$array[byteToHex.$offset + x$16])) + (x$17 = (15 >= bb.$length ? ($throwRuntimeError("index out of range"), undefined) : bb.$array[bb.$offset + 15]), ((x$17 < 0 || x$17 >= byteToHex.$length) ? ($throwRuntimeError("index out of range"), undefined) : byteToHex.$array[byteToHex.$offset + x$17]));
	};
	ATNDeserializer.prototype.readUUID = function() { return this.$val.readUUID(); };
	ATNDeserializer.ptr.prototype.edgeFactory = function(atn, typeIndex, src, trg, arg1, arg2, arg3, sets) {
		var _1, a, arg1, arg2, arg3, atn, sets, src, target, trg, typeIndex, x, x$1;
		a = this;
		target = (x = atn.states, ((trg < 0 || trg >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + trg]));
		_1 = typeIndex;
		if (_1 === (1)) {
			return NewEpsilonTransition(target, -1);
		} else if (_1 === (2)) {
			if (!((arg3 === 0))) {
				return NewRangeTransition(target, -1, arg2);
			}
			return NewRangeTransition(target, arg1, arg2);
		} else if (_1 === (3)) {
			return NewRuleTransition((x$1 = atn.states, ((arg1 < 0 || arg1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + arg1])), arg2, arg3, target);
		} else if (_1 === (4)) {
			return NewPredicateTransition(target, arg1, arg2, !((arg3 === 0)));
		} else if (_1 === (10)) {
			return NewPrecedencePredicateTransition(target, arg1);
		} else if (_1 === (5)) {
			if (!((arg3 === 0))) {
				return NewAtomTransition(target, -1);
			}
			return NewAtomTransition(target, arg1);
		} else if (_1 === (6)) {
			return NewActionTransition(target, arg1, arg2, !((arg3 === 0)));
		} else if (_1 === (7)) {
			return NewSetTransition(target, ((arg1 < 0 || arg1 >= sets.$length) ? ($throwRuntimeError("index out of range"), undefined) : sets.$array[sets.$offset + arg1]));
		} else if (_1 === (8)) {
			return NewNotSetTransition(target, ((arg1 < 0 || arg1 >= sets.$length) ? ($throwRuntimeError("index out of range"), undefined) : sets.$array[sets.$offset + arg1]));
		} else if (_1 === (9)) {
			return NewWildcardTransition(target);
		}
		$panic(new $String("The specified transition type is not valid."));
	};
	ATNDeserializer.prototype.edgeFactory = function(atn, typeIndex, src, trg, arg1, arg2, arg3, sets) { return this.$val.edgeFactory(atn, typeIndex, src, trg, arg1, arg2, arg3, sets); };
	ATNDeserializer.ptr.prototype.stateFactory = function(typeIndex, ruleIndex) {
		var _1, _r$2, a, ruleIndex, s, typeIndex, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$2 = $f._r$2; a = $f.a; ruleIndex = $f.ruleIndex; s = $f.s; typeIndex = $f.typeIndex; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		s = $ifaceNil;
			_1 = typeIndex;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (3)) { $s = 5; continue; }
			/* */ if (_1 === (4)) { $s = 6; continue; }
			/* */ if (_1 === (5)) { $s = 7; continue; }
			/* */ if (_1 === (6)) { $s = 8; continue; }
			/* */ if (_1 === (7)) { $s = 9; continue; }
			/* */ if (_1 === (8)) { $s = 10; continue; }
			/* */ if (_1 === (9)) { $s = 11; continue; }
			/* */ if (_1 === (10)) { $s = 12; continue; }
			/* */ if (_1 === (11)) { $s = 13; continue; }
			/* */ if (_1 === (12)) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (_1 === (0)) { */ case 2:
				$s = -1; return $ifaceNil;
			/* } else if (_1 === (1)) { */ case 3:
				s = NewBasicState();
				$s = 16; continue;
			/* } else if (_1 === (2)) { */ case 4:
				s = NewRuleStartState();
				$s = 16; continue;
			/* } else if (_1 === (3)) { */ case 5:
				s = NewBasicBlockStartState();
				$s = 16; continue;
			/* } else if (_1 === (4)) { */ case 6:
				s = NewPlusBlockStartState();
				$s = 16; continue;
			/* } else if (_1 === (5)) { */ case 7:
				s = NewStarBlockStartState();
				$s = 16; continue;
			/* } else if (_1 === (6)) { */ case 8:
				s = NewTokensStartState();
				$s = 16; continue;
			/* } else if (_1 === (7)) { */ case 9:
				s = NewRuleStopState();
				$s = 16; continue;
			/* } else if (_1 === (8)) { */ case 10:
				s = NewBlockEndState();
				$s = 16; continue;
			/* } else if (_1 === (9)) { */ case 11:
				s = NewStarLoopbackState();
				$s = 16; continue;
			/* } else if (_1 === (10)) { */ case 12:
				s = NewStarLoopEntryState();
				$s = 16; continue;
			/* } else if (_1 === (11)) { */ case 13:
				s = NewPlusLoopbackState();
				$s = 16; continue;
			/* } else if (_1 === (12)) { */ case 14:
				s = NewLoopEndState();
				$s = 16; continue;
			/* } else { */ case 15:
				_r$2 = fmt.Sprintf("state type %d is invalid", new sliceType$8([new $Int(typeIndex)])); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$panic(new $String(_r$2));
			/* } */ case 16:
		case 1:
		$r = s.SetRuleIndex(ruleIndex); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ATNDeserializer.ptr.prototype.stateFactory }; } $f._1 = _1; $f._r$2 = _r$2; $f.a = a; $f.ruleIndex = ruleIndex; $f.s = s; $f.typeIndex = typeIndex; $f.$s = $s; $f.$r = $r; return $f;
	};
	ATNDeserializer.prototype.stateFactory = function(typeIndex, ruleIndex) { return this.$val.stateFactory(typeIndex, ruleIndex); };
	ATNDeserializer.ptr.prototype.lexerActionFactory = function(typeIndex, data1, data2) {
		var _1, _r$2, a, data1, data2, typeIndex, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$2 = $f._r$2; a = $f.a; data1 = $f.data1; data2 = $f.data2; typeIndex = $f.typeIndex; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
			_1 = typeIndex;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (3)) { $s = 5; continue; }
			/* */ if (_1 === (4)) { $s = 6; continue; }
			/* */ if (_1 === (5)) { $s = 7; continue; }
			/* */ if (_1 === (6)) { $s = 8; continue; }
			/* */ if (_1 === (7)) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (0)) { */ case 2:
				$s = -1; return NewLexerChannelAction(data1);
			/* } else if (_1 === (1)) { */ case 3:
				$s = -1; return NewLexerCustomAction(data1, data2);
			/* } else if (_1 === (2)) { */ case 4:
				$s = -1; return NewLexerModeAction(data1);
			/* } else if (_1 === (3)) { */ case 5:
				$s = -1; return $pkg.LexerMoreActionINSTANCE;
			/* } else if (_1 === (4)) { */ case 6:
				$s = -1; return $pkg.LexerPopModeActionINSTANCE;
			/* } else if (_1 === (5)) { */ case 7:
				$s = -1; return NewLexerPushModeAction(data1);
			/* } else if (_1 === (6)) { */ case 8:
				$s = -1; return $pkg.LexerSkipActionINSTANCE;
			/* } else if (_1 === (7)) { */ case 9:
				$s = -1; return NewLexerTypeAction(data1);
			/* } else { */ case 10:
				_r$2 = fmt.Sprintf("lexer action %d is invalid", new sliceType$8([new $Int(typeIndex)])); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$panic(new $String(_r$2));
			/* } */ case 11:
		case 1:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ATNDeserializer.ptr.prototype.lexerActionFactory }; } $f._1 = _1; $f._r$2 = _r$2; $f.a = a; $f.data1 = data1; $f.data2 = data2; $f.typeIndex = typeIndex; $f.$s = $s; $f.$r = $r; return $f;
	};
	ATNDeserializer.prototype.lexerActionFactory = function(typeIndex, data1, data2) { return this.$val.lexerActionFactory(typeIndex, data1, data2); };
	NewBaseATNSimulator = function(atn, sharedContextCache) {
		var atn, b, sharedContextCache;
		b = new BaseATNSimulator.ptr(ptrType$23.nil, ptrType$24.nil, sliceType$17.nil);
		b.atn = atn;
		b.sharedContextCache = sharedContextCache;
		return b;
	};
	$pkg.NewBaseATNSimulator = NewBaseATNSimulator;
	BaseATNSimulator.ptr.prototype.getCachedContext = function(context) {
		var _r$2, b, context, visited, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; b = $f.b; context = $f.context; visited = $f.visited; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (b.sharedContextCache === ptrType$24.nil) {
			$s = -1; return context;
		}
		visited = {};
		_r$2 = getCachedBasePredictionContext(context, b.sharedContextCache, visited); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseATNSimulator.ptr.prototype.getCachedContext }; } $f._r$2 = _r$2; $f.b = b; $f.context = context; $f.visited = visited; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseATNSimulator.prototype.getCachedContext = function(context) { return this.$val.getCachedContext(context); };
	BaseATNSimulator.ptr.prototype.SharedContextCache = function() {
		var b;
		b = this;
		return b.sharedContextCache;
	};
	BaseATNSimulator.prototype.SharedContextCache = function() { return this.$val.SharedContextCache(); };
	BaseATNSimulator.ptr.prototype.ATN = function() {
		var b;
		b = this;
		return b.atn;
	};
	BaseATNSimulator.prototype.ATN = function() { return this.$val.ATN(); };
	BaseATNSimulator.ptr.prototype.DecisionToDFA = function() {
		var b;
		b = this;
		return b.decisionToDFA;
	};
	BaseATNSimulator.prototype.DecisionToDFA = function() { return this.$val.DecisionToDFA(); };
	NewBaseATNState = function() {
		return new BaseATNState.ptr(ptrType.nil, ptrType$23.nil, false, 0, -1, 0, sliceType$15.nil);
	};
	$pkg.NewBaseATNState = NewBaseATNState;
	BaseATNState.ptr.prototype.GetRuleIndex = function() {
		var as;
		as = this;
		return as.ruleIndex;
	};
	BaseATNState.prototype.GetRuleIndex = function() { return this.$val.GetRuleIndex(); };
	BaseATNState.ptr.prototype.SetRuleIndex = function(v) {
		var as, v;
		as = this;
		as.ruleIndex = v;
	};
	BaseATNState.prototype.SetRuleIndex = function(v) { return this.$val.SetRuleIndex(v); };
	BaseATNState.ptr.prototype.GetEpsilonOnlyTransitions = function() {
		var as;
		as = this;
		return as.epsilonOnlyTransitions;
	};
	BaseATNState.prototype.GetEpsilonOnlyTransitions = function() { return this.$val.GetEpsilonOnlyTransitions(); };
	BaseATNState.ptr.prototype.GetATN = function() {
		var as;
		as = this;
		return as.atn;
	};
	BaseATNState.prototype.GetATN = function() { return this.$val.GetATN(); };
	BaseATNState.ptr.prototype.SetATN = function(atn) {
		var as, atn;
		as = this;
		as.atn = atn;
	};
	BaseATNState.prototype.SetATN = function(atn) { return this.$val.SetATN(atn); };
	BaseATNState.ptr.prototype.GetTransitions = function() {
		var as;
		as = this;
		return as.transitions;
	};
	BaseATNState.prototype.GetTransitions = function() { return this.$val.GetTransitions(); };
	BaseATNState.ptr.prototype.SetTransitions = function(t) {
		var as, t;
		as = this;
		as.transitions = t;
	};
	BaseATNState.prototype.SetTransitions = function(t) { return this.$val.SetTransitions(t); };
	BaseATNState.ptr.prototype.GetStateType = function() {
		var as;
		as = this;
		return as.stateType;
	};
	BaseATNState.prototype.GetStateType = function() { return this.$val.GetStateType(); };
	BaseATNState.ptr.prototype.GetStateNumber = function() {
		var as;
		as = this;
		return as.stateNumber;
	};
	BaseATNState.prototype.GetStateNumber = function() { return this.$val.GetStateNumber(); };
	BaseATNState.ptr.prototype.SetStateNumber = function(stateNumber) {
		var as, stateNumber;
		as = this;
		as.stateNumber = stateNumber;
	};
	BaseATNState.prototype.SetStateNumber = function(stateNumber) { return this.$val.SetStateNumber(stateNumber); };
	BaseATNState.ptr.prototype.GetNextTokenWithinRule = function() {
		var as;
		as = this;
		return as.NextTokenWithinRule;
	};
	BaseATNState.prototype.GetNextTokenWithinRule = function() { return this.$val.GetNextTokenWithinRule(); };
	BaseATNState.ptr.prototype.SetNextTokenWithinRule = function(v) {
		var as, v;
		as = this;
		as.NextTokenWithinRule = v;
	};
	BaseATNState.prototype.SetNextTokenWithinRule = function(v) { return this.$val.SetNextTokenWithinRule(v); };
	BaseATNState.ptr.prototype.hash = function() {
		var as;
		as = this;
		return as.stateNumber;
	};
	BaseATNState.prototype.hash = function() { return this.$val.hash(); };
	BaseATNState.ptr.prototype.String = function() {
		var as;
		as = this;
		return strconv.Itoa(as.stateNumber);
	};
	BaseATNState.prototype.String = function() { return this.$val.String(); };
	BaseATNState.ptr.prototype.equals = function(other) {
		var _r$2, _tuple, as, ok, ot, other, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _tuple = $f._tuple; as = $f.as; ok = $f.ok; ot = $f.ot; other = $f.other; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		as = this;
		_tuple = $assertType(other, ATNState, true);
		ot = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r$2 = ot.GetStateNumber(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return as.stateNumber === _r$2;
		/* } */ case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseATNState.ptr.prototype.equals }; } $f._r$2 = _r$2; $f._tuple = _tuple; $f.as = as; $f.ok = ok; $f.ot = ot; $f.other = other; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseATNState.prototype.equals = function(other) { return this.$val.equals(other); };
	BaseATNState.ptr.prototype.AddTransition = function(trans, index) {
		var _r$2, _r$3, as, index, trans, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; as = $f.as; index = $f.index; trans = $f.trans; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		as = this;
		/* */ if (as.transitions.$length === 0) { $s = 1; continue; }
		_r$2 = trans.getIsEpsilon(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (!(as.epsilonOnlyTransitions === _r$2)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (as.transitions.$length === 0) { */ case 1:
			_r$3 = trans.getIsEpsilon(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			as.epsilonOnlyTransitions = _r$3;
			$s = 3; continue;
		/* } else if (!(as.epsilonOnlyTransitions === _r$2)) { */ case 2:
			as.epsilonOnlyTransitions = false;
		/* } */ case 3:
		if (index === -1) {
			as.transitions = $append(as.transitions, trans);
		} else {
			as.transitions = $appendSlice($subslice(as.transitions, 0, index), $appendSlice(new sliceType$15([trans]), $subslice(as.transitions, index)));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseATNState.ptr.prototype.AddTransition }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.as = as; $f.index = index; $f.trans = trans; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseATNState.prototype.AddTransition = function(trans, index) { return this.$val.AddTransition(trans, index); };
	NewBasicState = function() {
		var b;
		b = NewBaseATNState();
		b.stateType = 1;
		return new BasicState.ptr(b);
	};
	$pkg.NewBasicState = NewBasicState;
	NewBaseDecisionState = function() {
		return new BaseDecisionState.ptr(NewBaseATNState(), -1, false);
	};
	$pkg.NewBaseDecisionState = NewBaseDecisionState;
	BaseDecisionState.ptr.prototype.getDecision = function() {
		var s;
		s = this;
		return s.decision;
	};
	BaseDecisionState.prototype.getDecision = function() { return this.$val.getDecision(); };
	BaseDecisionState.ptr.prototype.setDecision = function(b) {
		var b, s;
		s = this;
		s.decision = b;
	};
	BaseDecisionState.prototype.setDecision = function(b) { return this.$val.setDecision(b); };
	BaseDecisionState.ptr.prototype.getNonGreedy = function() {
		var s;
		s = this;
		return s.nonGreedy;
	};
	BaseDecisionState.prototype.getNonGreedy = function() { return this.$val.getNonGreedy(); };
	BaseDecisionState.ptr.prototype.setNonGreedy = function(b) {
		var b, s;
		s = this;
		s.nonGreedy = b;
	};
	BaseDecisionState.prototype.setNonGreedy = function(b) { return this.$val.setNonGreedy(b); };
	NewBlockStartState = function() {
		return new BaseBlockStartState.ptr(NewBaseDecisionState(), ptrType$16.nil);
	};
	$pkg.NewBlockStartState = NewBlockStartState;
	BaseBlockStartState.ptr.prototype.setEndState = function(b) {
		var b, s;
		s = this;
		s.endState = b;
	};
	BaseBlockStartState.prototype.setEndState = function(b) { return this.$val.setEndState(b); };
	NewBasicBlockStartState = function() {
		var b;
		b = NewBlockStartState();
		b.BaseDecisionState.BaseATNState.stateType = 3;
		return new BasicBlockStartState.ptr(b);
	};
	$pkg.NewBasicBlockStartState = NewBasicBlockStartState;
	NewBlockEndState = function() {
		var b;
		b = NewBaseATNState();
		b.stateType = 8;
		return new BlockEndState.ptr(b, $ifaceNil);
	};
	$pkg.NewBlockEndState = NewBlockEndState;
	NewRuleStopState = function() {
		var b;
		b = NewBaseATNState();
		b.stateType = 7;
		return new RuleStopState.ptr(b);
	};
	$pkg.NewRuleStopState = NewRuleStopState;
	NewRuleStartState = function() {
		var b;
		b = NewBaseATNState();
		b.stateType = 2;
		return new RuleStartState.ptr(b, $ifaceNil, false);
	};
	$pkg.NewRuleStartState = NewRuleStartState;
	NewPlusLoopbackState = function() {
		var b;
		b = NewBaseDecisionState();
		b.BaseATNState.stateType = 11;
		return new PlusLoopbackState.ptr(b);
	};
	$pkg.NewPlusLoopbackState = NewPlusLoopbackState;
	NewPlusBlockStartState = function() {
		var b;
		b = NewBlockStartState();
		b.BaseDecisionState.BaseATNState.stateType = 4;
		return new PlusBlockStartState.ptr(b, $ifaceNil);
	};
	$pkg.NewPlusBlockStartState = NewPlusBlockStartState;
	NewStarBlockStartState = function() {
		var b;
		b = NewBlockStartState();
		b.BaseDecisionState.BaseATNState.stateType = 5;
		return new StarBlockStartState.ptr(b);
	};
	$pkg.NewStarBlockStartState = NewStarBlockStartState;
	NewStarLoopbackState = function() {
		var b;
		b = NewBaseATNState();
		b.stateType = 9;
		return new StarLoopbackState.ptr(b);
	};
	$pkg.NewStarLoopbackState = NewStarLoopbackState;
	NewStarLoopEntryState = function() {
		var b;
		b = NewBaseDecisionState();
		b.BaseATNState.stateType = 10;
		return new StarLoopEntryState.ptr(b, $ifaceNil, false);
	};
	$pkg.NewStarLoopEntryState = NewStarLoopEntryState;
	NewLoopEndState = function() {
		var b;
		b = NewBaseATNState();
		b.stateType = 12;
		return new LoopEndState.ptr(b, $ifaceNil);
	};
	$pkg.NewLoopEndState = NewLoopEndState;
	NewTokensStartState = function() {
		var b;
		b = NewBaseDecisionState();
		b.BaseATNState.stateType = 6;
		return new TokensStartState.ptr(b);
	};
	$pkg.NewTokensStartState = NewTokensStartState;
	NewCommonTokenFactory = function(copyText) {
		var copyText;
		return new CommonTokenFactory.ptr(copyText);
	};
	$pkg.NewCommonTokenFactory = NewCommonTokenFactory;
	CommonTokenFactory.ptr.prototype.Create = function(source, ttype, text, channel, start, stop, line, column) {
		var _r$2, _r$3, c, channel, column, line, source, start, stop, t, text, ttype, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; c = $f.c; channel = $f.channel; column = $f.column; line = $f.line; source = $f.source; start = $f.start; stop = $f.stop; t = $f.t; text = $f.text; ttype = $f.ttype; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r$2 = NewCommonToken(source, ttype, channel, start, stop); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		t = _r$2;
		t.BaseToken.line = line;
		t.BaseToken.column = column;
		/* */ if (!(text === "")) { $s = 2; continue; }
		/* */ if (c.copyText && !($interfaceIsEqual(source.charStream, $ifaceNil))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!(text === "")) { */ case 2:
			t.SetText(text);
			$s = 4; continue;
		/* } else if (c.copyText && !($interfaceIsEqual(source.charStream, $ifaceNil))) { */ case 3:
			_r$3 = source.charStream.GetTextFromInterval(NewInterval(start, stop)); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$r = t.SetText(_r$3); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		$s = -1; return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenFactory.ptr.prototype.Create }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.c = c; $f.channel = channel; $f.column = column; $f.line = line; $f.source = source; $f.start = start; $f.stop = stop; $f.t = t; $f.text = text; $f.ttype = ttype; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenFactory.prototype.Create = function(source, ttype, text, channel, start, stop, line, column) { return this.$val.Create(source, ttype, text, channel, start, stop, line, column); };
	NewCommonTokenStream = function(lexer, channel) {
		var channel, lexer;
		return new CommonTokenStream.ptr(channel, false, -1, lexer, $makeSlice(sliceType$18, 0));
	};
	$pkg.NewCommonTokenStream = NewCommonTokenStream;
	CommonTokenStream.ptr.prototype.GetAllTokens = function() {
		var c;
		c = this;
		return c.tokens;
	};
	CommonTokenStream.prototype.GetAllTokens = function() { return this.$val.GetAllTokens(); };
	CommonTokenStream.ptr.prototype.Mark = function() {
		var c;
		c = this;
		return 0;
	};
	CommonTokenStream.prototype.Mark = function() { return this.$val.Mark(); };
	CommonTokenStream.ptr.prototype.Release = function(marker) {
		var c, marker;
		c = this;
	};
	CommonTokenStream.prototype.Release = function(marker) { return this.$val.Release(marker); };
	CommonTokenStream.ptr.prototype.reset = function() {
		var c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		$r = c.Seek(0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.reset }; } $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.reset = function() { return this.$val.reset(); };
	CommonTokenStream.ptr.prototype.Seek = function(index) {
		var _r$2, c, index, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; c = $f.c; index = $f.index; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		$r = c.lazyInit(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$2 = c.adjustSeekIndex(index); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		c.index = _r$2;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.Seek }; } $f._r$2 = _r$2; $f.c = c; $f.index = index; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.Seek = function(index) { return this.$val.Seek(index); };
	CommonTokenStream.ptr.prototype.Get = function(index) {
		var c, index, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; c = $f.c; index = $f.index; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		$r = c.lazyInit(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return (x = c.tokens, ((index < 0 || index >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + index]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.Get }; } $f.c = c; $f.index = index; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.Get = function(index) { return this.$val.Get(index); };
	CommonTokenStream.ptr.prototype.Consume = function() {
		var SkipEOFCheck, _r$2, _r$3, _r$4, _v, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; SkipEOFCheck = $f.SkipEOFCheck; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _v = $f._v; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		SkipEOFCheck = false;
		if (c.index >= 0) {
			if (c.fetchedEOF) {
				SkipEOFCheck = c.index < (c.tokens.$length - 1 >> 0);
			} else {
				SkipEOFCheck = c.index < c.tokens.$length;
			}
		} else {
			SkipEOFCheck = false;
		}
		if (!(!SkipEOFCheck)) { _v = false; $s = 3; continue s; }
		_r$2 = c.LA(1); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v = _r$2 === -1; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("cannot consume EOF"));
		/* } */ case 2:
		_r$3 = c.Sync(c.index + 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$3) { */ case 5:
			_r$4 = c.adjustSeekIndex(c.index + 1 >> 0); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			c.index = _r$4;
		/* } */ case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.Consume }; } $f.SkipEOFCheck = SkipEOFCheck; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._v = _v; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.Consume = function() { return this.$val.Consume(); };
	CommonTokenStream.ptr.prototype.Sync = function(i) {
		var _r$2, c, fetched, i, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; c = $f.c; fetched = $f.fetched; i = $f.i; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		n = (i - c.tokens.$length >> 0) + 1 >> 0;
		/* */ if (n > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n > 0) { */ case 1:
			_r$2 = c.fetch(n); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			fetched = _r$2;
			$s = -1; return fetched >= n;
		/* } */ case 2:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.Sync }; } $f._r$2 = _r$2; $f.c = c; $f.fetched = fetched; $f.i = i; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.Sync = function(i) { return this.$val.Sync(i); };
	CommonTokenStream.ptr.prototype.fetch = function(n) {
		var _r$2, _r$3, c, i, n, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; c = $f.c; i = $f.i; n = $f.n; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if (c.fetchedEOF) {
			$s = -1; return 0;
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_r$2 = c.tokenSource.NextToken(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			t = _r$2;
			$r = t.SetTokenIndex(c.tokens.$length); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			c.tokens = $append(c.tokens, t);
			_r$3 = t.GetTokenType(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3 === -1) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_r$3 === -1) { */ case 5:
				c.fetchedEOF = true;
				$s = -1; return i + 1 >> 0;
			/* } */ case 6:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.fetch }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.c = c; $f.i = i; $f.n = n; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.fetch = function(n) { return this.$val.fetch(n); };
	CommonTokenStream.ptr.prototype.GetTokens = function(start, stop, types) {
		var _r$2, _r$3, _r$4, _v, c, i, start, stop, subset, t, types, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _v = $f._v; c = $f.c; i = $f.i; start = $f.start; stop = $f.stop; subset = $f.subset; t = $f.t; types = $f.types; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if (start < 0 || stop < 0) {
			$s = -1; return sliceType$18.nil;
		}
		$r = c.lazyInit(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		subset = $makeSlice(sliceType$18, 0);
		if (stop >= c.tokens.$length) {
			stop = c.tokens.$length - 1 >> 0;
		}
		i = start;
		/* while (true) { */ case 2:
			/* if (!(i < stop)) { break; } */ if(!(i < stop)) { $s = 3; continue; }
			t = (x = c.tokens, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			_r$2 = t.GetTokenType(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2 === -1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$2 === -1) { */ case 4:
				/* break; */ $s = 3; continue;
			/* } */ case 5:
			if (types === ptrType.nil) { _v = true; $s = 9; continue s; }
			_r$3 = t.GetTokenType(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = types.contains(_r$3); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_v = _r$4; case 9:
			/* */ if (_v) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_v) { */ case 7:
				subset = $append(subset, t);
			/* } */ case 8:
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return subset;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.GetTokens }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._v = _v; $f.c = c; $f.i = i; $f.start = start; $f.stop = stop; $f.subset = subset; $f.t = t; $f.types = types; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.GetTokens = function(start, stop, types) { return this.$val.GetTokens(start, stop, types); };
	CommonTokenStream.ptr.prototype.LA = function(i) {
		var _r$2, _r$3, c, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; c = $f.c; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r$2 = c.LT(i); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = _r$2.GetTokenType(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.LA }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.c = c; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.LA = function(i) { return this.$val.LA(i); };
	CommonTokenStream.ptr.prototype.lazyInit = function() {
		var c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		/* */ if (c.index === -1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (c.index === -1) { */ case 1:
			$r = c.setup(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.lazyInit }; } $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.lazyInit = function() { return this.$val.lazyInit(); };
	CommonTokenStream.ptr.prototype.setup = function() {
		var _r$2, _r$3, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r$2 = c.Sync(0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = c.adjustSeekIndex(0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		c.index = _r$3;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.setup }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.setup = function() { return this.$val.setup(); };
	CommonTokenStream.ptr.prototype.GetTokenSource = function() {
		var c;
		c = this;
		return c.tokenSource;
	};
	CommonTokenStream.prototype.GetTokenSource = function() { return this.$val.GetTokenSource(); };
	CommonTokenStream.ptr.prototype.SetTokenSource = function(tokenSource) {
		var c, tokenSource;
		c = this;
		c.tokenSource = tokenSource;
		c.tokens = $makeSlice(sliceType$18, 0);
		c.index = -1;
	};
	CommonTokenStream.prototype.SetTokenSource = function(tokenSource) { return this.$val.SetTokenSource(tokenSource); };
	CommonTokenStream.ptr.prototype.NextTokenOnChannel = function(i, channel) {
		var _r$2, _r$3, _r$4, _r$5, c, channel, i, token, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; c = $f.c; channel = $f.channel; i = $f.i; token = $f.token; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r$2 = c.Sync(i); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		if (i >= c.tokens.$length) {
			$s = -1; return -1;
		}
		token = (x = c.tokens, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		/* while (true) { */ case 2:
			_r$3 = token.GetChannel(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* if (!(!((_r$3 === c.channel)))) { break; } */ if(!(!((_r$3 === c.channel)))) { $s = 3; continue; }
			_r$4 = token.GetTokenType(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4 === -1) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_r$4 === -1) { */ case 5:
				$s = -1; return -1;
			/* } */ case 6:
			i = i + (1) >> 0;
			_r$5 = c.Sync(i); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			token = (x$1 = c.tokens, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i]));
		/* } */ $s = 2; continue; case 3:
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.NextTokenOnChannel }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.c = c; $f.channel = channel; $f.i = i; $f.token = token; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.NextTokenOnChannel = function(i, channel) { return this.$val.NextTokenOnChannel(i, channel); };
	CommonTokenStream.ptr.prototype.previousTokenOnChannel = function(i, channel) {
		var _r$2, _v, c, channel, i, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _v = $f._v; c = $f.c; channel = $f.channel; i = $f.i; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		/* while (true) { */ case 1:
			if (!(i >= 0)) { _v = false; $s = 3; continue s; }
			_r$2 = (x = c.tokens, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).GetChannel(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_v = !((_r$2 === channel)); case 3:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 2; continue; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.previousTokenOnChannel }; } $f._r$2 = _r$2; $f._v = _v; $f.c = c; $f.channel = channel; $f.i = i; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.previousTokenOnChannel = function(i, channel) { return this.$val.previousTokenOnChannel(i, channel); };
	CommonTokenStream.ptr.prototype.GetSourceName = function() {
		var _r$2, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r$2 = c.tokenSource.GetSourceName(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.GetSourceName }; } $f._r$2 = _r$2; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.GetSourceName = function() { return this.$val.GetSourceName(); };
	CommonTokenStream.ptr.prototype.Size = function() {
		var c;
		c = this;
		return c.tokens.$length;
	};
	CommonTokenStream.prototype.Size = function() { return this.$val.Size(); };
	CommonTokenStream.ptr.prototype.Index = function() {
		var c;
		c = this;
		return c.index;
	};
	CommonTokenStream.prototype.Index = function() { return this.$val.Index(); };
	CommonTokenStream.ptr.prototype.GetAllText = function() {
		var _r$2, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r$2 = c.GetTextFromInterval(ptrType$29.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.GetAllText }; } $f._r$2 = _r$2; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.GetAllText = function() { return this.$val.GetAllText(); };
	CommonTokenStream.ptr.prototype.GetTextFromTokens = function(start, end) {
		var _arg, _arg$1, _r$2, _r$3, _r$4, _r$5, c, end, start, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; c = $f.c; end = $f.end; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if ($interfaceIsEqual(start, $ifaceNil) || $interfaceIsEqual(end, $ifaceNil)) {
			$s = -1; return "";
		}
		_r$2 = start.GetTokenIndex(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg = _r$2;
		_r$3 = end.GetTokenIndex(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$1 = _r$3;
		_r$4 = NewInterval(_arg, _arg$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = c.GetTextFromInterval(_r$4); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return _r$5;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.GetTextFromTokens }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.c = c; $f.end = end; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.GetTextFromTokens = function(start, end) { return this.$val.GetTextFromTokens(start, end); };
	CommonTokenStream.ptr.prototype.GetTextFromRuleContext = function(interval) {
		var _r$2, _r$3, c, interval, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; c = $f.c; interval = $f.interval; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r$2 = interval.GetSourceInterval(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = c.GetTextFromInterval(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.GetTextFromRuleContext }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.c = c; $f.interval = interval; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.GetTextFromRuleContext = function(interval) { return this.$val.GetTextFromRuleContext(interval); };
	CommonTokenStream.ptr.prototype.GetTextFromInterval = function(interval) {
		var _r$2, _r$3, c, i, interval, s, start, stop, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; c = $f.c; i = $f.i; interval = $f.interval; s = $f.s; start = $f.start; stop = $f.stop; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		$r = c.lazyInit(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = c.Fill(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (interval === ptrType$29.nil) {
			interval = NewInterval(0, c.tokens.$length - 1 >> 0);
		}
		start = interval.Start;
		stop = interval.Stop;
		if (start < 0 || stop < 0) {
			$s = -1; return "";
		}
		if (stop >= c.tokens.$length) {
			stop = c.tokens.$length - 1 >> 0;
		}
		s = "";
		i = start;
		/* while (true) { */ case 3:
			/* if (!(i < (stop + 1 >> 0))) { break; } */ if(!(i < (stop + 1 >> 0))) { $s = 4; continue; }
			t = (x = c.tokens, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			_r$2 = t.GetTokenType(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2 === -1) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_r$2 === -1) { */ case 5:
				/* break; */ $s = 4; continue;
			/* } */ case 6:
			_r$3 = t.GetText(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			s = s + (_r$3);
			i = i + (1) >> 0;
		/* } */ $s = 3; continue; case 4:
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.GetTextFromInterval }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.c = c; $f.i = i; $f.interval = interval; $f.s = s; $f.start = start; $f.stop = stop; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.GetTextFromInterval = function(interval) { return this.$val.GetTextFromInterval(interval); };
	CommonTokenStream.ptr.prototype.Fill = function() {
		var _r$2, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		$r = c.lazyInit(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* while (true) { */ case 2:
			_r$2 = c.fetch(1000); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* if (!(_r$2 === 1000)) { break; } */ if(!(_r$2 === 1000)) { $s = 3; continue; }
			/* continue; */ $s = 2; continue;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.Fill }; } $f._r$2 = _r$2; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.Fill = function() { return this.$val.Fill(); };
	CommonTokenStream.ptr.prototype.adjustSeekIndex = function(i) {
		var _r$2, c, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; c = $f.c; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r$2 = c.NextTokenOnChannel(i, c.channel); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.adjustSeekIndex }; } $f._r$2 = _r$2; $f.c = c; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.adjustSeekIndex = function(i) { return this.$val.adjustSeekIndex(i); };
	CommonTokenStream.ptr.prototype.LB = function(k) {
		var _r$2, c, i, k, n, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; c = $f.c; i = $f.i; k = $f.k; n = $f.n; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if ((k === 0) || (c.index - k >> 0) < 0) {
			$s = -1; return $ifaceNil;
		}
		i = c.index;
		n = 1;
		/* while (true) { */ case 1:
			/* if (!(n <= k)) { break; } */ if(!(n <= k)) { $s = 2; continue; }
			_r$2 = c.previousTokenOnChannel(i - 1 >> 0, c.channel); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			i = _r$2;
			n = n + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (i < 0) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return (x = c.tokens, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.LB }; } $f._r$2 = _r$2; $f.c = c; $f.i = i; $f.k = k; $f.n = n; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.LB = function(k) { return this.$val.LB(k); };
	CommonTokenStream.ptr.prototype.LT = function(k) {
		var _r$2, _r$3, _r$4, c, i, k, n, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; c = $f.c; i = $f.i; k = $f.k; n = $f.n; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		$r = c.lazyInit(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (k === 0) {
			$s = -1; return $ifaceNil;
		}
		/* */ if (k < 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (k < 0) { */ case 2:
			_r$2 = c.LB(-k); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } */ case 3:
		i = c.index;
		n = 1;
		/* while (true) { */ case 5:
			/* if (!(n < k)) { break; } */ if(!(n < k)) { $s = 6; continue; }
			_r$3 = c.Sync(i + 1 >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_r$3) { */ case 7:
				_r$4 = c.NextTokenOnChannel(i + 1 >> 0, c.channel); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				i = _r$4;
			/* } */ case 8:
			n = n + (1) >> 0;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return (x = c.tokens, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonTokenStream.ptr.prototype.LT }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.c = c; $f.i = i; $f.k = k; $f.n = n; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonTokenStream.prototype.LT = function(k) { return this.$val.LT(k); };
	NewDFA = function(atnStartState, decision) {
		var atnStartState, decision;
		return new DFA.ptr(atnStartState, decision, {}, new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), ptrType$30.nil, new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), false);
	};
	$pkg.NewDFA = NewDFA;
	DFA.ptr.prototype.getPrecedenceStartState = function(precedence) {
		var d, precedence, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; d = $f.d; precedence = $f.precedence; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		d = this;
		if (!d.precedenceDfa) {
			$panic(new $String("only precedence DFAs may contain a precedence start state"));
		}
		$r = d.s0Mu.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(d.s0Mu, "RUnlock"), []]);
		if (precedence < 0 || precedence >= d.s0.edges.$length) {
			$s = -1; return ptrType$30.nil;
		}
		$s = -1; return (x = d.s0.edges, ((precedence < 0 || precedence >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + precedence]));
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$30.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: DFA.ptr.prototype.getPrecedenceStartState }; } $f.d = d; $f.precedence = precedence; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	DFA.prototype.getPrecedenceStartState = function(precedence) { return this.$val.getPrecedenceStartState(precedence); };
	DFA.ptr.prototype.setPrecedenceStartState = function(precedence, startState) {
		var d, precedence, startState, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; d = $f.d; precedence = $f.precedence; startState = $f.startState; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		d = this;
		if (!d.precedenceDfa) {
			$panic(new $String("only precedence DFAs may contain a precedence start state"));
		}
		if (precedence < 0) {
			$s = -1; return;
		}
		$r = d.s0Mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(d.s0Mu, "Unlock"), []]);
		if (precedence >= d.s0.edges.$length) {
			d.s0.edges = $appendSlice(d.s0.edges, $makeSlice(sliceType$19, ((precedence + 1 >> 0) - d.s0.edges.$length >> 0)));
		}
		(x = d.s0.edges, ((precedence < 0 || precedence >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + precedence] = startState));
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: DFA.ptr.prototype.setPrecedenceStartState }; } $f.d = d; $f.precedence = precedence; $f.startState = startState; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	DFA.prototype.setPrecedenceStartState = function(precedence, startState) { return this.$val.setPrecedenceStartState(precedence, startState); };
	DFA.ptr.prototype.setPrecedenceDfa = function(precedenceDfa) {
		var d, precedenceDfa, precedenceState;
		d = this;
		if (!(d.precedenceDfa === precedenceDfa)) {
			d.states = {};
			if (precedenceDfa) {
				precedenceState = NewDFAState(-1, NewBaseATNConfigSet(false));
				precedenceState.edges = $makeSlice(sliceType$19, 0);
				precedenceState.isAcceptState = false;
				precedenceState.requiresFullContext = false;
				d.s0 = precedenceState;
			} else {
				d.s0 = ptrType$30.nil;
			}
			d.precedenceDfa = precedenceDfa;
		}
	};
	DFA.prototype.setPrecedenceDfa = function(precedenceDfa) { return this.$val.setPrecedenceDfa(precedenceDfa); };
	DFA.ptr.prototype.setS0 = function(s) {
		var d, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; d = $f.d; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		d = this;
		$r = d.s0Mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(d.s0Mu, "Unlock"), []]);
		d.s0 = s;
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: DFA.ptr.prototype.setS0 }; } $f.d = d; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	DFA.prototype.setS0 = function(s) { return this.$val.setS0(s); };
	DFA.ptr.prototype.getState = function(hash) {
		var _entry, _tuple, d, hash, ok, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _tuple = $f._tuple; d = $f.d; hash = $f.hash; ok = $f.ok; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		d = this;
		$r = d.statesMu.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(d.statesMu, "RUnlock"), []]);
		_tuple = (_entry = d.states[$Int.keyFor(hash)], _entry !== undefined ? [_entry.v, true] : [ptrType$30.nil, false]);
		s = _tuple[0];
		ok = _tuple[1];
		$s = -1; return [s, ok];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [ptrType$30.nil, false]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: DFA.ptr.prototype.getState }; } $f._entry = _entry; $f._tuple = _tuple; $f.d = d; $f.hash = hash; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	DFA.prototype.getState = function(hash) { return this.$val.getState(hash); };
	DFA.ptr.prototype.setState = function(hash, state) {
		var _key, d, hash, state, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _key = $f._key; d = $f.d; hash = $f.hash; state = $f.state; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		d = this;
		$r = d.statesMu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(d.statesMu, "Unlock"), []]);
		_key = hash; (d.states || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: state };
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: DFA.ptr.prototype.setState }; } $f._key = _key; $f.d = d; $f.hash = hash; $f.state = state; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	DFA.prototype.setState = function(hash, state) { return this.$val.setState(hash, state); };
	DFA.ptr.prototype.numStates = function() {
		var d, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; d = $f.d; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		d = this;
		$r = d.statesMu.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(d.statesMu, "RUnlock"), []]);
		$s = -1; return $keys(d.states).length;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return 0; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: DFA.ptr.prototype.numStates }; } $f.d = d; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	DFA.prototype.numStates = function() { return this.$val.numStates(); };
	dfaStateList.prototype.Len = function() {
		var d;
		d = this;
		return d.$length;
	};
	$ptrType(dfaStateList).prototype.Len = function() { return this.$get().Len(); };
	dfaStateList.prototype.Less = function(i, j) {
		var d, i, j;
		d = this;
		return ((i < 0 || i >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + i]).stateNumber < ((j < 0 || j >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + j]).stateNumber;
	};
	$ptrType(dfaStateList).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	dfaStateList.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, d, i, j;
		d = this;
		_tmp = ((j < 0 || j >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + j]);
		_tmp$1 = ((i < 0 || i >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + i]);
		((i < 0 || i >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + i] = _tmp);
		((j < 0 || j >= d.$length) ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + j] = _tmp$1);
	};
	$ptrType(dfaStateList).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	DFA.ptr.prototype.sortedStates = function() {
		var _entry, _i, _keys, _ref, d, v, vs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _ref = $f._ref; d = $f.d; v = $f.v; vs = $f.vs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		vs = $makeSlice(sliceType$19, 0, $keys(d.states).length);
		_ref = d.states;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			v = _entry.v;
			vs = $append(vs, v);
			_i++;
		}
		$r = sort.Sort(($subslice(new dfaStateList(vs.$array), vs.$offset, vs.$offset + vs.$length))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return vs;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DFA.ptr.prototype.sortedStates }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._ref = _ref; $f.d = d; $f.v = v; $f.vs = vs; $f.$s = $s; $f.$r = $r; return $f;
	};
	DFA.prototype.sortedStates = function() { return this.$val.sortedStates(); };
	DFA.ptr.prototype.String = function(literalNames, symbolicNames) {
		var _r$2, d, literalNames, symbolicNames, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; d = $f.d; literalNames = $f.literalNames; symbolicNames = $f.symbolicNames; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (d.s0 === ptrType$30.nil) {
			$s = -1; return "";
		}
		_r$2 = NewDFASerializer(d, literalNames, symbolicNames).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DFA.ptr.prototype.String }; } $f._r$2 = _r$2; $f.d = d; $f.literalNames = literalNames; $f.symbolicNames = symbolicNames; $f.$s = $s; $f.$r = $r; return $f;
	};
	DFA.prototype.String = function(literalNames, symbolicNames) { return this.$val.String(literalNames, symbolicNames); };
	DFA.ptr.prototype.ToLexerString = function() {
		var _r$2, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (d.s0 === ptrType$30.nil) {
			$s = -1; return "";
		}
		_r$2 = NewLexerDFASerializer(d).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DFA.ptr.prototype.ToLexerString }; } $f._r$2 = _r$2; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	DFA.prototype.ToLexerString = function() { return this.$val.ToLexerString(); };
	NewDFASerializer = function(dfa, literalNames, symbolicNames) {
		var dfa, literalNames, symbolicNames;
		if (literalNames === sliceType.nil) {
			literalNames = $makeSlice(sliceType, 0);
		}
		if (symbolicNames === sliceType.nil) {
			symbolicNames = $makeSlice(sliceType, 0);
		}
		return new DFASerializer.ptr(dfa, literalNames, symbolicNames);
	};
	$pkg.NewDFASerializer = NewDFASerializer;
	DFASerializer.ptr.prototype.String = function() {
		var _i, _r$2, _r$3, _r$4, _ref, buf, d, j, n, s, states, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; buf = $f.buf; d = $f.d; j = $f.j; n = $f.n; s = $f.s; states = $f.states; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (d.dfa.s0 === ptrType$30.nil) {
			$s = -1; return "";
		}
		buf = "";
		_r$2 = d.dfa.sortedStates(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		states = _r$2;
		_ref = states;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (!(s.edges === sliceType$19.nil)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!(s.edges === sliceType$19.nil)) { */ case 4:
				n = s.edges.$length;
				j = 0;
				/* while (true) { */ case 6:
					/* if (!(j < n)) { break; } */ if(!(j < n)) { $s = 7; continue; }
					t = (x = s.edges, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
					/* */ if (!(t === ptrType$30.nil) && !((t.stateNumber === 2147483647))) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (!(t === ptrType$30.nil) && !((t.stateNumber === 2147483647))) { */ case 8:
						_r$3 = d.GetStateString(s); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						buf = buf + (_r$3);
						buf = buf + ("-");
						buf = buf + (d.getEdgeLabel(j));
						buf = buf + ("->");
						_r$4 = d.GetStateString(t); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						buf = buf + (_r$4);
						buf = buf + ("\n");
					/* } */ case 9:
					j = j + (1) >> 0;
				/* } */ $s = 6; continue; case 7:
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		if (buf.length === 0) {
			$s = -1; return "";
		}
		$s = -1; return buf;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DFASerializer.ptr.prototype.String }; } $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.buf = buf; $f.d = d; $f.j = j; $f.n = n; $f.s = s; $f.states = states; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	DFASerializer.prototype.String = function() { return this.$val.String(); };
	DFASerializer.ptr.prototype.getEdgeLabel = function(i) {
		var d, i, x, x$1, x$2, x$3;
		d = this;
		if (i === 0) {
			return "EOF";
		} else if (!(d.literalNames === sliceType.nil) && (i - 1 >> 0) < d.literalNames.$length) {
			return (x = d.literalNames, x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		} else if (!(d.symbolicNames === sliceType.nil) && (i - 1 >> 0) < d.symbolicNames.$length) {
			return (x$2 = d.symbolicNames, x$3 = i - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]));
		}
		return strconv.Itoa(i - 1 >> 0);
	};
	DFASerializer.prototype.getEdgeLabel = function(i) { return this.$val.getEdgeLabel(i); };
	DFASerializer.ptr.prototype.GetStateString = function(s) {
		var _r$2, _r$3, _tmp, _tmp$1, a, b, baseStateStr, d, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; a = $f.a; b = $f.b; baseStateStr = $f.baseStateStr; d = $f.d; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_tmp = "";
		_tmp$1 = "";
		a = _tmp;
		b = _tmp$1;
		if (s.isAcceptState) {
			a = ":";
		}
		if (s.requiresFullContext) {
			b = "^";
		}
		baseStateStr = a + "s" + strconv.Itoa(s.stateNumber) + b;
		/* */ if (s.isAcceptState) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.isAcceptState) { */ case 1:
			/* */ if (!(s.predicates === sliceType$20.nil)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(s.predicates === sliceType$20.nil)) { */ case 3:
				_r$2 = fmt.Sprint(new sliceType$8([s.predicates])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return baseStateStr + "=>" + _r$2;
			/* } */ case 4:
			_r$3 = fmt.Sprint(new sliceType$8([new $Int(s.prediction)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return baseStateStr + "=>" + _r$3;
		/* } */ case 2:
		$s = -1; return baseStateStr;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DFASerializer.ptr.prototype.GetStateString }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.a = a; $f.b = b; $f.baseStateStr = baseStateStr; $f.d = d; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	DFASerializer.prototype.GetStateString = function(s) { return this.$val.GetStateString(s); };
	NewLexerDFASerializer = function(dfa) {
		var dfa;
		return new LexerDFASerializer.ptr(NewDFASerializer(dfa, sliceType.nil, sliceType.nil));
	};
	$pkg.NewLexerDFASerializer = NewLexerDFASerializer;
	LexerDFASerializer.ptr.prototype.getEdgeLabel = function(i) {
		var i, l;
		l = this;
		return "'" + ($encodeRune(i)) + "'";
	};
	LexerDFASerializer.prototype.getEdgeLabel = function(i) { return this.$val.getEdgeLabel(i); };
	LexerDFASerializer.ptr.prototype.String = function() {
		var _r$2, _r$3, _r$4, buf, i, j, l, n, s, states, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; buf = $f.buf; i = $f.i; j = $f.j; l = $f.l; n = $f.n; s = $f.s; states = $f.states; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		if (l.DFASerializer.dfa.s0 === ptrType$30.nil) {
			$s = -1; return "";
		}
		buf = "";
		_r$2 = l.DFASerializer.dfa.sortedStates(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		states = _r$2;
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < states.$length)) { break; } */ if(!(i < states.$length)) { $s = 3; continue; }
			s = ((i < 0 || i >= states.$length) ? ($throwRuntimeError("index out of range"), undefined) : states.$array[states.$offset + i]);
			/* */ if (!(s.edges === sliceType$19.nil)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!(s.edges === sliceType$19.nil)) { */ case 4:
				n = s.edges.$length;
				j = 0;
				/* while (true) { */ case 6:
					/* if (!(j < n)) { break; } */ if(!(j < n)) { $s = 7; continue; }
					t = (x = s.edges, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
					/* */ if (!(t === ptrType$30.nil) && !((t.stateNumber === 2147483647))) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (!(t === ptrType$30.nil) && !((t.stateNumber === 2147483647))) { */ case 8:
						_r$3 = l.DFASerializer.GetStateString(s); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						buf = buf + (_r$3);
						buf = buf + ("-");
						buf = buf + (l.getEdgeLabel(j));
						buf = buf + ("->");
						_r$4 = l.DFASerializer.GetStateString(t); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						buf = buf + (_r$4);
						buf = buf + ("\n");
					/* } */ case 9:
					j = j + (1) >> 0;
				/* } */ $s = 6; continue; case 7:
			/* } */ case 5:
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		if (buf.length === 0) {
			$s = -1; return "";
		}
		$s = -1; return buf;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerDFASerializer.ptr.prototype.String }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.buf = buf; $f.i = i; $f.j = j; $f.l = l; $f.n = n; $f.s = s; $f.states = states; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerDFASerializer.prototype.String = function() { return this.$val.String(); };
	NewPredPrediction = function(pred, alt) {
		var alt, pred;
		return new PredPrediction.ptr(alt, pred);
	};
	$pkg.NewPredPrediction = NewPredPrediction;
	PredPrediction.ptr.prototype.String = function() {
		var _r$2, _r$3, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = fmt.Sprint(new sliceType$8([p.pred])); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = fmt.Sprint(new sliceType$8([new $Int(p.alt)])); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return "(" + _r$2 + ", " + _r$3 + ")";
		/* */ } return; } if ($f === undefined) { $f = { $blk: PredPrediction.ptr.prototype.String }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	PredPrediction.prototype.String = function() { return this.$val.String(); };
	NewDFAState = function(stateNumber, configs) {
		var configs, stateNumber;
		if ($interfaceIsEqual(configs, $ifaceNil)) {
			configs = NewBaseATNConfigSet(false);
		}
		return new DFAState.ptr(stateNumber, configs, sliceType$19.nil, false, 0, ptrType$8.nil, false, sliceType$20.nil);
	};
	$pkg.NewDFAState = NewDFAState;
	DFAState.ptr.prototype.GetAltSet = function() {
		var _i, _r$2, _r$3, _r$4, _ref, alts, c, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; alts = $f.alts; c = $f.c; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		alts = NewSet($throwNilPointerError, $throwNilPointerError);
		/* */ if (!($interfaceIsEqual(d.configs, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(d.configs, $ifaceNil))) { */ case 1:
			_r$2 = d.configs.GetItems(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_ref = _r$2;
			_i = 0;
			/* while (true) { */ case 4:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				_r$3 = c.GetAlt(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$4 = alts.add(new $Int(_r$3)); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				_i++;
			/* } */ $s = 4; continue; case 5:
		/* } */ case 2:
		if (alts.length() === 0) {
			$s = -1; return ptrType$10.nil;
		}
		$s = -1; return alts;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DFAState.ptr.prototype.GetAltSet }; } $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.alts = alts; $f.c = c; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	DFAState.prototype.GetAltSet = function() { return this.$val.GetAltSet(); };
	DFAState.ptr.prototype.setPrediction = function(v) {
		var d, v;
		d = this;
		d.prediction = v;
	};
	DFAState.prototype.setPrediction = function(v) { return this.$val.setPrediction(v); };
	DFAState.ptr.prototype.equals = function(other) {
		var _r$2, _tuple, d, ok, other, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _tuple = $f._tuple; d = $f.d; ok = $f.ok; other = $f.other; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if ($interfaceIsEqual(d, other)) {
			$s = -1; return true;
		} else {
			_tuple = $assertType(other, ptrType$30, true);
			ok = _tuple[1];
			if (!ok) {
				$s = -1; return false;
			}
		}
		_r$2 = d.configs.Equals($assertType(other, ptrType$30).configs); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DFAState.ptr.prototype.equals }; } $f._r$2 = _r$2; $f._tuple = _tuple; $f.d = d; $f.ok = ok; $f.other = other; $f.$s = $s; $f.$r = $r; return $f;
	};
	DFAState.prototype.equals = function(other) { return this.$val.equals(other); };
	DFAState.ptr.prototype.String = function() {
		var _arg, _arg$1, _r$2, _r$3, _r$4, _r$5, d, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; d = $f.d; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		s = "";
		/* */ if (d.isAcceptState) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.isAcceptState) { */ case 1:
			/* */ if (!(d.predicates === sliceType$20.nil)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(d.predicates === sliceType$20.nil)) { */ case 3:
				_r$2 = fmt.Sprint(new sliceType$8([d.predicates])); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				s = "=>" + _r$2;
				$s = 5; continue;
			/* } else { */ case 4:
				_r$3 = fmt.Sprint(new sliceType$8([new $Int(d.prediction)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				s = "=>" + _r$3;
			/* } */ case 5:
		/* } */ case 2:
		_r$4 = fmt.Sprint(new sliceType$8([d.configs])); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = new $String(_r$4);
		_arg$1 = new $String(s);
		_r$5 = fmt.Sprintf("%d:%s%s", new sliceType$8([_arg, _arg$1])); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return _r$5;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DFAState.ptr.prototype.String }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.d = d; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	DFAState.prototype.String = function() { return this.$val.String(); };
	DFAState.ptr.prototype.hash = function() {
		var _arg, _arg$1, _arg$2, _arg$3, _i, _r$2, _r$3, _r$4, _r$5, _ref, c, d, h, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; c = $f.c; d = $f.d; h = $f.h; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		h = murmurInit(11);
		c = 1;
		/* */ if (d.isAcceptState) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.isAcceptState) { */ case 1:
			/* */ if (!(d.predicates === sliceType$20.nil)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(d.predicates === sliceType$20.nil)) { */ case 3:
				_ref = d.predicates;
				_i = 0;
				/* while (true) { */ case 6:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
					p = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					h = murmurUpdate(h, p.alt);
					_arg = h;
					_r$2 = p.pred.hash(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_arg$1 = _r$2;
					_r$3 = murmurUpdate(_arg, _arg$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					h = _r$3;
					c = c + (2) >> 0;
					_i++;
				/* } */ $s = 6; continue; case 7:
				$s = 5; continue;
			/* } else { */ case 4:
				h = murmurUpdate(h, d.prediction);
				c = c + (1) >> 0;
			/* } */ case 5:
		/* } */ case 2:
		_arg$2 = h;
		_r$4 = d.configs.hash(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg$3 = _r$4;
		_r$5 = murmurUpdate(_arg$2, _arg$3); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		h = _r$5;
		$s = -1; return murmurFinish(h, c);
		/* */ } return; } if ($f === undefined) { $f = { $blk: DFAState.ptr.prototype.hash }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.c = c; $f.d = d; $f.h = h; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	DFAState.prototype.hash = function() { return this.$val.hash(); };
	DefaultErrorListener.ptr.prototype.SyntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
		var column, d, e, line, msg, offendingSymbol, recognizer;
		d = this;
	};
	DefaultErrorListener.prototype.SyntaxError = function(recognizer, offendingSymbol, line, column, msg, e) { return this.$val.SyntaxError(recognizer, offendingSymbol, line, column, msg, e); };
	DefaultErrorListener.ptr.prototype.ReportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
		var ambigAlts, configs, d, dfa, exact, recognizer, startIndex, stopIndex;
		d = this;
	};
	DefaultErrorListener.prototype.ReportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) { return this.$val.ReportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs); };
	DefaultErrorListener.ptr.prototype.ReportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
		var configs, conflictingAlts, d, dfa, recognizer, startIndex, stopIndex;
		d = this;
	};
	DefaultErrorListener.prototype.ReportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) { return this.$val.ReportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs); };
	DefaultErrorListener.ptr.prototype.ReportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
		var configs, d, dfa, prediction, recognizer, startIndex, stopIndex;
		d = this;
	};
	DefaultErrorListener.prototype.ReportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) { return this.$val.ReportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs); };
	NewConsoleErrorListener = function() {
		return new ConsoleErrorListener.ptr(ptrType$33.nil);
	};
	$pkg.NewConsoleErrorListener = NewConsoleErrorListener;
	ConsoleErrorListener.ptr.prototype.SyntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
		var _r$2, c, column, e, line, msg, offendingSymbol, recognizer, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; c = $f.c; column = $f.column; e = $f.e; line = $f.line; msg = $f.msg; offendingSymbol = $f.offendingSymbol; recognizer = $f.recognizer; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r$2 = fmt.Fprintln(os.Stderr, new sliceType$8([new $String("line " + strconv.Itoa(line) + ":" + strconv.Itoa(column) + " " + msg)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ConsoleErrorListener.ptr.prototype.SyntaxError }; } $f._r$2 = _r$2; $f.c = c; $f.column = column; $f.e = e; $f.line = line; $f.msg = msg; $f.offendingSymbol = offendingSymbol; $f.recognizer = recognizer; $f.$s = $s; $f.$r = $r; return $f;
	};
	ConsoleErrorListener.prototype.SyntaxError = function(recognizer, offendingSymbol, line, column, msg, e) { return this.$val.SyntaxError(recognizer, offendingSymbol, line, column, msg, e); };
	NewProxyErrorListener = function(delegates) {
		var delegates, l;
		if (delegates === sliceType$21.nil) {
			$panic(new $String("delegates is not provided"));
		}
		l = new ProxyErrorListener.ptr(ptrType$33.nil, sliceType$21.nil);
		l.delegates = delegates;
		return l;
	};
	$pkg.NewProxyErrorListener = NewProxyErrorListener;
	ProxyErrorListener.ptr.prototype.SyntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
		var _i, _ref, column, d, e, line, msg, offendingSymbol, p, recognizer, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; column = $f.column; d = $f.d; e = $f.e; line = $f.line; msg = $f.msg; offendingSymbol = $f.offendingSymbol; p = $f.p; recognizer = $f.recognizer; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = p.delegates;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			d = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = d.SyntaxError(recognizer, offendingSymbol, line, column, msg, e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProxyErrorListener.ptr.prototype.SyntaxError }; } $f._i = _i; $f._ref = _ref; $f.column = column; $f.d = d; $f.e = e; $f.line = line; $f.msg = msg; $f.offendingSymbol = offendingSymbol; $f.p = p; $f.recognizer = recognizer; $f.$s = $s; $f.$r = $r; return $f;
	};
	ProxyErrorListener.prototype.SyntaxError = function(recognizer, offendingSymbol, line, column, msg, e) { return this.$val.SyntaxError(recognizer, offendingSymbol, line, column, msg, e); };
	ProxyErrorListener.ptr.prototype.ReportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
		var _i, _ref, ambigAlts, configs, d, dfa, exact, p, recognizer, startIndex, stopIndex, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; ambigAlts = $f.ambigAlts; configs = $f.configs; d = $f.d; dfa = $f.dfa; exact = $f.exact; p = $f.p; recognizer = $f.recognizer; startIndex = $f.startIndex; stopIndex = $f.stopIndex; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = p.delegates;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			d = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = d.ReportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProxyErrorListener.ptr.prototype.ReportAmbiguity }; } $f._i = _i; $f._ref = _ref; $f.ambigAlts = ambigAlts; $f.configs = configs; $f.d = d; $f.dfa = dfa; $f.exact = exact; $f.p = p; $f.recognizer = recognizer; $f.startIndex = startIndex; $f.stopIndex = stopIndex; $f.$s = $s; $f.$r = $r; return $f;
	};
	ProxyErrorListener.prototype.ReportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) { return this.$val.ReportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs); };
	ProxyErrorListener.ptr.prototype.ReportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
		var _i, _ref, configs, conflictingAlts, d, dfa, p, recognizer, startIndex, stopIndex, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; configs = $f.configs; conflictingAlts = $f.conflictingAlts; d = $f.d; dfa = $f.dfa; p = $f.p; recognizer = $f.recognizer; startIndex = $f.startIndex; stopIndex = $f.stopIndex; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = p.delegates;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			d = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = d.ReportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProxyErrorListener.ptr.prototype.ReportAttemptingFullContext }; } $f._i = _i; $f._ref = _ref; $f.configs = configs; $f.conflictingAlts = conflictingAlts; $f.d = d; $f.dfa = dfa; $f.p = p; $f.recognizer = recognizer; $f.startIndex = startIndex; $f.stopIndex = stopIndex; $f.$s = $s; $f.$r = $r; return $f;
	};
	ProxyErrorListener.prototype.ReportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) { return this.$val.ReportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs); };
	ProxyErrorListener.ptr.prototype.ReportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
		var _i, _ref, configs, d, dfa, p, prediction, recognizer, startIndex, stopIndex, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; configs = $f.configs; d = $f.d; dfa = $f.dfa; p = $f.p; prediction = $f.prediction; recognizer = $f.recognizer; startIndex = $f.startIndex; stopIndex = $f.stopIndex; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = p.delegates;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			d = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = d.ReportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProxyErrorListener.ptr.prototype.ReportContextSensitivity }; } $f._i = _i; $f._ref = _ref; $f.configs = configs; $f.d = d; $f.dfa = dfa; $f.p = p; $f.prediction = prediction; $f.recognizer = recognizer; $f.startIndex = startIndex; $f.stopIndex = stopIndex; $f.$s = $s; $f.$r = $r; return $f;
	};
	ProxyErrorListener.prototype.ReportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) { return this.$val.ReportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs); };
	NewDefaultErrorStrategy = function() {
		var d;
		d = new DefaultErrorStrategy.ptr(false, 0, ptrType.nil);
		d.errorRecoveryMode = false;
		d.lastErrorIndex = -1;
		d.lastErrorStates = ptrType.nil;
		return d;
	};
	$pkg.NewDefaultErrorStrategy = NewDefaultErrorStrategy;
	DefaultErrorStrategy.ptr.prototype.reset = function(recognizer) {
		var d, recognizer;
		d = this;
		d.endErrorCondition(recognizer);
	};
	DefaultErrorStrategy.prototype.reset = function(recognizer) { return this.$val.reset(recognizer); };
	DefaultErrorStrategy.ptr.prototype.beginErrorCondition = function(recognizer) {
		var d, recognizer;
		d = this;
		d.errorRecoveryMode = true;
	};
	DefaultErrorStrategy.prototype.beginErrorCondition = function(recognizer) { return this.$val.beginErrorCondition(recognizer); };
	DefaultErrorStrategy.ptr.prototype.inErrorRecoveryMode = function(recognizer) {
		var d, recognizer;
		d = this;
		return d.errorRecoveryMode;
	};
	DefaultErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer) { return this.$val.inErrorRecoveryMode(recognizer); };
	DefaultErrorStrategy.ptr.prototype.endErrorCondition = function(recognizer) {
		var d, recognizer;
		d = this;
		d.errorRecoveryMode = false;
		d.lastErrorStates = ptrType.nil;
		d.lastErrorIndex = -1;
	};
	DefaultErrorStrategy.prototype.endErrorCondition = function(recognizer) { return this.$val.endErrorCondition(recognizer); };
	DefaultErrorStrategy.ptr.prototype.ReportMatch = function(recognizer) {
		var d, recognizer;
		d = this;
		d.endErrorCondition(recognizer);
	};
	DefaultErrorStrategy.prototype.ReportMatch = function(recognizer) { return this.$val.ReportMatch(recognizer); };
	DefaultErrorStrategy.ptr.prototype.ReportError = function(recognizer, e) {
		var _arg, _arg$1, _arg$2, _r$2, _r$3, _r$4, _r$5, _ref, d, e, recognizer, t, t$1, t$2, t$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; d = $f.d; e = $f.e; recognizer = $f.recognizer; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; t$3 = $f.t$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (d.inErrorRecoveryMode(recognizer)) {
			$s = -1; return;
		}
		d.beginErrorCondition(recognizer);
		_ref = e;
		/* */ if ($assertType(_ref, ptrType$34, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$35, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$36, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, ptrType$34, true)[1]) { */ case 1:
			t$1 = _ref.$val;
			$r = d.ReportNoViableAlternative(recognizer, t$1); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 5; continue;
		/* } else if ($assertType(_ref, ptrType$35, true)[1]) { */ case 2:
			t$2 = _ref.$val;
			$r = d.ReportInputMisMatch(recognizer, t$2); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 5; continue;
		/* } else if ($assertType(_ref, ptrType$36, true)[1]) { */ case 3:
			t$3 = _ref.$val;
			$r = d.ReportFailedPredicate(recognizer, t$3); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 5; continue;
		/* } else { */ case 4:
			t = _ref;
			_r$2 = reflect.TypeOf(e).Name(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = fmt.Println(new sliceType$8([new $String("unknown recognition error type: " + _r$2)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_r$4 = e.GetMessage(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_arg = _r$4;
			_r$5 = e.GetOffendingToken(); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_arg$1 = _r$5;
			_arg$2 = e;
			$r = recognizer.NotifyErrorListeners(_arg, _arg$1, _arg$2); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefaultErrorStrategy.ptr.prototype.ReportError }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.d = d; $f.e = e; $f.recognizer = recognizer; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.t$3 = t$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefaultErrorStrategy.prototype.ReportError = function(recognizer, e) { return this.$val.ReportError(recognizer, e); };
	DefaultErrorStrategy.ptr.prototype.Recover = function(recognizer, e) {
		var _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, d, e, followSet, recognizer, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _v = $f._v; d = $f.d; e = $f.e; followSet = $f.followSet; recognizer = $f.recognizer; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$2 = recognizer.GetInputStream(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = _r$2.Index(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		if (!((d.lastErrorIndex === _r$3) && !(d.lastErrorStates === ptrType.nil))) { _v = false; $s = 3; continue s; }
		_r$4 = recognizer.GetState(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = d.lastErrorStates.contains(_r$4); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_v = _r$5; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			_r$6 = recognizer.Consume(); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
		/* } */ case 2:
		_r$7 = recognizer.GetInputStream(); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$8 = _r$7.Index(); /* */ $s = 10; case 10: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		d.lastErrorIndex = _r$8;
		if (d.lastErrorStates === ptrType.nil) {
			d.lastErrorStates = NewIntervalSet();
		}
		_r$9 = recognizer.GetState(); /* */ $s = 11; case 11: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		$r = d.lastErrorStates.addOne(_r$9); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$10 = d.getErrorRecoverySet(recognizer); /* */ $s = 13; case 13: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		followSet = _r$10;
		$r = d.consumeUntil(recognizer, followSet); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefaultErrorStrategy.ptr.prototype.Recover }; } $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._v = _v; $f.d = d; $f.e = e; $f.followSet = followSet; $f.recognizer = recognizer; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefaultErrorStrategy.prototype.Recover = function(recognizer, e) { return this.$val.Recover(recognizer, e); };
	DefaultErrorStrategy.ptr.prototype.Sync = function(recognizer) {
		var _1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, d, expecting, la, nextTokens, recognizer, s, whatFollowsLoopIterationOrRule, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; d = $f.d; expecting = $f.expecting; la = $f.la; nextTokens = $f.nextTokens; recognizer = $f.recognizer; s = $f.s; whatFollowsLoopIterationOrRule = $f.whatFollowsLoopIterationOrRule; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (d.inErrorRecoveryMode(recognizer)) {
			$s = -1; return;
		}
		_r$2 = recognizer.GetInterpreter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = recognizer.GetState(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		s = (x = _r$2.BaseATNSimulator.atn.states, x$1 = _r$3, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		_r$4 = recognizer.GetTokenStream(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = _r$4.LA(1); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		la = _r$5;
		_r$6 = recognizer.GetATN(); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = _r$6.NextTokens(s, $ifaceNil); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		nextTokens = _r$7;
		if (nextTokens.contains(-2) || nextTokens.contains(la)) {
			$s = -1; return;
		}
			_r$8 = s.GetStateType(); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_1 = _r$8;
			/* */ if ((_1 === (3)) || (_1 === (5)) || (_1 === (4)) || (_1 === (10))) { $s = 9; continue; }
			/* */ if ((_1 === (11)) || (_1 === (9))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if ((_1 === (3)) || (_1 === (5)) || (_1 === (4)) || (_1 === (10))) { */ case 9:
				_r$9 = d.SingleTokenDeletion(recognizer); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				/* */ if (!($interfaceIsEqual(_r$9, $ifaceNil))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (!($interfaceIsEqual(_r$9, $ifaceNil))) { */ case 12:
					$s = -1; return;
				/* } */ case 13:
				_r$10 = NewInputMisMatchException(recognizer); /* */ $s = 15; case 15: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				$panic(_r$10);
				$s = 11; continue;
			/* } else if ((_1 === (11)) || (_1 === (9))) { */ case 10:
				$r = d.ReportUnwantedToken(recognizer); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				expecting = NewIntervalSet();
				_r$11 = recognizer.GetExpectedTokens(); /* */ $s = 17; case 17: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$12 = expecting.addSet(_r$11); /* */ $s = 18; case 18: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_r$12;
				_r$13 = d.getErrorRecoverySet(recognizer); /* */ $s = 19; case 19: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$14 = expecting.addSet(_r$13); /* */ $s = 20; case 20: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				whatFollowsLoopIterationOrRule = _r$14;
				$r = d.consumeUntil(recognizer, whatFollowsLoopIterationOrRule); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
		case 7:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefaultErrorStrategy.ptr.prototype.Sync }; } $f._1 = _1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.d = d; $f.expecting = expecting; $f.la = la; $f.nextTokens = nextTokens; $f.recognizer = recognizer; $f.s = s; $f.whatFollowsLoopIterationOrRule = whatFollowsLoopIterationOrRule; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefaultErrorStrategy.prototype.Sync = function(recognizer) { return this.$val.Sync(recognizer); };
	DefaultErrorStrategy.ptr.prototype.ReportNoViableAlternative = function(recognizer, e) {
		var _r$2, _r$3, _r$4, d, e, input, msg, recognizer, tokens, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; d = $f.d; e = $f.e; input = $f.input; msg = $f.msg; recognizer = $f.recognizer; tokens = $f.tokens; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$2 = recognizer.GetTokenStream(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		tokens = _r$2;
		input = "";
		/* */ if (!($interfaceIsEqual(tokens, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(tokens, $ifaceNil))) { */ case 2:
			_r$3 = e.startToken.GetTokenType(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3 === -1) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_r$3 === -1) { */ case 5:
				input = "<EOF>";
				$s = 7; continue;
			/* } else { */ case 6:
				_r$4 = tokens.GetTextFromTokens(e.startToken, e.offendingToken); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				input = _r$4;
			/* } */ case 7:
			$s = 4; continue;
		/* } else { */ case 3:
			input = "<unknown input>";
		/* } */ case 4:
		msg = "no viable alternative at input " + d.escapeWSAndQuote(input);
		$r = recognizer.NotifyErrorListeners(msg, e.offendingToken, e); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefaultErrorStrategy.ptr.prototype.ReportNoViableAlternative }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.d = d; $f.e = e; $f.input = input; $f.msg = msg; $f.recognizer = recognizer; $f.tokens = tokens; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefaultErrorStrategy.prototype.ReportNoViableAlternative = function(recognizer, e) { return this.$val.ReportNoViableAlternative(recognizer, e); };
	DefaultErrorStrategy.ptr.prototype.ReportInputMisMatch = function(recognizer, e) {
		var _arg, _arg$1, _r$2, _r$3, _r$4, _r$5, _r$6, e, msg, recognizer, this$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; e = $f.e; msg = $f.msg; recognizer = $f.recognizer; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		this$1 = this;
		_r$2 = this$1.GetTokenErrorDisplay(e.BaseRecognitionException.offendingToken); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = e.BaseRecognitionException.getExpectedTokens(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = recognizer.GetLiteralNames(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = _r$4;
		_r$5 = recognizer.GetSymbolicNames(); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$1 = _r$5;
		_r$6 = _r$3.StringVerbose(_arg, _arg$1, false); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		msg = "mismatched input " + _r$2 + " expecting " + _r$6;
		$r = recognizer.NotifyErrorListeners(msg, e.BaseRecognitionException.offendingToken, e); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefaultErrorStrategy.ptr.prototype.ReportInputMisMatch }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.e = e; $f.msg = msg; $f.recognizer = recognizer; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefaultErrorStrategy.prototype.ReportInputMisMatch = function(recognizer, e) { return this.$val.ReportInputMisMatch(recognizer, e); };
	DefaultErrorStrategy.ptr.prototype.ReportFailedPredicate = function(recognizer, e) {
		var _r$2, _r$3, _r$4, d, e, msg, recognizer, ruleName, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; d = $f.d; e = $f.e; msg = $f.msg; recognizer = $f.recognizer; ruleName = $f.ruleName; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$2 = recognizer.GetRuleNames(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = recognizer.GetParserRuleContext(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = _r$3.GetRuleIndex(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		ruleName = (x = _r$2, x$1 = _r$4, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		msg = "rule " + ruleName + " " + e.BaseRecognitionException.message;
		$r = recognizer.NotifyErrorListeners(msg, e.BaseRecognitionException.offendingToken, e); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefaultErrorStrategy.ptr.prototype.ReportFailedPredicate }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.d = d; $f.e = e; $f.msg = msg; $f.recognizer = recognizer; $f.ruleName = ruleName; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefaultErrorStrategy.prototype.ReportFailedPredicate = function(recognizer, e) { return this.$val.ReportFailedPredicate(recognizer, e); };
	DefaultErrorStrategy.ptr.prototype.ReportUnwantedToken = function(recognizer) {
		var _arg, _arg$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, d, expecting, msg, recognizer, t, tokenName, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; d = $f.d; expecting = $f.expecting; msg = $f.msg; recognizer = $f.recognizer; t = $f.t; tokenName = $f.tokenName; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (d.inErrorRecoveryMode(recognizer)) {
			$s = -1; return;
		}
		d.beginErrorCondition(recognizer);
		_r$2 = recognizer.GetCurrentToken(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		t = _r$2;
		_r$3 = d.GetTokenErrorDisplay(t); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		tokenName = _r$3;
		_r$4 = d.GetExpectedTokens(recognizer); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		expecting = _r$4;
		_r$5 = recognizer.GetLiteralNames(); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg = _r$5;
		_r$6 = recognizer.GetSymbolicNames(); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_arg$1 = _r$6;
		_r$7 = expecting.StringVerbose(_arg, _arg$1, false); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		msg = "extraneous input " + tokenName + " expecting " + _r$7;
		$r = recognizer.NotifyErrorListeners(msg, t, $ifaceNil); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefaultErrorStrategy.ptr.prototype.ReportUnwantedToken }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.d = d; $f.expecting = expecting; $f.msg = msg; $f.recognizer = recognizer; $f.t = t; $f.tokenName = tokenName; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefaultErrorStrategy.prototype.ReportUnwantedToken = function(recognizer) { return this.$val.ReportUnwantedToken(recognizer); };
	DefaultErrorStrategy.ptr.prototype.ReportMissingToken = function(recognizer) {
		var _arg, _arg$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, d, expecting, msg, recognizer, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; d = $f.d; expecting = $f.expecting; msg = $f.msg; recognizer = $f.recognizer; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (d.inErrorRecoveryMode(recognizer)) {
			$s = -1; return;
		}
		d.beginErrorCondition(recognizer);
		_r$2 = recognizer.GetCurrentToken(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		t = _r$2;
		_r$3 = d.GetExpectedTokens(recognizer); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		expecting = _r$3;
		_r$4 = recognizer.GetLiteralNames(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = _r$4;
		_r$5 = recognizer.GetSymbolicNames(); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$1 = _r$5;
		_r$6 = expecting.StringVerbose(_arg, _arg$1, false); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = d.GetTokenErrorDisplay(t); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		msg = "missing " + _r$6 + " at " + _r$7;
		$r = recognizer.NotifyErrorListeners(msg, t, $ifaceNil); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefaultErrorStrategy.ptr.prototype.ReportMissingToken }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.d = d; $f.expecting = expecting; $f.msg = msg; $f.recognizer = recognizer; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefaultErrorStrategy.prototype.ReportMissingToken = function(recognizer) { return this.$val.ReportMissingToken(recognizer); };
	DefaultErrorStrategy.ptr.prototype.RecoverInline = function(recognizer) {
		var MatchedSymbol, _r$2, _r$3, _r$4, _r$5, _r$6, d, recognizer, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; MatchedSymbol = $f.MatchedSymbol; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; d = $f.d; recognizer = $f.recognizer; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$2 = d.SingleTokenDeletion(recognizer); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		MatchedSymbol = _r$2;
		/* */ if (!($interfaceIsEqual(MatchedSymbol, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(MatchedSymbol, $ifaceNil))) { */ case 2:
			_r$3 = recognizer.Consume(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			$s = -1; return MatchedSymbol;
		/* } */ case 3:
		_r$4 = d.SingleTokenInsertion(recognizer); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$4) { */ case 5:
			_r$5 = d.GetMissingSymbol(recognizer); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return _r$5;
		/* } */ case 6:
		_r$6 = NewInputMisMatchException(recognizer); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$panic(_r$6);
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefaultErrorStrategy.ptr.prototype.RecoverInline }; } $f.MatchedSymbol = MatchedSymbol; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.d = d; $f.recognizer = recognizer; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefaultErrorStrategy.prototype.RecoverInline = function(recognizer) { return this.$val.RecoverInline(recognizer); };
	DefaultErrorStrategy.ptr.prototype.SingleTokenInsertion = function(recognizer) {
		var _arg, _arg$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, atn, currentState, currentSymbolType, d, expectingAtLL2, next, recognizer, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; atn = $f.atn; currentState = $f.currentState; currentSymbolType = $f.currentSymbolType; d = $f.d; expectingAtLL2 = $f.expectingAtLL2; next = $f.next; recognizer = $f.recognizer; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$2 = recognizer.GetTokenStream(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = _r$2.LA(1); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		currentSymbolType = _r$3;
		_r$4 = recognizer.GetInterpreter(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		atn = _r$4.BaseATNSimulator.atn;
		_r$5 = recognizer.GetState(); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		currentState = (x = atn.states, x$1 = _r$5, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		_r$6 = currentState.GetTransitions(); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = (x$2 = _r$6, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])).getTarget(); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		next = _r$7;
		_arg = next;
		_r$8 = recognizer.GetParserRuleContext(); /* */ $s = 7; case 7: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_arg$1 = _r$8;
		_r$9 = atn.NextTokens(_arg, _arg$1); /* */ $s = 8; case 8: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		expectingAtLL2 = _r$9;
		/* */ if (expectingAtLL2.contains(currentSymbolType)) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (expectingAtLL2.contains(currentSymbolType)) { */ case 9:
			$r = d.ReportMissingToken(recognizer); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return true;
		/* } */ case 10:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefaultErrorStrategy.ptr.prototype.SingleTokenInsertion }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.atn = atn; $f.currentState = currentState; $f.currentSymbolType = currentSymbolType; $f.d = d; $f.expectingAtLL2 = expectingAtLL2; $f.next = next; $f.recognizer = recognizer; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefaultErrorStrategy.prototype.SingleTokenInsertion = function(recognizer) { return this.$val.SingleTokenInsertion(recognizer); };
	DefaultErrorStrategy.ptr.prototype.SingleTokenDeletion = function(recognizer) {
		var MatchedSymbol, NextTokenType, _r$2, _r$3, _r$4, _r$5, _r$6, d, expecting, recognizer, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; MatchedSymbol = $f.MatchedSymbol; NextTokenType = $f.NextTokenType; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; d = $f.d; expecting = $f.expecting; recognizer = $f.recognizer; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$2 = recognizer.GetTokenStream(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = _r$2.LA(2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		NextTokenType = _r$3;
		_r$4 = d.GetExpectedTokens(recognizer); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		expecting = _r$4;
		/* */ if (expecting.contains(NextTokenType)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (expecting.contains(NextTokenType)) { */ case 4:
			$r = d.ReportUnwantedToken(recognizer); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$5 = recognizer.Consume(); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			_r$6 = recognizer.GetCurrentToken(); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			MatchedSymbol = _r$6;
			d.ReportMatch(recognizer);
			$s = -1; return MatchedSymbol;
		/* } */ case 5:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefaultErrorStrategy.ptr.prototype.SingleTokenDeletion }; } $f.MatchedSymbol = MatchedSymbol; $f.NextTokenType = NextTokenType; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.d = d; $f.expecting = expecting; $f.recognizer = recognizer; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefaultErrorStrategy.prototype.SingleTokenDeletion = function(recognizer) { return this.$val.SingleTokenDeletion(recognizer); };
	DefaultErrorStrategy.ptr.prototype.GetMissingSymbol = function(recognizer) {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, current, currentSymbol, d, expectedTokenType, expecting, ln, lookback, recognizer, tf, tokenText, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; current = $f.current; currentSymbol = $f.currentSymbol; d = $f.d; expectedTokenType = $f.expectedTokenType; expecting = $f.expecting; ln = $f.ln; lookback = $f.lookback; recognizer = $f.recognizer; tf = $f.tf; tokenText = $f.tokenText; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$2 = recognizer.GetCurrentToken(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		currentSymbol = _r$2;
		_r$3 = d.GetExpectedTokens(recognizer); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		expecting = _r$3;
		expectedTokenType = expecting.first();
		tokenText = "";
		/* */ if (expectedTokenType === -1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (expectedTokenType === -1) { */ case 3:
			tokenText = "<missing EOF>";
			$s = 5; continue;
		/* } else { */ case 4:
			_r$4 = recognizer.GetLiteralNames(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			ln = _r$4;
			/* */ if (expectedTokenType > 0 && expectedTokenType < ln.$length) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (expectedTokenType > 0 && expectedTokenType < ln.$length) { */ case 7:
				_r$5 = recognizer.GetLiteralNames(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				tokenText = "<missing " + (x = _r$5, ((expectedTokenType < 0 || expectedTokenType >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + expectedTokenType])) + ">";
				$s = 9; continue;
			/* } else { */ case 8:
				tokenText = "<missing undefined>";
			/* } */ case 9:
		/* } */ case 5:
		current = currentSymbol;
		_r$6 = recognizer.GetTokenStream(); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = _r$6.LT(-1); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		lookback = _r$7;
		_r$8 = current.GetTokenType(); /* */ $s = 15; case 15: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		/* */ if ((_r$8 === -1) && !($interfaceIsEqual(lookback, $ifaceNil))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if ((_r$8 === -1) && !($interfaceIsEqual(lookback, $ifaceNil))) { */ case 13:
			current = lookback;
		/* } */ case 14:
		_r$9 = recognizer.GetTokenFactory(); /* */ $s = 16; case 16: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		tf = _r$9;
		_r$10 = current.GetSource(); /* */ $s = 17; case 17: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_arg = _r$10;
		_arg$1 = expectedTokenType;
		_arg$2 = tokenText;
		_r$11 = current.GetLine(); /* */ $s = 18; case 18: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_arg$3 = _r$11;
		_r$12 = current.GetColumn(); /* */ $s = 19; case 19: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_arg$4 = _r$12;
		_r$13 = tf.Create(_arg, _arg$1, _arg$2, 0, -1, -1, _arg$3, _arg$4); /* */ $s = 20; case 20: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		$s = -1; return _r$13;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefaultErrorStrategy.ptr.prototype.GetMissingSymbol }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.current = current; $f.currentSymbol = currentSymbol; $f.d = d; $f.expectedTokenType = expectedTokenType; $f.expecting = expecting; $f.ln = ln; $f.lookback = lookback; $f.recognizer = recognizer; $f.tf = tf; $f.tokenText = tokenText; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefaultErrorStrategy.prototype.GetMissingSymbol = function(recognizer) { return this.$val.GetMissingSymbol(recognizer); };
	DefaultErrorStrategy.ptr.prototype.GetExpectedTokens = function(recognizer) {
		var _r$2, d, recognizer, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; d = $f.d; recognizer = $f.recognizer; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$2 = recognizer.GetExpectedTokens(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefaultErrorStrategy.ptr.prototype.GetExpectedTokens }; } $f._r$2 = _r$2; $f.d = d; $f.recognizer = recognizer; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefaultErrorStrategy.prototype.GetExpectedTokens = function(recognizer) { return this.$val.GetExpectedTokens(recognizer); };
	DefaultErrorStrategy.ptr.prototype.GetTokenErrorDisplay = function(t) {
		var _r$2, _r$3, _r$4, _r$5, d, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; d = $f.d; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return "<no token>";
		}
		_r$2 = t.GetText(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		s = _r$2;
		/* */ if (s === "") { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (s === "") { */ case 2:
			_r$3 = t.GetTokenType(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3 === -1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$3 === -1) { */ case 4:
				s = "<EOF>";
				$s = 6; continue;
			/* } else { */ case 5:
				_r$4 = t.GetTokenType(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$5 = strconv.Itoa(_r$4); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				s = "<" + _r$5 + ">";
			/* } */ case 6:
		/* } */ case 3:
		$s = -1; return d.escapeWSAndQuote(s);
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefaultErrorStrategy.ptr.prototype.GetTokenErrorDisplay }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.d = d; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefaultErrorStrategy.prototype.GetTokenErrorDisplay = function(t) { return this.$val.GetTokenErrorDisplay(t); };
	DefaultErrorStrategy.ptr.prototype.escapeWSAndQuote = function(s) {
		var d, s;
		d = this;
		s = strings.Replace(s, "\t", "\\t", -1);
		s = strings.Replace(s, "\n", "\\n", -1);
		s = strings.Replace(s, "\r", "\\r", -1);
		return "'" + s + "'";
	};
	DefaultErrorStrategy.prototype.escapeWSAndQuote = function(s) { return this.$val.escapeWSAndQuote(s); };
	DefaultErrorStrategy.ptr.prototype.getErrorRecoverySet = function(recognizer) {
		var _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _v, atn, ctx, d, follow, invokingState, recognizer, recoverSet, rt, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _v = $f._v; atn = $f.atn; ctx = $f.ctx; d = $f.d; follow = $f.follow; invokingState = $f.invokingState; recognizer = $f.recognizer; recoverSet = $f.recoverSet; rt = $f.rt; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$2 = recognizer.GetInterpreter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		atn = _r$2.BaseATNSimulator.atn;
		_r$3 = recognizer.GetParserRuleContext(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		ctx = _r$3;
		recoverSet = NewIntervalSet();
		/* while (true) { */ case 3:
			if (!(!($interfaceIsEqual(ctx, $ifaceNil)))) { _v = false; $s = 5; continue s; }
			_r$4 = ctx.GetInvokingState(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_v = _r$4 >= 0; case 5:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
			_r$5 = ctx.GetInvokingState(); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			invokingState = (x = atn.states, x$1 = _r$5, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
			_r$6 = invokingState.GetTransitions(); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			rt = (x$2 = _r$6, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0]));
			_r$7 = atn.NextTokens($assertType(rt, ptrType$6).followState, $ifaceNil); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			follow = _r$7;
			recoverSet.addSet(follow);
			_r$8 = ctx.GetParent(); /* */ $s = 10; case 10: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			ctx = $assertType(_r$8, ParserRuleContext);
		/* } */ $s = 3; continue; case 4:
		recoverSet.removeOne(-2);
		$s = -1; return recoverSet;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefaultErrorStrategy.ptr.prototype.getErrorRecoverySet }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._v = _v; $f.atn = atn; $f.ctx = ctx; $f.d = d; $f.follow = follow; $f.invokingState = invokingState; $f.recognizer = recognizer; $f.recoverSet = recoverSet; $f.rt = rt; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefaultErrorStrategy.prototype.getErrorRecoverySet = function(recognizer) { return this.$val.getErrorRecoverySet(recognizer); };
	DefaultErrorStrategy.ptr.prototype.consumeUntil = function(recognizer, set) {
		var _r$2, _r$3, _r$4, _r$5, _r$6, d, recognizer, set, ttype, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; d = $f.d; recognizer = $f.recognizer; set = $f.set; ttype = $f.ttype; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$2 = recognizer.GetTokenStream(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = _r$2.LA(1); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		ttype = _r$3;
		/* while (true) { */ case 3:
			/* if (!(!((ttype === -1)) && !set.contains(ttype))) { break; } */ if(!(!((ttype === -1)) && !set.contains(ttype))) { $s = 4; continue; }
			_r$4 = recognizer.Consume(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			_r$5 = recognizer.GetTokenStream(); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = _r$5.LA(1); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			ttype = _r$6;
		/* } */ $s = 3; continue; case 4:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefaultErrorStrategy.ptr.prototype.consumeUntil }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.d = d; $f.recognizer = recognizer; $f.set = set; $f.ttype = ttype; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefaultErrorStrategy.prototype.consumeUntil = function(recognizer, set) { return this.$val.consumeUntil(recognizer, set); };
	NewBaseRecognitionException = function(message, recognizer, input, ctx) {
		var _r$2, ctx, input, message, recognizer, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; ctx = $f.ctx; input = $f.input; message = $f.message; recognizer = $f.recognizer; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = new BaseRecognitionException.ptr("", $ifaceNil, $ifaceNil, 0, $ifaceNil, $ifaceNil);
		t.message = message;
		t.recognizer = recognizer;
		t.input = input;
		t.ctx = ctx;
		t.offendingToken = $ifaceNil;
		t.offendingState = -1;
		/* */ if (!($interfaceIsEqual(t.recognizer, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(t.recognizer, $ifaceNil))) { */ case 1:
			_r$2 = t.recognizer.GetState(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			t.offendingState = _r$2;
		/* } */ case 2:
		$s = -1; return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewBaseRecognitionException }; } $f._r$2 = _r$2; $f.ctx = ctx; $f.input = input; $f.message = message; $f.recognizer = recognizer; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewBaseRecognitionException = NewBaseRecognitionException;
	BaseRecognitionException.ptr.prototype.GetMessage = function() {
		var b;
		b = this;
		return b.message;
	};
	BaseRecognitionException.prototype.GetMessage = function() { return this.$val.GetMessage(); };
	BaseRecognitionException.ptr.prototype.GetOffendingToken = function() {
		var b;
		b = this;
		return b.offendingToken;
	};
	BaseRecognitionException.prototype.GetOffendingToken = function() { return this.$val.GetOffendingToken(); };
	BaseRecognitionException.ptr.prototype.GetInputStream = function() {
		var b;
		b = this;
		return b.input;
	};
	BaseRecognitionException.prototype.GetInputStream = function() { return this.$val.GetInputStream(); };
	BaseRecognitionException.ptr.prototype.getExpectedTokens = function() {
		var _r$2, _r$3, b, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; b = $f.b; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		/* */ if (!($interfaceIsEqual(b.recognizer, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(b.recognizer, $ifaceNil))) { */ case 1:
			_r$2 = b.recognizer.GetATN(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = _r$2.getExpectedTokens(b.offendingState, b.ctx); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		$s = -1; return ptrType.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseRecognitionException.ptr.prototype.getExpectedTokens }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.b = b; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseRecognitionException.prototype.getExpectedTokens = function() { return this.$val.getExpectedTokens(); };
	BaseRecognitionException.ptr.prototype.String = function() {
		var b;
		b = this;
		return b.message;
	};
	BaseRecognitionException.prototype.String = function() { return this.$val.String(); };
	NewLexerNoViableAltException = function(lexer, input, startIndex, deadEndConfigs) {
		var _r$2, deadEndConfigs, input, l, lexer, startIndex, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; deadEndConfigs = $f.deadEndConfigs; input = $f.input; l = $f.l; lexer = $f.lexer; startIndex = $f.startIndex; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = new LexerNoViableAltException.ptr(ptrType$37.nil, 0, $ifaceNil);
		_r$2 = NewBaseRecognitionException("", lexer, input, $ifaceNil); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		l.BaseRecognitionException = _r$2;
		l.startIndex = startIndex;
		l.deadEndConfigs = deadEndConfigs;
		$s = -1; return l;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewLexerNoViableAltException }; } $f._r$2 = _r$2; $f.deadEndConfigs = deadEndConfigs; $f.input = input; $f.l = l; $f.lexer = lexer; $f.startIndex = startIndex; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewLexerNoViableAltException = NewLexerNoViableAltException;
	LexerNoViableAltException.ptr.prototype.String = function() {
		var _r$2, _r$3, _v, l, symbol, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _v = $f._v; l = $f.l; symbol = $f.symbol; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		symbol = "";
		if (!(l.startIndex >= 0)) { _v = false; $s = 3; continue s; }
		_r$2 = l.BaseRecognitionException.input.Size(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v = l.startIndex < _r$2; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			_r$3 = $assertType(l.BaseRecognitionException.input, CharStream).GetTextFromInterval(NewInterval(l.startIndex, l.startIndex)); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			symbol = _r$3;
		/* } */ case 2:
		$s = -1; return "LexerNoViableAltException" + symbol;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerNoViableAltException.ptr.prototype.String }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._v = _v; $f.l = l; $f.symbol = symbol; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerNoViableAltException.prototype.String = function() { return this.$val.String(); };
	NewNoViableAltException = function(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
		var _r$2, _r$3, _r$4, _r$5, _r$6, ctx, deadEndConfigs, input, n, offendingToken, recognizer, startToken, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; ctx = $f.ctx; deadEndConfigs = $f.deadEndConfigs; input = $f.input; n = $f.n; offendingToken = $f.offendingToken; recognizer = $f.recognizer; startToken = $f.startToken; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if ($interfaceIsEqual(ctx, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(ctx, $ifaceNil)) { */ case 1:
			_r$2 = recognizer.GetParserRuleContext(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			ctx = _r$2;
		/* } */ case 2:
		/* */ if ($interfaceIsEqual(offendingToken, $ifaceNil)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ($interfaceIsEqual(offendingToken, $ifaceNil)) { */ case 4:
			_r$3 = recognizer.GetCurrentToken(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			offendingToken = _r$3;
		/* } */ case 5:
		/* */ if ($interfaceIsEqual(startToken, $ifaceNil)) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if ($interfaceIsEqual(startToken, $ifaceNil)) { */ case 7:
			_r$4 = recognizer.GetCurrentToken(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			startToken = _r$4;
		/* } */ case 8:
		/* */ if ($interfaceIsEqual(input, $ifaceNil)) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if ($interfaceIsEqual(input, $ifaceNil)) { */ case 10:
			_r$5 = recognizer.GetInputStream(); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			input = $assertType(_r$5, TokenStream);
		/* } */ case 11:
		n = new NoViableAltException.ptr(ptrType$37.nil, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil);
		_r$6 = NewBaseRecognitionException("", recognizer, input, ctx); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		n.BaseRecognitionException = _r$6;
		n.deadEndConfigs = deadEndConfigs;
		n.startToken = startToken;
		n.offendingToken = offendingToken;
		$s = -1; return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewNoViableAltException }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.ctx = ctx; $f.deadEndConfigs = deadEndConfigs; $f.input = input; $f.n = n; $f.offendingToken = offendingToken; $f.recognizer = recognizer; $f.startToken = startToken; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewNoViableAltException = NewNoViableAltException;
	NewInputMisMatchException = function(recognizer) {
		var _arg, _arg$1, _arg$2, _r$2, _r$3, _r$4, _r$5, i, recognizer, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; i = $f.i; recognizer = $f.recognizer; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = new InputMisMatchException.ptr(ptrType$37.nil);
		_arg = recognizer;
		_r$2 = recognizer.GetInputStream(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$1 = _r$2;
		_r$3 = recognizer.GetParserRuleContext(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$2 = _r$3;
		_r$4 = NewBaseRecognitionException("", _arg, _arg$1, _arg$2); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		i.BaseRecognitionException = _r$4;
		_r$5 = recognizer.GetCurrentToken(); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		i.BaseRecognitionException.offendingToken = _r$5;
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewInputMisMatchException }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.i = i; $f.recognizer = recognizer; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewInputMisMatchException = NewInputMisMatchException;
	NewFailedPredicateException = function(recognizer, predicate, message) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tuple, f, message, ok, predicate, recognizer, s, trans, trans2, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; f = $f.f; message = $f.message; ok = $f.ok; predicate = $f.predicate; recognizer = $f.recognizer; s = $f.s; trans = $f.trans; trans2 = $f.trans2; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new FailedPredicateException.ptr(ptrType$37.nil, 0, 0, "");
		_arg = f.formatMessage(predicate, message);
		_arg$1 = recognizer;
		_r$2 = recognizer.GetInputStream(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$2 = _r$2;
		_r$3 = recognizer.GetParserRuleContext(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$3 = _r$3;
		_r$4 = NewBaseRecognitionException(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		f.BaseRecognitionException = _r$4;
		_r$5 = recognizer.GetInterpreter(); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$6 = recognizer.GetState(); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		s = (x = _r$5.BaseATNSimulator.atn.states, x$1 = _r$6, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		_r$7 = s.GetTransitions(); /* */ $s = 6; case 6: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		trans = (x$2 = _r$7, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0]));
		_tuple = $assertType(trans, ptrType$38, true);
		trans2 = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			f.ruleIndex = trans2.ruleIndex;
			f.predicateIndex = trans2.predIndex;
		} else {
			f.ruleIndex = 0;
			f.predicateIndex = 0;
		}
		f.predicate = predicate;
		_r$8 = recognizer.GetCurrentToken(); /* */ $s = 7; case 7: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		f.BaseRecognitionException.offendingToken = _r$8;
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewFailedPredicateException }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f.f = f; $f.message = message; $f.ok = ok; $f.predicate = predicate; $f.recognizer = recognizer; $f.s = s; $f.trans = trans; $f.trans2 = trans2; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewFailedPredicateException = NewFailedPredicateException;
	FailedPredicateException.ptr.prototype.formatMessage = function(predicate, message) {
		var f, message, predicate;
		f = this;
		if (!(message === "")) {
			return message;
		}
		return "failed predicate: {" + predicate + "}?";
	};
	FailedPredicateException.prototype.formatMessage = function(predicate, message) { return this.$val.formatMessage(predicate, message); };
	NewInputStream = function(data) {
		var data, is;
		is = new InputStream.ptr("", 0, sliceType$11.nil, 0);
		is.name = "<empty>";
		is.index = 0;
		is.data = (new sliceType$11($stringToRunes(data)));
		is.size = is.data.$length;
		return is;
	};
	$pkg.NewInputStream = NewInputStream;
	InputStream.ptr.prototype.reset = function() {
		var is;
		is = this;
		is.index = 0;
	};
	InputStream.prototype.reset = function() { return this.$val.reset(); };
	InputStream.ptr.prototype.Consume = function() {
		var is;
		is = this;
		if (is.index >= is.size) {
			$panic(new $String("cannot consume EOF"));
		}
		is.index = is.index + (1) >> 0;
	};
	InputStream.prototype.Consume = function() { return this.$val.Consume(); };
	InputStream.ptr.prototype.LA = function(offset) {
		var is, offset, pos, x;
		is = this;
		if (offset === 0) {
			return 0;
		}
		if (offset < 0) {
			offset = offset + (1) >> 0;
		}
		pos = (is.index + offset >> 0) - 1 >> 0;
		if (pos < 0 || pos >= is.size) {
			return -1;
		}
		return (((x = is.data, ((pos < 0 || pos >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + pos])) >> 0));
	};
	InputStream.prototype.LA = function(offset) { return this.$val.LA(offset); };
	InputStream.ptr.prototype.LT = function(offset) {
		var is, offset;
		is = this;
		return is.LA(offset);
	};
	InputStream.prototype.LT = function(offset) { return this.$val.LT(offset); };
	InputStream.ptr.prototype.Index = function() {
		var is;
		is = this;
		return is.index;
	};
	InputStream.prototype.Index = function() { return this.$val.Index(); };
	InputStream.ptr.prototype.Size = function() {
		var is;
		is = this;
		return is.size;
	};
	InputStream.prototype.Size = function() { return this.$val.Size(); };
	InputStream.ptr.prototype.Mark = function() {
		var is;
		is = this;
		return -1;
	};
	InputStream.prototype.Mark = function() { return this.$val.Mark(); };
	InputStream.ptr.prototype.Release = function(marker) {
		var is, marker;
		is = this;
	};
	InputStream.prototype.Release = function(marker) { return this.$val.Release(marker); };
	InputStream.ptr.prototype.Seek = function(index) {
		var index, is;
		is = this;
		if (index <= is.index) {
			is.index = index;
			return;
		}
		is.index = intMin(index, is.size);
	};
	InputStream.prototype.Seek = function(index) { return this.$val.Seek(index); };
	InputStream.ptr.prototype.GetText = function(start, stop) {
		var is, start, stop;
		is = this;
		if (stop >= is.size) {
			stop = is.size - 1 >> 0;
		}
		if (start >= is.size) {
			return "";
		}
		return ($runesToString($subslice(is.data, start, (stop + 1 >> 0))));
	};
	InputStream.prototype.GetText = function(start, stop) { return this.$val.GetText(start, stop); };
	InputStream.ptr.prototype.GetTextFromTokens = function(start, stop) {
		var _arg, _arg$1, _r$2, _r$3, _r$4, _r$5, is, start, stop, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; is = $f.is; start = $f.start; stop = $f.stop; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		is = this;
		/* */ if (!($interfaceIsEqual(start, $ifaceNil)) && !($interfaceIsEqual(stop, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(start, $ifaceNil)) && !($interfaceIsEqual(stop, $ifaceNil))) { */ case 1:
			_r$2 = start.GetTokenIndex(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg = _r$2;
			_r$3 = stop.GetTokenIndex(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_arg$1 = _r$3;
			_r$4 = NewInterval(_arg, _arg$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = is.GetTextFromInterval(_r$4); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return _r$5;
		/* } */ case 2:
		$s = -1; return "";
		/* */ } return; } if ($f === undefined) { $f = { $blk: InputStream.ptr.prototype.GetTextFromTokens }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.is = is; $f.start = start; $f.stop = stop; $f.$s = $s; $f.$r = $r; return $f;
	};
	InputStream.prototype.GetTextFromTokens = function(start, stop) { return this.$val.GetTextFromTokens(start, stop); };
	InputStream.ptr.prototype.GetTextFromInterval = function(i) {
		var i, is;
		is = this;
		return is.GetText(i.Start, i.Stop);
	};
	InputStream.prototype.GetTextFromInterval = function(i) { return this.$val.GetTextFromInterval(i); };
	InputStream.ptr.prototype.GetSourceName = function() {
		return "Obtained from string";
	};
	InputStream.prototype.GetSourceName = function() { return this.$val.GetSourceName(); };
	InputStream.ptr.prototype.String = function() {
		var is;
		is = this;
		return ($runesToString(is.data));
	};
	InputStream.prototype.String = function() { return this.$val.String(); };
	NewInterval = function(start, stop) {
		var i, start, stop;
		i = new Interval.ptr(0, 0);
		i.Start = start;
		i.Stop = stop;
		return i;
	};
	$pkg.NewInterval = NewInterval;
	Interval.ptr.prototype.Contains = function(item) {
		var i, item;
		i = this;
		return item >= i.Start && item < i.Stop;
	};
	Interval.prototype.Contains = function(item) { return this.$val.Contains(item); };
	Interval.ptr.prototype.String = function() {
		var i;
		i = this;
		if (i.Start === (i.Stop - 1 >> 0)) {
			return strconv.Itoa(i.Start);
		}
		return strconv.Itoa(i.Start) + ".." + strconv.Itoa(i.Stop - 1 >> 0);
	};
	Interval.prototype.String = function() { return this.$val.String(); };
	Interval.ptr.prototype.length = function() {
		var i;
		i = this;
		return i.Stop - i.Start >> 0;
	};
	Interval.prototype.length = function() { return this.$val.length(); };
	NewIntervalSet = function() {
		var i;
		i = new IntervalSet.ptr(sliceType$22.nil, false);
		i.intervals = sliceType$22.nil;
		i.readOnly = false;
		return i;
	};
	$pkg.NewIntervalSet = NewIntervalSet;
	IntervalSet.ptr.prototype.first = function() {
		var i, x;
		i = this;
		if (i.intervals.$length === 0) {
			return 0;
		}
		return (x = i.intervals, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).Start;
	};
	IntervalSet.prototype.first = function() { return this.$val.first(); };
	IntervalSet.ptr.prototype.addOne = function(v) {
		var i, v;
		i = this;
		i.addInterval(NewInterval(v, v + 1 >> 0));
	};
	IntervalSet.prototype.addOne = function(v) { return this.$val.addOne(v); };
	IntervalSet.ptr.prototype.addRange = function(l, h) {
		var h, i, l;
		i = this;
		i.addInterval(NewInterval(l, h + 1 >> 0));
	};
	IntervalSet.prototype.addRange = function(l, h) { return this.$val.addRange(l, h); };
	IntervalSet.ptr.prototype.addInterval = function(v) {
		var _i, _ref, i, interval, k, l, r, v, x, x$1, x$2, x$3, x$4, x$5;
		i = this;
		if (i.intervals === sliceType$22.nil) {
			i.intervals = $makeSlice(sliceType$22, 0);
			i.intervals = $append(i.intervals, v);
		} else {
			_ref = i.intervals;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				k = _i;
				interval = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (v.Stop < interval.Start) {
					i.intervals = $appendSlice($subslice(i.intervals, 0, k), $appendSlice(new sliceType$22([v]), $subslice(i.intervals, k)));
					return;
				} else if (v.Stop === interval.Start) {
					(x = i.intervals, ((k < 0 || k >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + k])).Start = v.Start;
					return;
				} else if (v.Start <= interval.Stop) {
					(x$1 = i.intervals, ((k < 0 || k >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + k] = NewInterval(intMin(interval.Start, v.Start), intMax(interval.Stop, v.Stop))));
					if (k < (i.intervals.$length - 1 >> 0)) {
						l = (x$2 = i.intervals, ((k < 0 || k >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + k]));
						r = (x$3 = i.intervals, x$4 = k + 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4]));
						if (l.Stop >= r.Stop) {
							i.intervals = $appendSlice($subslice(i.intervals, 0, (k + 1 >> 0)), $subslice(i.intervals, (k + 2 >> 0)));
						} else if (l.Stop >= r.Start) {
							(x$5 = i.intervals, ((k < 0 || k >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + k] = NewInterval(l.Start, r.Stop)));
							i.intervals = $appendSlice($subslice(i.intervals, 0, (k + 1 >> 0)), $subslice(i.intervals, (k + 2 >> 0)));
						}
					}
					return;
				}
				_i++;
			}
			i.intervals = $append(i.intervals, v);
		}
	};
	IntervalSet.prototype.addInterval = function(v) { return this.$val.addInterval(v); };
	IntervalSet.ptr.prototype.addSet = function(other) {
		var i, i2, k, other, x;
		i = this;
		if (!(other.intervals === sliceType$22.nil)) {
			k = 0;
			while (true) {
				if (!(k < other.intervals.$length)) { break; }
				i2 = (x = other.intervals, ((k < 0 || k >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + k]));
				i.addInterval(NewInterval(i2.Start, i2.Stop));
				k = k + (1) >> 0;
			}
		}
		return i;
	};
	IntervalSet.prototype.addSet = function(other) { return this.$val.addSet(other); };
	IntervalSet.ptr.prototype.complement = function(start, stop) {
		var i, j, result, start, stop, x;
		i = this;
		result = NewIntervalSet();
		result.addInterval(NewInterval(start, stop + 1 >> 0));
		j = 0;
		while (true) {
			if (!(j < i.intervals.$length)) { break; }
			result.removeRange((x = i.intervals, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j])));
			j = j + (1) >> 0;
		}
		return result;
	};
	IntervalSet.prototype.complement = function(start, stop) { return this.$val.complement(start, stop); };
	IntervalSet.ptr.prototype.contains = function(item) {
		var i, item, k, x;
		i = this;
		if (i.intervals === sliceType$22.nil) {
			return false;
		}
		k = 0;
		while (true) {
			if (!(k < i.intervals.$length)) { break; }
			if ((x = i.intervals, ((k < 0 || k >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + k])).Contains(item)) {
				return true;
			}
			k = k + (1) >> 0;
		}
		return false;
	};
	IntervalSet.prototype.contains = function(item) { return this.$val.contains(item); };
	IntervalSet.ptr.prototype.length = function() {
		var _i, _ref, i, len, v;
		i = this;
		len = 0;
		_ref = i.intervals;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			len = len + (v.length()) >> 0;
			_i++;
		}
		return len;
	};
	IntervalSet.prototype.length = function() { return this.$val.length(); };
	IntervalSet.ptr.prototype.removeRange = function(v) {
		var i, k, n, ni, v, x, x$1, x$2, x$3, x$4;
		i = this;
		if (v.Start === (v.Stop - 1 >> 0)) {
			i.removeOne(v.Start);
		} else if (!(i.intervals === sliceType$22.nil)) {
			k = 0;
			n = 0;
			while (true) {
				if (!(n < i.intervals.$length)) { break; }
				ni = (x = i.intervals, ((k < 0 || k >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + k]));
				if (v.Stop <= ni.Start) {
					return;
				} else if (v.Start > ni.Start && v.Stop < ni.Stop) {
					(x$1 = i.intervals, ((k < 0 || k >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + k] = NewInterval(ni.Start, v.Start)));
					x$2 = NewInterval(v.Stop, ni.Stop);
					i.intervals = $appendSlice($subslice(i.intervals, 0, k), $appendSlice(new sliceType$22([x$2]), $subslice(i.intervals, k)));
					return;
				} else if (v.Start <= ni.Start && v.Stop >= ni.Stop) {
					i.intervals = $appendSlice($subslice(i.intervals, 0, k), $subslice(i.intervals, (k + 1 >> 0)));
					k = k - 1 >> 0;
				} else if (v.Start < ni.Stop) {
					(x$3 = i.intervals, ((k < 0 || k >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + k] = NewInterval(ni.Start, v.Start)));
				} else if (v.Stop < ni.Stop) {
					(x$4 = i.intervals, ((k < 0 || k >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + k] = NewInterval(v.Stop, ni.Stop)));
				}
				k = k + (1) >> 0;
				n = n + (1) >> 0;
			}
		}
	};
	IntervalSet.prototype.removeRange = function(v) { return this.$val.removeRange(v); };
	IntervalSet.ptr.prototype.removeOne = function(v) {
		var i, k, ki, v, x, x$1, x$2, x$3;
		i = this;
		if (!(i.intervals === sliceType$22.nil)) {
			k = 0;
			while (true) {
				if (!(k < i.intervals.$length)) { break; }
				ki = (x = i.intervals, ((k < 0 || k >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + k]));
				if (v < ki.Start) {
					return;
				} else if ((v === ki.Start) && (v === (ki.Stop - 1 >> 0))) {
					i.intervals = $appendSlice($subslice(i.intervals, 0, k), $subslice(i.intervals, (k + 1 >> 0)));
					return;
				} else if (v === ki.Start) {
					(x$1 = i.intervals, ((k < 0 || k >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + k] = NewInterval(ki.Start + 1 >> 0, ki.Stop)));
					return;
				} else if (v === (ki.Stop - 1 >> 0)) {
					(x$2 = i.intervals, ((k < 0 || k >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + k] = NewInterval(ki.Start, ki.Stop - 1 >> 0)));
					return;
				} else if (v < (ki.Stop - 1 >> 0)) {
					x$3 = NewInterval(ki.Start, v);
					ki.Start = v + 1 >> 0;
					i.intervals = $appendSlice($subslice(i.intervals, 0, k), $appendSlice(new sliceType$22([x$3]), $subslice(i.intervals, k)));
					return;
				}
				k = k + (1) >> 0;
			}
		}
	};
	IntervalSet.prototype.removeOne = function(v) { return this.$val.removeOne(v); };
	IntervalSet.ptr.prototype.String = function() {
		var i;
		i = this;
		return i.StringVerbose(sliceType.nil, sliceType.nil, false);
	};
	IntervalSet.prototype.String = function() { return this.$val.String(); };
	IntervalSet.ptr.prototype.StringVerbose = function(literalNames, symbolicNames, elemsAreChar) {
		var elemsAreChar, i, literalNames, symbolicNames;
		i = this;
		if (i.intervals === sliceType$22.nil) {
			return "{}";
		} else if (!(literalNames === sliceType.nil) || !(symbolicNames === sliceType.nil)) {
			return i.toTokenString(literalNames, symbolicNames);
		} else if (elemsAreChar) {
			return i.toCharString();
		}
		return i.toIndexString();
	};
	IntervalSet.prototype.StringVerbose = function(literalNames, symbolicNames, elemsAreChar) { return this.$val.StringVerbose(literalNames, symbolicNames, elemsAreChar); };
	IntervalSet.ptr.prototype.toCharString = function() {
		var i, j, names, v, x;
		i = this;
		names = $makeSlice(sliceType, i.intervals.$length);
		j = 0;
		while (true) {
			if (!(j < i.intervals.$length)) { break; }
			v = (x = i.intervals, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
			if (v.Stop === (v.Start + 1 >> 0)) {
				if (v.Start === -1) {
					names = $append(names, "<EOF>");
				} else {
					names = $append(names, "'" + ($encodeRune(v.Start)) + "'");
				}
			} else {
				names = $append(names, "'" + ($encodeRune(v.Start)) + "'..'" + ($encodeRune((v.Stop - 1 >> 0))) + "'");
			}
			j = j + (1) >> 0;
		}
		if (names.$length > 1) {
			return "{" + strings.Join(names, ", ") + "}";
		}
		return (0 >= names.$length ? ($throwRuntimeError("index out of range"), undefined) : names.$array[names.$offset + 0]);
	};
	IntervalSet.prototype.toCharString = function() { return this.$val.toCharString(); };
	IntervalSet.ptr.prototype.toIndexString = function() {
		var i, j, names, v, x;
		i = this;
		names = $makeSlice(sliceType, 0);
		j = 0;
		while (true) {
			if (!(j < i.intervals.$length)) { break; }
			v = (x = i.intervals, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
			if (v.Stop === (v.Start + 1 >> 0)) {
				if (v.Start === -1) {
					names = $append(names, "<EOF>");
				} else {
					names = $append(names, strconv.Itoa(v.Start));
				}
			} else {
				names = $append(names, strconv.Itoa(v.Start) + ".." + strconv.Itoa(v.Stop - 1 >> 0));
			}
			j = j + (1) >> 0;
		}
		if (names.$length > 1) {
			return "{" + strings.Join(names, ", ") + "}";
		}
		return (0 >= names.$length ? ($throwRuntimeError("index out of range"), undefined) : names.$array[names.$offset + 0]);
	};
	IntervalSet.prototype.toIndexString = function() { return this.$val.toIndexString(); };
	IntervalSet.ptr.prototype.toTokenString = function(literalNames, symbolicNames) {
		var _i, _ref, i, j, literalNames, names, symbolicNames, v;
		i = this;
		names = $makeSlice(sliceType, 0);
		_ref = i.intervals;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			j = v.Start;
			while (true) {
				if (!(j < v.Stop)) { break; }
				names = $append(names, i.elementName(literalNames, symbolicNames, j));
				j = j + (1) >> 0;
			}
			_i++;
		}
		if (names.$length > 1) {
			return "{" + strings.Join(names, ", ") + "}";
		}
		return (0 >= names.$length ? ($throwRuntimeError("index out of range"), undefined) : names.$array[names.$offset + 0]);
	};
	IntervalSet.prototype.toTokenString = function(literalNames, symbolicNames) { return this.$val.toTokenString(literalNames, symbolicNames); };
	IntervalSet.ptr.prototype.elementName = function(literalNames, symbolicNames, a) {
		var a, i, literalNames, symbolicNames;
		i = this;
		if (a === -1) {
			return "<EOF>";
		} else if (a === -2) {
			return "<EPSILON>";
		} else {
			if (a < literalNames.$length && !(((a < 0 || a >= literalNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : literalNames.$array[literalNames.$offset + a]) === "")) {
				return ((a < 0 || a >= literalNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : literalNames.$array[literalNames.$offset + a]);
			}
			return ((a < 0 || a >= symbolicNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : symbolicNames.$array[symbolicNames.$offset + a]);
		}
	};
	IntervalSet.prototype.elementName = function(literalNames, symbolicNames, a) { return this.$val.elementName(literalNames, symbolicNames, a); };
	NewBaseLexer = function(input) {
		var input, lexer, x;
		lexer = new BaseLexer.ptr(ptrType$41.nil, $ifaceNil, 0, 0, 0, 0, $ifaceNil, $ifaceNil, $ifaceNil, ptrType$28.nil, $ifaceNil, false, 0, 0, IntStack.nil, 0, "");
		lexer.BaseRecognizer = NewBaseRecognizer();
		lexer.input = input;
		lexer.factory = $pkg.CommonTokenFactoryDEFAULT;
		lexer.tokenFactorySourcePair = new TokenSourceCharStreamPair.ptr(lexer, input);
		lexer.Virt = lexer;
		lexer.Interpreter = $ifaceNil;
		lexer.token = $ifaceNil;
		lexer.TokenStartCharIndex = -1;
		lexer.TokenStartLine = -1;
		lexer.TokenStartColumn = -1;
		lexer.hitEOF = false;
		lexer.channel = 0;
		lexer.thetype = 0;
		lexer.modeStack = (x = $makeSlice(sliceType$6, 0), $subslice(new IntStack(x.$array), x.$offset, x.$offset + x.$length));
		lexer.mode = 0;
		lexer.text = "";
		return lexer;
	};
	$pkg.NewBaseLexer = NewBaseLexer;
	BaseLexer.ptr.prototype.reset = function() {
		var b, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; b = $f.b; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		/* */ if (!($interfaceIsEqual(b.input, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(b.input, $ifaceNil))) { */ case 1:
			$r = b.input.Seek(0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		b.token = $ifaceNil;
		b.thetype = 0;
		b.channel = 0;
		b.TokenStartCharIndex = -1;
		b.TokenStartColumn = -1;
		b.TokenStartLine = -1;
		b.text = "";
		b.hitEOF = false;
		b.mode = 0;
		b.modeStack = (x = $makeSlice(sliceType$6, 0), $subslice(new IntStack(x.$array), x.$offset, x.$offset + x.$length));
		$r = b.Interpreter.reset(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseLexer.ptr.prototype.reset }; } $f.b = b; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseLexer.prototype.reset = function() { return this.$val.reset(); };
	BaseLexer.ptr.prototype.GetInterpreter = function() {
		var b;
		b = this;
		return b.Interpreter;
	};
	BaseLexer.prototype.GetInterpreter = function() { return this.$val.GetInterpreter(); };
	BaseLexer.ptr.prototype.GetInputStream = function() {
		var b;
		b = this;
		return b.input;
	};
	BaseLexer.prototype.GetInputStream = function() { return this.$val.GetInputStream(); };
	BaseLexer.ptr.prototype.GetSourceName = function() {
		var b;
		b = this;
		return b.BaseRecognizer.GrammarFileName;
	};
	BaseLexer.prototype.GetSourceName = function() { return this.$val.GetSourceName(); };
	BaseLexer.ptr.prototype.setChannel = function(v) {
		var b, v;
		b = this;
		b.channel = v;
	};
	BaseLexer.prototype.setChannel = function(v) { return this.$val.setChannel(v); };
	BaseLexer.ptr.prototype.GetTokenFactory = function() {
		var b;
		b = this;
		return b.factory;
	};
	BaseLexer.prototype.GetTokenFactory = function() { return this.$val.GetTokenFactory(); };
	BaseLexer.ptr.prototype.safeMatch = function() {
		var _r$2, b, ret, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; b = $f.b; ret = $f.ret; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		b = [b];
		ret = [ret];
		ret[0] = 0;
		b[0] = this;
		$deferred.push([(function(b, ret) { return function $b() {
			var _tuple, e, ok, re, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; e = $f.e; ok = $f.ok; re = $f.re; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			e = $recover();
			/* */ if (!($interfaceIsEqual(e, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(e, $ifaceNil))) { */ case 1:
				_tuple = $assertType(e, RecognitionException, true);
				re = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (ok) { */ case 3:
					$r = b[0].notifyListeners(re); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = b[0].Recover(re); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					ret[0] = -3;
				/* } */ case 4:
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._tuple = _tuple; $f.e = e; $f.ok = ok; $f.re = re; $f.$s = $s; $f.$r = $r; return $f;
		}; })(b, ret), []]);
		_r$2 = b[0].Interpreter.Match(b[0].input, b[0].mode); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		ret[0] = _r$2;
		$s = -1; return ret[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  ret[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: BaseLexer.ptr.prototype.safeMatch }; } $f._r$2 = _r$2; $f.b = b; $f.ret = ret; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	BaseLexer.prototype.safeMatch = function() { return this.$val.safeMatch(); };
	BaseLexer.ptr.prototype.NextToken = function() {
		var _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, b, continueOuter, tokenStartMarker, ttype, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; b = $f.b; continueOuter = $f.continueOuter; tokenStartMarker = $f.tokenStartMarker; ttype = $f.ttype; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		b = [b];
		tokenStartMarker = [tokenStartMarker];
		b[0] = this;
		if ($interfaceIsEqual(b[0].input, $ifaceNil)) {
			$panic(new $String("NextToken requires a non-nil input stream."));
		}
		_r$2 = b[0].input.Mark(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		tokenStartMarker[0] = _r$2;
		$deferred.push([(function(b, tokenStartMarker) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = b[0].input.Release(tokenStartMarker[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(b, tokenStartMarker), []]);
		/* while (true) { */ case 2:
			/* */ if (b[0].hitEOF) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (b[0].hitEOF) { */ case 4:
				_r$3 = b[0].EmitEOF(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				$s = -1; return b[0].token;
			/* } */ case 5:
			b[0].token = $ifaceNil;
			b[0].channel = 0;
			_r$4 = b[0].input.Index(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			b[0].TokenStartCharIndex = _r$4;
			_r$5 = b[0].Interpreter.GetCharPositionInLine(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			b[0].TokenStartColumn = _r$5;
			_r$6 = b[0].Interpreter.GetLine(); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			b[0].TokenStartLine = _r$6;
			b[0].text = "";
			continueOuter = false;
			/* while (true) { */ case 10:
				b[0].thetype = 0;
				ttype = -3;
				_r$7 = b[0].safeMatch(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				ttype = _r$7;
				_r$8 = b[0].input.LA(1); /* */ $s = 15; case 15: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				/* */ if (_r$8 === -1) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (_r$8 === -1) { */ case 13:
					b[0].hitEOF = true;
				/* } */ case 14:
				if (b[0].thetype === 0) {
					b[0].thetype = ttype;
				}
				if (b[0].thetype === -3) {
					continueOuter = true;
					/* break; */ $s = 11; continue;
				}
				if (!((b[0].thetype === -2))) {
					/* break; */ $s = 11; continue;
				}
			/* } */ $s = 10; continue; case 11:
			/* */ if (continueOuter) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (continueOuter) { */ case 16:
				/* continue; */ $s = 2; continue;
			/* } */ case 17:
			/* */ if ($interfaceIsEqual(b[0].token, $ifaceNil)) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if ($interfaceIsEqual(b[0].token, $ifaceNil)) { */ case 18:
				_r$9 = b[0].Virt.Emit(); /* */ $s = 20; case 20: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$9;
			/* } */ case 19:
			$s = -1; return b[0].token;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: BaseLexer.ptr.prototype.NextToken }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.b = b; $f.continueOuter = continueOuter; $f.tokenStartMarker = tokenStartMarker; $f.ttype = ttype; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	BaseLexer.prototype.NextToken = function() { return this.$val.NextToken(); };
	BaseLexer.ptr.prototype.Skip = function() {
		var b;
		b = this;
		b.thetype = -3;
	};
	BaseLexer.prototype.Skip = function() { return this.$val.Skip(); };
	BaseLexer.ptr.prototype.More = function() {
		var b;
		b = this;
		b.thetype = -2;
	};
	BaseLexer.prototype.More = function() { return this.$val.More(); };
	BaseLexer.ptr.prototype.setMode = function(m) {
		var b, m;
		b = this;
		b.mode = m;
	};
	BaseLexer.prototype.setMode = function(m) { return this.$val.setMode(m); };
	BaseLexer.ptr.prototype.pushMode = function(m) {
		var _r$2, b, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; b = $f.b; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		/* */ if ($pkg.LexerATNSimulatorDebug) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.LexerATNSimulatorDebug) { */ case 1:
			_r$2 = fmt.Println(new sliceType$8([new $String("pushMode " + strconv.Itoa(m))])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ case 2:
		(b.$ptr_modeStack || (b.$ptr_modeStack = new ptrType$42(function() { return this.$target.modeStack; }, function($v) { this.$target.modeStack = $v; }, b))).Push(b.mode);
		b.mode = m;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseLexer.ptr.prototype.pushMode }; } $f._r$2 = _r$2; $f.b = b; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseLexer.prototype.pushMode = function(m) { return this.$val.pushMode(m); };
	BaseLexer.ptr.prototype.popMode = function() {
		var _r$2, _r$3, _tuple, b, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; b = $f.b; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (b.modeStack.$length === 0) {
			$panic(new $String("Empty Stack"));
		}
		/* */ if ($pkg.LexerATNSimulatorDebug) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.LexerATNSimulatorDebug) { */ case 1:
			_r$2 = fmt.Sprint(new sliceType$8([$subslice(b.modeStack, 0, (b.modeStack.$length - 1 >> 0))])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = fmt.Println(new sliceType$8([new $String("popMode back to " + _r$2)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 2:
		_tuple = (b.$ptr_modeStack || (b.$ptr_modeStack = new ptrType$42(function() { return this.$target.modeStack; }, function($v) { this.$target.modeStack = $v; }, b))).Pop();
		i = _tuple[0];
		b.mode = i;
		$s = -1; return b.mode;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseLexer.ptr.prototype.popMode }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.b = b; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseLexer.prototype.popMode = function() { return this.$val.popMode(); };
	BaseLexer.ptr.prototype.GetTokenSourceCharStreamPair = function() {
		var b;
		b = this;
		return b.tokenFactorySourcePair;
	};
	BaseLexer.prototype.GetTokenSourceCharStreamPair = function() { return this.$val.GetTokenSourceCharStreamPair(); };
	BaseLexer.ptr.prototype.EmitToken = function(token) {
		var b, token;
		b = this;
		b.token = token;
	};
	BaseLexer.prototype.EmitToken = function(token) { return this.$val.EmitToken(token); };
	BaseLexer.ptr.prototype.Emit = function() {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _r$2, _r$3, b, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _r$2 = $f._r$2; _r$3 = $f._r$3; b = $f.b; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_arg = b.tokenFactorySourcePair;
		_arg$1 = b.thetype;
		_arg$2 = b.text;
		_arg$3 = b.channel;
		_arg$4 = b.TokenStartCharIndex;
		_r$2 = b.GetCharIndex(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$5 = _r$2 - 1 >> 0;
		_arg$6 = b.TokenStartLine;
		_arg$7 = b.TokenStartColumn;
		_r$3 = b.factory.Create(_arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		b.EmitToken(t);
		$s = -1; return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseLexer.ptr.prototype.Emit }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.b = b; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseLexer.prototype.Emit = function() { return this.$val.Emit(); };
	BaseLexer.ptr.prototype.EmitEOF = function() {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _r$2, _r$3, _r$4, _r$5, _r$6, b, cpos, eof, lpos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; b = $f.b; cpos = $f.cpos; eof = $f.eof; lpos = $f.lpos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r$2 = b.GetCharPositionInLine(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		cpos = _r$2;
		_r$3 = b.GetLine(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		lpos = _r$3;
		_arg = b.tokenFactorySourcePair;
		_r$4 = b.input.Index(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg$1 = _r$4;
		_r$5 = b.input.Index(); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$2 = _r$5 - 1 >> 0;
		_arg$3 = lpos;
		_arg$4 = cpos;
		_r$6 = b.factory.Create(_arg, -1, "", 0, _arg$1, _arg$2, _arg$3, _arg$4); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		eof = _r$6;
		b.EmitToken(eof);
		$s = -1; return eof;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseLexer.ptr.prototype.EmitEOF }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.b = b; $f.cpos = cpos; $f.eof = eof; $f.lpos = lpos; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseLexer.prototype.EmitEOF = function() { return this.$val.EmitEOF(); };
	BaseLexer.ptr.prototype.GetCharPositionInLine = function() {
		var _r$2, b, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; b = $f.b; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r$2 = b.Interpreter.GetCharPositionInLine(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseLexer.ptr.prototype.GetCharPositionInLine }; } $f._r$2 = _r$2; $f.b = b; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseLexer.prototype.GetCharPositionInLine = function() { return this.$val.GetCharPositionInLine(); };
	BaseLexer.ptr.prototype.GetLine = function() {
		var _r$2, b, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; b = $f.b; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r$2 = b.Interpreter.GetLine(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseLexer.ptr.prototype.GetLine }; } $f._r$2 = _r$2; $f.b = b; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseLexer.prototype.GetLine = function() { return this.$val.GetLine(); };
	BaseLexer.ptr.prototype.GetType = function() {
		var b;
		b = this;
		return b.thetype;
	};
	BaseLexer.prototype.GetType = function() { return this.$val.GetType(); };
	BaseLexer.ptr.prototype.setType = function(t) {
		var b, t;
		b = this;
		b.thetype = t;
	};
	BaseLexer.prototype.setType = function(t) { return this.$val.setType(t); };
	BaseLexer.ptr.prototype.GetCharIndex = function() {
		var _r$2, b, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; b = $f.b; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r$2 = b.input.Index(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseLexer.ptr.prototype.GetCharIndex }; } $f._r$2 = _r$2; $f.b = b; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseLexer.prototype.GetCharIndex = function() { return this.$val.GetCharIndex(); };
	BaseLexer.ptr.prototype.GetText = function() {
		var _r$2, b, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; b = $f.b; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (!(b.text === "")) {
			$s = -1; return b.text;
		}
		_r$2 = b.Interpreter.GetText(b.input); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseLexer.ptr.prototype.GetText }; } $f._r$2 = _r$2; $f.b = b; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseLexer.prototype.GetText = function() { return this.$val.GetText(); };
	BaseLexer.ptr.prototype.SetText = function(text) {
		var b, text;
		b = this;
		b.text = text;
	};
	BaseLexer.prototype.SetText = function(text) { return this.$val.SetText(text); };
	BaseLexer.ptr.prototype.GetATN = function() {
		var _r$2, b, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; b = $f.b; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r$2 = b.Interpreter.ATN(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseLexer.ptr.prototype.GetATN }; } $f._r$2 = _r$2; $f.b = b; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseLexer.prototype.GetATN = function() { return this.$val.GetATN(); };
	BaseLexer.ptr.prototype.notifyListeners = function(e) {
		var _r$2, _r$3, b, e, listener, msg, start, stop, text, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; b = $f.b; e = $f.e; listener = $f.listener; msg = $f.msg; start = $f.start; stop = $f.stop; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		start = b.TokenStartCharIndex;
		_r$2 = b.input.Index(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		stop = _r$2;
		_r$3 = b.input.GetTextFromInterval(NewInterval(start, stop)); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		text = _r$3;
		msg = "token recognition error at: '" + text + "'";
		listener = b.BaseRecognizer.GetErrorListenerDispatch();
		$r = listener.SyntaxError(b, $ifaceNil, b.TokenStartLine, b.TokenStartColumn, msg, e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseLexer.ptr.prototype.notifyListeners }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.b = b; $f.e = e; $f.listener = listener; $f.msg = msg; $f.start = start; $f.stop = stop; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseLexer.prototype.notifyListeners = function(e) { return this.$val.notifyListeners(e); };
	BaseLexer.ptr.prototype.Recover = function(re) {
		var _r$2, _tuple, b, ok, re, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _tuple = $f._tuple; b = $f.b; ok = $f.ok; re = $f.re; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r$2 = b.input.LA(1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (!((_r$2 === -1))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r$2 === -1))) { */ case 1:
			_tuple = $assertType(re, ptrType$43, true);
			ok = _tuple[1];
			/* */ if (ok) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (ok) { */ case 4:
				$r = b.Interpreter.Consume(b.input); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else { */ case 5:
				$r = b.input.Consume(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseLexer.ptr.prototype.Recover }; } $f._r$2 = _r$2; $f._tuple = _tuple; $f.b = b; $f.ok = ok; $f.re = re; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseLexer.prototype.Recover = function(re) { return this.$val.Recover(re); };
	NewBaseLexerAction = function(action) {
		var action, la;
		la = new BaseLexerAction.ptr(0, false);
		la.actionType = action;
		la.isPositionDependent = false;
		return la;
	};
	$pkg.NewBaseLexerAction = NewBaseLexerAction;
	BaseLexerAction.ptr.prototype.execute = function(lexer) {
		var b, lexer;
		b = this;
		$panic(new $String("Not implemented"));
	};
	BaseLexerAction.prototype.execute = function(lexer) { return this.$val.execute(lexer); };
	BaseLexerAction.ptr.prototype.getActionType = function() {
		var b;
		b = this;
		return b.actionType;
	};
	BaseLexerAction.prototype.getActionType = function() { return this.$val.getActionType(); };
	BaseLexerAction.ptr.prototype.getIsPositionDependent = function() {
		var b;
		b = this;
		return b.isPositionDependent;
	};
	BaseLexerAction.prototype.getIsPositionDependent = function() { return this.$val.getIsPositionDependent(); };
	BaseLexerAction.ptr.prototype.hash = function() {
		var b;
		b = this;
		return b.actionType;
	};
	BaseLexerAction.prototype.hash = function() { return this.$val.hash(); };
	BaseLexerAction.ptr.prototype.equals = function(other) {
		var b, other;
		b = this;
		return $interfaceIsEqual(b, other);
	};
	BaseLexerAction.prototype.equals = function(other) { return this.$val.equals(other); };
	NewLexerSkipAction = function() {
		var la;
		la = new LexerSkipAction.ptr(ptrType$44.nil);
		la.BaseLexerAction = NewBaseLexerAction(6);
		return la;
	};
	$pkg.NewLexerSkipAction = NewLexerSkipAction;
	LexerSkipAction.ptr.prototype.execute = function(lexer) {
		var l, lexer, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; l = $f.l; lexer = $f.lexer; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		$r = lexer.Skip(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerSkipAction.ptr.prototype.execute }; } $f.l = l; $f.lexer = lexer; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerSkipAction.prototype.execute = function(lexer) { return this.$val.execute(lexer); };
	LexerSkipAction.ptr.prototype.String = function() {
		var l;
		l = this;
		return "skip";
	};
	LexerSkipAction.prototype.String = function() { return this.$val.String(); };
	NewLexerTypeAction = function(thetype) {
		var l, thetype;
		l = new LexerTypeAction.ptr(ptrType$44.nil, 0);
		l.BaseLexerAction = NewBaseLexerAction(7);
		l.thetype = thetype;
		return l;
	};
	$pkg.NewLexerTypeAction = NewLexerTypeAction;
	LexerTypeAction.ptr.prototype.execute = function(lexer) {
		var l, lexer, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; l = $f.l; lexer = $f.lexer; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		$r = lexer.setType(l.thetype); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerTypeAction.ptr.prototype.execute }; } $f.l = l; $f.lexer = lexer; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerTypeAction.prototype.execute = function(lexer) { return this.$val.execute(lexer); };
	LexerTypeAction.ptr.prototype.hash = function() {
		var h, l;
		l = this;
		h = murmurInit(0);
		h = murmurUpdate(h, l.BaseLexerAction.actionType);
		h = murmurUpdate(h, l.thetype);
		return murmurFinish(h, 2);
	};
	LexerTypeAction.prototype.hash = function() { return this.$val.hash(); };
	LexerTypeAction.ptr.prototype.equals = function(other) {
		var _tuple, l, ok, other;
		l = this;
		if ($interfaceIsEqual(l, other)) {
			return true;
		} else {
			_tuple = $assertType(other, ptrType$45, true);
			ok = _tuple[1];
			if (!ok) {
				return false;
			} else {
				return l.thetype === $assertType(other, ptrType$45).thetype;
			}
		}
	};
	LexerTypeAction.prototype.equals = function(other) { return this.$val.equals(other); };
	LexerTypeAction.ptr.prototype.String = function() {
		var l;
		l = this;
		return "actionType(" + strconv.Itoa(l.thetype) + ")";
	};
	LexerTypeAction.prototype.String = function() { return this.$val.String(); };
	NewLexerPushModeAction = function(mode) {
		var l, mode;
		l = new LexerPushModeAction.ptr(ptrType$44.nil, 0);
		l.BaseLexerAction = NewBaseLexerAction(5);
		l.mode = mode;
		return l;
	};
	$pkg.NewLexerPushModeAction = NewLexerPushModeAction;
	LexerPushModeAction.ptr.prototype.execute = function(lexer) {
		var l, lexer, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; l = $f.l; lexer = $f.lexer; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		$r = lexer.pushMode(l.mode); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerPushModeAction.ptr.prototype.execute }; } $f.l = l; $f.lexer = lexer; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerPushModeAction.prototype.execute = function(lexer) { return this.$val.execute(lexer); };
	LexerPushModeAction.ptr.prototype.hash = function() {
		var h, l;
		l = this;
		h = murmurInit(0);
		h = murmurUpdate(h, l.BaseLexerAction.actionType);
		h = murmurUpdate(h, l.mode);
		return murmurFinish(h, 2);
	};
	LexerPushModeAction.prototype.hash = function() { return this.$val.hash(); };
	LexerPushModeAction.ptr.prototype.equals = function(other) {
		var _tuple, l, ok, other;
		l = this;
		if ($interfaceIsEqual(l, other)) {
			return true;
		} else {
			_tuple = $assertType(other, ptrType$46, true);
			ok = _tuple[1];
			if (!ok) {
				return false;
			} else {
				return l.mode === $assertType(other, ptrType$46).mode;
			}
		}
	};
	LexerPushModeAction.prototype.equals = function(other) { return this.$val.equals(other); };
	LexerPushModeAction.ptr.prototype.String = function() {
		var l;
		l = this;
		return "pushMode(" + strconv.Itoa(l.mode) + ")";
	};
	LexerPushModeAction.prototype.String = function() { return this.$val.String(); };
	NewLexerPopModeAction = function() {
		var l;
		l = new LexerPopModeAction.ptr(ptrType$44.nil);
		l.BaseLexerAction = NewBaseLexerAction(4);
		return l;
	};
	$pkg.NewLexerPopModeAction = NewLexerPopModeAction;
	LexerPopModeAction.ptr.prototype.execute = function(lexer) {
		var _r$2, l, lexer, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; l = $f.l; lexer = $f.lexer; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r$2 = lexer.popMode(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerPopModeAction.ptr.prototype.execute }; } $f._r$2 = _r$2; $f.l = l; $f.lexer = lexer; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerPopModeAction.prototype.execute = function(lexer) { return this.$val.execute(lexer); };
	LexerPopModeAction.ptr.prototype.String = function() {
		var l;
		l = this;
		return "popMode";
	};
	LexerPopModeAction.prototype.String = function() { return this.$val.String(); };
	NewLexerMoreAction = function() {
		var l;
		l = new LexerMoreAction.ptr(ptrType$44.nil);
		l.BaseLexerAction = NewBaseLexerAction(3);
		return l;
	};
	$pkg.NewLexerMoreAction = NewLexerMoreAction;
	LexerMoreAction.ptr.prototype.execute = function(lexer) {
		var l, lexer, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; l = $f.l; lexer = $f.lexer; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		$r = lexer.More(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerMoreAction.ptr.prototype.execute }; } $f.l = l; $f.lexer = lexer; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerMoreAction.prototype.execute = function(lexer) { return this.$val.execute(lexer); };
	LexerMoreAction.ptr.prototype.String = function() {
		var l;
		l = this;
		return "more";
	};
	LexerMoreAction.prototype.String = function() { return this.$val.String(); };
	NewLexerModeAction = function(mode) {
		var l, mode;
		l = new LexerModeAction.ptr(ptrType$44.nil, 0);
		l.BaseLexerAction = NewBaseLexerAction(2);
		l.mode = mode;
		return l;
	};
	$pkg.NewLexerModeAction = NewLexerModeAction;
	LexerModeAction.ptr.prototype.execute = function(lexer) {
		var l, lexer, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; l = $f.l; lexer = $f.lexer; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		$r = lexer.setMode(l.mode); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerModeAction.ptr.prototype.execute }; } $f.l = l; $f.lexer = lexer; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerModeAction.prototype.execute = function(lexer) { return this.$val.execute(lexer); };
	LexerModeAction.ptr.prototype.hash = function() {
		var h, l;
		l = this;
		h = murmurInit(0);
		h = murmurUpdate(h, l.BaseLexerAction.actionType);
		h = murmurUpdate(h, l.mode);
		return murmurFinish(h, 2);
	};
	LexerModeAction.prototype.hash = function() { return this.$val.hash(); };
	LexerModeAction.ptr.prototype.equals = function(other) {
		var _tuple, l, ok, other;
		l = this;
		if ($interfaceIsEqual(l, other)) {
			return true;
		} else {
			_tuple = $assertType(other, ptrType$47, true);
			ok = _tuple[1];
			if (!ok) {
				return false;
			} else {
				return l.mode === $assertType(other, ptrType$47).mode;
			}
		}
	};
	LexerModeAction.prototype.equals = function(other) { return this.$val.equals(other); };
	LexerModeAction.ptr.prototype.String = function() {
		var l;
		l = this;
		return "mode(" + strconv.Itoa(l.mode) + ")";
	};
	LexerModeAction.prototype.String = function() { return this.$val.String(); };
	NewLexerCustomAction = function(ruleIndex, actionIndex) {
		var actionIndex, l, ruleIndex;
		l = new LexerCustomAction.ptr(ptrType$44.nil, 0, 0);
		l.BaseLexerAction = NewBaseLexerAction(1);
		l.ruleIndex = ruleIndex;
		l.actionIndex = actionIndex;
		l.BaseLexerAction.isPositionDependent = true;
		return l;
	};
	$pkg.NewLexerCustomAction = NewLexerCustomAction;
	LexerCustomAction.ptr.prototype.execute = function(lexer) {
		var l, lexer, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; l = $f.l; lexer = $f.lexer; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		$r = lexer.Action($ifaceNil, l.ruleIndex, l.actionIndex); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerCustomAction.ptr.prototype.execute }; } $f.l = l; $f.lexer = lexer; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerCustomAction.prototype.execute = function(lexer) { return this.$val.execute(lexer); };
	LexerCustomAction.ptr.prototype.hash = function() {
		var h, l;
		l = this;
		h = murmurInit(0);
		h = murmurUpdate(h, l.BaseLexerAction.actionType);
		h = murmurUpdate(h, l.ruleIndex);
		h = murmurUpdate(h, l.actionIndex);
		return murmurFinish(h, 3);
	};
	LexerCustomAction.prototype.hash = function() { return this.$val.hash(); };
	LexerCustomAction.ptr.prototype.equals = function(other) {
		var _tuple, l, ok, other;
		l = this;
		if ($interfaceIsEqual(l, other)) {
			return true;
		} else {
			_tuple = $assertType(other, ptrType$48, true);
			ok = _tuple[1];
			if (!ok) {
				return false;
			} else {
				return (l.ruleIndex === $assertType(other, ptrType$48).ruleIndex) && (l.actionIndex === $assertType(other, ptrType$48).actionIndex);
			}
		}
	};
	LexerCustomAction.prototype.equals = function(other) { return this.$val.equals(other); };
	NewLexerChannelAction = function(channel) {
		var channel, l;
		l = new LexerChannelAction.ptr(ptrType$44.nil, 0);
		l.BaseLexerAction = NewBaseLexerAction(0);
		l.channel = channel;
		return l;
	};
	$pkg.NewLexerChannelAction = NewLexerChannelAction;
	LexerChannelAction.ptr.prototype.execute = function(lexer) {
		var l, lexer, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; l = $f.l; lexer = $f.lexer; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		$r = lexer.setChannel(l.channel); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerChannelAction.ptr.prototype.execute }; } $f.l = l; $f.lexer = lexer; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerChannelAction.prototype.execute = function(lexer) { return this.$val.execute(lexer); };
	LexerChannelAction.ptr.prototype.hash = function() {
		var h, l;
		l = this;
		h = murmurInit(0);
		h = murmurUpdate(h, l.BaseLexerAction.actionType);
		h = murmurUpdate(h, l.channel);
		return murmurFinish(h, 2);
	};
	LexerChannelAction.prototype.hash = function() { return this.$val.hash(); };
	LexerChannelAction.ptr.prototype.equals = function(other) {
		var _tuple, l, ok, other;
		l = this;
		if ($interfaceIsEqual(l, other)) {
			return true;
		} else {
			_tuple = $assertType(other, ptrType$49, true);
			ok = _tuple[1];
			if (!ok) {
				return false;
			} else {
				return l.channel === $assertType(other, ptrType$49).channel;
			}
		}
	};
	LexerChannelAction.prototype.equals = function(other) { return this.$val.equals(other); };
	LexerChannelAction.ptr.prototype.String = function() {
		var l;
		l = this;
		return "channel(" + strconv.Itoa(l.channel) + ")";
	};
	LexerChannelAction.prototype.String = function() { return this.$val.String(); };
	NewLexerIndexedCustomAction = function(offset, lexerAction) {
		var _r$2, _r$3, l, lexerAction, offset, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; l = $f.l; lexerAction = $f.lexerAction; offset = $f.offset; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = new LexerIndexedCustomAction.ptr(ptrType$44.nil, 0, $ifaceNil, false);
		_r$2 = lexerAction.getActionType(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = NewBaseLexerAction(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		l.BaseLexerAction = _r$3;
		l.offset = offset;
		l.lexerAction = lexerAction;
		l.isPositionDependent = true;
		$s = -1; return l;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewLexerIndexedCustomAction }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.l = l; $f.lexerAction = lexerAction; $f.offset = offset; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewLexerIndexedCustomAction = NewLexerIndexedCustomAction;
	LexerIndexedCustomAction.ptr.prototype.execute = function(lexer) {
		var l, lexer, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; l = $f.l; lexer = $f.lexer; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		$r = l.lexerAction.execute(lexer); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerIndexedCustomAction.ptr.prototype.execute }; } $f.l = l; $f.lexer = lexer; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerIndexedCustomAction.prototype.execute = function(lexer) { return this.$val.execute(lexer); };
	LexerIndexedCustomAction.ptr.prototype.hash = function() {
		var _arg, _arg$1, _r$2, _r$3, h, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$2 = $f._r$2; _r$3 = $f._r$3; h = $f.h; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		h = murmurInit(0);
		h = murmurUpdate(h, l.BaseLexerAction.actionType);
		h = murmurUpdate(h, l.offset);
		_arg = h;
		_r$2 = l.lexerAction.hash(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$1 = _r$2;
		_r$3 = murmurUpdate(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		h = _r$3;
		$s = -1; return murmurFinish(h, 3);
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerIndexedCustomAction.ptr.prototype.hash }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.h = h; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerIndexedCustomAction.prototype.hash = function() { return this.$val.hash(); };
	LexerIndexedCustomAction.ptr.prototype.equals = function(other) {
		var _tuple, l, ok, other;
		l = this;
		if ($interfaceIsEqual(l, other)) {
			return true;
		} else {
			_tuple = $assertType(other, ptrType$50, true);
			ok = _tuple[1];
			if (!ok) {
				return false;
			} else {
				return (l.offset === $assertType(other, ptrType$50).offset) && $interfaceIsEqual(l.lexerAction, $assertType(other, ptrType$50).lexerAction);
			}
		}
	};
	LexerIndexedCustomAction.prototype.equals = function(other) { return this.$val.equals(other); };
	NewLexerActionExecutor = function(lexerActions) {
		var _arg, _arg$1, _i, _r$2, _r$3, _ref, a, l, lexerActions, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; a = $f.a; l = $f.l; lexerActions = $f.lexerActions; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (lexerActions === sliceType$2.nil) {
			lexerActions = $makeSlice(sliceType$2, 0);
		}
		l = new LexerActionExecutor.ptr(sliceType$2.nil, 0);
		l.lexerActions = lexerActions;
		l.cachedHash = murmurInit(57);
		_ref = lexerActions;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			a = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_arg = l.cachedHash;
			_r$2 = a.hash(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg$1 = _r$2;
			_r$3 = murmurUpdate(_arg, _arg$1); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			l.cachedHash = _r$3;
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return l;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewLexerActionExecutor }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.a = a; $f.l = l; $f.lexerActions = lexerActions; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewLexerActionExecutor = NewLexerActionExecutor;
	LexerActionExecutorappend = function(lexerActionExecutor, lexerAction) {
		var _r$2, _r$3, lexerAction, lexerActionExecutor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; lexerAction = $f.lexerAction; lexerActionExecutor = $f.lexerActionExecutor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (lexerActionExecutor === ptrType$8.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (lexerActionExecutor === ptrType$8.nil) { */ case 1:
			_r$2 = NewLexerActionExecutor(new sliceType$2([lexerAction])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } */ case 2:
		_r$3 = NewLexerActionExecutor($append(lexerActionExecutor.lexerActions, lexerAction)); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerActionExecutorappend }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.lexerAction = lexerAction; $f.lexerActionExecutor = lexerActionExecutor; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.LexerActionExecutorappend = LexerActionExecutorappend;
	LexerActionExecutor.ptr.prototype.fixOffsetBeforeMatch = function(offset) {
		var _i, _r$2, _r$3, _r$4, _ref, _tuple, a, i, l, offset, ok, updatedLexerActions, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _tuple = $f._tuple; a = $f.a; i = $f.i; l = $f.l; offset = $f.offset; ok = $f.ok; updatedLexerActions = $f.updatedLexerActions; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		updatedLexerActions = sliceType$2.nil;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < l.lexerActions.$length)) { break; } */ if(!(i < l.lexerActions.$length)) { $s = 2; continue; }
			_tuple = $assertType((x = l.lexerActions, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])), ptrType$50, true);
			ok = _tuple[1];
			_r$2 = (x$1 = l.lexerActions, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).getIsPositionDependent(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2 && !ok) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r$2 && !ok) { */ case 3:
				if (updatedLexerActions === sliceType$2.nil) {
					updatedLexerActions = $makeSlice(sliceType$2, 0);
					_ref = l.lexerActions;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						a = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
						updatedLexerActions = $append(updatedLexerActions, a);
						_i++;
					}
				}
				_r$3 = NewLexerIndexedCustomAction(offset, (x$2 = l.lexerActions, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i]))); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				((i < 0 || i >= updatedLexerActions.$length) ? ($throwRuntimeError("index out of range"), undefined) : updatedLexerActions.$array[updatedLexerActions.$offset + i] = _r$3);
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (updatedLexerActions === sliceType$2.nil) {
			$s = -1; return l;
		}
		_r$4 = NewLexerActionExecutor(updatedLexerActions); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerActionExecutor.ptr.prototype.fixOffsetBeforeMatch }; } $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._tuple = _tuple; $f.a = a; $f.i = i; $f.l = l; $f.offset = offset; $f.ok = ok; $f.updatedLexerActions = updatedLexerActions; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerActionExecutor.prototype.fixOffsetBeforeMatch = function(offset) { return this.$val.fixOffsetBeforeMatch(offset); };
	LexerActionExecutor.ptr.prototype.execute = function(lexer, input, startIndex) {
		var _r$2, _r$3, _tuple, i, input, l, la, lexer, lexerAction, offset, ok, requiresSeek, startIndex, stopIndex, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; i = $f.i; input = $f.input; l = $f.l; la = $f.la; lexer = $f.lexer; lexerAction = $f.lexerAction; offset = $f.offset; ok = $f.ok; requiresSeek = $f.requiresSeek; startIndex = $f.startIndex; stopIndex = $f.stopIndex; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		input = [input];
		requiresSeek = [requiresSeek];
		stopIndex = [stopIndex];
		l = this;
		requiresSeek[0] = false;
		_r$2 = input[0].Index(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		stopIndex[0] = _r$2;
		$deferred.push([(function(input, requiresSeek, stopIndex) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			/* */ if (requiresSeek[0]) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (requiresSeek[0]) { */ case 1:
				$r = input[0].Seek(stopIndex[0]); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(input, requiresSeek, stopIndex), []]);
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < l.lexerActions.$length)) { break; } */ if(!(i < l.lexerActions.$length)) { $s = 3; continue; }
			lexerAction = (x = l.lexerActions, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			_tuple = $assertType(lexerAction, ptrType$50, true);
			la = _tuple[0];
			ok = _tuple[1];
			/* */ if (ok) { $s = 4; continue; }
			_r$3 = lexerAction.getIsPositionDependent(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (ok) { */ case 4:
				offset = la.offset;
				$r = input[0].Seek(startIndex + offset >> 0); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				lexerAction = la.lexerAction;
				requiresSeek[0] = !((((startIndex + offset >> 0)) === stopIndex[0]));
				$s = 6; continue;
			/* } else if (_r$3) { */ case 5:
				$r = input[0].Seek(stopIndex[0]); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				requiresSeek[0] = false;
			/* } */ case 6:
			$r = lexerAction.execute(lexer); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: LexerActionExecutor.ptr.prototype.execute }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.i = i; $f.input = input; $f.l = l; $f.la = la; $f.lexer = lexer; $f.lexerAction = lexerAction; $f.offset = offset; $f.ok = ok; $f.requiresSeek = requiresSeek; $f.startIndex = startIndex; $f.stopIndex = stopIndex; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	LexerActionExecutor.prototype.execute = function(lexer, input, startIndex) { return this.$val.execute(lexer, input, startIndex); };
	LexerActionExecutor.ptr.prototype.hash = function() {
		var l;
		l = this;
		if (l === ptrType$8.nil) {
			return 61;
		}
		return l.cachedHash;
	};
	LexerActionExecutor.prototype.hash = function() { return this.$val.hash(); };
	LexerActionExecutor.ptr.prototype.equals = function(other) {
		var _tuple, l, ok, other, x;
		l = this;
		if ($interfaceIsEqual(l, other)) {
			return true;
		} else {
			_tuple = $assertType(other, ptrType$8, true);
			ok = _tuple[1];
			if (!ok) {
				return false;
			} else {
				return (l.cachedHash === $assertType(other, ptrType$8).cachedHash) && (l.$ptr_lexerActions || (l.$ptr_lexerActions = new ptrType$51(function() { return this.$target.lexerActions; }, function($v) { this.$target.lexerActions = $v; }, l))) === (x = $assertType(other, ptrType$8), (x.$ptr_lexerActions || (x.$ptr_lexerActions = new ptrType$51(function() { return this.$target.lexerActions; }, function($v) { this.$target.lexerActions = $v; }, x))));
			}
		}
	};
	LexerActionExecutor.prototype.equals = function(other) { return this.$val.equals(other); };
	NewLexerATNSimulator = function(recog, atn, decisionToDFA, sharedContextCache) {
		var atn, decisionToDFA, l, recog, sharedContextCache;
		l = new LexerATNSimulator.ptr(ptrType$52.nil, $ifaceNil, 0, new DoubleDict.ptr(false), 0, 0, 0, 0, ptrType$53.nil, 0);
		l.BaseATNSimulator = NewBaseATNSimulator(atn, sharedContextCache);
		l.BaseATNSimulator.decisionToDFA = decisionToDFA;
		l.recog = recog;
		l.startIndex = -1;
		l.Line = 1;
		l.CharPositionInLine = 0;
		l.mode = 0;
		l.prevAccept = NewSimState();
		return l;
	};
	$pkg.NewLexerATNSimulator = NewLexerATNSimulator;
	LexerATNSimulator.ptr.prototype.Match = function(input, mode) {
		var _r$2, _r$3, _r$4, _r$5, dfa, input, l, mark, mode, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; dfa = $f.dfa; input = $f.input; l = $f.l; mark = $f.mark; mode = $f.mode; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		input = [input];
		mark = [mark];
		l = this;
		l.MatchCalls = l.MatchCalls + (1) >> 0;
		l.mode = mode;
		_r$2 = input[0].Mark(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		mark[0] = _r$2;
		$deferred.push([(function(input, mark) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = input[0].Release(mark[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(input, mark), []]);
		_r$3 = input[0].Index(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		l.startIndex = _r$3;
		l.prevAccept.reset();
		dfa = (x = l.BaseATNSimulator.decisionToDFA, ((mode < 0 || mode >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + mode]));
		/* */ if (dfa.s0 === ptrType$30.nil) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (dfa.s0 === ptrType$30.nil) { */ case 3:
			_r$4 = l.MatchATN(input[0]); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return _r$4;
		/* } */ case 4:
		_r$5 = l.execATN(input[0], dfa.s0); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return _r$5;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return 0; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: LexerATNSimulator.ptr.prototype.Match }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.dfa = dfa; $f.input = input; $f.l = l; $f.mark = mark; $f.mode = mode; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	LexerATNSimulator.prototype.Match = function(input, mode) { return this.$val.Match(input, mode); };
	LexerATNSimulator.ptr.prototype.reset = function() {
		var l;
		l = this;
		l.prevAccept.reset();
		l.startIndex = -1;
		l.Line = 1;
		l.CharPositionInLine = 0;
		l.mode = 0;
	};
	LexerATNSimulator.prototype.reset = function() { return this.$val.reset(); };
	LexerATNSimulator.ptr.prototype.MatchATN = function(input) {
		var _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, input, l, next, oldMode, predict, s0Closure, startState, suppressEdge, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; input = $f.input; l = $f.l; next = $f.next; oldMode = $f.oldMode; predict = $f.predict; s0Closure = $f.s0Closure; startState = $f.startState; suppressEdge = $f.suppressEdge; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		startState = (x = l.BaseATNSimulator.atn.modeToStartState, x$1 = l.mode, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		/* */ if ($pkg.LexerATNSimulatorDebug) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.LexerATNSimulatorDebug) { */ case 1:
			_r$2 = fmt.Println(new sliceType$8([new $String("MatchATN mode " + strconv.Itoa(l.mode) + " start: " + startState.BaseDecisionState.BaseATNState.String())])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ case 2:
		oldMode = l.mode;
		_r$3 = l.computeStartState(input, startState); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		s0Closure = _r$3;
		suppressEdge = s0Closure.BaseATNConfigSet.hasSemanticContext;
		s0Closure.BaseATNConfigSet.hasSemanticContext = false;
		_r$4 = l.addDFAState(s0Closure); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		next = _r$4;
		/* */ if (!suppressEdge) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!suppressEdge) { */ case 6:
			$r = (x$2 = l.BaseATNSimulator.decisionToDFA, x$3 = l.mode, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])).setS0(next); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		_r$5 = l.execATN(input, next); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		predict = _r$5;
		/* */ if ($pkg.LexerATNSimulatorDebug) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if ($pkg.LexerATNSimulatorDebug) { */ case 10:
			_r$6 = (x$4 = l.BaseATNSimulator.decisionToDFA, ((oldMode < 0 || oldMode >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + oldMode])).ToLexerString(); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = fmt.Println(new sliceType$8([new $String("DFA after MatchATN: " + _r$6)])); /* */ $s = 13; case 13: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7;
		/* } */ case 11:
		$s = -1; return predict;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerATNSimulator.ptr.prototype.MatchATN }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.input = input; $f.l = l; $f.next = next; $f.oldMode = oldMode; $f.predict = predict; $f.s0Closure = s0Closure; $f.startState = startState; $f.suppressEdge = suppressEdge; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerATNSimulator.prototype.MatchATN = function(input) { return this.$val.MatchATN(input); };
	LexerATNSimulator.ptr.prototype.execATN = function(input, ds0) {
		var _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, ds0, input, l, s, t, target, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; ds0 = $f.ds0; input = $f.input; l = $f.l; s = $f.s; t = $f.t; target = $f.target; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		/* */ if ($pkg.LexerATNSimulatorDebug) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.LexerATNSimulatorDebug) { */ case 1:
			_r$2 = ds0.configs.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = fmt.Println(new sliceType$8([new $String("start state closure=" + _r$2)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 2:
		/* */ if (ds0.isAcceptState) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (ds0.isAcceptState) { */ case 5:
			$r = l.captureSimState(l.prevAccept, input, ds0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		_r$4 = input.LA(1); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		t = _r$4;
		s = ds0;
		/* while (true) { */ case 9:
			/* */ if ($pkg.LexerATNSimulatorDebug) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if ($pkg.LexerATNSimulatorDebug) { */ case 11:
				_r$5 = s.configs.String(); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = fmt.Println(new sliceType$8([new $String("execATN loop starting closure: " + _r$5)])); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
			/* } */ case 12:
			_r$7 = l.getExistingTargetState(s, t); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			target = _r$7;
			/* */ if (target === ptrType$30.nil) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (target === ptrType$30.nil) { */ case 16:
				_r$8 = l.computeTargetState(input, s, t); /* */ $s = 18; case 18: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				target = _r$8;
			/* } */ case 17:
			if (target === $pkg.ATNSimulatorError) {
				/* break; */ $s = 10; continue;
			}
			/* */ if (!((t === -1))) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if (!((t === -1))) { */ case 19:
				$r = l.Consume(input); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 20:
			/* */ if (target.isAcceptState) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (target.isAcceptState) { */ case 22:
				$r = l.captureSimState(l.prevAccept, input, target); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (t === -1) {
					/* break; */ $s = 10; continue;
				}
			/* } */ case 23:
			_r$9 = input.LA(1); /* */ $s = 25; case 25: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			t = _r$9;
			s = target;
		/* } */ $s = 9; continue; case 10:
		_r$10 = l.failOrAccept(l.prevAccept, input, s.configs, t); /* */ $s = 26; case 26: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		$s = -1; return _r$10;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerATNSimulator.ptr.prototype.execATN }; } $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.ds0 = ds0; $f.input = input; $f.l = l; $f.s = s; $f.t = t; $f.target = target; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerATNSimulator.prototype.execATN = function(input, ds0) { return this.$val.execATN(input, ds0); };
	LexerATNSimulator.ptr.prototype.getExistingTargetState = function(s, t) {
		var _r$2, l, s, t, target, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; l = $f.l; s = $f.s; t = $f.t; target = $f.target; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		if (s.edges === sliceType$19.nil || t < $pkg.LexerATNSimulatorMinDFAEdge || t > $pkg.LexerATNSimulatorMaxDFAEdge) {
			$s = -1; return ptrType$30.nil;
		}
		target = (x = s.edges, x$1 = t - $pkg.LexerATNSimulatorMinDFAEdge >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		/* */ if ($pkg.LexerATNSimulatorDebug && !(target === ptrType$30.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.LexerATNSimulatorDebug && !(target === ptrType$30.nil)) { */ case 1:
			_r$2 = fmt.Println(new sliceType$8([new $String("reuse state " + strconv.Itoa(s.stateNumber) + " edge to " + strconv.Itoa(target.stateNumber))])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ case 2:
		$s = -1; return target;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerATNSimulator.ptr.prototype.getExistingTargetState }; } $f._r$2 = _r$2; $f.l = l; $f.s = s; $f.t = t; $f.target = target; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerATNSimulator.prototype.getExistingTargetState = function(s, t) { return this.$val.getExistingTargetState(s, t); };
	LexerATNSimulator.ptr.prototype.computeTargetState = function(input, s, t) {
		var _r$2, _r$3, input, l, reach, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; input = $f.input; l = $f.l; reach = $f.reach; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		reach = NewOrderedATNConfigSet();
		$r = l.getReachableConfigSet(input, s.configs, reach.BaseATNConfigSet, t); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (reach.BaseATNConfigSet.configs.$length === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (reach.BaseATNConfigSet.configs.$length === 0) { */ case 2:
			/* */ if (!reach.BaseATNConfigSet.hasSemanticContext) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!reach.BaseATNConfigSet.hasSemanticContext) { */ case 4:
				_r$2 = l.addDFAEdge(s, t, $pkg.ATNSimulatorError, $ifaceNil); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
			/* } */ case 5:
			$s = -1; return $pkg.ATNSimulatorError;
		/* } */ case 3:
		_r$3 = l.addDFAEdge(s, t, ptrType$30.nil, reach.BaseATNConfigSet); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerATNSimulator.ptr.prototype.computeTargetState }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.input = input; $f.l = l; $f.reach = reach; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerATNSimulator.prototype.computeTargetState = function(input, s, t) { return this.$val.computeTargetState(input, s, t); };
	LexerATNSimulator.ptr.prototype.failOrAccept = function(prevAccept, input, reach, t) {
		var _r$2, _r$3, _v, input, l, lexerActionExecutor, prevAccept, reach, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _v = $f._v; input = $f.input; l = $f.l; lexerActionExecutor = $f.lexerActionExecutor; prevAccept = $f.prevAccept; reach = $f.reach; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		/* */ if (!(l.prevAccept.dfaState === ptrType$30.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(l.prevAccept.dfaState === ptrType$30.nil)) { */ case 1:
			lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
			$r = l.accept(input, lexerActionExecutor, l.startIndex, prevAccept.index, prevAccept.line, prevAccept.column); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return prevAccept.dfaState.prediction;
		/* } */ case 2:
		if (!(t === -1)) { _v = false; $s = 6; continue s; }
		_r$2 = input.Index(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v = _r$2 === l.startIndex; case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			$s = -1; return -1;
		/* } */ case 5:
		_r$3 = NewLexerNoViableAltException(l.recog, input, l.startIndex, reach); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$panic(_r$3);
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerATNSimulator.ptr.prototype.failOrAccept }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._v = _v; $f.input = input; $f.l = l; $f.lexerActionExecutor = lexerActionExecutor; $f.prevAccept = prevAccept; $f.reach = reach; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerATNSimulator.prototype.failOrAccept = function(prevAccept, input, reach, t) { return this.$val.failOrAccept(prevAccept, input, reach, t); };
	LexerATNSimulator.ptr.prototype.getReachableConfigSet = function(input, closure, reach, t) {
		var SkipAlt, _arg, _arg$1, _i, _i$1, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, cfg, closure, config, currentAltReachedAcceptState, input, l, lexerActionExecutor, reach, t, target, trans, treatEOFAsEpsilon, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; SkipAlt = $f.SkipAlt; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _i$1 = $f._i$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; cfg = $f.cfg; closure = $f.closure; config = $f.config; currentAltReachedAcceptState = $f.currentAltReachedAcceptState; input = $f.input; l = $f.l; lexerActionExecutor = $f.lexerActionExecutor; reach = $f.reach; t = $f.t; target = $f.target; trans = $f.trans; treatEOFAsEpsilon = $f.treatEOFAsEpsilon; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		SkipAlt = $pkg.ATNInvalidAltNumber;
		_r$2 = closure.GetItems(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_ref = _r$2;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			cfg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$3 = cfg.GetAlt(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			currentAltReachedAcceptState = (_r$3 === SkipAlt);
			/* */ if (currentAltReachedAcceptState && $assertType(cfg, ptrType$9).passedThroughNonGreedyDecision) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (currentAltReachedAcceptState && $assertType(cfg, ptrType$9).passedThroughNonGreedyDecision) { */ case 5:
				_i++;
				/* continue; */ $s = 2; continue;
			/* } */ case 6:
			/* */ if ($pkg.LexerATNSimulatorDebug) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ($pkg.LexerATNSimulatorDebug) { */ case 7:
				_arg = new $String(l.GetTokenName(t));
				_r$4 = cfg.String(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_arg$1 = new $String(_r$4);
				_r$5 = fmt.Printf("testing %s at %s\n", new sliceType$8([_arg, _arg$1])); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
			/* } */ case 8:
			_r$6 = cfg.GetState(); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = _r$6.GetTransitions(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_ref$1 = _r$7;
			_i$1 = 0;
			/* while (true) { */ case 13:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 14; continue; }
				trans = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				_r$8 = l.getReachableTarget(trans, t); /* */ $s = 15; case 15: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				target = _r$8;
				/* */ if (!($interfaceIsEqual(target, $ifaceNil))) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (!($interfaceIsEqual(target, $ifaceNil))) { */ case 16:
					lexerActionExecutor = $assertType(cfg, ptrType$9).lexerActionExecutor;
					/* */ if (!(lexerActionExecutor === ptrType$8.nil)) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if (!(lexerActionExecutor === ptrType$8.nil)) { */ case 18:
						_r$9 = input.Index(); /* */ $s = 20; case 20: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_r$10 = lexerActionExecutor.fixOffsetBeforeMatch(_r$9 - l.startIndex >> 0); /* */ $s = 21; case 21: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						lexerActionExecutor = _r$10;
					/* } */ case 19:
					treatEOFAsEpsilon = (t === -1);
					_r$11 = NewLexerATNConfig3($assertType(cfg, ptrType$9), target, lexerActionExecutor); /* */ $s = 22; case 22: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					config = _r$11;
					_r$12 = l.closure(input, config, reach, currentAltReachedAcceptState, true, treatEOFAsEpsilon); /* */ $s = 25; case 25: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					/* */ if (_r$12) { $s = 23; continue; }
					/* */ $s = 24; continue;
					/* if (_r$12) { */ case 23:
						_r$13 = cfg.GetAlt(); /* */ $s = 26; case 26: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						SkipAlt = _r$13;
					/* } */ case 24:
				/* } */ case 17:
				_i$1++;
			/* } */ $s = 13; continue; case 14:
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerATNSimulator.ptr.prototype.getReachableConfigSet }; } $f.SkipAlt = SkipAlt; $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._i$1 = _i$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.cfg = cfg; $f.closure = closure; $f.config = config; $f.currentAltReachedAcceptState = currentAltReachedAcceptState; $f.input = input; $f.l = l; $f.lexerActionExecutor = lexerActionExecutor; $f.reach = reach; $f.t = t; $f.target = target; $f.trans = trans; $f.treatEOFAsEpsilon = treatEOFAsEpsilon; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerATNSimulator.prototype.getReachableConfigSet = function(input, closure, reach, t) { return this.$val.getReachableConfigSet(input, closure, reach, t); };
	LexerATNSimulator.ptr.prototype.accept = function(input, lexerActionExecutor, startIndex, index, line, charPos) {
		var _r$2, charPos, index, input, l, lexerActionExecutor, line, startIndex, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; charPos = $f.charPos; index = $f.index; input = $f.input; l = $f.l; lexerActionExecutor = $f.lexerActionExecutor; line = $f.line; startIndex = $f.startIndex; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		/* */ if ($pkg.LexerATNSimulatorDebug) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.LexerATNSimulatorDebug) { */ case 1:
			_r$2 = fmt.Printf("ACTION %s\n", new sliceType$8([lexerActionExecutor])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ case 2:
		$r = input.Seek(index); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		l.Line = line;
		l.CharPositionInLine = charPos;
		/* */ if (!(lexerActionExecutor === ptrType$8.nil) && !($interfaceIsEqual(l.recog, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!(lexerActionExecutor === ptrType$8.nil) && !($interfaceIsEqual(l.recog, $ifaceNil))) { */ case 5:
			$r = lexerActionExecutor.execute(l.recog, input, startIndex); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerATNSimulator.ptr.prototype.accept }; } $f._r$2 = _r$2; $f.charPos = charPos; $f.index = index; $f.input = input; $f.l = l; $f.lexerActionExecutor = lexerActionExecutor; $f.line = line; $f.startIndex = startIndex; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerATNSimulator.prototype.accept = function(input, lexerActionExecutor, startIndex, index, line, charPos) { return this.$val.accept(input, lexerActionExecutor, startIndex, index, line, charPos); };
	LexerATNSimulator.ptr.prototype.getReachableTarget = function(trans, t) {
		var _r$2, _r$3, l, t, trans, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; l = $f.l; t = $f.t; trans = $f.trans; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r$2 = trans.Matches(t, 0, 1114111); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$2) { */ case 1:
			_r$3 = trans.getTarget(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerATNSimulator.ptr.prototype.getReachableTarget }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.l = l; $f.t = t; $f.trans = trans; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerATNSimulator.prototype.getReachableTarget = function(trans, t) { return this.$val.getReachableTarget(trans, t); };
	LexerATNSimulator.ptr.prototype.computeStartState = function(input, p) {
		var _r$2, _r$3, _r$4, _r$5, cfg, configs, i, input, l, p, target, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; cfg = $f.cfg; configs = $f.configs; i = $f.i; input = $f.input; l = $f.l; p = $f.p; target = $f.target; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		configs = NewOrderedATNConfigSet();
		i = 0;
		/* while (true) { */ case 1:
			_r$2 = p.GetTransitions(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* if (!(i < _r$2.$length)) { break; } */ if(!(i < _r$2.$length)) { $s = 2; continue; }
			_r$3 = p.GetTransitions(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = (x = _r$3, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).getTarget(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			target = _r$4;
			cfg = NewLexerATNConfig6(target, i + 1 >> 0, $pkg.BasePredictionContextEMPTY);
			_r$5 = l.closure(input, cfg, configs, false, false, false); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return configs;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerATNSimulator.ptr.prototype.computeStartState }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.cfg = cfg; $f.configs = configs; $f.i = i; $f.input = input; $f.l = l; $f.p = p; $f.target = target; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerATNSimulator.prototype.computeStartState = function(input, p) { return this.$val.computeStartState(input, p); };
	LexerATNSimulator.ptr.prototype.closure = function(input, config, configs, currentAltReachedAcceptState, speculative, treatEOFAsEpsilon) {
		var _arg, _arg$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _v, _v$1, _v$2, cfg, cfg$1, config, configs, currentAltReachedAcceptState, i, input, j, l, newContext, ok, returnState, speculative, trans, treatEOFAsEpsilon, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; cfg = $f.cfg; cfg$1 = $f.cfg$1; config = $f.config; configs = $f.configs; currentAltReachedAcceptState = $f.currentAltReachedAcceptState; i = $f.i; input = $f.input; j = $f.j; l = $f.l; newContext = $f.newContext; ok = $f.ok; returnState = $f.returnState; speculative = $f.speculative; trans = $f.trans; treatEOFAsEpsilon = $f.treatEOFAsEpsilon; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		/* */ if ($pkg.LexerATNSimulatorDebug) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.LexerATNSimulatorDebug) { */ case 1:
			_r$2 = config.BaseATNConfig.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = fmt.Println(new sliceType$8([new $String("closure(" + _r$2 + ")")])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 2:
		_tuple = $assertType(config.BaseATNConfig.state, ptrType$5, true);
		ok = _tuple[1];
		/* */ if (ok) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (ok) { */ case 5:
			/* */ if ($pkg.LexerATNSimulatorDebug) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ($pkg.LexerATNSimulatorDebug) { */ case 7:
				/* */ if (!($interfaceIsEqual(l.recog, $ifaceNil))) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (!($interfaceIsEqual(l.recog, $ifaceNil))) { */ case 9:
					_r$4 = l.recog.GetRuleNames(); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$5 = config.BaseATNConfig.state.GetRuleIndex(); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg = new $String((x = _r$4, x$1 = _r$5, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])));
					_arg$1 = config;
					_r$6 = fmt.Printf("closure at %s rule stop %s\n", new sliceType$8([_arg, _arg$1])); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$6;
					$s = 11; continue;
				/* } else { */ case 10:
					_r$7 = fmt.Printf("closure at rule stop %s\n", new sliceType$8([config])); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_r$7;
				/* } */ case 11:
			/* } */ case 8:
			if ($interfaceIsEqual(config.BaseATNConfig.context, $ifaceNil)) { _v = true; $s = 18; continue s; }
			_r$8 = config.BaseATNConfig.context.hasEmptyPath(); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_v = _r$8; case 18:
			/* */ if (_v) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (_v) { */ case 16:
				if ($interfaceIsEqual(config.BaseATNConfig.context, $ifaceNil)) { _v$1 = true; $s = 22; continue s; }
				_r$9 = config.BaseATNConfig.context.isEmpty(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_v$1 = _r$9; case 22:
				/* */ if (_v$1) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (_v$1) { */ case 20:
					_r$10 = configs.Add(config, ptrType$12.nil); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_r$10;
					$s = -1; return true;
				/* } */ case 21:
				_r$11 = NewLexerATNConfig2(config, config.BaseATNConfig.state, $pkg.BasePredictionContextEMPTY); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$12 = configs.Add(_r$11, ptrType$12.nil); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_r$12;
				currentAltReachedAcceptState = true;
			/* } */ case 17:
			if (!(!($interfaceIsEqual(config.BaseATNConfig.context, $ifaceNil)))) { _v$2 = false; $s = 29; continue s; }
			_r$13 = config.BaseATNConfig.context.isEmpty(); /* */ $s = 30; case 30: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_v$2 = !_r$13; case 29:
			/* */ if (_v$2) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if (_v$2) { */ case 27:
				i = 0;
				/* while (true) { */ case 31:
					_r$14 = config.BaseATNConfig.context.length(); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					/* if (!(i < _r$14)) { break; } */ if(!(i < _r$14)) { $s = 32; continue; }
					_r$15 = config.BaseATNConfig.context.getReturnState(i); /* */ $s = 36; case 36: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					/* */ if (!((_r$15 === 2147483647))) { $s = 34; continue; }
					/* */ $s = 35; continue;
					/* if (!((_r$15 === 2147483647))) { */ case 34:
						_r$16 = config.BaseATNConfig.context.GetParent(i); /* */ $s = 37; case 37: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						newContext = _r$16;
						_r$17 = config.BaseATNConfig.context.getReturnState(i); /* */ $s = 38; case 38: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						returnState = (x$2 = l.BaseATNSimulator.atn.states, x$3 = _r$17, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]));
						_r$18 = NewLexerATNConfig2(config, returnState, newContext); /* */ $s = 39; case 39: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
						cfg = _r$18;
						_r$19 = l.closure(input, cfg, configs, currentAltReachedAcceptState, speculative, treatEOFAsEpsilon); /* */ $s = 40; case 40: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
						currentAltReachedAcceptState = _r$19;
					/* } */ case 35:
					i = i + (1) >> 0;
				/* } */ $s = 31; continue; case 32:
			/* } */ case 28:
			$s = -1; return currentAltReachedAcceptState;
		/* } */ case 6:
		_r$20 = config.BaseATNConfig.state.GetEpsilonOnlyTransitions(); /* */ $s = 43; case 43: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		/* */ if (!_r$20) { $s = 41; continue; }
		/* */ $s = 42; continue;
		/* if (!_r$20) { */ case 41:
			/* */ if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) { $s = 44; continue; }
			/* */ $s = 45; continue;
			/* if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) { */ case 44:
				_r$21 = configs.Add(config, ptrType$12.nil); /* */ $s = 46; case 46: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				_r$21;
			/* } */ case 45:
		/* } */ case 42:
		j = 0;
		/* while (true) { */ case 47:
			_r$22 = config.BaseATNConfig.state.GetTransitions(); /* */ $s = 49; case 49: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			/* if (!(j < _r$22.$length)) { break; } */ if(!(j < _r$22.$length)) { $s = 48; continue; }
			_r$23 = config.BaseATNConfig.state.GetTransitions(); /* */ $s = 50; case 50: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			trans = (x$4 = _r$23, ((j < 0 || j >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + j]));
			_r$24 = l.getEpsilonTarget(input, config, trans, configs, speculative, treatEOFAsEpsilon); /* */ $s = 51; case 51: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			cfg$1 = _r$24;
			/* */ if (!(cfg$1 === ptrType$9.nil)) { $s = 52; continue; }
			/* */ $s = 53; continue;
			/* if (!(cfg$1 === ptrType$9.nil)) { */ case 52:
				_r$25 = l.closure(input, cfg$1, configs, currentAltReachedAcceptState, speculative, treatEOFAsEpsilon); /* */ $s = 54; case 54: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				currentAltReachedAcceptState = _r$25;
			/* } */ case 53:
			j = j + (1) >> 0;
		/* } */ $s = 47; continue; case 48:
		$s = -1; return currentAltReachedAcceptState;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerATNSimulator.ptr.prototype.closure }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.cfg = cfg; $f.cfg$1 = cfg$1; $f.config = config; $f.configs = configs; $f.currentAltReachedAcceptState = currentAltReachedAcceptState; $f.i = i; $f.input = input; $f.j = j; $f.l = l; $f.newContext = newContext; $f.ok = ok; $f.returnState = returnState; $f.speculative = speculative; $f.trans = trans; $f.treatEOFAsEpsilon = treatEOFAsEpsilon; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerATNSimulator.prototype.closure = function(input, config, configs, currentAltReachedAcceptState, speculative, treatEOFAsEpsilon) { return this.$val.closure(input, config, configs, currentAltReachedAcceptState, speculative, treatEOFAsEpsilon); };
	LexerATNSimulator.ptr.prototype.getEpsilonTarget = function(input, config, trans, configs, speculative, treatEOFAsEpsilon) {
		var _arg, _arg$1, _arg$10, _arg$11, _arg$12, _arg$13, _arg$14, _arg$15, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, _v$1, _v$2, cfg, config, configs, input, l, lexerActionExecutor, newContext, pt, rt, speculative, trans, treatEOFAsEpsilon, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$12 = $f._arg$12; _arg$13 = $f._arg$13; _arg$14 = $f._arg$14; _arg$15 = $f._arg$15; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; cfg = $f.cfg; config = $f.config; configs = $f.configs; input = $f.input; l = $f.l; lexerActionExecutor = $f.lexerActionExecutor; newContext = $f.newContext; pt = $f.pt; rt = $f.rt; speculative = $f.speculative; trans = $f.trans; treatEOFAsEpsilon = $f.treatEOFAsEpsilon; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		cfg = ptrType$9.nil;
		_r$2 = trans.getSerializationType(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2 === 3) { $s = 1; continue; }
		_r$3 = trans.getSerializationType(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 10) { $s = 2; continue; }
		_r$4 = trans.getSerializationType(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4 === 4) { $s = 3; continue; }
		_r$5 = trans.getSerializationType(); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		/* */ if (_r$5 === 6) { $s = 4; continue; }
		_r$6 = trans.getSerializationType(); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ if (_r$6 === 1) { $s = 5; continue; }
		_r$7 = trans.getSerializationType(); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		if (_r$7 === 5) { _v$1 = true; $s = 14; continue s; }
		_r$8 = trans.getSerializationType(); /* */ $s = 16; case 16: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_v$1 = _r$8 === 2; case 14:
		if (_v$1) { _v = true; $s = 13; continue s; }
		_r$9 = trans.getSerializationType(); /* */ $s = 17; case 17: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_v = _r$9 === 7; case 13:
		/* */ if (_v) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_r$2 === 3) { */ case 1:
			rt = $assertType(trans, ptrType$6);
			_arg = config.BaseATNConfig.context;
			_r$10 = rt.followState.GetStateNumber(); /* */ $s = 18; case 18: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_arg$1 = _r$10;
			_r$11 = SingletonBasePredictionContextCreate(_arg, _arg$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			newContext = _r$11;
			_arg$2 = config;
			_r$12 = trans.getTarget(); /* */ $s = 20; case 20: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_arg$3 = _r$12;
			_arg$4 = newContext;
			_r$13 = NewLexerATNConfig2(_arg$2, _arg$3, _arg$4); /* */ $s = 21; case 21: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			cfg = _r$13;
			$s = 7; continue;
		/* } else if (_r$3 === 10) { */ case 2:
			$panic(new $String("Precedence predicates are not supported in lexers."));
			$s = 7; continue;
		/* } else if (_r$4 === 4) { */ case 3:
			pt = $assertType(trans, ptrType$38);
			/* */ if ($pkg.LexerATNSimulatorDebug) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if ($pkg.LexerATNSimulatorDebug) { */ case 22:
				_r$14 = fmt.Println(new sliceType$8([new $String("EVAL rule " + strconv.Itoa($assertType(trans, ptrType$38).ruleIndex) + ":" + strconv.Itoa(pt.predIndex))])); /* */ $s = 24; case 24: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_r$14;
			/* } */ case 23:
			$r = configs.SetHasSemanticContext(true); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$15 = l.evaluatePredicate(input, pt.ruleIndex, pt.predIndex, speculative); /* */ $s = 28; case 28: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ if (_r$15) { $s = 26; continue; }
			/* */ $s = 27; continue;
			/* if (_r$15) { */ case 26:
				_arg$5 = config;
				_r$16 = trans.getTarget(); /* */ $s = 29; case 29: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				_arg$6 = _r$16;
				_r$17 = NewLexerATNConfig4(_arg$5, _arg$6); /* */ $s = 30; case 30: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				cfg = _r$17;
			/* } */ case 27:
			$s = 7; continue;
		/* } else if (_r$5 === 6) { */ case 4:
			if ($interfaceIsEqual(config.BaseATNConfig.context, $ifaceNil)) { _v$2 = true; $s = 34; continue s; }
			_r$18 = config.BaseATNConfig.context.hasEmptyPath(); /* */ $s = 35; case 35: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_v$2 = _r$18; case 34:
			/* */ if (_v$2) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (_v$2) { */ case 31:
				_r$19 = LexerActionExecutorappend(config.lexerActionExecutor, (x = l.BaseATNSimulator.atn.lexerActions, x$1 = $assertType(trans, ptrType$54).actionIndex, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]))); /* */ $s = 36; case 36: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				lexerActionExecutor = _r$19;
				_arg$7 = config;
				_r$20 = trans.getTarget(); /* */ $s = 37; case 37: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				_arg$8 = _r$20;
				_arg$9 = lexerActionExecutor;
				_r$21 = NewLexerATNConfig3(_arg$7, _arg$8, _arg$9); /* */ $s = 38; case 38: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				cfg = _r$21;
				$s = 33; continue;
			/* } else { */ case 32:
				_arg$10 = config;
				_r$22 = trans.getTarget(); /* */ $s = 39; case 39: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				_arg$11 = _r$22;
				_r$23 = NewLexerATNConfig4(_arg$10, _arg$11); /* */ $s = 40; case 40: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				cfg = _r$23;
			/* } */ case 33:
			$s = 7; continue;
		/* } else if (_r$6 === 1) { */ case 5:
			_arg$12 = config;
			_r$24 = trans.getTarget(); /* */ $s = 41; case 41: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			_arg$13 = _r$24;
			_r$25 = NewLexerATNConfig4(_arg$12, _arg$13); /* */ $s = 42; case 42: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			cfg = _r$25;
			$s = 7; continue;
		/* } else if (_v) { */ case 6:
			/* */ if (treatEOFAsEpsilon) { $s = 43; continue; }
			/* */ $s = 44; continue;
			/* if (treatEOFAsEpsilon) { */ case 43:
				_r$26 = trans.Matches(-1, 0, 1114111); /* */ $s = 47; case 47: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				/* */ if (_r$26) { $s = 45; continue; }
				/* */ $s = 46; continue;
				/* if (_r$26) { */ case 45:
					_arg$14 = config;
					_r$27 = trans.getTarget(); /* */ $s = 48; case 48: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					_arg$15 = _r$27;
					_r$28 = NewLexerATNConfig4(_arg$14, _arg$15); /* */ $s = 49; case 49: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
					cfg = _r$28;
				/* } */ case 46:
			/* } */ case 44:
		/* } */ case 7:
		$s = -1; return cfg;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerATNSimulator.ptr.prototype.getEpsilonTarget }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$12 = _arg$12; $f._arg$13 = _arg$13; $f._arg$14 = _arg$14; $f._arg$15 = _arg$15; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.cfg = cfg; $f.config = config; $f.configs = configs; $f.input = input; $f.l = l; $f.lexerActionExecutor = lexerActionExecutor; $f.newContext = newContext; $f.pt = pt; $f.rt = rt; $f.speculative = speculative; $f.trans = trans; $f.treatEOFAsEpsilon = treatEOFAsEpsilon; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerATNSimulator.prototype.getEpsilonTarget = function(input, config, trans, configs, speculative, treatEOFAsEpsilon) { return this.$val.getEpsilonTarget(input, config, trans, configs, speculative, treatEOFAsEpsilon); };
	LexerATNSimulator.ptr.prototype.evaluatePredicate = function(input, ruleIndex, predIndex, speculative) {
		var _r$2, _r$3, _r$4, _r$5, index, input, l, marker, predIndex, ruleIndex, savedLine, savedcolumn, speculative, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; index = $f.index; input = $f.input; l = $f.l; marker = $f.marker; predIndex = $f.predIndex; ruleIndex = $f.ruleIndex; savedLine = $f.savedLine; savedcolumn = $f.savedcolumn; speculative = $f.speculative; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		index = [index];
		input = [input];
		l = [l];
		marker = [marker];
		savedLine = [savedLine];
		savedcolumn = [savedcolumn];
		l[0] = this;
		if ($interfaceIsEqual(l[0].recog, $ifaceNil)) {
			$s = -1; return true;
		}
		/* */ if (!speculative) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!speculative) { */ case 1:
			_r$2 = l[0].recog.Sempred($ifaceNil, ruleIndex, predIndex); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } */ case 2:
		savedcolumn[0] = l[0].CharPositionInLine;
		savedLine[0] = l[0].Line;
		_r$3 = input[0].Index(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		index[0] = _r$3;
		_r$4 = input[0].Mark(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		marker[0] = _r$4;
		$deferred.push([(function(index, input, l, marker, savedLine, savedcolumn) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			l[0].CharPositionInLine = savedcolumn[0];
			l[0].Line = savedLine[0];
			$r = input[0].Seek(index[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = input[0].Release(marker[0]); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(index, input, l, marker, savedLine, savedcolumn), []]);
		$r = l[0].Consume(input[0]); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$5 = l[0].recog.Sempred($ifaceNil, ruleIndex, predIndex); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return _r$5;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return false; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: LexerATNSimulator.ptr.prototype.evaluatePredicate }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.index = index; $f.input = input; $f.l = l; $f.marker = marker; $f.predIndex = predIndex; $f.ruleIndex = ruleIndex; $f.savedLine = savedLine; $f.savedcolumn = savedcolumn; $f.speculative = speculative; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	LexerATNSimulator.prototype.evaluatePredicate = function(input, ruleIndex, predIndex, speculative) { return this.$val.evaluatePredicate(input, ruleIndex, predIndex, speculative); };
	LexerATNSimulator.ptr.prototype.captureSimState = function(settings, input, dfaState) {
		var _r$2, dfaState, input, l, settings, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; dfaState = $f.dfaState; input = $f.input; l = $f.l; settings = $f.settings; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r$2 = input.Index(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		settings.index = _r$2;
		settings.line = l.Line;
		settings.column = l.CharPositionInLine;
		settings.dfaState = dfaState;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerATNSimulator.ptr.prototype.captureSimState }; } $f._r$2 = _r$2; $f.dfaState = dfaState; $f.input = input; $f.l = l; $f.settings = settings; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerATNSimulator.prototype.captureSimState = function(settings, input, dfaState) { return this.$val.captureSimState(settings, input, dfaState); };
	LexerATNSimulator.ptr.prototype.addDFAEdge = function(from, tk, to, cfgs) {
		var _r$2, _r$3, _r$4, _r$5, _r$6, cfgs, from, l, suppressEdge, tk, to, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; cfgs = $f.cfgs; from = $f.from; l = $f.l; suppressEdge = $f.suppressEdge; tk = $f.tk; to = $f.to; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		/* */ if (to === ptrType$30.nil && !($interfaceIsEqual(cfgs, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (to === ptrType$30.nil && !($interfaceIsEqual(cfgs, $ifaceNil))) { */ case 1:
			_r$2 = cfgs.HasSemanticContext(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			suppressEdge = _r$2;
			$r = cfgs.SetHasSemanticContext(false); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = l.addDFAState(cfgs); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			to = _r$3;
			if (suppressEdge) {
				$s = -1; return to;
			}
		/* } */ case 2:
		if (tk < $pkg.LexerATNSimulatorMinDFAEdge || tk > $pkg.LexerATNSimulatorMaxDFAEdge) {
			$s = -1; return to;
		}
		/* */ if ($pkg.LexerATNSimulatorDebug) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if ($pkg.LexerATNSimulatorDebug) { */ case 6:
			_r$4 = from.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = to.String(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = fmt.Println(new sliceType$8([new $String("EDGE " + _r$4 + " -> " + _r$5 + " upon " + strconv.Itoa(tk))])); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
		/* } */ case 7:
		if (from.edges === sliceType$19.nil) {
			from.edges = $makeSlice(sliceType$19, (($pkg.LexerATNSimulatorMaxDFAEdge - $pkg.LexerATNSimulatorMinDFAEdge >> 0) + 1 >> 0));
		}
		(x = from.edges, x$1 = tk - $pkg.LexerATNSimulatorMinDFAEdge >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = to));
		$s = -1; return to;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerATNSimulator.ptr.prototype.addDFAEdge }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.cfgs = cfgs; $f.from = from; $f.l = l; $f.suppressEdge = suppressEdge; $f.tk = tk; $f.to = to; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerATNSimulator.prototype.addDFAEdge = function(from, tk, to, cfgs) { return this.$val.addDFAEdge(from, tk, to, cfgs); };
	LexerATNSimulator.ptr.prototype.addDFAState = function(configs) {
		var _i, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _tuple, _tuple$1, cfg, configs, dfa, existing, firstConfigWithRuleStopState, hash, l, newState, ok, ok$1, proposed, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; cfg = $f.cfg; configs = $f.configs; dfa = $f.dfa; existing = $f.existing; firstConfigWithRuleStopState = $f.firstConfigWithRuleStopState; hash = $f.hash; l = $f.l; newState = $f.newState; ok = $f.ok; ok$1 = $f.ok$1; proposed = $f.proposed; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		proposed = NewDFAState(-1, configs);
		firstConfigWithRuleStopState = $ifaceNil;
		_r$2 = configs.GetItems(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_ref = _r$2;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			cfg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$3 = cfg.GetState(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = $assertType(_r$3, ptrType$5, true);
			ok = _tuple[1];
			if (ok) {
				firstConfigWithRuleStopState = cfg;
				/* break; */ $s = 3; continue;
			}
			_i++;
		/* } */ $s = 2; continue; case 3:
		/* */ if (!($interfaceIsEqual(firstConfigWithRuleStopState, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(firstConfigWithRuleStopState, $ifaceNil))) { */ case 5:
			proposed.isAcceptState = true;
			proposed.lexerActionExecutor = $assertType(firstConfigWithRuleStopState, ptrType$9).lexerActionExecutor;
			_r$4 = firstConfigWithRuleStopState.GetState(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = _r$4.GetRuleIndex(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$r = proposed.setPrediction((x = l.BaseATNSimulator.atn.ruleToTokenType, x$1 = _r$5, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		_r$6 = proposed.hash(); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		hash = _r$6;
		dfa = (x$2 = l.BaseATNSimulator.decisionToDFA, x$3 = l.mode, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]));
		_r$7 = dfa.getState(hash); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_tuple$1 = _r$7;
		existing = _tuple$1[0];
		ok$1 = _tuple$1[1];
		if (ok$1) {
			$s = -1; return existing;
		}
		newState = proposed;
		_r$8 = dfa.numStates(); /* */ $s = 12; case 12: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		newState.stateNumber = _r$8;
		$r = configs.SetReadOnly(true); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		newState.configs = configs;
		$r = dfa.setState(hash, newState); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return newState;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerATNSimulator.ptr.prototype.addDFAState }; } $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.cfg = cfg; $f.configs = configs; $f.dfa = dfa; $f.existing = existing; $f.firstConfigWithRuleStopState = firstConfigWithRuleStopState; $f.hash = hash; $f.l = l; $f.newState = newState; $f.ok = ok; $f.ok$1 = ok$1; $f.proposed = proposed; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerATNSimulator.prototype.addDFAState = function(configs) { return this.$val.addDFAState(configs); };
	LexerATNSimulator.ptr.prototype.GetText = function(input) {
		var _arg, _arg$1, _r$2, _r$3, _r$4, input, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; input = $f.input; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_arg = l.startIndex;
		_r$2 = input.Index(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$1 = _r$2 - 1 >> 0;
		_r$3 = NewInterval(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = input.GetTextFromInterval(_r$3); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerATNSimulator.ptr.prototype.GetText }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.input = input; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerATNSimulator.prototype.GetText = function(input) { return this.$val.GetText(input); };
	LexerATNSimulator.ptr.prototype.Consume = function(input) {
		var _r$2, curChar, input, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; curChar = $f.curChar; input = $f.input; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r$2 = input.LA(1); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		curChar = _r$2;
		if (curChar === 10) {
			l.Line = l.Line + (1) >> 0;
			l.CharPositionInLine = 0;
		} else {
			l.CharPositionInLine = l.CharPositionInLine + (1) >> 0;
		}
		$r = input.Consume(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LexerATNSimulator.ptr.prototype.Consume }; } $f._r$2 = _r$2; $f.curChar = curChar; $f.input = input; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	LexerATNSimulator.prototype.Consume = function(input) { return this.$val.Consume(input); };
	LexerATNSimulator.ptr.prototype.GetCharPositionInLine = function() {
		var l;
		l = this;
		return l.CharPositionInLine;
	};
	LexerATNSimulator.prototype.GetCharPositionInLine = function() { return this.$val.GetCharPositionInLine(); };
	LexerATNSimulator.ptr.prototype.GetLine = function() {
		var l;
		l = this;
		return l.Line;
	};
	LexerATNSimulator.prototype.GetLine = function() { return this.$val.GetLine(); };
	LexerATNSimulator.ptr.prototype.GetTokenName = function(tt) {
		var l, tt;
		l = this;
		if (tt === -1) {
			return "EOF";
		}
		return "'" + ($encodeRune(tt)) + "'";
	};
	LexerATNSimulator.prototype.GetTokenName = function(tt) { return this.$val.GetTokenName(tt); };
	resetSimState = function(sim) {
		var sim;
		sim.index = -1;
		sim.line = 0;
		sim.column = -1;
		sim.dfaState = ptrType$30.nil;
	};
	NewSimState = function() {
		var s;
		s = new SimState.ptr(0, 0, 0, ptrType$30.nil);
		resetSimState(s);
		return s;
	};
	$pkg.NewSimState = NewSimState;
	SimState.ptr.prototype.reset = function() {
		var s;
		s = this;
		resetSimState(s);
	};
	SimState.prototype.reset = function() { return this.$val.reset(); };
	NewLL1Analyzer = function(atn) {
		var atn, la;
		la = new LL1Analyzer.ptr(ptrType$23.nil);
		la.atn = atn;
		return la;
	};
	$pkg.NewLL1Analyzer = NewLL1Analyzer;
	LL1Analyzer.ptr.prototype.Look = function(s, stopState, ctx) {
		var _r$2, _r$3, ctx, la, lookContext, r, s, seeThruPreds, stopState, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; ctx = $f.ctx; la = $f.la; lookContext = $f.lookContext; r = $f.r; s = $f.s; seeThruPreds = $f.seeThruPreds; stopState = $f.stopState; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		la = this;
		r = NewIntervalSet();
		seeThruPreds = true;
		lookContext = $ifaceNil;
		/* */ if (!($interfaceIsEqual(ctx, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(ctx, $ifaceNil))) { */ case 1:
			_r$2 = s.GetATN(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = predictionContextFromRuleContext(_r$2, ctx); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			lookContext = _r$3;
		/* } */ case 2:
		$r = la.look1(s, stopState, lookContext, r, NewSet($throwNilPointerError, $throwNilPointerError), NewBitSet(), seeThruPreds, true); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LL1Analyzer.ptr.prototype.Look }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.ctx = ctx; $f.la = la; $f.lookContext = lookContext; $f.r = r; $f.s = s; $f.seeThruPreds = seeThruPreds; $f.stopState = stopState; $f.$s = $s; $f.$r = $r; return $f;
	};
	LL1Analyzer.prototype.Look = function(s, stopState, ctx) { return this.$val.Look(s, stopState, ctx); };
	LL1Analyzer.ptr.prototype.look2 = function(s, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF, i) {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _r$2, _r$3, _r$4, _r$5, _r$6, addEOF, calledRuleStack, ctx, i, la, look, lookBusy, removed, returnState, s, seeThruPreds, stopState, x, x$1, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; addEOF = $f.addEOF; calledRuleStack = $f.calledRuleStack; ctx = $f.ctx; i = $f.i; la = $f.la; look = $f.look; lookBusy = $f.lookBusy; removed = $f.removed; returnState = $f.returnState; s = $f.s; seeThruPreds = $f.seeThruPreds; stopState = $f.stopState; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		calledRuleStack = [calledRuleStack];
		removed = [removed];
		returnState = [returnState];
		la = this;
		_r$2 = ctx.getReturnState(i); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		returnState[0] = (x = la.atn.states, x$1 = _r$2, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		_r$3 = returnState[0].GetRuleIndex(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = calledRuleStack[0].contains(_r$3); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		removed[0] = _r$4;
		$deferred.push([(function(calledRuleStack, removed, returnState) { return function $b() {
			var _r$5, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$5 = $f._r$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			/* */ if (removed[0]) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (removed[0]) { */ case 1:
				_r$5 = returnState[0].GetRuleIndex(); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$r = calledRuleStack[0].add(_r$5); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$5 = _r$5; $f.$s = $s; $f.$r = $r; return $f;
		}; })(calledRuleStack, removed, returnState), []]);
		_r$5 = returnState[0].GetRuleIndex(); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$r = calledRuleStack[0].remove(_r$5); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_arg = returnState[0];
		_arg$1 = stopState;
		_r$6 = ctx.GetParent(i); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_arg$2 = _r$6;
		_arg$3 = look;
		_arg$4 = lookBusy;
		_arg$5 = calledRuleStack[0];
		_arg$6 = seeThruPreds;
		_arg$7 = addEOF;
		$r = la.look1(_arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: LL1Analyzer.ptr.prototype.look2 }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.addEOF = addEOF; $f.calledRuleStack = calledRuleStack; $f.ctx = ctx; $f.i = i; $f.la = la; $f.look = look; $f.lookBusy = lookBusy; $f.removed = removed; $f.returnState = returnState; $f.s = s; $f.seeThruPreds = seeThruPreds; $f.stopState = stopState; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	LL1Analyzer.prototype.look2 = function(s, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF, i) { return this.$val.look2(s, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF, i); };
	LL1Analyzer.ptr.prototype.look1 = function(s, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
		var _arg, _arg$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, addEOF, c, calledRuleStack, ctx, i, i$1, la, look, lookBusy, n, newContext, ok, ok$1, ok$2, ok$3, ok$4, returnState, s, seeThruPreds, set, stopState, t, t1, t2, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; addEOF = $f.addEOF; c = $f.c; calledRuleStack = $f.calledRuleStack; ctx = $f.ctx; i = $f.i; i$1 = $f.i$1; la = $f.la; look = $f.look; lookBusy = $f.lookBusy; n = $f.n; newContext = $f.newContext; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; ok$4 = $f.ok$4; returnState = $f.returnState; s = $f.s; seeThruPreds = $f.seeThruPreds; set = $f.set; stopState = $f.stopState; t = $f.t; t1 = $f.t1; t2 = $f.t2; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		la = this;
		c = NewBaseATNConfig6(s, 0, ctx);
		_r$2 = lookBusy.contains(c); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$2) { */ case 1:
			$s = -1; return;
		/* } */ case 2:
		_r$3 = lookBusy.add(c); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		/* */ if ($interfaceIsEqual(s, stopState)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ($interfaceIsEqual(s, stopState)) { */ case 5:
			/* */ if ($interfaceIsEqual(ctx, $ifaceNil)) { $s = 7; continue; }
			_r$4 = ctx.isEmpty(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4 && addEOF) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ($interfaceIsEqual(ctx, $ifaceNil)) { */ case 7:
				look.addOne(-2);
				$s = -1; return;
			/* } else if (_r$4 && addEOF) { */ case 8:
				look.addOne(-1);
				$s = -1; return;
			/* } */ case 9:
		/* } */ case 6:
		_tuple = $assertType(s, ptrType$5, true);
		ok = _tuple[1];
		/* */ if (ok) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (ok) { */ case 11:
			/* */ if ($interfaceIsEqual(ctx, $ifaceNil)) { $s = 13; continue; }
			_r$5 = ctx.isEmpty(); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (_r$5 && addEOF) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if ($interfaceIsEqual(ctx, $ifaceNil)) { */ case 13:
				look.addOne(-2);
				$s = -1; return;
			/* } else if (_r$5 && addEOF) { */ case 14:
				look.addOne(-1);
				$s = -1; return;
			/* } */ case 15:
			/* */ if (!($interfaceIsEqual(ctx, $pkg.BasePredictionContextEMPTY))) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (!($interfaceIsEqual(ctx, $pkg.BasePredictionContextEMPTY))) { */ case 17:
				i = 0;
				/* while (true) { */ case 19:
					_r$6 = ctx.length(); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					/* if (!(i < _r$6)) { break; } */ if(!(i < _r$6)) { $s = 20; continue; }
					_r$7 = ctx.getReturnState(i); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					returnState = (x = la.atn.states, x$1 = _r$7, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
					$r = la.look2(returnState, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF, i); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i = i + (1) >> 0;
				/* } */ $s = 19; continue; case 20:
				$s = -1; return;
			/* } */ case 18:
		/* } */ case 12:
		_r$8 = s.GetTransitions(); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		n = _r$8.$length;
		i$1 = 0;
		/* while (true) { */ case 25:
			/* if (!(i$1 < n)) { break; } */ if(!(i$1 < n)) { $s = 26; continue; }
			_r$9 = s.GetTransitions(); /* */ $s = 27; case 27: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			t = (x$2 = _r$9, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			_tuple$1 = $assertType(t, ptrType$6, true);
			t1 = _tuple$1[0];
			ok$1 = _tuple$1[1];
			/* */ if (ok$1) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (ok$1) { */ case 28:
				_r$10 = t1.BaseTransition.getTarget().GetRuleIndex(); /* */ $s = 33; case 33: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$11 = calledRuleStack.contains(_r$10); /* */ $s = 34; case 34: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				/* */ if (_r$11) { $s = 31; continue; }
				/* */ $s = 32; continue;
				/* if (_r$11) { */ case 31:
					i$1 = i$1 + (1) >> 0;
					/* continue; */ $s = 25; continue;
				/* } */ case 32:
				_arg = ctx;
				_r$12 = t1.followState.GetStateNumber(); /* */ $s = 35; case 35: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_arg$1 = _r$12;
				_r$13 = SingletonBasePredictionContextCreate(_arg, _arg$1); /* */ $s = 36; case 36: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				newContext = _r$13;
				$r = la.look3(stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF, t1); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 30; continue;
			/* } else { */ case 29:
				_tuple$2 = $assertType(t, AbstractPredicateTransition, true);
				t2 = _tuple$2[0];
				ok$2 = _tuple$2[1];
				/* */ if (ok$2) { $s = 38; continue; }
				_r$14 = t.getIsEpsilon(); /* */ $s = 42; case 42: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				/* */ if (_r$14) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if (ok$2) { */ case 38:
					/* */ if (seeThruPreds) { $s = 43; continue; }
					/* */ $s = 44; continue;
					/* if (seeThruPreds) { */ case 43:
						_r$15 = t2.getTarget(); /* */ $s = 46; case 46: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						$r = la.look1(_r$15, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 45; continue;
					/* } else { */ case 44:
						look.addOne(0);
					/* } */ case 45:
					$s = 41; continue;
				/* } else if (_r$14) { */ case 39:
					_r$16 = t.getTarget(); /* */ $s = 48; case 48: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					$r = la.look1(_r$16, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 41; continue;
				/* } else { */ case 40:
					_tuple$3 = $assertType(t, ptrType$55, true);
					ok$3 = _tuple$3[1];
					/* */ if (ok$3) { $s = 50; continue; }
					/* */ $s = 51; continue;
					/* if (ok$3) { */ case 50:
						look.addRange(1, la.atn.maxTokenType);
						$s = 52; continue;
					/* } else { */ case 51:
						_r$17 = t.getLabel(); /* */ $s = 53; case 53: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						set = _r$17;
						if (!(set === ptrType.nil)) {
							_tuple$4 = $assertType(t, ptrType$56, true);
							ok$4 = _tuple$4[1];
							if (ok$4) {
								set = set.complement(1, la.atn.maxTokenType);
							}
							look.addSet(set);
						}
					/* } */ case 52:
				/* } */ case 41:
			/* } */ case 30:
			i$1 = i$1 + (1) >> 0;
		/* } */ $s = 25; continue; case 26:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LL1Analyzer.ptr.prototype.look1 }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.addEOF = addEOF; $f.c = c; $f.calledRuleStack = calledRuleStack; $f.ctx = ctx; $f.i = i; $f.i$1 = i$1; $f.la = la; $f.look = look; $f.lookBusy = lookBusy; $f.n = n; $f.newContext = newContext; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.ok$4 = ok$4; $f.returnState = returnState; $f.s = s; $f.seeThruPreds = seeThruPreds; $f.set = set; $f.stopState = stopState; $f.t = t; $f.t1 = t1; $f.t2 = t2; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	LL1Analyzer.prototype.look1 = function(s, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) { return this.$val.look1(s, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF); };
	LL1Analyzer.ptr.prototype.look3 = function(stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF, t1) {
		var _arg, _arg$1, _r$2, _r$3, _r$4, addEOF, calledRuleStack, ctx, la, look, lookBusy, newContext, seeThruPreds, stopState, t1, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; addEOF = $f.addEOF; calledRuleStack = $f.calledRuleStack; ctx = $f.ctx; la = $f.la; look = $f.look; lookBusy = $f.lookBusy; newContext = $f.newContext; seeThruPreds = $f.seeThruPreds; stopState = $f.stopState; t1 = $f.t1; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		calledRuleStack = [calledRuleStack];
		t1 = [t1];
		la = this;
		_arg = ctx;
		_r$2 = t1[0].followState.GetStateNumber(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$1 = _r$2;
		_r$3 = SingletonBasePredictionContextCreate(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		newContext = _r$3;
		$deferred.push([(function(calledRuleStack, t1) { return function $b() {
			var _r$4, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$4 = $f._r$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$4 = t1[0].BaseTransition.getTarget().GetRuleIndex(); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$r = calledRuleStack[0].remove(_r$4); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$4 = _r$4; $f.$s = $s; $f.$r = $r; return $f;
		}; })(calledRuleStack, t1), []]);
		_r$4 = t1[0].BaseTransition.getTarget().GetRuleIndex(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$r = calledRuleStack[0].add(_r$4); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = la.look1(t1[0].BaseTransition.getTarget(), stopState, newContext, look, lookBusy, calledRuleStack[0], seeThruPreds, addEOF); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: LL1Analyzer.ptr.prototype.look3 }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.addEOF = addEOF; $f.calledRuleStack = calledRuleStack; $f.ctx = ctx; $f.la = la; $f.look = look; $f.lookBusy = lookBusy; $f.newContext = newContext; $f.seeThruPreds = seeThruPreds; $f.stopState = stopState; $f.t1 = t1; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	LL1Analyzer.prototype.look3 = function(stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF, t1) { return this.$val.look3(stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF, t1); };
	NewBaseParser = function(input) {
		var input, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; input = $f.input; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = new BaseParser.ptr(ptrType$41.nil, ptrType$57.nil, false, $ifaceNil, $ifaceNil, IntStack.nil, $ifaceNil, ptrType$58.nil, sliceType$23.nil, 0);
		p.BaseRecognizer = NewBaseRecognizer();
		p.input = $ifaceNil;
		p.errHandler = NewDefaultErrorStrategy();
		p.precedenceStack = (x = $makeSlice(sliceType$6, 0), $subslice(new IntStack(x.$array), x.$offset, x.$offset + x.$length));
		(p.$ptr_precedenceStack || (p.$ptr_precedenceStack = new ptrType$42(function() { return this.$target.precedenceStack; }, function($v) { this.$target.precedenceStack = $v; }, p))).Push(0);
		p.ctx = $ifaceNil;
		p.BuildParseTrees = true;
		p.tracer = ptrType$58.nil;
		p.parseListeners = sliceType$23.nil;
		p._SyntaxErrors = 0;
		$r = p.SetInputStream(input); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewBaseParser }; } $f.input = input; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewBaseParser = NewBaseParser;
	BaseParser.ptr.prototype.reset = function() {
		var p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (!($interfaceIsEqual(p.input, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(p.input, $ifaceNil))) { */ case 1:
			$r = p.input.Seek(0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = p.errHandler.reset(p); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p.ctx = $ifaceNil;
		p._SyntaxErrors = 0;
		p.SetTrace(ptrType$58.nil);
		p.precedenceStack = (x = $makeSlice(sliceType$6, 0), $subslice(new IntStack(x.$array), x.$offset, x.$offset + x.$length));
		(p.$ptr_precedenceStack || (p.$ptr_precedenceStack = new ptrType$42(function() { return this.$target.precedenceStack; }, function($v) { this.$target.precedenceStack = $v; }, p))).Push(0);
		if (!(p.Interpreter === ptrType$57.nil)) {
			p.Interpreter.reset();
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.reset }; } $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.reset = function() { return this.$val.reset(); };
	BaseParser.ptr.prototype.GetErrorHandler = function() {
		var p;
		p = this;
		return p.errHandler;
	};
	BaseParser.prototype.GetErrorHandler = function() { return this.$val.GetErrorHandler(); };
	BaseParser.ptr.prototype.SetErrorHandler = function(e) {
		var e, p;
		p = this;
		p.errHandler = e;
	};
	BaseParser.prototype.SetErrorHandler = function(e) { return this.$val.SetErrorHandler(e); };
	BaseParser.ptr.prototype.Match = function(ttype) {
		var _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _v, p, t, ttype, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _v = $f._v; p = $f.p; t = $f.t; ttype = $f.ttype; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = p.GetCurrentToken(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		t = _r$2;
		_r$3 = t.GetTokenType(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === ttype) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_r$3 === ttype) { */ case 2:
			$r = p.errHandler.ReportMatch(p); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$4 = p.Consume(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			$s = 4; continue;
		/* } else { */ case 3:
			_r$5 = p.errHandler.RecoverInline(p); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			t = _r$5;
			if (!(p.BuildParseTrees)) { _v = false; $s = 11; continue s; }
			_r$6 = t.GetTokenIndex(); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_v = _r$6 === -1; case 11:
			/* */ if (_v) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_v) { */ case 9:
				_r$7 = p.ctx.AddErrorNode(t); /* */ $s = 13; case 13: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
			/* } */ case 10:
		/* } */ case 4:
		$s = -1; return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.Match }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._v = _v; $f.p = p; $f.t = t; $f.ttype = ttype; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.Match = function(ttype) { return this.$val.Match(ttype); };
	BaseParser.ptr.prototype.MatchWildcard = function() {
		var _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _v, p, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _v = $f._v; p = $f.p; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = p.GetCurrentToken(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		t = _r$2;
		_r$3 = t.GetTokenType(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 > 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_r$3 > 0) { */ case 2:
			$r = p.errHandler.ReportMatch(p); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$4 = p.Consume(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			$s = 4; continue;
		/* } else { */ case 3:
			_r$5 = p.errHandler.RecoverInline(p); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			t = _r$5;
			if (!(p.BuildParseTrees)) { _v = false; $s = 11; continue s; }
			_r$6 = t.GetTokenIndex(); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_v = _r$6 === -1; case 11:
			/* */ if (_v) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_v) { */ case 9:
				_r$7 = p.ctx.AddErrorNode(t); /* */ $s = 13; case 13: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
			/* } */ case 10:
		/* } */ case 4:
		$s = -1; return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.MatchWildcard }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._v = _v; $f.p = p; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.MatchWildcard = function() { return this.$val.MatchWildcard(); };
	BaseParser.ptr.prototype.GetParserRuleContext = function() {
		var p;
		p = this;
		return p.ctx;
	};
	BaseParser.prototype.GetParserRuleContext = function() { return this.$val.GetParserRuleContext(); };
	BaseParser.ptr.prototype.SetParserRuleContext = function(v) {
		var p, v;
		p = this;
		p.ctx = v;
	};
	BaseParser.prototype.SetParserRuleContext = function(v) { return this.$val.SetParserRuleContext(v); };
	BaseParser.ptr.prototype.GetParseListeners = function() {
		var p;
		p = this;
		if (p.parseListeners === sliceType$23.nil) {
			return $makeSlice(sliceType$23, 0);
		}
		return p.parseListeners;
	};
	BaseParser.prototype.GetParseListeners = function() { return this.$val.GetParseListeners(); };
	BaseParser.ptr.prototype.AddParseListener = function(listener) {
		var listener, p;
		p = this;
		if ($interfaceIsEqual(listener, $ifaceNil)) {
			$panic(new $String("listener"));
		}
		if (p.parseListeners === sliceType$23.nil) {
			p.parseListeners = $makeSlice(sliceType$23, 0);
		}
		p.parseListeners = $append(p.parseListeners, listener);
	};
	BaseParser.prototype.AddParseListener = function(listener) { return this.$val.AddParseListener(listener); };
	BaseParser.ptr.prototype.RemoveParseListener = function(listener) {
		var _i, _ref, i, idx, listener, p, v;
		p = this;
		if (!(p.parseListeners === sliceType$23.nil)) {
			idx = -1;
			_ref = p.parseListeners;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if ($interfaceIsEqual(v, listener)) {
					idx = i;
					break;
				}
				_i++;
			}
			if (idx === -1) {
				return;
			}
			p.parseListeners = $appendSlice($subslice(p.parseListeners, 0, idx), $subslice(p.parseListeners, (idx + 1 >> 0)));
			if (p.parseListeners.$length === 0) {
				p.parseListeners = sliceType$23.nil;
			}
		}
	};
	BaseParser.prototype.RemoveParseListener = function(listener) { return this.$val.RemoveParseListener(listener); };
	BaseParser.ptr.prototype.TriggerEnterRuleEvent = function() {
		var _i, _ref, ctx, listener, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; ctx = $f.ctx; listener = $f.listener; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (!(p.parseListeners === sliceType$23.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(p.parseListeners === sliceType$23.nil)) { */ case 1:
			ctx = p.ctx;
			_ref = p.parseListeners;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				listener = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				$r = listener.EnterEveryRule(ctx); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = ctx.EnterRule(listener); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.TriggerEnterRuleEvent }; } $f._i = _i; $f._ref = _ref; $f.ctx = ctx; $f.listener = listener; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.TriggerEnterRuleEvent = function() { return this.$val.TriggerEnterRuleEvent(); };
	BaseParser.ptr.prototype.TriggerExitRuleEvent = function() {
		var _i, _ref, ctx, i, l, listener, p, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; ctx = $f.ctx; i = $f.i; l = $f.l; listener = $f.listener; p = $f.p; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (!(p.parseListeners === sliceType$23.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(p.parseListeners === sliceType$23.nil)) { */ case 1:
			ctx = p.ctx;
			l = p.parseListeners.$length - 1 >> 0;
			_ref = p.parseListeners;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				i = _i;
				listener = (x = p.parseListeners, x$1 = l - i >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
				$r = ctx.ExitRule(listener); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = listener.ExitEveryRule(ctx); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.TriggerExitRuleEvent }; } $f._i = _i; $f._ref = _ref; $f.ctx = ctx; $f.i = i; $f.l = l; $f.listener = listener; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.TriggerExitRuleEvent = function() { return this.$val.TriggerExitRuleEvent(); };
	BaseParser.ptr.prototype.GetInterpreter = function() {
		var p;
		p = this;
		return p.Interpreter;
	};
	BaseParser.prototype.GetInterpreter = function() { return this.$val.GetInterpreter(); };
	BaseParser.ptr.prototype.GetATN = function() {
		var p;
		p = this;
		return p.Interpreter.BaseATNSimulator.atn;
	};
	BaseParser.prototype.GetATN = function() { return this.$val.GetATN(); };
	BaseParser.ptr.prototype.GetTokenFactory = function() {
		var _r$2, _r$3, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = p.input.GetTokenSource(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = _r$2.GetTokenFactory(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.GetTokenFactory }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.GetTokenFactory = function() { return this.$val.GetTokenFactory(); };
	BaseParser.ptr.prototype.GetATNWithBypassAlts = function() {
		var p;
		p = this;
		$panic(new $String("Not implemented!"));
	};
	BaseParser.prototype.GetATNWithBypassAlts = function() { return this.$val.GetATNWithBypassAlts(); };
	BaseParser.ptr.prototype.GetInputStream = function() {
		var p;
		p = this;
		return p.GetTokenStream();
	};
	BaseParser.prototype.GetInputStream = function() { return this.$val.GetInputStream(); };
	BaseParser.ptr.prototype.SetInputStream = function(input) {
		var input, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; input = $f.input; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = p.SetTokenStream(input); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.SetInputStream }; } $f.input = input; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.SetInputStream = function(input) { return this.$val.SetInputStream(input); };
	BaseParser.ptr.prototype.GetTokenStream = function() {
		var p;
		p = this;
		return p.input;
	};
	BaseParser.prototype.GetTokenStream = function() { return this.$val.GetTokenStream(); };
	BaseParser.ptr.prototype.SetTokenStream = function(input) {
		var input, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; input = $f.input; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.input = $ifaceNil;
		$r = p.reset(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p.input = input;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.SetTokenStream }; } $f.input = input; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.SetTokenStream = function(input) { return this.$val.SetTokenStream(input); };
	BaseParser.ptr.prototype.GetCurrentToken = function() {
		var _r$2, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = p.input.LT(1); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.GetCurrentToken }; } $f._r$2 = _r$2; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.GetCurrentToken = function() { return this.$val.GetCurrentToken(); };
	BaseParser.ptr.prototype.NotifyErrorListeners = function(msg, offendingToken, err) {
		var _r$2, _r$3, _r$4, column, err, line, listener, msg, offendingToken, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; column = $f.column; err = $f.err; line = $f.line; listener = $f.listener; msg = $f.msg; offendingToken = $f.offendingToken; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if ($interfaceIsEqual(offendingToken, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(offendingToken, $ifaceNil)) { */ case 1:
			_r$2 = p.GetCurrentToken(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			offendingToken = _r$2;
		/* } */ case 2:
		p._SyntaxErrors = p._SyntaxErrors + (1) >> 0;
		_r$3 = offendingToken.GetLine(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		line = _r$3;
		_r$4 = offendingToken.GetColumn(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		column = _r$4;
		listener = p.BaseRecognizer.GetErrorListenerDispatch();
		$r = listener.SyntaxError(p, offendingToken, line, column, msg, err); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.NotifyErrorListeners }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.column = column; $f.err = err; $f.line = line; $f.listener = listener; $f.msg = msg; $f.offendingToken = offendingToken; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.NotifyErrorListeners = function(msg, offendingToken, err) { return this.$val.NotifyErrorListeners(msg, offendingToken, err); };
	BaseParser.ptr.prototype.Consume = function() {
		var _i, _i$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, hasListener, l, l$1, node, node$1, o, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; hasListener = $f.hasListener; l = $f.l; l$1 = $f.l$1; node = $f.node; node$1 = $f.node$1; o = $f.o; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = p.GetCurrentToken(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		o = _r$2;
		_r$3 = o.GetTokenType(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!((_r$3 === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((_r$3 === -1))) { */ case 2:
			$r = p.GetInputStream().Consume(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		hasListener = !(p.parseListeners === sliceType$23.nil) && p.parseListeners.$length > 0;
		/* */ if (p.BuildParseTrees || hasListener) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (p.BuildParseTrees || hasListener) { */ case 6:
			_r$4 = p.errHandler.inErrorRecoveryMode(p); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_r$4) { */ case 8:
				_r$5 = p.ctx.AddErrorNode(o); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				node = _r$5;
				/* */ if (!(p.parseListeners === sliceType$23.nil)) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (!(p.parseListeners === sliceType$23.nil)) { */ case 13:
					_ref = p.parseListeners;
					_i = 0;
					/* while (true) { */ case 15:
						/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 16; continue; }
						l = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
						$r = l.VisitErrorNode(node); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i++;
					/* } */ $s = 15; continue; case 16:
				/* } */ case 14:
				$s = 10; continue;
			/* } else { */ case 9:
				_r$6 = p.ctx.AddTokenNode(o); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				node$1 = _r$6;
				/* */ if (!(p.parseListeners === sliceType$23.nil)) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (!(p.parseListeners === sliceType$23.nil)) { */ case 19:
					_ref$1 = p.parseListeners;
					_i$1 = 0;
					/* while (true) { */ case 21:
						/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 22; continue; }
						l$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
						$r = l$1.VisitTerminal(node$1); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i$1++;
					/* } */ $s = 21; continue; case 22:
				/* } */ case 20:
			/* } */ case 10:
		/* } */ case 7:
		$s = -1; return o;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.Consume }; } $f._i = _i; $f._i$1 = _i$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f.hasListener = hasListener; $f.l = l; $f.l$1 = l$1; $f.node = node; $f.node$1 = node$1; $f.o = o; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.Consume = function() { return this.$val.Consume(); };
	BaseParser.ptr.prototype.addContextToParseTree = function() {
		var _r$2, _r$3, _r$4, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = p.ctx.GetParent(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (!($interfaceIsEqual(_r$2, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(_r$2, $ifaceNil))) { */ case 1:
			_r$3 = p.ctx.GetParent(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = $assertType(_r$3, ParserRuleContext).AddChild(p.ctx); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.addContextToParseTree }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.addContextToParseTree = function() { return this.$val.addContextToParseTree(); };
	BaseParser.ptr.prototype.EnterRule = function(localctx, state, ruleIndex) {
		var _r$2, localctx, p, ruleIndex, state, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; localctx = $f.localctx; p = $f.p; ruleIndex = $f.ruleIndex; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.BaseRecognizer.SetState(state);
		p.ctx = localctx;
		_r$2 = p.input.LT(1); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$r = p.ctx.SetStart(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (p.BuildParseTrees) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (p.BuildParseTrees) { */ case 3:
			$r = p.addContextToParseTree(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		/* */ if (!(p.parseListeners === sliceType$23.nil)) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!(p.parseListeners === sliceType$23.nil)) { */ case 6:
			$r = p.TriggerEnterRuleEvent(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.EnterRule }; } $f._r$2 = _r$2; $f.localctx = localctx; $f.p = p; $f.ruleIndex = ruleIndex; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.EnterRule = function(localctx, state, ruleIndex) { return this.$val.EnterRule(localctx, state, ruleIndex); };
	BaseParser.ptr.prototype.ExitRule = function() {
		var _r$2, _r$3, _r$4, _r$5, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = p.input.LT(-1); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$r = p.ctx.SetStop(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!(p.parseListeners === sliceType$23.nil)) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!(p.parseListeners === sliceType$23.nil)) { */ case 3:
			$r = p.TriggerExitRuleEvent(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		_r$3 = p.ctx.GetInvokingState(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$r = p.BaseRecognizer.SetState(_r$3); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$4 = p.ctx.GetParent(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (!($interfaceIsEqual(_r$4, $ifaceNil))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!($interfaceIsEqual(_r$4, $ifaceNil))) { */ case 8:
			_r$5 = p.ctx.GetParent(); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			p.ctx = $assertType(_r$5, ParserRuleContext);
			$s = 10; continue;
		/* } else { */ case 9:
			p.ctx = $ifaceNil;
		/* } */ case 10:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.ExitRule }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.ExitRule = function() { return this.$val.ExitRule(); };
	BaseParser.ptr.prototype.EnterOuterAlt = function(localctx, altNum) {
		var _r$2, _r$3, _r$4, _r$5, altNum, localctx, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; altNum = $f.altNum; localctx = $f.localctx; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = localctx.SetAltNumber(altNum); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (p.BuildParseTrees && !($interfaceIsEqual(p.ctx, localctx))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (p.BuildParseTrees && !($interfaceIsEqual(p.ctx, localctx))) { */ case 2:
			_r$2 = p.ctx.GetParent(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(_r$2, $ifaceNil))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!($interfaceIsEqual(_r$2, $ifaceNil))) { */ case 4:
				_r$3 = p.ctx.GetParent(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$r = $assertType(_r$3, ParserRuleContext).RemoveLastChild(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$4 = p.ctx.GetParent(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$5 = $assertType(_r$4, ParserRuleContext).AddChild(localctx); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
			/* } */ case 5:
		/* } */ case 3:
		p.ctx = localctx;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.EnterOuterAlt }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.altNum = altNum; $f.localctx = localctx; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.EnterOuterAlt = function(localctx, altNum) { return this.$val.EnterOuterAlt(localctx, altNum); };
	BaseParser.ptr.prototype.GetPrecedence = function() {
		var p, x, x$1;
		p = this;
		if (p.precedenceStack.$length === 0) {
			return -1;
		}
		return (x = p.precedenceStack, x$1 = p.precedenceStack.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
	};
	BaseParser.prototype.GetPrecedence = function() { return this.$val.GetPrecedence(); };
	BaseParser.ptr.prototype.EnterRecursionRule = function(localctx, state, ruleIndex, precedence) {
		var _r$2, localctx, p, precedence, ruleIndex, state, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; localctx = $f.localctx; p = $f.p; precedence = $f.precedence; ruleIndex = $f.ruleIndex; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.BaseRecognizer.SetState(state);
		(p.$ptr_precedenceStack || (p.$ptr_precedenceStack = new ptrType$42(function() { return this.$target.precedenceStack; }, function($v) { this.$target.precedenceStack = $v; }, p))).Push(precedence);
		p.ctx = localctx;
		_r$2 = p.input.LT(1); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$r = p.ctx.SetStart(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!(p.parseListeners === sliceType$23.nil)) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!(p.parseListeners === sliceType$23.nil)) { */ case 3:
			$r = p.TriggerEnterRuleEvent(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.EnterRecursionRule }; } $f._r$2 = _r$2; $f.localctx = localctx; $f.p = p; $f.precedence = precedence; $f.ruleIndex = ruleIndex; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.EnterRecursionRule = function(localctx, state, ruleIndex, precedence) { return this.$val.EnterRecursionRule(localctx, state, ruleIndex, precedence); };
	BaseParser.ptr.prototype.PushNewRecursionContext = function(localctx, state, ruleIndex) {
		var _r$2, _r$3, _r$4, localctx, p, previous, ruleIndex, state, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; localctx = $f.localctx; p = $f.p; previous = $f.previous; ruleIndex = $f.ruleIndex; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		previous = p.ctx;
		$r = previous.SetParent(localctx); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = previous.SetInvokingState(state); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$2 = p.input.LT(-1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$r = previous.SetStop(_r$2); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p.ctx = localctx;
		_r$3 = previous.GetStart(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$r = p.ctx.SetStart(_r$3); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (p.BuildParseTrees) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (p.BuildParseTrees) { */ case 7:
			_r$4 = p.ctx.AddChild(previous); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 8:
		/* */ if (!(p.parseListeners === sliceType$23.nil)) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (!(p.parseListeners === sliceType$23.nil)) { */ case 10:
			$r = p.TriggerEnterRuleEvent(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 11:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.PushNewRecursionContext }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.localctx = localctx; $f.p = p; $f.previous = previous; $f.ruleIndex = ruleIndex; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.PushNewRecursionContext = function(localctx, state, ruleIndex) { return this.$val.PushNewRecursionContext(localctx, state, ruleIndex); };
	BaseParser.ptr.prototype.UnrollRecursionContexts = function(parentCtx) {
		var _r$2, _r$3, _r$4, p, parentCtx, retCtx, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; p = $f.p; parentCtx = $f.parentCtx; retCtx = $f.retCtx; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		(p.$ptr_precedenceStack || (p.$ptr_precedenceStack = new ptrType$42(function() { return this.$target.precedenceStack; }, function($v) { this.$target.precedenceStack = $v; }, p))).Pop();
		_r$2 = p.input.LT(-1); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$r = p.ctx.SetStop(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		retCtx = p.ctx;
		/* */ if (!(p.parseListeners === sliceType$23.nil)) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!(p.parseListeners === sliceType$23.nil)) { */ case 3:
			/* while (true) { */ case 6:
				/* if (!(!($interfaceIsEqual(p.ctx, parentCtx)))) { break; } */ if(!(!($interfaceIsEqual(p.ctx, parentCtx)))) { $s = 7; continue; }
				$r = p.TriggerExitRuleEvent(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$3 = p.ctx.GetParent(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				p.ctx = $assertType(_r$3, ParserRuleContext);
			/* } */ $s = 6; continue; case 7:
			$s = 5; continue;
		/* } else { */ case 4:
			p.ctx = parentCtx;
		/* } */ case 5:
		$r = retCtx.SetParent(parentCtx); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (p.BuildParseTrees && !($interfaceIsEqual(parentCtx, $ifaceNil))) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (p.BuildParseTrees && !($interfaceIsEqual(parentCtx, $ifaceNil))) { */ case 11:
			_r$4 = parentCtx.AddChild(retCtx); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 12:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.UnrollRecursionContexts }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.p = p; $f.parentCtx = parentCtx; $f.retCtx = retCtx; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.UnrollRecursionContexts = function(parentCtx) { return this.$val.UnrollRecursionContexts(parentCtx); };
	BaseParser.ptr.prototype.GetInvokingContext = function(ruleIndex) {
		var _r$2, _r$3, ctx, p, ruleIndex, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; ctx = $f.ctx; p = $f.p; ruleIndex = $f.ruleIndex; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		ctx = p.ctx;
		/* while (true) { */ case 1:
			/* if (!(!($interfaceIsEqual(ctx, $ifaceNil)))) { break; } */ if(!(!($interfaceIsEqual(ctx, $ifaceNil)))) { $s = 2; continue; }
			_r$2 = ctx.GetRuleIndex(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2 === ruleIndex) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r$2 === ruleIndex) { */ case 3:
				$s = -1; return ctx;
			/* } */ case 4:
			_r$3 = ctx.GetParent(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			ctx = $assertType(_r$3, ParserRuleContext);
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.GetInvokingContext }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.ctx = ctx; $f.p = p; $f.ruleIndex = ruleIndex; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.GetInvokingContext = function(ruleIndex) { return this.$val.GetInvokingContext(ruleIndex); };
	BaseParser.ptr.prototype.Precpred = function(localctx, precedence) {
		var localctx, p, precedence, x, x$1;
		p = this;
		return precedence >= (x = p.precedenceStack, x$1 = p.precedenceStack.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
	};
	BaseParser.prototype.Precpred = function(localctx, precedence) { return this.$val.Precpred(localctx, precedence); };
	BaseParser.ptr.prototype.IsExpectedToken = function(symbol) {
		var _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _v, atn, ctx, following, invokingState, p, rt, s, symbol, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _v = $f._v; atn = $f.atn; ctx = $f.ctx; following = $f.following; invokingState = $f.invokingState; p = $f.p; rt = $f.rt; s = $f.s; symbol = $f.symbol; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		atn = p.Interpreter.BaseATNSimulator.atn;
		ctx = p.ctx;
		s = (x = atn.states, x$1 = p.BaseRecognizer.state, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		_r$2 = atn.NextTokens(s, $ifaceNil); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		following = _r$2;
		if (following.contains(symbol)) {
			$s = -1; return true;
		}
		if (!following.contains(-2)) {
			$s = -1; return false;
		}
		/* while (true) { */ case 2:
			if (!(!($interfaceIsEqual(ctx, $ifaceNil)))) { _v = false; $s = 4; continue s; }
			_r$3 = ctx.GetInvokingState(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_v = _r$3 >= 0; case 4:
			/* if (!(_v && following.contains(-2))) { break; } */ if(!(_v && following.contains(-2))) { $s = 3; continue; }
			_r$4 = ctx.GetInvokingState(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			invokingState = (x$2 = atn.states, x$3 = _r$4, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]));
			_r$5 = invokingState.GetTransitions(); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			rt = (x$4 = _r$5, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0]));
			_r$6 = atn.NextTokens($assertType(rt, ptrType$6).followState, $ifaceNil); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			following = _r$6;
			if (following.contains(symbol)) {
				$s = -1; return true;
			}
			_r$7 = ctx.GetParent(); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			ctx = $assertType(_r$7, ParserRuleContext);
		/* } */ $s = 2; continue; case 3:
		if (following.contains(-2) && (symbol === -1)) {
			$s = -1; return true;
		}
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.IsExpectedToken }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._v = _v; $f.atn = atn; $f.ctx = ctx; $f.following = following; $f.invokingState = invokingState; $f.p = p; $f.rt = rt; $f.s = s; $f.symbol = symbol; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.IsExpectedToken = function(symbol) { return this.$val.IsExpectedToken(symbol); };
	BaseParser.ptr.prototype.GetExpectedTokens = function() {
		var _r$2, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = p.Interpreter.BaseATNSimulator.atn.getExpectedTokens(p.BaseRecognizer.state, p.ctx); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.GetExpectedTokens }; } $f._r$2 = _r$2; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.GetExpectedTokens = function() { return this.$val.GetExpectedTokens(); };
	BaseParser.ptr.prototype.GetExpectedTokensWithinCurrentRule = function() {
		var _r$2, atn, p, s, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; atn = $f.atn; p = $f.p; s = $f.s; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		atn = p.Interpreter.BaseATNSimulator.atn;
		s = (x = atn.states, x$1 = p.BaseRecognizer.state, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		_r$2 = atn.NextTokens(s, $ifaceNil); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.GetExpectedTokensWithinCurrentRule }; } $f._r$2 = _r$2; $f.atn = atn; $f.p = p; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.GetExpectedTokensWithinCurrentRule = function() { return this.$val.GetExpectedTokensWithinCurrentRule(); };
	BaseParser.ptr.prototype.GetRuleIndex = function(ruleName) {
		var _entry, _tuple, ok, p, ruleIndex, ruleName;
		p = this;
		_tuple = (_entry = p.BaseRecognizer.GetRuleIndexMap()[$String.keyFor(ruleName)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		ruleIndex = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			return ruleIndex;
		}
		return -1;
	};
	BaseParser.prototype.GetRuleIndex = function(ruleName) { return this.$val.GetRuleIndex(ruleName); };
	BaseParser.ptr.prototype.GetRuleInvocationStack = function(c) {
		var _r$2, _r$3, c, p, ruleIndex, stack, vp, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; c = $f.c; p = $f.p; ruleIndex = $f.ruleIndex; stack = $f.stack; vp = $f.vp; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if ($interfaceIsEqual(c, $ifaceNil)) {
			c = p.ctx;
		}
		stack = $makeSlice(sliceType, 0);
		/* while (true) { */ case 1:
			/* if (!(!($interfaceIsEqual(c, $ifaceNil)))) { break; } */ if(!(!($interfaceIsEqual(c, $ifaceNil)))) { $s = 2; continue; }
			_r$2 = c.GetRuleIndex(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			ruleIndex = _r$2;
			if (ruleIndex < 0) {
				stack = $append(stack, "n/a");
			} else {
				stack = $append(stack, (x = p.BaseRecognizer.GetRuleNames(), ((ruleIndex < 0 || ruleIndex >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + ruleIndex])));
			}
			_r$3 = c.GetParent(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			vp = _r$3;
			if ($interfaceIsEqual(vp, $ifaceNil)) {
				/* break; */ $s = 2; continue;
			}
			c = $assertType(vp, ParserRuleContext);
		/* } */ $s = 1; continue; case 2:
		$s = -1; return stack;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.GetRuleInvocationStack }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.c = c; $f.p = p; $f.ruleIndex = ruleIndex; $f.stack = stack; $f.vp = vp; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.GetRuleInvocationStack = function(c) { return this.$val.GetRuleInvocationStack(c); };
	BaseParser.ptr.prototype.GetDFAStrings = function() {
		var _r$2, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = fmt.Sprint(new sliceType$8([p.Interpreter.BaseATNSimulator.decisionToDFA])); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.GetDFAStrings }; } $f._r$2 = _r$2; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.GetDFAStrings = function() { return this.$val.GetDFAStrings(); };
	BaseParser.ptr.prototype.DumpDFA = function() {
		var _i, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, dfa, p, seenOne, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; dfa = $f.dfa; p = $f.p; seenOne = $f.seenOne; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		seenOne = false;
		_ref = p.Interpreter.BaseATNSimulator.decisionToDFA;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			dfa = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$2 = dfa.numStates(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2 > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r$2 > 0) { */ case 3:
				/* */ if (seenOne) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (seenOne) { */ case 6:
					_r$3 = fmt.Println(new sliceType$8([])); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$3;
				/* } */ case 7:
				_r$4 = fmt.Println(new sliceType$8([new $String("Decision " + strconv.Itoa(dfa.decision) + ":")])); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				_r$5 = dfa.String(p.BaseRecognizer.LiteralNames, p.BaseRecognizer.SymbolicNames); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = fmt.Print(new sliceType$8([new $String(_r$5)])); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				seenOne = true;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParser.ptr.prototype.DumpDFA }; } $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f.dfa = dfa; $f.p = p; $f.seenOne = seenOne; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParser.prototype.DumpDFA = function() { return this.$val.DumpDFA(); };
	BaseParser.ptr.prototype.GetSourceName = function() {
		var p;
		p = this;
		return p.BaseRecognizer.GrammarFileName;
	};
	BaseParser.prototype.GetSourceName = function() { return this.$val.GetSourceName(); };
	BaseParser.ptr.prototype.SetTrace = function(trace) {
		var p, trace;
		p = this;
		if (trace === ptrType$58.nil) {
			p.RemoveParseListener(p.tracer);
			p.tracer = ptrType$58.nil;
		} else {
			if (!(p.tracer === ptrType$58.nil)) {
				p.RemoveParseListener(p.tracer);
			}
			p.tracer = NewTraceListener(p);
			p.AddParseListener(p.tracer);
		}
	};
	BaseParser.prototype.SetTrace = function(trace) { return this.$val.SetTrace(trace); };
	NewParserATNSimulator = function(parser, atn, decisionToDFA, sharedContextCache) {
		var atn, decisionToDFA, p, parser, sharedContextCache;
		p = new ParserATNSimulator.ptr(ptrType$52.nil, $ifaceNil, 0, $ifaceNil, 0, ptrType$25.nil, ptrType$12.nil, $ifaceNil);
		p.BaseATNSimulator = NewBaseATNSimulator(atn, sharedContextCache);
		p.parser = parser;
		p.BaseATNSimulator.decisionToDFA = decisionToDFA;
		p.predictionMode = 1;
		p.input = $ifaceNil;
		p.startIndex = 0;
		p.outerContext = $ifaceNil;
		p.dfa = ptrType$25.nil;
		p.mergeCache = ptrType$12.nil;
		return p;
	};
	$pkg.NewParserATNSimulator = NewParserATNSimulator;
	ParserATNSimulator.ptr.prototype.GetPredictionMode = function() {
		var p;
		p = this;
		return p.predictionMode;
	};
	ParserATNSimulator.prototype.GetPredictionMode = function() { return this.$val.GetPredictionMode(); };
	ParserATNSimulator.ptr.prototype.SetPredictionMode = function(v) {
		var p, v;
		p = this;
		p.predictionMode = v;
	};
	ParserATNSimulator.prototype.SetPredictionMode = function(v) { return this.$val.SetPredictionMode(v); };
	ParserATNSimulator.ptr.prototype.reset = function() {
		var p;
		p = this;
	};
	ParserATNSimulator.prototype.reset = function() { return this.$val.reset(); };
	ParserATNSimulator.ptr.prototype.AdaptivePredict = function(input, decision, outerContext) {
		var _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, alt, decision, dfa, fullCtx, index, input, m, ok, outerContext, p, s0, s0Closure, t, t2, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; alt = $f.alt; decision = $f.decision; dfa = $f.dfa; fullCtx = $f.fullCtx; index = $f.index; input = $f.input; m = $f.m; ok = $f.ok; outerContext = $f.outerContext; p = $f.p; s0 = $f.s0; s0Closure = $f.s0Closure; t = $f.t; t2 = $f.t2; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		index = [index];
		input = [input];
		m = [m];
		p = [p];
		p[0] = this;
		/* */ if ($pkg.ParserATNSimulatorDebug || $pkg.ParserATNSimulatorListATNDecisions) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.ParserATNSimulatorDebug || $pkg.ParserATNSimulatorListATNDecisions) { */ case 1:
			_r$2 = p[0].getLookaheadName(input[0]); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = input[0].LT(1); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.GetLine(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = strconv.Itoa(_r$4); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = input[0].LT(1); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = _r$6.GetColumn(); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$8 = strconv.Itoa(_r$7); /* */ $s = 9; case 9: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$9 = fmt.Println(new sliceType$8([new $String("AdaptivePredict decision " + strconv.Itoa(decision) + " exec LA(1)==" + _r$2 + " line " + _r$5 + ":" + _r$8)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
		/* } */ case 2:
		p[0].input = input[0];
		_r$10 = input[0].Index(); /* */ $s = 11; case 11: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		p[0].startIndex = _r$10;
		p[0].outerContext = outerContext;
		dfa = (x = p[0].BaseATNSimulator.decisionToDFA, ((decision < 0 || decision >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + decision]));
		p[0].dfa = dfa;
		_r$11 = input[0].Mark(); /* */ $s = 12; case 12: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		m[0] = _r$11;
		_r$12 = input[0].Index(); /* */ $s = 13; case 13: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		index[0] = _r$12;
		$deferred.push([(function(index, input, m, p) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			p[0].dfa = ptrType$25.nil;
			p[0].mergeCache = ptrType$12.nil;
			$r = input[0].Seek(index[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = input[0].Release(m[0]); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(index, input, m, p), []]);
		s0 = ptrType$30.nil;
		/* */ if (dfa.precedenceDfa) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (dfa.precedenceDfa) { */ case 14:
			_r$13 = p[0].parser.GetPrecedence(); /* */ $s = 17; case 17: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = dfa.getPrecedenceStartState(_r$13); /* */ $s = 18; case 18: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			s0 = _r$14;
			$s = 16; continue;
		/* } else { */ case 15:
			s0 = dfa.s0;
		/* } */ case 16:
		/* */ if (s0 === ptrType$30.nil) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if (s0 === ptrType$30.nil) { */ case 19:
			if ($interfaceIsEqual(outerContext, $ifaceNil)) {
				outerContext = $pkg.RuleContextEmpty;
			}
			/* */ if ($pkg.ParserATNSimulatorDebug || $pkg.ParserATNSimulatorListATNDecisions) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if ($pkg.ParserATNSimulatorDebug || $pkg.ParserATNSimulatorListATNDecisions) { */ case 21:
				_r$15 = p[0].getLookaheadName(input[0]); /* */ $s = 23; case 23: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$16 = p[0].parser.GetRuleNames(); /* */ $s = 24; case 24: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				_r$17 = outerContext.String(_r$16, $ifaceNil); /* */ $s = 25; case 25: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_r$18 = fmt.Println(new sliceType$8([new $String("predictATN decision " + strconv.Itoa(dfa.decision) + " exec LA(1)==" + _r$15 + ", outerContext=" + _r$17)])); /* */ $s = 26; case 26: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				_r$18;
			/* } */ case 22:
			t2 = dfa.atnStartState;
			_tuple = $assertType(t2, ptrType$21, true);
			t = _tuple[0];
			ok = _tuple[1];
			if (!dfa.precedenceDfa && ok) {
				if (t.precedenceRuleDecision) {
					dfa.setPrecedenceDfa(true);
				}
			}
			fullCtx = false;
			_r$19 = p[0].computeStartState(dfa.atnStartState, $pkg.RuleContextEmpty, fullCtx); /* */ $s = 27; case 27: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			s0Closure = _r$19;
			/* */ if (dfa.precedenceDfa) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (dfa.precedenceDfa) { */ case 28:
				_r$20 = p[0].applyPrecedenceFilter(s0Closure); /* */ $s = 31; case 31: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				s0Closure = _r$20;
				_r$21 = p[0].addDFAState(dfa, NewDFAState(-1, s0Closure)); /* */ $s = 32; case 32: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				s0 = _r$21;
				_r$22 = p[0].parser.GetPrecedence(); /* */ $s = 33; case 33: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				$r = dfa.setPrecedenceStartState(_r$22, s0); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 30; continue;
			/* } else { */ case 29:
				_r$23 = p[0].addDFAState(dfa, NewDFAState(-1, s0Closure)); /* */ $s = 35; case 35: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				s0 = _r$23;
				dfa.s0 = s0;
			/* } */ case 30:
		/* } */ case 20:
		_r$24 = p[0].execATN(dfa, s0, input[0], index[0], outerContext); /* */ $s = 36; case 36: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		alt = _r$24;
		/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 37; continue; }
		/* */ $s = 38; continue;
		/* if ($pkg.ParserATNSimulatorDebug) { */ case 37:
			_r$25 = p[0].parser.GetLiteralNames(); /* */ $s = 39; case 39: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			_r$26 = dfa.String(_r$25, sliceType.nil); /* */ $s = 40; case 40: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			_r$27 = fmt.Println(new sliceType$8([new $String("DFA after predictATN: " + _r$26)])); /* */ $s = 41; case 41: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
			_r$27;
		/* } */ case 38:
		$s = -1; return alt;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return 0; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.AdaptivePredict }; } $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.alt = alt; $f.decision = decision; $f.dfa = dfa; $f.fullCtx = fullCtx; $f.index = index; $f.input = input; $f.m = m; $f.ok = ok; $f.outerContext = outerContext; $f.p = p; $f.s0 = s0; $f.s0Closure = s0Closure; $f.t = t; $f.t2 = t2; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ParserATNSimulator.prototype.AdaptivePredict = function(input, decision, outerContext) { return this.$val.AdaptivePredict(input, decision, outerContext); };
	ParserATNSimulator.ptr.prototype.execATN = function(dfa, s0, input, startIndex, outerContext) {
		var D, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, alt, alt$1, alts, conflictIndex, conflictingAlts, dfa, e, fullCtx, input, outerContext, p, previousD, s0, s0Closure, startIndex, stopIndex, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; D = $f.D; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; alt = $f.alt; alt$1 = $f.alt$1; alts = $f.alts; conflictIndex = $f.conflictIndex; conflictingAlts = $f.conflictingAlts; dfa = $f.dfa; e = $f.e; fullCtx = $f.fullCtx; input = $f.input; outerContext = $f.outerContext; p = $f.p; previousD = $f.previousD; s0 = $f.s0; s0Closure = $f.s0Closure; startIndex = $f.startIndex; stopIndex = $f.stopIndex; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if ($pkg.ParserATNSimulatorDebug || $pkg.ParserATNSimulatorListATNDecisions) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.ParserATNSimulatorDebug || $pkg.ParserATNSimulatorListATNDecisions) { */ case 1:
			_r$2 = p.getLookaheadName(input); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = input.LT(1); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.GetLine(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = strconv.Itoa(_r$4); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = input.LT(1); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = _r$6.GetColumn(); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$8 = strconv.Itoa(_r$7); /* */ $s = 9; case 9: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$9 = fmt.Println(new sliceType$8([new $String("execATN decision " + strconv.Itoa(dfa.decision) + " exec LA(1)==" + _r$2 + " line " + _r$5 + ":" + _r$8)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
		/* } */ case 2:
		previousD = s0;
		/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if ($pkg.ParserATNSimulatorDebug) { */ case 11:
			_r$10 = s0.String(); /* */ $s = 13; case 13: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = fmt.Println(new sliceType$8([new $String("s0 = " + _r$10)])); /* */ $s = 14; case 14: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$11;
		/* } */ case 12:
		_r$12 = input.LA(1); /* */ $s = 15; case 15: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		t = _r$12;
		/* while (true) { */ case 16:
			D = p.getExistingTargetState(previousD, t);
			/* */ if (D === ptrType$30.nil) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (D === ptrType$30.nil) { */ case 18:
				_r$13 = p.computeTargetState(dfa, previousD, t); /* */ $s = 20; case 20: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				D = _r$13;
			/* } */ case 19:
			/* */ if (D === $pkg.ATNSimulatorError) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (D === $pkg.ATNSimulatorError) { */ case 21:
				_r$14 = p.noViableAlt(input, outerContext, previousD.configs, startIndex); /* */ $s = 23; case 23: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				e = _r$14;
				$r = input.Seek(startIndex); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$15 = p.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext); /* */ $s = 25; case 25: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				alt = _r$15;
				if (!((alt === $pkg.ATNInvalidAltNumber))) {
					$s = -1; return alt;
				}
				$panic(e);
			/* } */ case 22:
			/* */ if (D.requiresFullContext && !((p.predictionMode === 0))) { $s = 26; continue; }
			/* */ $s = 27; continue;
			/* if (D.requiresFullContext && !((p.predictionMode === 0))) { */ case 26:
				_r$16 = D.configs.GetConflictingAlts(); /* */ $s = 28; case 28: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				conflictingAlts = _r$16;
				/* */ if (!(D.predicates === sliceType$20.nil)) { $s = 29; continue; }
				/* */ $s = 30; continue;
				/* if (!(D.predicates === sliceType$20.nil)) { */ case 29:
					/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 31; continue; }
					/* */ $s = 32; continue;
					/* if ($pkg.ParserATNSimulatorDebug) { */ case 31:
						_r$17 = fmt.Println(new sliceType$8([new $String("DFA state has preds in DFA sim LL failover")])); /* */ $s = 33; case 33: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						_r$17;
					/* } */ case 32:
					_r$18 = input.Index(); /* */ $s = 34; case 34: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					conflictIndex = _r$18;
					/* */ if (!((conflictIndex === startIndex))) { $s = 35; continue; }
					/* */ $s = 36; continue;
					/* if (!((conflictIndex === startIndex))) { */ case 35:
						$r = input.Seek(startIndex); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 36:
					_r$19 = p.evalSemanticContext(D.predicates, outerContext, true); /* */ $s = 38; case 38: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					conflictingAlts = _r$19;
					/* */ if (conflictingAlts.length() === 1) { $s = 39; continue; }
					/* */ $s = 40; continue;
					/* if (conflictingAlts.length() === 1) { */ case 39:
						/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 41; continue; }
						/* */ $s = 42; continue;
						/* if ($pkg.ParserATNSimulatorDebug) { */ case 41:
							_r$20 = fmt.Println(new sliceType$8([new $String("Full LL avoided")])); /* */ $s = 43; case 43: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
							_r$20;
						/* } */ case 42:
						$s = -1; return conflictingAlts.minValue();
					/* } */ case 40:
					/* */ if (!((conflictIndex === startIndex))) { $s = 44; continue; }
					/* */ $s = 45; continue;
					/* if (!((conflictIndex === startIndex))) { */ case 44:
						$r = input.Seek(conflictIndex); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 45:
				/* } */ case 30:
				/* */ if ($pkg.ParserATNSimulatorDFADebug) { $s = 47; continue; }
				/* */ $s = 48; continue;
				/* if ($pkg.ParserATNSimulatorDFADebug) { */ case 47:
					_r$21 = outerContext.String(sliceType.nil, $ifaceNil); /* */ $s = 49; case 49: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
					_r$22 = D.String(); /* */ $s = 50; case 50: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					_r$23 = fmt.Println(new sliceType$8([new $String("ctx sensitive state " + _r$21 + " in " + _r$22)])); /* */ $s = 51; case 51: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
					_r$23;
				/* } */ case 48:
				fullCtx = true;
				_r$24 = p.computeStartState(dfa.atnStartState, outerContext, fullCtx); /* */ $s = 52; case 52: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				s0Closure = _r$24;
				_arg = dfa;
				_arg$1 = conflictingAlts;
				_arg$2 = D.configs;
				_arg$3 = startIndex;
				_r$25 = input.Index(); /* */ $s = 53; case 53: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				_arg$4 = _r$25;
				$r = p.ReportAttemptingFullContext(_arg, _arg$1, _arg$2, _arg$3, _arg$4); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$26 = p.execATNWithFullContext(dfa, D, s0Closure, input, startIndex, outerContext); /* */ $s = 55; case 55: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				alt$1 = _r$26;
				$s = -1; return alt$1;
			/* } */ case 27:
			/* */ if (D.isAcceptState) { $s = 56; continue; }
			/* */ $s = 57; continue;
			/* if (D.isAcceptState) { */ case 56:
				if (D.predicates === sliceType$20.nil) {
					$s = -1; return D.prediction;
				}
				_r$27 = input.Index(); /* */ $s = 58; case 58: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				stopIndex = _r$27;
				$r = input.Seek(startIndex); /* */ $s = 59; case 59: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$28 = p.evalSemanticContext(D.predicates, outerContext, true); /* */ $s = 60; case 60: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				alts = _r$28;
				/* */ if (alts.length() === 0) { $s = 61; continue; }
				/* */ if (alts.length() === 1) { $s = 62; continue; }
				/* */ $s = 63; continue;
				/* if (alts.length() === 0) { */ case 61:
					_r$29 = p.noViableAlt(input, outerContext, D.configs, startIndex); /* */ $s = 65; case 65: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
					$panic(_r$29);
					$s = 64; continue;
				/* } else if (alts.length() === 1) { */ case 62:
					$s = -1; return alts.minValue();
				/* } else { */ case 63:
					$r = p.ReportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return alts.minValue();
				/* } */ case 64:
			/* } */ case 57:
			previousD = D;
			/* */ if (!((t === -1))) { $s = 67; continue; }
			/* */ $s = 68; continue;
			/* if (!((t === -1))) { */ case 67:
				$r = input.Consume(); /* */ $s = 69; case 69: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$30 = input.LA(1); /* */ $s = 70; case 70: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				t = _r$30;
			/* } */ case 68:
		/* } */ $s = 16; continue; case 17:
		$panic(new $String("Should not have reached p state"));
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.execATN }; } $f.D = D; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.alt = alt; $f.alt$1 = alt$1; $f.alts = alts; $f.conflictIndex = conflictIndex; $f.conflictingAlts = conflictingAlts; $f.dfa = dfa; $f.e = e; $f.fullCtx = fullCtx; $f.input = input; $f.outerContext = outerContext; $f.p = p; $f.previousD = previousD; $f.s0 = s0; $f.s0Closure = s0Closure; $f.startIndex = startIndex; $f.stopIndex = stopIndex; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.execATN = function(dfa, s0, input, startIndex, outerContext) { return this.$val.execATN(dfa, s0, input, startIndex, outerContext); };
	ParserATNSimulator.ptr.prototype.getExistingTargetState = function(previousD, t) {
		var edges, p, previousD, t, x;
		p = this;
		edges = previousD.edges;
		if (edges === sliceType$19.nil) {
			return ptrType$30.nil;
		}
		return (x = t + 1 >> 0, ((x < 0 || x >= edges.$length) ? ($throwRuntimeError("index out of range"), undefined) : edges.$array[edges.$offset + x]));
	};
	ParserATNSimulator.prototype.getExistingTargetState = function(previousD, t) { return this.$val.getExistingTargetState(previousD, t); };
	ParserATNSimulator.ptr.prototype.computeTargetState = function(dfa, previousD, t) {
		var D, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, altSubSets, dfa, p, predictedAlt, previousD, reach, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; D = $f.D; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _v = $f._v; altSubSets = $f.altSubSets; dfa = $f.dfa; p = $f.p; predictedAlt = $f.predictedAlt; previousD = $f.previousD; reach = $f.reach; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = p.computeReachSet(previousD.configs, t, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		reach = _r$2;
		/* */ if ($interfaceIsEqual(reach, $ifaceNil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($interfaceIsEqual(reach, $ifaceNil)) { */ case 2:
			_r$3 = p.addDFAEdge(dfa, previousD, t, $pkg.ATNSimulatorError); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			$s = -1; return $pkg.ATNSimulatorError;
		/* } */ case 3:
		D = NewDFAState(-1, reach);
		_r$4 = p.getUniqueAlt(reach); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		predictedAlt = _r$4;
		/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if ($pkg.ParserATNSimulatorDebug) { */ case 6:
			_r$5 = PredictionModegetConflictingAltSubsets(reach); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			altSubSets = _r$5;
			_r$6 = fmt.Sprint(new sliceType$8([altSubSets])); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = previousD.configs.String(); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$8 = reach.String(); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$9 = fmt.Sprint(new sliceType$8([new $Bool(PredictionModeallSubsetsConflict(altSubSets))])); /* */ $s = 12; case 12: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$10 = p.getConflictingAlts(reach); /* */ $s = 13; case 13: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = _r$10.String(); /* */ $s = 14; case 14: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$12 = fmt.Println(new sliceType$8([new $String("SLL altSubSets=" + _r$6 + ", previous=" + _r$7 + ", configs=" + _r$8 + ", predict=" + strconv.Itoa(predictedAlt) + ", allSubsetsConflict=" + _r$9 + ", conflictingAlts=" + _r$11)])); /* */ $s = 15; case 15: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_r$12;
		/* } */ case 7:
		/* */ if (!((predictedAlt === $pkg.ATNInvalidAltNumber))) { $s = 16; continue; }
		_r$13 = PredictionModehasSLLConflictTerminatingPrediction(p.predictionMode, reach); /* */ $s = 19; case 19: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		/* */ if (_r$13) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (!((predictedAlt === $pkg.ATNInvalidAltNumber))) { */ case 16:
			D.isAcceptState = true;
			$r = D.configs.SetUniqueAlt(predictedAlt); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			D.setPrediction(predictedAlt);
			$s = 18; continue;
		/* } else if (_r$13) { */ case 17:
			_r$14 = p.getConflictingAlts(reach); /* */ $s = 21; case 21: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			$r = D.configs.SetConflictingAlts(_r$14); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			D.requiresFullContext = true;
			D.isAcceptState = true;
			_r$15 = D.configs.GetConflictingAlts(); /* */ $s = 23; case 23: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = _r$15.minValue(); /* */ $s = 24; case 24: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			$r = D.setPrediction(_r$16); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 18:
		if (!(D.isAcceptState)) { _v = false; $s = 28; continue s; }
		_r$17 = D.configs.HasSemanticContext(); /* */ $s = 29; case 29: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		_v = _r$17; case 28:
		/* */ if (_v) { $s = 26; continue; }
		/* */ $s = 27; continue;
		/* if (_v) { */ case 26:
			$r = p.predicateDFAState(D, p.BaseATNSimulator.atn.getDecisionState(dfa.decision)); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (!(D.predicates === sliceType$20.nil)) {
				D.setPrediction($pkg.ATNInvalidAltNumber);
			}
		/* } */ case 27:
		_r$18 = p.addDFAEdge(dfa, previousD, t, D); /* */ $s = 31; case 31: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		D = _r$18;
		$s = -1; return D;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.computeTargetState }; } $f.D = D; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._v = _v; $f.altSubSets = altSubSets; $f.dfa = dfa; $f.p = p; $f.predictedAlt = predictedAlt; $f.previousD = previousD; $f.reach = reach; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.computeTargetState = function(dfa, previousD, t) { return this.$val.computeTargetState(dfa, previousD, t); };
	ParserATNSimulator.ptr.prototype.predicateDFAState = function(dfaState, decisionState) {
		var _r$2, _r$3, _r$4, altToPred, altsToCollectPredsFrom, decisionState, dfaState, nalts, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; altToPred = $f.altToPred; altsToCollectPredsFrom = $f.altsToCollectPredsFrom; decisionState = $f.decisionState; dfaState = $f.dfaState; nalts = $f.nalts; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = decisionState.GetTransitions(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		nalts = _r$2.$length;
		_r$3 = p.getConflictingAltsOrUniqueAlt(dfaState.configs); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		altsToCollectPredsFrom = _r$3;
		_r$4 = p.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		altToPred = _r$4;
		if (!(altToPred === sliceType$10.nil)) {
			dfaState.predicates = p.getPredicatePredictions(altsToCollectPredsFrom, altToPred);
			dfaState.setPrediction($pkg.ATNInvalidAltNumber);
		} else {
			dfaState.setPrediction(altsToCollectPredsFrom.minValue());
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.predicateDFAState }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.altToPred = altToPred; $f.altsToCollectPredsFrom = altsToCollectPredsFrom; $f.decisionState = decisionState; $f.dfaState = dfaState; $f.nalts = nalts; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.predicateDFAState = function(dfaState, decisionState) { return this.$val.predicateDFAState(dfaState, decisionState); };
	ParserATNSimulator.ptr.prototype.execATNWithFullContext = function(dfa, D, s0, input, startIndex, outerContext) {
		var D, _arg, _arg$1, _arg$10, _arg$11, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, alt, altSubSets, dfa, e, foundExactAmbig, fullCtx, input, outerContext, p, predictedAlt, previous, reach, s0, startIndex, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; D = $f.D; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; alt = $f.alt; altSubSets = $f.altSubSets; dfa = $f.dfa; e = $f.e; foundExactAmbig = $f.foundExactAmbig; fullCtx = $f.fullCtx; input = $f.input; outerContext = $f.outerContext; p = $f.p; predictedAlt = $f.predictedAlt; previous = $f.previous; reach = $f.reach; s0 = $f.s0; startIndex = $f.startIndex; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if ($pkg.ParserATNSimulatorDebug || $pkg.ParserATNSimulatorListATNDecisions) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.ParserATNSimulatorDebug || $pkg.ParserATNSimulatorListATNDecisions) { */ case 1:
			_r$2 = s0.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = fmt.Println(new sliceType$8([new $String("execATNWithFullContext " + _r$2)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 2:
		fullCtx = true;
		foundExactAmbig = false;
		reach = $ifaceNil;
		previous = s0;
		$r = input.Seek(startIndex); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$4 = input.LA(1); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		t = _r$4;
		predictedAlt = -1;
		/* while (true) { */ case 7:
			_r$5 = p.computeReachSet(previous, t, fullCtx); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			reach = _r$5;
			/* */ if ($interfaceIsEqual(reach, $ifaceNil)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if ($interfaceIsEqual(reach, $ifaceNil)) { */ case 10:
				_r$6 = p.noViableAlt(input, outerContext, previous, startIndex); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				e = _r$6;
				$r = input.Seek(startIndex); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$7 = p.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				alt = _r$7;
				if (!((alt === $pkg.ATNInvalidAltNumber))) {
					$s = -1; return alt;
				}
				$panic(e);
			/* } */ case 11:
			_r$8 = PredictionModegetConflictingAltSubsets(reach); /* */ $s = 15; case 15: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			altSubSets = _r$8;
			/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if ($pkg.ParserATNSimulatorDebug) { */ case 16:
				_r$9 = fmt.Sprint(new sliceType$8([altSubSets])); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$10 = fmt.Sprint(new sliceType$8([new $Int(PredictionModeresolvesToJustOneViableAlt(altSubSets))])); /* */ $s = 19; case 19: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$11 = fmt.Println(new sliceType$8([new $String("LL altSubSets=" + _r$9 + ", predict=" + strconv.Itoa(PredictionModegetUniqueAlt(altSubSets)) + ", resolvesToJustOneViableAlt=" + _r$10)])); /* */ $s = 20; case 20: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$11;
			/* } */ case 17:
			_r$12 = p.getUniqueAlt(reach); /* */ $s = 21; case 21: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			$r = reach.SetUniqueAlt(_r$12); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$13 = reach.GetUniqueAlt(); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ if (!((_r$13 === $pkg.ATNInvalidAltNumber))) { $s = 23; continue; }
			/* */ if (!((p.predictionMode === 2))) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (!((_r$13 === $pkg.ATNInvalidAltNumber))) { */ case 23:
				_r$14 = reach.GetUniqueAlt(); /* */ $s = 28; case 28: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				predictedAlt = _r$14;
				/* break; */ $s = 8; continue;
				$s = 26; continue;
			/* } else if (!((p.predictionMode === 2))) { */ case 24:
				predictedAlt = PredictionModeresolvesToJustOneViableAlt(altSubSets);
				if (!((predictedAlt === $pkg.ATNInvalidAltNumber))) {
					/* break; */ $s = 8; continue;
				}
				$s = 26; continue;
			/* } else { */ case 25:
				if (PredictionModeallSubsetsConflict(altSubSets) && PredictionModeallSubsetsEqual(altSubSets)) {
					foundExactAmbig = true;
					predictedAlt = PredictionModegetSingleViableAlt(altSubSets);
					/* break; */ $s = 8; continue;
				}
			/* } */ case 26:
			previous = reach;
			/* */ if (!((t === -1))) { $s = 29; continue; }
			/* */ $s = 30; continue;
			/* if (!((t === -1))) { */ case 29:
				$r = input.Consume(); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$15 = input.LA(1); /* */ $s = 32; case 32: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				t = _r$15;
			/* } */ case 30:
		/* } */ $s = 7; continue; case 8:
		_r$16 = reach.GetUniqueAlt(); /* */ $s = 35; case 35: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		/* */ if (!((_r$16 === $pkg.ATNInvalidAltNumber))) { $s = 33; continue; }
		/* */ $s = 34; continue;
		/* if (!((_r$16 === $pkg.ATNInvalidAltNumber))) { */ case 33:
			_arg = dfa;
			_arg$1 = predictedAlt;
			_arg$2 = reach;
			_arg$3 = startIndex;
			_r$17 = input.Index(); /* */ $s = 36; case 36: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_arg$4 = _r$17;
			$r = p.ReportContextSensitivity(_arg, _arg$1, _arg$2, _arg$3, _arg$4); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return predictedAlt;
		/* } */ case 34:
		_arg$5 = dfa;
		_arg$6 = D;
		_arg$7 = startIndex;
		_r$18 = input.Index(); /* */ $s = 38; case 38: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		_arg$8 = _r$18;
		_arg$9 = foundExactAmbig;
		_arg$10 = ptrType$11.nil;
		_arg$11 = reach;
		$r = p.ReportAmbiguity(_arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _arg$10, _arg$11); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return predictedAlt;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.execATNWithFullContext }; } $f.D = D; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.alt = alt; $f.altSubSets = altSubSets; $f.dfa = dfa; $f.e = e; $f.foundExactAmbig = foundExactAmbig; $f.fullCtx = fullCtx; $f.input = input; $f.outerContext = outerContext; $f.p = p; $f.predictedAlt = predictedAlt; $f.previous = previous; $f.reach = reach; $f.s0 = s0; $f.startIndex = startIndex; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.execATNWithFullContext = function(dfa, D, s0, input, startIndex, outerContext) { return this.$val.execATNWithFullContext(dfa, D, s0, input, startIndex, outerContext); };
	ParserATNSimulator.ptr.prototype.computeReachSet = function(closure, t, fullCtx) {
		var SkippedStopStates, _i, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _v, _v$1, c, cfg, closure, closureBusy, fullCtx, intermediate, j, k, l, ok, p, reach, t, target, trans, treatEOFAsEpsilon, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; SkippedStopStates = $f.SkippedStopStates; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _v = $f._v; _v$1 = $f._v$1; c = $f.c; cfg = $f.cfg; closure = $f.closure; closureBusy = $f.closureBusy; fullCtx = $f.fullCtx; intermediate = $f.intermediate; j = $f.j; k = $f.k; l = $f.l; ok = $f.ok; p = $f.p; reach = $f.reach; t = $f.t; target = $f.target; trans = $f.trans; treatEOFAsEpsilon = $f.treatEOFAsEpsilon; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.ParserATNSimulatorDebug) { */ case 1:
			_r$2 = closure.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = fmt.Println(new sliceType$8([new $String("in computeReachSet, starting closure: " + _r$2)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 2:
		if (p.mergeCache === ptrType$12.nil) {
			p.mergeCache = NewDoubleDict();
		}
		intermediate = NewBaseATNConfigSet(fullCtx);
		SkippedStopStates = sliceType$24.nil;
		_r$4 = closure.GetItems(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_ref = _r$4;
		_i = 0;
		/* while (true) { */ case 6:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ($pkg.ParserATNSimulatorDebug) { */ case 8:
				_r$5 = p.GetTokenName(t); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = c.String(); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$7 = fmt.Println(new sliceType$8([new $String("testing " + _r$5 + " at " + _r$6)])); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
			/* } */ case 9:
			_r$8 = c.GetState(); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_tuple = $assertType(_r$8, ptrType$5, true);
			ok = _tuple[1];
			/* */ if (ok) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (ok) { */ case 14:
				/* */ if (fullCtx || (t === -1)) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (fullCtx || (t === -1)) { */ case 16:
					if (SkippedStopStates === sliceType$24.nil) {
						SkippedStopStates = $makeSlice(sliceType$24, 0);
					}
					SkippedStopStates = $append(SkippedStopStates, $assertType(c, ptrType$7));
					/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if ($pkg.ParserATNSimulatorDebug) { */ case 18:
						_r$9 = c.String(); /* */ $s = 20; case 20: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_r$10 = fmt.Println(new sliceType$8([new $String("added " + _r$9 + " to SkippedStopStates")])); /* */ $s = 21; case 21: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						_r$10;
					/* } */ case 19:
				/* } */ case 17:
				_i++;
				/* continue; */ $s = 6; continue;
			/* } */ case 15:
			j = 0;
			/* while (true) { */ case 22:
				_r$11 = c.GetState(); /* */ $s = 24; case 24: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$12 = _r$11.GetTransitions(); /* */ $s = 25; case 25: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				/* if (!(j < _r$12.$length)) { break; } */ if(!(j < _r$12.$length)) { $s = 23; continue; }
				_r$13 = c.GetState(); /* */ $s = 26; case 26: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$14 = _r$13.GetTransitions(); /* */ $s = 27; case 27: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				trans = (x = _r$14, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
				_r$15 = p.getReachableTarget(trans, t); /* */ $s = 28; case 28: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				target = _r$15;
				/* */ if (!($interfaceIsEqual(target, $ifaceNil))) { $s = 29; continue; }
				/* */ $s = 30; continue;
				/* if (!($interfaceIsEqual(target, $ifaceNil))) { */ case 29:
					_r$16 = NewBaseATNConfig4(c, target); /* */ $s = 31; case 31: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					cfg = _r$16;
					_r$17 = intermediate.Add(cfg, p.mergeCache); /* */ $s = 32; case 32: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					_r$17;
					/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 33; continue; }
					/* */ $s = 34; continue;
					/* if ($pkg.ParserATNSimulatorDebug) { */ case 33:
						_r$18 = cfg.String(); /* */ $s = 35; case 35: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
						_r$19 = fmt.Println(new sliceType$8([new $String("added " + _r$18 + " to intermediate")])); /* */ $s = 36; case 36: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
						_r$19;
					/* } */ case 34:
				/* } */ case 30:
				j = j + (1) >> 0;
			/* } */ $s = 22; continue; case 23:
			_i++;
		/* } */ $s = 6; continue; case 7:
		reach = $ifaceNil;
		/* */ if (SkippedStopStates === sliceType$24.nil && !((t === -1))) { $s = 37; continue; }
		/* */ $s = 38; continue;
		/* if (SkippedStopStates === sliceType$24.nil && !((t === -1))) { */ case 37:
			/* */ if (intermediate.configs.$length === 1) { $s = 39; continue; }
			_r$20 = p.getUniqueAlt(intermediate); /* */ $s = 42; case 42: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			/* */ if (!((_r$20 === $pkg.ATNInvalidAltNumber))) { $s = 40; continue; }
			/* */ $s = 41; continue;
			/* if (intermediate.configs.$length === 1) { */ case 39:
				reach = intermediate;
				$s = 41; continue;
			/* } else if (!((_r$20 === $pkg.ATNInvalidAltNumber))) { */ case 40:
				reach = intermediate;
			/* } */ case 41:
		/* } */ case 38:
		/* */ if ($interfaceIsEqual(reach, $ifaceNil)) { $s = 43; continue; }
		/* */ $s = 44; continue;
		/* if ($interfaceIsEqual(reach, $ifaceNil)) { */ case 43:
			reach = NewBaseATNConfigSet(fullCtx);
			closureBusy = NewSet($throwNilPointerError, $throwNilPointerError);
			treatEOFAsEpsilon = t === -1;
			k = 0;
			/* while (true) { */ case 45:
				/* if (!(k < intermediate.configs.$length)) { break; } */ if(!(k < intermediate.configs.$length)) { $s = 46; continue; }
				$r = p.closure((x$1 = intermediate.configs, ((k < 0 || k >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + k])), reach, closureBusy, false, fullCtx, treatEOFAsEpsilon); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				k = k + (1) >> 0;
			/* } */ $s = 45; continue; case 46:
		/* } */ case 44:
		/* */ if (t === -1) { $s = 48; continue; }
		/* */ $s = 49; continue;
		/* if (t === -1) { */ case 48:
			_r$21 = p.removeAllConfigsNotInRuleStopState(reach, $interfaceIsEqual(reach, intermediate)); /* */ $s = 50; case 50: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			reach = _r$21;
		/* } */ case 49:
		if (!(!(SkippedStopStates === sliceType$24.nil))) { _v = false; $s = 53; continue s; }
		if (!fullCtx) { _v$1 = true; $s = 54; continue s; }
		_r$22 = PredictionModehasConfigInRuleStopState(reach); /* */ $s = 55; case 55: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_v$1 = !_r$22; case 54:
		_v = _v$1; case 53:
		/* */ if (_v) { $s = 51; continue; }
		/* */ $s = 52; continue;
		/* if (_v) { */ case 51:
			l = 0;
			/* while (true) { */ case 56:
				/* if (!(l < SkippedStopStates.$length)) { break; } */ if(!(l < SkippedStopStates.$length)) { $s = 57; continue; }
				_r$23 = reach.Add(((l < 0 || l >= SkippedStopStates.$length) ? ($throwRuntimeError("index out of range"), undefined) : SkippedStopStates.$array[SkippedStopStates.$offset + l]), p.mergeCache); /* */ $s = 58; case 58: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				_r$23;
				l = l + (1) >> 0;
			/* } */ $s = 56; continue; case 57:
		/* } */ case 52:
		_r$24 = reach.GetItems(); /* */ $s = 61; case 61: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		/* */ if (_r$24.$length === 0) { $s = 59; continue; }
		/* */ $s = 60; continue;
		/* if (_r$24.$length === 0) { */ case 59:
			$s = -1; return $ifaceNil;
		/* } */ case 60:
		$s = -1; return reach;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.computeReachSet }; } $f.SkippedStopStates = SkippedStopStates; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._v = _v; $f._v$1 = _v$1; $f.c = c; $f.cfg = cfg; $f.closure = closure; $f.closureBusy = closureBusy; $f.fullCtx = fullCtx; $f.intermediate = intermediate; $f.j = j; $f.k = k; $f.l = l; $f.ok = ok; $f.p = p; $f.reach = reach; $f.t = t; $f.target = target; $f.trans = trans; $f.treatEOFAsEpsilon = treatEOFAsEpsilon; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.computeReachSet = function(closure, t, fullCtx) { return this.$val.computeReachSet(closure, t, fullCtx); };
	ParserATNSimulator.ptr.prototype.removeAllConfigsNotInRuleStopState = function(configs, lookToEndOfRule) {
		var NextTokens, _i, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _v, config, configs, endOfRuleState, lookToEndOfRule, ok, p, result, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; NextTokens = $f.NextTokens; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _v = $f._v; config = $f.config; configs = $f.configs; endOfRuleState = $f.endOfRuleState; lookToEndOfRule = $f.lookToEndOfRule; ok = $f.ok; p = $f.p; result = $f.result; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = PredictionModeallConfigsInRuleStopStates(configs); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$2) { */ case 1:
			$s = -1; return configs;
		/* } */ case 2:
		_r$3 = configs.FullContext(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = NewBaseATNConfigSet(_r$3); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		result = _r$4;
		_r$5 = configs.GetItems(); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_ref = _r$5;
		_i = 0;
		/* while (true) { */ case 7:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
			config = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$6 = config.GetState(); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple = $assertType(_r$6, ptrType$5, true);
			ok = _tuple[1];
			/* */ if (ok) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (ok) { */ case 10:
				_r$7 = result.Add(config, p.mergeCache); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
				_i++;
				/* continue; */ $s = 7; continue;
			/* } */ case 11:
			if (!(lookToEndOfRule)) { _v = false; $s = 15; continue s; }
			_r$8 = config.GetState(); /* */ $s = 16; case 16: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$9 = _r$8.GetEpsilonOnlyTransitions(); /* */ $s = 17; case 17: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_v = _r$9; case 15:
			/* */ if (_v) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (_v) { */ case 13:
				_r$10 = config.GetState(); /* */ $s = 18; case 18: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$11 = p.BaseATNSimulator.atn.NextTokens(_r$10, $ifaceNil); /* */ $s = 19; case 19: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				NextTokens = _r$11;
				/* */ if (NextTokens.contains(-2)) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (NextTokens.contains(-2)) { */ case 20:
					_r$12 = config.GetState(); /* */ $s = 22; case 22: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_r$13 = _r$12.GetRuleIndex(); /* */ $s = 23; case 23: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					endOfRuleState = (x = p.BaseATNSimulator.atn.ruleToStopState, x$1 = _r$13, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
					_r$14 = NewBaseATNConfig4(config, endOfRuleState); /* */ $s = 24; case 24: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_r$15 = result.Add(_r$14, p.mergeCache); /* */ $s = 25; case 25: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					_r$15;
				/* } */ case 21:
			/* } */ case 14:
			_i++;
		/* } */ $s = 7; continue; case 8:
		$s = -1; return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.removeAllConfigsNotInRuleStopState }; } $f.NextTokens = NextTokens; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._v = _v; $f.config = config; $f.configs = configs; $f.endOfRuleState = endOfRuleState; $f.lookToEndOfRule = lookToEndOfRule; $f.ok = ok; $f.p = p; $f.result = result; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.removeAllConfigsNotInRuleStopState = function(configs, lookToEndOfRule) { return this.$val.removeAllConfigsNotInRuleStopState(configs, lookToEndOfRule); };
	ParserATNSimulator.ptr.prototype.computeStartState = function(a, ctx, fullCtx) {
		var _r$2, _r$3, _r$4, _r$5, a, c, closureBusy, configs, ctx, fullCtx, i, initialContext, p, target, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; a = $f.a; c = $f.c; closureBusy = $f.closureBusy; configs = $f.configs; ctx = $f.ctx; fullCtx = $f.fullCtx; i = $f.i; initialContext = $f.initialContext; p = $f.p; target = $f.target; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = predictionContextFromRuleContext(p.BaseATNSimulator.atn, ctx); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		initialContext = _r$2;
		configs = NewBaseATNConfigSet(fullCtx);
		i = 0;
		/* while (true) { */ case 2:
			_r$3 = a.GetTransitions(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* if (!(i < _r$3.$length)) { break; } */ if(!(i < _r$3.$length)) { $s = 3; continue; }
			_r$4 = a.GetTransitions(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = (x = _r$4, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).getTarget(); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			target = _r$5;
			c = NewBaseATNConfig6(target, i + 1 >> 0, initialContext);
			closureBusy = NewSet($throwNilPointerError, $throwNilPointerError);
			$r = p.closure(c, configs, closureBusy, true, fullCtx, false); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return configs;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.computeStartState }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.a = a; $f.c = c; $f.closureBusy = closureBusy; $f.configs = configs; $f.ctx = ctx; $f.fullCtx = fullCtx; $f.i = i; $f.initialContext = initialContext; $f.p = p; $f.target = target; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.computeStartState = function(a, ctx, fullCtx) { return this.$val.computeStartState(a, ctx, fullCtx); };
	ParserATNSimulator.ptr.prototype.applyPrecedenceFilter = function(configs) {
		var _entry, _i, _i$1, _key, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _v, config, config$1, configSet, configs, context, p, statesFromAlt1, updatedContext, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; config = $f.config; config$1 = $f.config$1; configSet = $f.configSet; configs = $f.configs; context = $f.context; p = $f.p; statesFromAlt1 = $f.statesFromAlt1; updatedContext = $f.updatedContext; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		statesFromAlt1 = {};
		_r$2 = configs.FullContext(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = NewBaseATNConfigSet(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		configSet = _r$3;
		_r$4 = configs.GetItems(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_ref = _r$4;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			config = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$5 = config.GetAlt(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (!((_r$5 === 1))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!((_r$5 === 1))) { */ case 6:
				_i++;
				/* continue; */ $s = 4; continue;
			/* } */ case 7:
			_r$6 = config.GetSemanticContext(); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = _r$6.evalPrecedence(p.parser, p.outerContext); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			updatedContext = _r$7;
			/* */ if ($interfaceIsEqual(updatedContext, $ifaceNil)) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if ($interfaceIsEqual(updatedContext, $ifaceNil)) { */ case 11:
				_i++;
				/* continue; */ $s = 4; continue;
			/* } */ case 12:
			_r$8 = config.GetState(); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$9 = _r$8.GetStateNumber(); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$10 = config.GetContext(); /* */ $s = 15; case 15: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_key = _r$9; (statesFromAlt1 || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: _r$10 };
			_r$11 = config.GetSemanticContext(); /* */ $s = 19; case 19: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(updatedContext, _r$11))) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (!($interfaceIsEqual(updatedContext, _r$11))) { */ case 16:
				_r$12 = NewBaseATNConfig2(config, updatedContext); /* */ $s = 20; case 20: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_r$13 = configSet.Add(_r$12, p.mergeCache); /* */ $s = 21; case 21: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$13;
				$s = 18; continue;
			/* } else { */ case 17:
				_r$14 = configSet.Add(config, p.mergeCache); /* */ $s = 22; case 22: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_r$14;
			/* } */ case 18:
			_i++;
		/* } */ $s = 4; continue; case 5:
		_r$15 = configs.GetItems(); /* */ $s = 23; case 23: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_ref$1 = _r$15;
		_i$1 = 0;
		/* while (true) { */ case 24:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 25; continue; }
			config$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			_r$16 = config$1.GetAlt(); /* */ $s = 28; case 28: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			/* */ if (_r$16 === 1) { $s = 26; continue; }
			/* */ $s = 27; continue;
			/* if (_r$16 === 1) { */ case 26:
				_i$1++;
				/* continue; */ $s = 24; continue;
			/* } */ case 27:
			_r$17 = config$1.getPrecedenceFilterSuppressed(); /* */ $s = 31; case 31: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ if (!_r$17) { $s = 29; continue; }
			/* */ $s = 30; continue;
			/* if (!_r$17) { */ case 29:
				_r$18 = config$1.GetState(); /* */ $s = 32; case 32: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				_r$19 = _r$18.GetStateNumber(); /* */ $s = 33; case 33: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				context = (_entry = statesFromAlt1[$Int.keyFor(_r$19)], _entry !== undefined ? _entry.v : $ifaceNil);
				if (!(!($interfaceIsEqual(context, $ifaceNil)))) { _v = false; $s = 36; continue s; }
				_r$20 = config$1.GetContext(); /* */ $s = 37; case 37: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				_r$21 = context.equals(_r$20); /* */ $s = 38; case 38: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				_v = _r$21; case 36:
				/* */ if (_v) { $s = 34; continue; }
				/* */ $s = 35; continue;
				/* if (_v) { */ case 34:
					_i$1++;
					/* continue; */ $s = 24; continue;
				/* } */ case 35:
			/* } */ case 30:
			_r$22 = configSet.Add(config$1, p.mergeCache); /* */ $s = 39; case 39: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			_r$22;
			_i$1++;
		/* } */ $s = 24; continue; case 25:
		$s = -1; return configSet;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.applyPrecedenceFilter }; } $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f.config = config; $f.config$1 = config$1; $f.configSet = configSet; $f.configs = configs; $f.context = context; $f.p = p; $f.statesFromAlt1 = statesFromAlt1; $f.updatedContext = updatedContext; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.applyPrecedenceFilter = function(configs) { return this.$val.applyPrecedenceFilter(configs); };
	ParserATNSimulator.ptr.prototype.getReachableTarget = function(trans, ttype) {
		var _r$2, _r$3, p, trans, ttype, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; p = $f.p; trans = $f.trans; ttype = $f.ttype; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = trans.Matches(ttype, 0, p.BaseATNSimulator.atn.maxTokenType); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$2) { */ case 1:
			_r$3 = trans.getTarget(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.getReachableTarget }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.p = p; $f.trans = trans; $f.ttype = ttype; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.getReachableTarget = function(trans, ttype) { return this.$val.getReachableTarget(trans, ttype); };
	ParserATNSimulator.ptr.prototype.getPredsForAmbigAlts = function(ambigAlts, configs, nalts) {
		var _arg, _arg$1, _i, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, altToPred, ambigAlts, c, configs, i, nPredAlts, nalts, p, pred, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; altToPred = $f.altToPred; ambigAlts = $f.ambigAlts; c = $f.c; configs = $f.configs; i = $f.i; nPredAlts = $f.nPredAlts; nalts = $f.nalts; p = $f.p; pred = $f.pred; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		altToPred = $makeSlice(sliceType$10, (nalts + 1 >> 0));
		_r$2 = configs.GetItems(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_ref = _r$2;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$3 = c.GetAlt(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = ambigAlts.contains(_r$3); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$4) { */ case 4:
				_r$5 = c.GetAlt(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_arg = (x = _r$5, ((x < 0 || x >= altToPred.$length) ? ($throwRuntimeError("index out of range"), undefined) : altToPred.$array[altToPred.$offset + x]));
				_r$6 = c.GetSemanticContext(); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_arg$1 = _r$6;
				_r$7 = SemanticContextorContext(_arg, _arg$1); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$8 = c.GetAlt(); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				(x$1 = _r$8, ((x$1 < 0 || x$1 >= altToPred.$length) ? ($throwRuntimeError("index out of range"), undefined) : altToPred.$array[altToPred.$offset + x$1] = _r$7));
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		nPredAlts = 0;
		i = 1;
		while (true) {
			if (!(i < (nalts + 1 >> 0))) { break; }
			pred = ((i < 0 || i >= altToPred.$length) ? ($throwRuntimeError("index out of range"), undefined) : altToPred.$array[altToPred.$offset + i]);
			if ($interfaceIsEqual(pred, $ifaceNil)) {
				((i < 0 || i >= altToPred.$length) ? ($throwRuntimeError("index out of range"), undefined) : altToPred.$array[altToPred.$offset + i] = $pkg.SemanticContextNone);
			} else if (!($interfaceIsEqual(pred, $pkg.SemanticContextNone))) {
				nPredAlts = nPredAlts + (1) >> 0;
			}
			i = i + (1) >> 0;
		}
		if (nPredAlts === 0) {
			altToPred = sliceType$10.nil;
		}
		/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ($pkg.ParserATNSimulatorDebug) { */ case 12:
			_r$9 = fmt.Sprint(new sliceType$8([altToPred])); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$10 = fmt.Println(new sliceType$8([new $String("getPredsForAmbigAlts result " + _r$9)])); /* */ $s = 15; case 15: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$10;
		/* } */ case 13:
		$s = -1; return altToPred;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.getPredsForAmbigAlts }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.altToPred = altToPred; $f.ambigAlts = ambigAlts; $f.c = c; $f.configs = configs; $f.i = i; $f.nPredAlts = nPredAlts; $f.nalts = nalts; $f.p = p; $f.pred = pred; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.getPredsForAmbigAlts = function(ambigAlts, configs, nalts) { return this.$val.getPredsForAmbigAlts(ambigAlts, configs, nalts); };
	ParserATNSimulator.ptr.prototype.getPredicatePredictions = function(ambigAlts, altToPred) {
		var altToPred, ambigAlts, containsPredicate, i, p, pairs, pred;
		p = this;
		pairs = $makeSlice(sliceType$20, 0);
		containsPredicate = false;
		i = 1;
		while (true) {
			if (!(i < altToPred.$length)) { break; }
			pred = ((i < 0 || i >= altToPred.$length) ? ($throwRuntimeError("index out of range"), undefined) : altToPred.$array[altToPred.$offset + i]);
			if (!(ambigAlts === ptrType$11.nil) && ambigAlts.contains(i)) {
				pairs = $append(pairs, NewPredPrediction(pred, i));
			}
			if (!($interfaceIsEqual(pred, $pkg.SemanticContextNone))) {
				containsPredicate = true;
			}
			i = i + (1) >> 0;
		}
		if (!containsPredicate) {
			return sliceType$20.nil;
		}
		return pairs;
	};
	ParserATNSimulator.prototype.getPredicatePredictions = function(ambigAlts, altToPred) { return this.$val.getPredicatePredictions(ambigAlts, altToPred); };
	ParserATNSimulator.ptr.prototype.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule = function(configs, outerContext) {
		var _r$2, _r$3, _r$4, _r$5, alt, cfgs, configs, outerContext, p, semInvalidConfigs, semValidConfigs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; alt = $f.alt; cfgs = $f.cfgs; configs = $f.configs; outerContext = $f.outerContext; p = $f.p; semInvalidConfigs = $f.semInvalidConfigs; semValidConfigs = $f.semValidConfigs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = p.splitAccordingToSemanticValidity(configs, outerContext); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		cfgs = _r$2;
		semValidConfigs = (0 >= cfgs.$length ? ($throwRuntimeError("index out of range"), undefined) : cfgs.$array[cfgs.$offset + 0]);
		semInvalidConfigs = (1 >= cfgs.$length ? ($throwRuntimeError("index out of range"), undefined) : cfgs.$array[cfgs.$offset + 1]);
		_r$3 = p.GetAltThatFinishedDecisionEntryRule(semValidConfigs); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		alt = _r$3;
		if (!((alt === $pkg.ATNInvalidAltNumber))) {
			$s = -1; return alt;
		}
		_r$4 = semInvalidConfigs.GetItems(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4.$length > 0) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_r$4.$length > 0) { */ case 3:
			_r$5 = p.GetAltThatFinishedDecisionEntryRule(semInvalidConfigs); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			alt = _r$5;
			if (!((alt === $pkg.ATNInvalidAltNumber))) {
				$s = -1; return alt;
			}
		/* } */ case 4:
		$s = -1; return $pkg.ATNInvalidAltNumber;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.alt = alt; $f.cfgs = cfgs; $f.configs = configs; $f.outerContext = outerContext; $f.p = p; $f.semInvalidConfigs = semInvalidConfigs; $f.semValidConfigs = semValidConfigs; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule = function(configs, outerContext) { return this.$val.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(configs, outerContext); };
	ParserATNSimulator.ptr.prototype.GetAltThatFinishedDecisionEntryRule = function(configs) {
		var _i, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _tuple, _v, _v$1, alts, c, configs, ok, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tuple = $f._tuple; _v = $f._v; _v$1 = $f._v$1; alts = $f.alts; c = $f.c; configs = $f.configs; ok = $f.ok; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		alts = NewIntervalSet();
		_r$2 = configs.GetItems(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_ref = _r$2;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$3 = c.GetState(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = $assertType(_r$3, ptrType$5, true);
			ok = _tuple[1];
			_r$4 = c.GetReachesIntoOuterContext(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			if (_r$4 > 0) { _v = true; $s = 7; continue s; }
			if (!(ok)) { _v$1 = false; $s = 9; continue s; }
			_r$5 = c.GetContext(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = _r$5.hasEmptyPath(); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_v$1 = _r$6; case 9:
			_v = _v$1; case 7:
			/* */ if (_v) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_v) { */ case 5:
				_r$7 = c.GetAlt(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$r = alts.addOne(_r$7); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
			_i++;
		/* } */ $s = 2; continue; case 3:
		if (alts.length() === 0) {
			$s = -1; return $pkg.ATNInvalidAltNumber;
		}
		$s = -1; return alts.first();
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.GetAltThatFinishedDecisionEntryRule }; } $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tuple = _tuple; $f._v = _v; $f._v$1 = _v$1; $f.alts = alts; $f.c = c; $f.configs = configs; $f.ok = ok; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.GetAltThatFinishedDecisionEntryRule = function(configs) { return this.$val.GetAltThatFinishedDecisionEntryRule(configs); };
	ParserATNSimulator.ptr.prototype.splitAccordingToSemanticValidity = function(configs, outerContext) {
		var _i, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, c, configs, failed, outerContext, p, predicateEvaluationResult, succeeded, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; c = $f.c; configs = $f.configs; failed = $f.failed; outerContext = $f.outerContext; p = $f.p; predicateEvaluationResult = $f.predicateEvaluationResult; succeeded = $f.succeeded; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = configs.FullContext(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = NewBaseATNConfigSet(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		succeeded = _r$3;
		_r$4 = configs.FullContext(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = NewBaseATNConfigSet(_r$4); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		failed = _r$5;
		_r$6 = configs.GetItems(); /* */ $s = 5; case 5: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_ref = _r$6;
		_i = 0;
		/* while (true) { */ case 6:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$7 = c.GetSemanticContext(); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(_r$7, $pkg.SemanticContextNone))) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!($interfaceIsEqual(_r$7, $pkg.SemanticContextNone))) { */ case 8:
				_r$8 = c.GetSemanticContext(); /* */ $s = 12; case 12: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$9 = _r$8.evaluate(p.parser, outerContext); /* */ $s = 13; case 13: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				predicateEvaluationResult = _r$9;
				/* */ if (predicateEvaluationResult) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (predicateEvaluationResult) { */ case 14:
					_r$10 = succeeded.Add(c, ptrType$12.nil); /* */ $s = 17; case 17: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_r$10;
					$s = 16; continue;
				/* } else { */ case 15:
					_r$11 = failed.Add(c, ptrType$12.nil); /* */ $s = 18; case 18: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_r$11;
				/* } */ case 16:
				$s = 10; continue;
			/* } else { */ case 9:
				_r$12 = succeeded.Add(c, ptrType$12.nil); /* */ $s = 19; case 19: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_r$12;
			/* } */ case 10:
			_i++;
		/* } */ $s = 6; continue; case 7:
		$s = -1; return new sliceType$25([succeeded, failed]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.splitAccordingToSemanticValidity }; } $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.c = c; $f.configs = configs; $f.failed = failed; $f.outerContext = outerContext; $f.p = p; $f.predicateEvaluationResult = predicateEvaluationResult; $f.succeeded = succeeded; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.splitAccordingToSemanticValidity = function(configs, outerContext) { return this.$val.splitAccordingToSemanticValidity(configs, outerContext); };
	ParserATNSimulator.ptr.prototype.evalSemanticContext = function(predPredictions, outerContext, complete) {
		var _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, complete, i, outerContext, p, pair, predPredictions, predicateEvaluationResult, predictions, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; complete = $f.complete; i = $f.i; outerContext = $f.outerContext; p = $f.p; pair = $f.pair; predPredictions = $f.predPredictions; predicateEvaluationResult = $f.predicateEvaluationResult; predictions = $f.predictions; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		predictions = NewBitSet();
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < predPredictions.$length)) { break; } */ if(!(i < predPredictions.$length)) { $s = 2; continue; }
			pair = ((i < 0 || i >= predPredictions.$length) ? ($throwRuntimeError("index out of range"), undefined) : predPredictions.$array[predPredictions.$offset + i]);
			/* */ if ($interfaceIsEqual(pair.pred, $pkg.SemanticContextNone)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($interfaceIsEqual(pair.pred, $pkg.SemanticContextNone)) { */ case 3:
				predictions.add(pair.alt);
				if (!complete) {
					/* break; */ $s = 2; continue;
				}
				i = i + (1) >> 0;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_r$2 = pair.pred.evaluate(p.parser, outerContext); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			predicateEvaluationResult = _r$2;
			/* */ if ($pkg.ParserATNSimulatorDebug || $pkg.ParserATNSimulatorDFADebug) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ($pkg.ParserATNSimulatorDebug || $pkg.ParserATNSimulatorDFADebug) { */ case 6:
				_r$3 = pair.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$4 = fmt.Sprint(new sliceType$8([new $Bool(predicateEvaluationResult)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$5 = fmt.Println(new sliceType$8([new $String("eval pred " + _r$3 + "=" + _r$4)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
			/* } */ case 7:
			/* */ if (predicateEvaluationResult) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (predicateEvaluationResult) { */ case 11:
				/* */ if ($pkg.ParserATNSimulatorDebug || $pkg.ParserATNSimulatorDFADebug) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ($pkg.ParserATNSimulatorDebug || $pkg.ParserATNSimulatorDFADebug) { */ case 13:
					_r$6 = fmt.Sprint(new sliceType$8([new $Int(pair.alt)])); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = fmt.Println(new sliceType$8([new $String("PREDICT " + _r$6)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_r$7;
				/* } */ case 14:
				predictions.add(pair.alt);
				if (!complete) {
					/* break; */ $s = 2; continue;
				}
			/* } */ case 12:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return predictions;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.evalSemanticContext }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.complete = complete; $f.i = i; $f.outerContext = outerContext; $f.p = p; $f.pair = pair; $f.predPredictions = predPredictions; $f.predicateEvaluationResult = predicateEvaluationResult; $f.predictions = predictions; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.evalSemanticContext = function(predPredictions, outerContext, complete) { return this.$val.evalSemanticContext(predPredictions, outerContext, complete); };
	ParserATNSimulator.ptr.prototype.closure = function(config, configs, closureBusy, collectPredicates, fullCtx, treatEOFAsEpsilon) {
		var closureBusy, collectPredicates, config, configs, fullCtx, initialDepth, p, treatEOFAsEpsilon, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; closureBusy = $f.closureBusy; collectPredicates = $f.collectPredicates; config = $f.config; configs = $f.configs; fullCtx = $f.fullCtx; initialDepth = $f.initialDepth; p = $f.p; treatEOFAsEpsilon = $f.treatEOFAsEpsilon; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		initialDepth = 0;
		$r = p.closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, initialDepth, treatEOFAsEpsilon); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.closure }; } $f.closureBusy = closureBusy; $f.collectPredicates = collectPredicates; $f.config = config; $f.configs = configs; $f.fullCtx = fullCtx; $f.initialDepth = initialDepth; $f.p = p; $f.treatEOFAsEpsilon = treatEOFAsEpsilon; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.closure = function(config, configs, closureBusy, collectPredicates, fullCtx, treatEOFAsEpsilon) { return this.$val.closure(config, configs, closureBusy, collectPredicates, fullCtx, treatEOFAsEpsilon); };
	ParserATNSimulator.ptr.prototype.closureCheckingStopState = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEOFAsEpsilon) {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, c, closureBusy, collectPredicates, config, configs, depth, fullCtx, i, newContext, ok, p, returnState, treatEOFAsEpsilon, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; c = $f.c; closureBusy = $f.closureBusy; collectPredicates = $f.collectPredicates; config = $f.config; configs = $f.configs; depth = $f.depth; fullCtx = $f.fullCtx; i = $f.i; newContext = $f.newContext; ok = $f.ok; p = $f.p; returnState = $f.returnState; treatEOFAsEpsilon = $f.treatEOFAsEpsilon; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.ParserATNSimulatorDebug) { */ case 1:
			_r$2 = config.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = fmt.Println(new sliceType$8([new $String("closure(" + _r$2 + ")")])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_r$4 = configs.String(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = fmt.Println(new sliceType$8([new $String("configs(" + _r$4 + ")")])); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			_r$6 = config.GetReachesIntoOuterContext(); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			/* */ if (_r$6 > 50) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_r$6 > 50) { */ case 7:
				$panic(new $String("problem"));
			/* } */ case 8:
		/* } */ case 2:
		_r$7 = config.GetState(); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$7, ptrType$5, true);
		ok = _tuple[1];
		/* */ if (ok) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (ok) { */ case 11:
			_r$8 = config.GetContext(); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$9 = _r$8.isEmpty(); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			/* */ if (!_r$9) { $s = 13; continue; }
			/* */ if (fullCtx) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!_r$9) { */ case 13:
				i = 0;
				/* while (true) { */ case 19:
					_r$10 = config.GetContext(); /* */ $s = 21; case 21: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_r$11 = _r$10.length(); /* */ $s = 22; case 22: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					/* if (!(i < _r$11)) { break; } */ if(!(i < _r$11)) { $s = 20; continue; }
					_r$12 = config.GetContext(); /* */ $s = 25; case 25: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_r$13 = _r$12.getReturnState(i); /* */ $s = 26; case 26: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					/* */ if (_r$13 === 2147483647) { $s = 23; continue; }
					/* */ $s = 24; continue;
					/* if (_r$13 === 2147483647) { */ case 23:
						/* */ if (fullCtx) { $s = 27; continue; }
						/* */ $s = 28; continue;
						/* if (fullCtx) { */ case 27:
							_arg = config;
							_r$14 = config.GetState(); /* */ $s = 30; case 30: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
							_arg$1 = _r$14;
							_arg$2 = $pkg.BasePredictionContextEMPTY;
							_r$15 = NewBaseATNConfig1(_arg, _arg$1, _arg$2); /* */ $s = 31; case 31: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
							_r$16 = configs.Add(_r$15, p.mergeCache); /* */ $s = 32; case 32: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
							_r$16;
							i = i + (1) >> 0;
							/* continue; */ $s = 19; continue;
							$s = 29; continue;
						/* } else { */ case 28:
							/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 33; continue; }
							/* */ $s = 34; continue;
							/* if ($pkg.ParserATNSimulatorDebug) { */ case 33:
								_r$17 = config.GetState(); /* */ $s = 35; case 35: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
								_r$18 = _r$17.GetRuleIndex(); /* */ $s = 36; case 36: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
								_r$19 = p.getRuleName(_r$18); /* */ $s = 37; case 37: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
								_r$20 = fmt.Println(new sliceType$8([new $String("FALLING off rule " + _r$19)])); /* */ $s = 38; case 38: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
								_r$20;
							/* } */ case 34:
							$r = p.closureWork(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEOFAsEpsilon); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 29:
						i = i + (1) >> 0;
						/* continue; */ $s = 19; continue;
					/* } */ case 24:
					_r$21 = config.GetContext(); /* */ $s = 40; case 40: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
					_r$22 = _r$21.getReturnState(i); /* */ $s = 41; case 41: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					returnState = (x = p.BaseATNSimulator.atn.states, x$1 = _r$22, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
					_r$23 = config.GetContext(); /* */ $s = 42; case 42: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
					_r$24 = _r$23.GetParent(i); /* */ $s = 43; case 43: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
					newContext = _r$24;
					_arg$3 = returnState;
					_r$25 = config.GetAlt(); /* */ $s = 44; case 44: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					_arg$4 = _r$25;
					_arg$5 = newContext;
					_r$26 = config.GetSemanticContext(); /* */ $s = 45; case 45: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
					_arg$6 = _r$26;
					_r$27 = NewBaseATNConfig5(_arg$3, _arg$4, _arg$5, _arg$6); /* */ $s = 46; case 46: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					c = _r$27;
					_r$28 = config.GetReachesIntoOuterContext(); /* */ $s = 47; case 47: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
					$r = c.SetReachesIntoOuterContext(_r$28); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1 >> 0, treatEOFAsEpsilon); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i = i + (1) >> 0;
				/* } */ $s = 19; continue; case 20:
				$s = -1; return;
			/* } else if (fullCtx) { */ case 14:
				_r$29 = configs.Add(config, p.mergeCache); /* */ $s = 50; case 50: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
				_r$29;
				$s = -1; return;
			/* } else { */ case 15:
				/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 51; continue; }
				/* */ $s = 52; continue;
				/* if ($pkg.ParserATNSimulatorDebug) { */ case 51:
					_r$30 = config.GetState(); /* */ $s = 53; case 53: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
					_r$31 = _r$30.GetRuleIndex(); /* */ $s = 54; case 54: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
					_r$32 = p.getRuleName(_r$31); /* */ $s = 55; case 55: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
					_r$33 = fmt.Println(new sliceType$8([new $String("FALLING off rule " + _r$32)])); /* */ $s = 56; case 56: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
					_r$33;
				/* } */ case 52:
			/* } */ case 16:
		/* } */ case 12:
		$r = p.closureWork(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEOFAsEpsilon); /* */ $s = 57; case 57: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.closureCheckingStopState }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.c = c; $f.closureBusy = closureBusy; $f.collectPredicates = collectPredicates; $f.config = config; $f.configs = configs; $f.depth = depth; $f.fullCtx = fullCtx; $f.i = i; $f.newContext = newContext; $f.ok = ok; $f.p = p; $f.returnState = returnState; $f.treatEOFAsEpsilon = treatEOFAsEpsilon; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.closureCheckingStopState = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEOFAsEpsilon) { return this.$val.closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEOFAsEpsilon); };
	ParserATNSimulator.ptr.prototype.closureWork = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEOFAsEpsilon) {
		var _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _v, c, ci, closureBusy, collectPredicates, config, configs, continueCollecting, depth, fullCtx, i, newDepth, ok, ok$1, ok$2, ok$3, p, state, t, treatEOFAsEpsilon, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _v = $f._v; c = $f.c; ci = $f.ci; closureBusy = $f.closureBusy; collectPredicates = $f.collectPredicates; config = $f.config; configs = $f.configs; continueCollecting = $f.continueCollecting; depth = $f.depth; fullCtx = $f.fullCtx; i = $f.i; newDepth = $f.newDepth; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; p = $f.p; state = $f.state; t = $f.t; treatEOFAsEpsilon = $f.treatEOFAsEpsilon; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = config.GetState(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		state = _r$2;
		_r$3 = state.GetEpsilonOnlyTransitions(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!_r$3) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!_r$3) { */ case 2:
			_r$4 = configs.Add(config, p.mergeCache); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 3:
		i = 0;
		/* while (true) { */ case 6:
			_r$5 = state.GetTransitions(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* if (!(i < _r$5.$length)) { break; } */ if(!(i < _r$5.$length)) { $s = 7; continue; }
			_r$6 = state.GetTransitions(); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			t = (x = _r$6, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			_tuple = $assertType(t, ptrType$54, true);
			ok = _tuple[1];
			continueCollecting = collectPredicates && !ok;
			_r$7 = p.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEOFAsEpsilon); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			c = _r$7;
			_tuple$1 = $assertType(c, ptrType$7, true);
			ci = _tuple$1[0];
			ok$1 = _tuple$1[1];
			/* */ if (ok$1 && !(ci === ptrType$7.nil)) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (ok$1 && !(ci === ptrType$7.nil)) { */ case 11:
				_r$8 = t.getIsEpsilon(); /* */ $s = 16; case 16: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				if (!(!_r$8)) { _v = false; $s = 15; continue s; }
				_r$9 = closureBusy.add(c); /* */ $s = 17; case 17: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_v = !($interfaceIsEqual(_r$9, c)); case 15:
				/* */ if (_v) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (_v) { */ case 13:
					i = i + (1) >> 0;
					/* continue; */ $s = 6; continue;
				/* } */ case 14:
				newDepth = depth;
				_r$10 = config.GetState(); /* */ $s = 18; case 18: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_tuple$2 = $assertType(_r$10, ptrType$5, true);
				ok$2 = _tuple$2[1];
				/* */ if (ok$2) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (ok$2) { */ case 19:
					_r$11 = closureBusy.add(c); /* */ $s = 24; case 24: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					/* */ if (!($interfaceIsEqual(_r$11, c))) { $s = 22; continue; }
					/* */ $s = 23; continue;
					/* if (!($interfaceIsEqual(_r$11, c))) { */ case 22:
						i = i + (1) >> 0;
						/* continue; */ $s = 6; continue;
					/* } */ case 23:
					/* */ if (!(p.dfa === ptrType$25.nil) && p.dfa.precedenceDfa) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (!(p.dfa === ptrType$25.nil) && p.dfa.precedenceDfa) { */ case 25:
						_r$12 = p.dfa.atnStartState.GetRuleIndex(); /* */ $s = 29; case 29: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						/* */ if ($assertType(t, ptrType$59).outermostPrecedenceReturn === _r$12) { $s = 27; continue; }
						/* */ $s = 28; continue;
						/* if ($assertType(t, ptrType$59).outermostPrecedenceReturn === _r$12) { */ case 27:
							$r = c.setPrecedenceFilterSuppressed(true); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 28:
					/* } */ case 26:
					_r$13 = c.GetReachesIntoOuterContext(); /* */ $s = 31; case 31: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					$r = c.SetReachesIntoOuterContext(_r$13 + 1 >> 0); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = configs.SetDipsIntoOuterContext(true); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					newDepth = newDepth - (1) >> 0;
					/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 34; continue; }
					/* */ $s = 35; continue;
					/* if ($pkg.ParserATNSimulatorDebug) { */ case 34:
						_r$14 = c.String(); /* */ $s = 36; case 36: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						_r$15 = fmt.Println(new sliceType$8([new $String("dips into outer ctx: " + _r$14)])); /* */ $s = 37; case 37: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						_r$15;
					/* } */ case 35:
					$s = 21; continue;
				/* } else { */ case 20:
					_tuple$3 = $assertType(t, ptrType$6, true);
					ok$3 = _tuple$3[1];
					if (ok$3) {
						if (newDepth >= 0) {
							newDepth = newDepth + (1) >> 0;
						}
					}
				/* } */ case 21:
				$r = p.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEOFAsEpsilon); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
			i = i + (1) >> 0;
		/* } */ $s = 6; continue; case 7:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.closureWork }; } $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._v = _v; $f.c = c; $f.ci = ci; $f.closureBusy = closureBusy; $f.collectPredicates = collectPredicates; $f.config = config; $f.configs = configs; $f.continueCollecting = continueCollecting; $f.depth = depth; $f.fullCtx = fullCtx; $f.i = i; $f.newDepth = newDepth; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.p = p; $f.state = state; $f.t = t; $f.treatEOFAsEpsilon = treatEOFAsEpsilon; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.closureWork = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEOFAsEpsilon) { return this.$val.closureWork(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEOFAsEpsilon); };
	ParserATNSimulator.ptr.prototype.getRuleName = function(index) {
		var _r$2, _r$3, index, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; index = $f.index; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (!($interfaceIsEqual(p.parser, $ifaceNil)) && index >= 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(p.parser, $ifaceNil)) && index >= 0) { */ case 1:
			_r$2 = p.parser.GetRuleNames(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return (x = _r$2, ((index < 0 || index >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + index]));
		/* } */ case 2:
		_r$3 = fmt.Sprint(new sliceType$8([new $Int(index)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return "<rule " + _r$3 + ">";
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.getRuleName }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.index = index; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.getRuleName = function(index) { return this.$val.getRuleName(index); };
	ParserATNSimulator.ptr.prototype.getEpsilonTarget = function(config, t, collectPredicates, inContext, fullCtx, treatEOFAsEpsilon) {
		var _1, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, collectPredicates, config, fullCtx, inContext, p, t, treatEOFAsEpsilon, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; collectPredicates = $f.collectPredicates; config = $f.config; fullCtx = $f.fullCtx; inContext = $f.inContext; p = $f.p; t = $f.t; treatEOFAsEpsilon = $f.treatEOFAsEpsilon; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_r$2 = t.getSerializationType(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_1 = _r$2;
			/* */ if (_1 === (3)) { $s = 3; continue; }
			/* */ if (_1 === (10)) { $s = 4; continue; }
			/* */ if (_1 === (4)) { $s = 5; continue; }
			/* */ if (_1 === (6)) { $s = 6; continue; }
			/* */ if (_1 === (1)) { $s = 7; continue; }
			/* */ if (_1 === (5)) { $s = 8; continue; }
			/* */ if (_1 === (2)) { $s = 9; continue; }
			/* */ if (_1 === (7)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (3)) { */ case 3:
				_r$3 = p.ruleTransition(config, $assertType(t, ptrType$6)); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$s = -1; return _r$3;
			/* } else if (_1 === (10)) { */ case 4:
				_r$4 = p.precedenceTransition(config, $assertType(t, ptrType$60), collectPredicates, inContext, fullCtx); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return _r$4;
			/* } else if (_1 === (4)) { */ case 5:
				_r$5 = p.predTransition(config, $assertType(t, ptrType$38), collectPredicates, inContext, fullCtx); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return _r$5;
			/* } else if (_1 === (6)) { */ case 6:
				_r$6 = p.actionTransition(config, $assertType(t, ptrType$54)); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$s = -1; return _r$6;
			/* } else if (_1 === (1)) { */ case 7:
				_arg = config;
				_r$7 = t.getTarget(); /* */ $s = 17; case 17: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_arg$1 = _r$7;
				_r$8 = NewBaseATNConfig4(_arg, _arg$1); /* */ $s = 18; case 18: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$s = -1; return _r$8;
			/* } else if (_1 === (5)) { */ case 8:
				/* */ if (treatEOFAsEpsilon) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (treatEOFAsEpsilon) { */ case 19:
					_r$9 = t.Matches(-1, 0, 1); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					/* */ if (_r$9) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (_r$9) { */ case 21:
						_arg$2 = config;
						_r$10 = t.getTarget(); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						_arg$3 = _r$10;
						_r$11 = NewBaseATNConfig4(_arg$2, _arg$3); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						$s = -1; return _r$11;
					/* } */ case 22:
				/* } */ case 20:
				$s = -1; return $ifaceNil;
			/* } else if (_1 === (2)) { */ case 9:
				/* */ if (treatEOFAsEpsilon) { $s = 26; continue; }
				/* */ $s = 27; continue;
				/* if (treatEOFAsEpsilon) { */ case 26:
					_r$12 = t.Matches(-1, 0, 1); /* */ $s = 30; case 30: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					/* */ if (_r$12) { $s = 28; continue; }
					/* */ $s = 29; continue;
					/* if (_r$12) { */ case 28:
						_arg$4 = config;
						_r$13 = t.getTarget(); /* */ $s = 31; case 31: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						_arg$5 = _r$13;
						_r$14 = NewBaseATNConfig4(_arg$4, _arg$5); /* */ $s = 32; case 32: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						$s = -1; return _r$14;
					/* } */ case 29:
				/* } */ case 27:
				$s = -1; return $ifaceNil;
			/* } else if (_1 === (7)) { */ case 10:
				/* */ if (treatEOFAsEpsilon) { $s = 33; continue; }
				/* */ $s = 34; continue;
				/* if (treatEOFAsEpsilon) { */ case 33:
					_r$15 = t.Matches(-1, 0, 1); /* */ $s = 37; case 37: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					/* */ if (_r$15) { $s = 35; continue; }
					/* */ $s = 36; continue;
					/* if (_r$15) { */ case 35:
						_arg$6 = config;
						_r$16 = t.getTarget(); /* */ $s = 38; case 38: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						_arg$7 = _r$16;
						_r$17 = NewBaseATNConfig4(_arg$6, _arg$7); /* */ $s = 39; case 39: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						$s = -1; return _r$17;
					/* } */ case 36:
				/* } */ case 34:
				$s = -1; return $ifaceNil;
			/* } else { */ case 11:
				$s = -1; return $ifaceNil;
			/* } */ case 12:
		case 1:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.getEpsilonTarget }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.collectPredicates = collectPredicates; $f.config = config; $f.fullCtx = fullCtx; $f.inContext = inContext; $f.p = p; $f.t = t; $f.treatEOFAsEpsilon = treatEOFAsEpsilon; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.getEpsilonTarget = function(config, t, collectPredicates, inContext, fullCtx, treatEOFAsEpsilon) { return this.$val.getEpsilonTarget(config, t, collectPredicates, inContext, fullCtx, treatEOFAsEpsilon); };
	ParserATNSimulator.ptr.prototype.actionTransition = function(config, t) {
		var _r$2, _r$3, config, p, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; config = $f.config; p = $f.p; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.ParserATNSimulatorDebug) { */ case 1:
			_r$2 = fmt.Println(new sliceType$8([new $String("ACTION edge " + strconv.Itoa(t.ruleIndex) + ":" + strconv.Itoa(t.actionIndex))])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ case 2:
		_r$3 = NewBaseATNConfig4(config, t.BaseTransition.getTarget()); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.actionTransition }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.config = config; $f.p = p; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.actionTransition = function(config, t) { return this.$val.actionTransition(config, t); };
	ParserATNSimulator.ptr.prototype.precedenceTransition = function(config, pt, collectPredicates, inContext, fullCtx) {
		var _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, c, collectPredicates, config, currentPosition, fullCtx, inContext, newSemCtx, p, predSucceeds, pt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; c = $f.c; collectPredicates = $f.collectPredicates; config = $f.config; currentPosition = $f.currentPosition; fullCtx = $f.fullCtx; inContext = $f.inContext; newSemCtx = $f.newSemCtx; p = $f.p; predSucceeds = $f.predSucceeds; pt = $f.pt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.ParserATNSimulatorDebug) { */ case 1:
			_r$2 = fmt.Sprint(new sliceType$8([new $Bool(collectPredicates)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = fmt.Println(new sliceType$8([new $String("PRED (collectPredicates=" + _r$2 + ") " + strconv.Itoa(pt.precedence) + ">=_p, ctx dependent=true")])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			/* */ if (!($interfaceIsEqual(p.parser, $ifaceNil))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!($interfaceIsEqual(p.parser, $ifaceNil))) { */ case 5:
				_r$4 = p.parser.GetRuleInvocationStack($ifaceNil); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$5 = fmt.Sprint(new sliceType$8([_r$4])); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = fmt.Println(new sliceType$8([new $String("context surrounding pred is " + _r$5)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
			/* } */ case 6:
		/* } */ case 2:
		c = ptrType$7.nil;
		/* */ if (collectPredicates && inContext) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (collectPredicates && inContext) { */ case 10:
			/* */ if (fullCtx) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (fullCtx) { */ case 13:
				_r$7 = p.input.Index(); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				currentPosition = _r$7;
				$r = p.input.Seek(p.startIndex); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$8 = pt.getPredicate().evaluate(p.parser, p.outerContext); /* */ $s = 18; case 18: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				predSucceeds = _r$8;
				$r = p.input.Seek(currentPosition); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (predSucceeds) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (predSucceeds) { */ case 20:
					_r$9 = NewBaseATNConfig4(config, pt.BaseAbstractPredicateTransition.BaseTransition.getTarget()); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					c = _r$9;
				/* } */ case 21:
				$s = 15; continue;
			/* } else { */ case 14:
				_r$10 = config.GetSemanticContext(); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$11 = SemanticContextandContext(_r$10, pt.getPredicate()); /* */ $s = 24; case 24: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				newSemCtx = _r$11;
				_r$12 = NewBaseATNConfig3(config, pt.BaseAbstractPredicateTransition.BaseTransition.getTarget(), newSemCtx); /* */ $s = 25; case 25: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				c = _r$12;
			/* } */ case 15:
			$s = 12; continue;
		/* } else { */ case 11:
			_r$13 = NewBaseATNConfig4(config, pt.BaseAbstractPredicateTransition.BaseTransition.getTarget()); /* */ $s = 26; case 26: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			c = _r$13;
		/* } */ case 12:
		/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 27; continue; }
		/* */ $s = 28; continue;
		/* if ($pkg.ParserATNSimulatorDebug) { */ case 27:
			_r$14 = c.String(); /* */ $s = 29; case 29: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = fmt.Println(new sliceType$8([new $String("config from pred transition=" + _r$14)])); /* */ $s = 30; case 30: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$15;
		/* } */ case 28:
		$s = -1; return c;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.precedenceTransition }; } $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.c = c; $f.collectPredicates = collectPredicates; $f.config = config; $f.currentPosition = currentPosition; $f.fullCtx = fullCtx; $f.inContext = inContext; $f.newSemCtx = newSemCtx; $f.p = p; $f.predSucceeds = predSucceeds; $f.pt = pt; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.precedenceTransition = function(config, pt, collectPredicates, inContext, fullCtx) { return this.$val.precedenceTransition(config, pt, collectPredicates, inContext, fullCtx); };
	ParserATNSimulator.ptr.prototype.predTransition = function(config, pt, collectPredicates, inContext, fullCtx) {
		var _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, c, collectPredicates, config, currentPosition, fullCtx, inContext, newSemCtx, p, predSucceeds, pt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; c = $f.c; collectPredicates = $f.collectPredicates; config = $f.config; currentPosition = $f.currentPosition; fullCtx = $f.fullCtx; inContext = $f.inContext; newSemCtx = $f.newSemCtx; p = $f.p; predSucceeds = $f.predSucceeds; pt = $f.pt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.ParserATNSimulatorDebug) { */ case 1:
			_r$2 = fmt.Sprint(new sliceType$8([new $Bool(collectPredicates)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = fmt.Sprint(new sliceType$8([new $Bool(pt.isCtxDependent)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = fmt.Println(new sliceType$8([new $String("PRED (collectPredicates=" + _r$2 + ") " + strconv.Itoa(pt.ruleIndex) + ":" + strconv.Itoa(pt.predIndex) + ", ctx dependent=" + _r$3)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			/* */ if (!($interfaceIsEqual(p.parser, $ifaceNil))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!($interfaceIsEqual(p.parser, $ifaceNil))) { */ case 6:
				_r$5 = p.parser.GetRuleInvocationStack($ifaceNil); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = fmt.Sprint(new sliceType$8([_r$5])); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$7 = fmt.Println(new sliceType$8([new $String("context surrounding pred is " + _r$6)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
			/* } */ case 7:
		/* } */ case 2:
		c = ptrType$7.nil;
		/* */ if (collectPredicates && ((pt.isCtxDependent && inContext) || !pt.isCtxDependent)) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (collectPredicates && ((pt.isCtxDependent && inContext) || !pt.isCtxDependent)) { */ case 11:
			/* */ if (fullCtx) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (fullCtx) { */ case 14:
				_r$8 = p.input.Index(); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				currentPosition = _r$8;
				$r = p.input.Seek(p.startIndex); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$9 = pt.getPredicate().evaluate(p.parser, p.outerContext); /* */ $s = 19; case 19: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				predSucceeds = _r$9;
				$r = p.input.Seek(currentPosition); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (predSucceeds) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (predSucceeds) { */ case 21:
					_r$10 = NewBaseATNConfig4(config, pt.BaseAbstractPredicateTransition.BaseTransition.getTarget()); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					c = _r$10;
				/* } */ case 22:
				$s = 16; continue;
			/* } else { */ case 15:
				_r$11 = config.GetSemanticContext(); /* */ $s = 24; case 24: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$12 = SemanticContextandContext(_r$11, pt.getPredicate()); /* */ $s = 25; case 25: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				newSemCtx = _r$12;
				_r$13 = NewBaseATNConfig3(config, pt.BaseAbstractPredicateTransition.BaseTransition.getTarget(), newSemCtx); /* */ $s = 26; case 26: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				c = _r$13;
			/* } */ case 16:
			$s = 13; continue;
		/* } else { */ case 12:
			_r$14 = NewBaseATNConfig4(config, pt.BaseAbstractPredicateTransition.BaseTransition.getTarget()); /* */ $s = 27; case 27: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			c = _r$14;
		/* } */ case 13:
		/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 28; continue; }
		/* */ $s = 29; continue;
		/* if ($pkg.ParserATNSimulatorDebug) { */ case 28:
			_r$15 = c.String(); /* */ $s = 30; case 30: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = fmt.Println(new sliceType$8([new $String("config from pred transition=" + _r$15)])); /* */ $s = 31; case 31: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_r$16;
		/* } */ case 29:
		$s = -1; return c;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.predTransition }; } $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.c = c; $f.collectPredicates = collectPredicates; $f.config = config; $f.currentPosition = currentPosition; $f.fullCtx = fullCtx; $f.inContext = inContext; $f.newSemCtx = newSemCtx; $f.p = p; $f.predSucceeds = predSucceeds; $f.pt = pt; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.predTransition = function(config, pt, collectPredicates, inContext, fullCtx) { return this.$val.predTransition(config, pt, collectPredicates, inContext, fullCtx); };
	ParserATNSimulator.ptr.prototype.ruleTransition = function(config, t) {
		var _arg, _arg$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, config, newContext, p, returnState, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; config = $f.config; newContext = $f.newContext; p = $f.p; returnState = $f.returnState; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.ParserATNSimulatorDebug) { */ case 1:
			_r$2 = t.BaseTransition.getTarget().GetRuleIndex(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = p.getRuleName(_r$2); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = config.GetContext(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = _r$4.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = fmt.Println(new sliceType$8([new $String("CALL rule " + _r$3 + ", ctx=" + _r$5)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
		/* } */ case 2:
		returnState = t.followState;
		_r$7 = config.GetContext(); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_arg = _r$7;
		_r$8 = returnState.GetStateNumber(); /* */ $s = 9; case 9: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_arg$1 = _r$8;
		_r$9 = SingletonBasePredictionContextCreate(_arg, _arg$1); /* */ $s = 10; case 10: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		newContext = _r$9;
		_r$10 = NewBaseATNConfig1(config, t.BaseTransition.getTarget(), newContext); /* */ $s = 11; case 11: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		$s = -1; return _r$10;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.ruleTransition }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.config = config; $f.newContext = newContext; $f.p = p; $f.returnState = returnState; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.ruleTransition = function(config, t) { return this.$val.ruleTransition(config, t); };
	ParserATNSimulator.ptr.prototype.getConflictingAlts = function(configs) {
		var _r$2, altsets, configs, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; altsets = $f.altsets; configs = $f.configs; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = PredictionModegetConflictingAltSubsets(configs); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		altsets = _r$2;
		$s = -1; return PredictionModeGetAlts(altsets);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.getConflictingAlts }; } $f._r$2 = _r$2; $f.altsets = altsets; $f.configs = configs; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.getConflictingAlts = function(configs) { return this.$val.getConflictingAlts(configs); };
	ParserATNSimulator.ptr.prototype.getConflictingAltsOrUniqueAlt = function(configs) {
		var _r$2, _r$3, _r$4, configs, conflictingAlts, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; configs = $f.configs; conflictingAlts = $f.conflictingAlts; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		conflictingAlts = ptrType$11.nil;
		_r$2 = configs.GetUniqueAlt(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (!((_r$2 === $pkg.ATNInvalidAltNumber))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r$2 === $pkg.ATNInvalidAltNumber))) { */ case 1:
			conflictingAlts = NewBitSet();
			_r$3 = configs.GetUniqueAlt(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$r = conflictingAlts.add(_r$3); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			_r$4 = configs.GetConflictingAlts(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			conflictingAlts = _r$4;
		/* } */ case 3:
		$s = -1; return conflictingAlts;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.getConflictingAltsOrUniqueAlt }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.configs = configs; $f.conflictingAlts = conflictingAlts; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.getConflictingAltsOrUniqueAlt = function(configs) { return this.$val.getConflictingAltsOrUniqueAlt(configs); };
	ParserATNSimulator.ptr.prototype.GetTokenName = function(t) {
		var _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _v, p, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _v = $f._v; p = $f.p; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (t === -1) {
			$s = -1; return "EOF";
		}
		if (!(!($interfaceIsEqual(p.parser, $ifaceNil)))) { _v = false; $s = 3; continue s; }
		_r$2 = p.parser.GetLiteralNames(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v = !(_r$2 === sliceType.nil); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			_r$3 = p.parser.GetLiteralNames(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (t >= _r$3.$length) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (t >= _r$3.$length) { */ case 5:
				_r$4 = p.parser.GetLiteralNames(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$5 = strings.Join(_r$4, ","); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = fmt.Println(new sliceType$8([new $String(strconv.Itoa(t) + " ttype out of range: " + _r$5)])); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				$s = 7; continue;
			/* } else { */ case 6:
				_r$7 = p.parser.GetLiteralNames(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$s = -1; return (x = _r$7, ((t < 0 || t >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + t])) + "<" + strconv.Itoa(t) + ">";
			/* } */ case 7:
		/* } */ case 2:
		$s = -1; return strconv.Itoa(t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.GetTokenName }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._v = _v; $f.p = p; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.GetTokenName = function(t) { return this.$val.GetTokenName(t); };
	ParserATNSimulator.ptr.prototype.getLookaheadName = function(input) {
		var _r$2, _r$3, input, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; input = $f.input; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = input.LA(1); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = p.GetTokenName(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.getLookaheadName }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.input = input; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.getLookaheadName = function(input) { return this.$val.getLookaheadName(input); };
	ParserATNSimulator.ptr.prototype.noViableAlt = function(input, outerContext, configs, startIndex) {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _r$2, _r$3, _r$4, configs, input, outerContext, p, startIndex, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; configs = $f.configs; input = $f.input; outerContext = $f.outerContext; p = $f.p; startIndex = $f.startIndex; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_arg = p.parser;
		_arg$1 = input;
		_r$2 = input.Get(startIndex); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$2 = _r$2;
		_r$3 = input.LT(1); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$3 = _r$3;
		_arg$4 = configs;
		_arg$5 = outerContext;
		_r$4 = NewNoViableAltException(_arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.noViableAlt }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.configs = configs; $f.input = input; $f.outerContext = outerContext; $f.p = p; $f.startIndex = startIndex; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.noViableAlt = function(input, outerContext, configs, startIndex) { return this.$val.noViableAlt(input, outerContext, configs, startIndex); };
	ParserATNSimulator.ptr.prototype.getUniqueAlt = function(configs) {
		var _i, _r$2, _r$3, _r$4, _ref, alt, c, configs, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; alt = $f.alt; c = $f.c; configs = $f.configs; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		alt = $pkg.ATNInvalidAltNumber;
		_r$2 = configs.GetItems(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_ref = _r$2;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (alt === $pkg.ATNInvalidAltNumber) { $s = 4; continue; }
			_r$3 = c.GetAlt(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!((_r$3 === alt))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (alt === $pkg.ATNInvalidAltNumber) { */ case 4:
				_r$4 = c.GetAlt(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				alt = _r$4;
				$s = 6; continue;
			/* } else if (!((_r$3 === alt))) { */ case 5:
				$s = -1; return $pkg.ATNInvalidAltNumber;
			/* } */ case 6:
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return alt;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.getUniqueAlt }; } $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.alt = alt; $f.c = c; $f.configs = configs; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.getUniqueAlt = function(configs) { return this.$val.getUniqueAlt(configs); };
	ParserATNSimulator.ptr.prototype.addDFAEdge = function(dfa, from, t, to) {
		var _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, dfa, from, names, p, t, to, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; dfa = $f.dfa; from = $f.from; names = $f.names; p = $f.p; t = $f.t; to = $f.to; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.ParserATNSimulatorDebug) { */ case 1:
			_r$2 = from.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = to.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = p.GetTokenName(t); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = fmt.Println(new sliceType$8([new $String("EDGE " + _r$2 + " -> " + _r$3 + " upon " + _r$4)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 2:
		if (to === ptrType$30.nil) {
			$s = -1; return ptrType$30.nil;
		}
		_r$6 = p.addDFAState(dfa, to); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		to = _r$6;
		if (from === ptrType$30.nil || t < -1 || t > p.BaseATNSimulator.atn.maxTokenType) {
			$s = -1; return to;
		}
		if (from.edges === sliceType$19.nil) {
			from.edges = $makeSlice(sliceType$19, ((p.BaseATNSimulator.atn.maxTokenType + 1 >> 0) + 1 >> 0));
		}
		(x = from.edges, x$1 = t + 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = to));
		/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ($pkg.ParserATNSimulatorDebug) { */ case 8:
			names = sliceType.nil;
			/* */ if (!($interfaceIsEqual(p.parser, $ifaceNil))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!($interfaceIsEqual(p.parser, $ifaceNil))) { */ case 10:
				_r$7 = p.parser.GetLiteralNames(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				names = _r$7;
			/* } */ case 11:
			_r$8 = dfa.String(names, sliceType.nil); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$9 = fmt.Println(new sliceType$8([new $String("DFA=\n" + _r$8)])); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
		/* } */ case 9:
		$s = -1; return to;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.addDFAEdge }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.dfa = dfa; $f.from = from; $f.names = names; $f.p = p; $f.t = t; $f.to = to; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.addDFAEdge = function(dfa, from, t, to) { return this.$val.addDFAEdge(dfa, from, t, to); };
	ParserATNSimulator.ptr.prototype.addDFAState = function(dfa, d) {
		var _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, d, dfa, existing, hash, ok, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; d = $f.d; dfa = $f.dfa; existing = $f.existing; hash = $f.hash; ok = $f.ok; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (d === $pkg.ATNSimulatorError) {
			$s = -1; return d;
		}
		_r$2 = d.hash(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		hash = _r$2;
		_r$3 = dfa.getState(hash); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		existing = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			$s = -1; return existing;
		}
		_r$4 = dfa.numStates(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		d.stateNumber = _r$4;
		_r$5 = d.configs.ReadOnly(); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		/* */ if (!_r$5) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!_r$5) { */ case 4:
			$r = d.configs.OptimizeConfigs(p.BaseATNSimulator); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = d.configs.SetReadOnly(true); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		$r = dfa.setState(hash, d); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if ($pkg.ParserATNSimulatorDebug) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if ($pkg.ParserATNSimulatorDebug) { */ case 10:
			_r$6 = d.String(); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = fmt.Println(new sliceType$8([new $String("adding NewDFA state: " + _r$6)])); /* */ $s = 13; case 13: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7;
		/* } */ case 11:
		$s = -1; return d;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.addDFAState }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f.d = d; $f.dfa = dfa; $f.existing = existing; $f.hash = hash; $f.ok = ok; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.addDFAState = function(dfa, d) { return this.$val.addDFAState(dfa, d); };
	ParserATNSimulator.ptr.prototype.ReportAttemptingFullContext = function(dfa, conflictingAlts, configs, startIndex, stopIndex) {
		var _r$2, _r$3, _r$4, _r$5, _r$6, configs, conflictingAlts, dfa, interval, p, startIndex, stopIndex, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; configs = $f.configs; conflictingAlts = $f.conflictingAlts; dfa = $f.dfa; interval = $f.interval; p = $f.p; startIndex = $f.startIndex; stopIndex = $f.stopIndex; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if ($pkg.ParserATNSimulatorDebug || $pkg.ParserATNSimulatorRetryDebug) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.ParserATNSimulatorDebug || $pkg.ParserATNSimulatorRetryDebug) { */ case 1:
			interval = NewInterval(startIndex, stopIndex + 1 >> 0);
			_r$2 = configs.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = p.parser.GetTokenStream(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.GetTextFromInterval(interval); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = fmt.Println(new sliceType$8([new $String("ReportAttemptingFullContext decision=" + strconv.Itoa(dfa.decision) + ":" + _r$2 + ", input=" + _r$4)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 2:
		/* */ if (!($interfaceIsEqual(p.parser, $ifaceNil))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!($interfaceIsEqual(p.parser, $ifaceNil))) { */ case 7:
			_r$6 = p.parser.GetErrorListenerDispatch(); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$r = _r$6.ReportAttemptingFullContext(p.parser, dfa, startIndex, stopIndex, conflictingAlts, configs); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.ReportAttemptingFullContext }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.configs = configs; $f.conflictingAlts = conflictingAlts; $f.dfa = dfa; $f.interval = interval; $f.p = p; $f.startIndex = startIndex; $f.stopIndex = stopIndex; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.ReportAttemptingFullContext = function(dfa, conflictingAlts, configs, startIndex, stopIndex) { return this.$val.ReportAttemptingFullContext(dfa, conflictingAlts, configs, startIndex, stopIndex); };
	ParserATNSimulator.ptr.prototype.ReportContextSensitivity = function(dfa, prediction, configs, startIndex, stopIndex) {
		var _r$2, _r$3, _r$4, _r$5, _r$6, configs, dfa, interval, p, prediction, startIndex, stopIndex, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; configs = $f.configs; dfa = $f.dfa; interval = $f.interval; p = $f.p; prediction = $f.prediction; startIndex = $f.startIndex; stopIndex = $f.stopIndex; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if ($pkg.ParserATNSimulatorDebug || $pkg.ParserATNSimulatorRetryDebug) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.ParserATNSimulatorDebug || $pkg.ParserATNSimulatorRetryDebug) { */ case 1:
			interval = NewInterval(startIndex, stopIndex + 1 >> 0);
			_r$2 = configs.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = p.parser.GetTokenStream(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.GetTextFromInterval(interval); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = fmt.Println(new sliceType$8([new $String("ReportContextSensitivity decision=" + strconv.Itoa(dfa.decision) + ":" + _r$2 + ", input=" + _r$4)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 2:
		/* */ if (!($interfaceIsEqual(p.parser, $ifaceNil))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!($interfaceIsEqual(p.parser, $ifaceNil))) { */ case 7:
			_r$6 = p.parser.GetErrorListenerDispatch(); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$r = _r$6.ReportContextSensitivity(p.parser, dfa, startIndex, stopIndex, prediction, configs); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.ReportContextSensitivity }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.configs = configs; $f.dfa = dfa; $f.interval = interval; $f.p = p; $f.prediction = prediction; $f.startIndex = startIndex; $f.stopIndex = stopIndex; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.ReportContextSensitivity = function(dfa, prediction, configs, startIndex, stopIndex) { return this.$val.ReportContextSensitivity(dfa, prediction, configs, startIndex, stopIndex); };
	ParserATNSimulator.ptr.prototype.ReportAmbiguity = function(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs) {
		var D, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, ambigAlts, configs, dfa, exact, interval, p, startIndex, stopIndex, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; D = $f.D; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; ambigAlts = $f.ambigAlts; configs = $f.configs; dfa = $f.dfa; exact = $f.exact; interval = $f.interval; p = $f.p; startIndex = $f.startIndex; stopIndex = $f.stopIndex; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if ($pkg.ParserATNSimulatorDebug || $pkg.ParserATNSimulatorRetryDebug) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.ParserATNSimulatorDebug || $pkg.ParserATNSimulatorRetryDebug) { */ case 1:
			interval = NewInterval(startIndex, stopIndex + 1 >> 0);
			_r$2 = ambigAlts.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = configs.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = p.parser.GetTokenStream(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = _r$4.GetTextFromInterval(interval); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = fmt.Println(new sliceType$8([new $String("ReportAmbiguity " + _r$2 + ":" + _r$3 + ", input=" + _r$5)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
		/* } */ case 2:
		/* */ if (!($interfaceIsEqual(p.parser, $ifaceNil))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!($interfaceIsEqual(p.parser, $ifaceNil))) { */ case 8:
			_r$7 = p.parser.GetErrorListenerDispatch(); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$r = _r$7.ReportAmbiguity(p.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParserATNSimulator.ptr.prototype.ReportAmbiguity }; } $f.D = D; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.ambigAlts = ambigAlts; $f.configs = configs; $f.dfa = dfa; $f.exact = exact; $f.interval = interval; $f.p = p; $f.startIndex = startIndex; $f.stopIndex = stopIndex; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParserATNSimulator.prototype.ReportAmbiguity = function(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs) { return this.$val.ReportAmbiguity(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs); };
	NewBaseParserRuleContext = function(parent, invokingStateNumber) {
		var invokingStateNumber, parent, prc;
		prc = new BaseParserRuleContext.ptr(ptrType$61.nil, $ifaceNil, $ifaceNil, $ifaceNil, sliceType$26.nil);
		prc.BaseRuleContext = NewBaseRuleContext(parent, invokingStateNumber);
		prc.BaseRuleContext.RuleIndex = -1;
		prc.children = sliceType$26.nil;
		prc.start = $ifaceNil;
		prc.stop = $ifaceNil;
		prc.exception = $ifaceNil;
		return prc;
	};
	$pkg.NewBaseParserRuleContext = NewBaseParserRuleContext;
	BaseParserRuleContext.ptr.prototype.SetException = function(e) {
		var e, prc;
		prc = this;
		prc.exception = e;
	};
	BaseParserRuleContext.prototype.SetException = function(e) { return this.$val.SetException(e); };
	BaseParserRuleContext.ptr.prototype.GetChildren = function() {
		var prc;
		prc = this;
		return prc.children;
	};
	BaseParserRuleContext.prototype.GetChildren = function() { return this.$val.GetChildren(); };
	BaseParserRuleContext.ptr.prototype.CopyFrom = function(ctx) {
		var ctx, prc;
		prc = this;
		prc.BaseRuleContext.parentCtx = ctx.BaseRuleContext.parentCtx;
		prc.BaseRuleContext.invokingState = ctx.BaseRuleContext.invokingState;
		prc.children = sliceType$26.nil;
		prc.start = ctx.start;
		prc.stop = ctx.stop;
	};
	BaseParserRuleContext.prototype.CopyFrom = function(ctx) { return this.$val.CopyFrom(ctx); };
	BaseParserRuleContext.ptr.prototype.GetText = function() {
		var _i, _r$2, _ref, child, prc, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _ref = $f._ref; child = $f.child; prc = $f.prc; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prc = this;
		if (prc.GetChildCount() === 0) {
			$s = -1; return "";
		}
		s = "";
		_ref = prc.children;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			child = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$2 = $assertType(child, ParseTree).GetText(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			s = s + (_r$2);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParserRuleContext.ptr.prototype.GetText }; } $f._i = _i; $f._r$2 = _r$2; $f._ref = _ref; $f.child = child; $f.prc = prc; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParserRuleContext.prototype.GetText = function() { return this.$val.GetText(); };
	BaseParserRuleContext.ptr.prototype.EnterRule = function(listener) {
		var listener, prc;
		prc = this;
	};
	BaseParserRuleContext.prototype.EnterRule = function(listener) { return this.$val.EnterRule(listener); };
	BaseParserRuleContext.ptr.prototype.ExitRule = function(listener) {
		var listener, prc;
		prc = this;
	};
	BaseParserRuleContext.prototype.ExitRule = function(listener) { return this.$val.ExitRule(listener); };
	BaseParserRuleContext.ptr.prototype.addTerminalNodeChild = function(child) {
		var child, prc;
		prc = this;
		if (prc.children === sliceType$26.nil) {
			prc.children = $makeSlice(sliceType$26, 0);
		}
		if ($interfaceIsEqual(child, $ifaceNil)) {
			$panic(new $String("Child may not be null"));
		}
		prc.children = $append(prc.children, child);
		return child;
	};
	BaseParserRuleContext.prototype.addTerminalNodeChild = function(child) { return this.$val.addTerminalNodeChild(child); };
	BaseParserRuleContext.ptr.prototype.AddChild = function(child) {
		var child, prc;
		prc = this;
		if (prc.children === sliceType$26.nil) {
			prc.children = $makeSlice(sliceType$26, 0);
		}
		if ($interfaceIsEqual(child, $ifaceNil)) {
			$panic(new $String("Child may not be null"));
		}
		prc.children = $append(prc.children, child);
		return child;
	};
	BaseParserRuleContext.prototype.AddChild = function(child) { return this.$val.AddChild(child); };
	BaseParserRuleContext.ptr.prototype.RemoveLastChild = function() {
		var prc;
		prc = this;
		if (!(prc.children === sliceType$26.nil) && prc.children.$length > 0) {
			prc.children = $subslice(prc.children, 0, (prc.children.$length - 1 >> 0));
		}
	};
	BaseParserRuleContext.prototype.RemoveLastChild = function() { return this.$val.RemoveLastChild(); };
	BaseParserRuleContext.ptr.prototype.AddTokenNode = function(token) {
		var node, prc, token;
		prc = this;
		node = NewTerminalNodeImpl(token);
		prc.addTerminalNodeChild(node);
		node.parentCtx = prc;
		return node;
	};
	BaseParserRuleContext.prototype.AddTokenNode = function(token) { return this.$val.AddTokenNode(token); };
	BaseParserRuleContext.ptr.prototype.AddErrorNode = function(badToken) {
		var badToken, node, prc;
		prc = this;
		node = NewErrorNodeImpl(badToken);
		prc.addTerminalNodeChild(node);
		node.TerminalNodeImpl.parentCtx = prc;
		return node;
	};
	BaseParserRuleContext.prototype.AddErrorNode = function(badToken) { return this.$val.AddErrorNode(badToken); };
	BaseParserRuleContext.ptr.prototype.GetChild = function(i) {
		var i, prc, x;
		prc = this;
		if (!(prc.children === sliceType$26.nil) && prc.children.$length >= i) {
			return (x = prc.children, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		}
		return $ifaceNil;
	};
	BaseParserRuleContext.prototype.GetChild = function(i) { return this.$val.GetChild(i); };
	BaseParserRuleContext.ptr.prototype.GetChildOfType = function(i, childType) {
		var child, childType, i, j, prc, x;
		prc = this;
		if ($interfaceIsEqual(childType, $ifaceNil)) {
			return $assertType(prc.GetChild(i), RuleContext);
		}
		j = 0;
		while (true) {
			if (!(j < prc.children.$length)) { break; }
			child = (x = prc.children, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
			if ($interfaceIsEqual(reflect.TypeOf(child), childType)) {
				if (i === 0) {
					return $assertType(child, RuleContext);
				}
				i = i - (1) >> 0;
			}
			j = j + (1) >> 0;
		}
		return $ifaceNil;
	};
	BaseParserRuleContext.prototype.GetChildOfType = function(i, childType) { return this.$val.GetChildOfType(i, childType); };
	BaseParserRuleContext.ptr.prototype.ToStringTree = function(ruleNames, recog) {
		var _r$2, prc, recog, ruleNames, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; prc = $f.prc; recog = $f.recog; ruleNames = $f.ruleNames; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prc = this;
		_r$2 = TreesStringTree(prc, ruleNames, recog); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParserRuleContext.ptr.prototype.ToStringTree }; } $f._r$2 = _r$2; $f.prc = prc; $f.recog = recog; $f.ruleNames = ruleNames; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParserRuleContext.prototype.ToStringTree = function(ruleNames, recog) { return this.$val.ToStringTree(ruleNames, recog); };
	BaseParserRuleContext.ptr.prototype.GetRuleContext = function() {
		var prc;
		prc = this;
		return prc;
	};
	BaseParserRuleContext.prototype.GetRuleContext = function() { return this.$val.GetRuleContext(); };
	BaseParserRuleContext.ptr.prototype.Accept = function(visitor) {
		var _r$2, prc, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; prc = $f.prc; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prc = this;
		_r$2 = visitor.VisitChildren(prc); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParserRuleContext.ptr.prototype.Accept }; } $f._r$2 = _r$2; $f.prc = prc; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParserRuleContext.prototype.Accept = function(visitor) { return this.$val.Accept(visitor); };
	BaseParserRuleContext.ptr.prototype.SetStart = function(t) {
		var prc, t;
		prc = this;
		prc.start = t;
	};
	BaseParserRuleContext.prototype.SetStart = function(t) { return this.$val.SetStart(t); };
	BaseParserRuleContext.ptr.prototype.GetStart = function() {
		var prc;
		prc = this;
		return prc.start;
	};
	BaseParserRuleContext.prototype.GetStart = function() { return this.$val.GetStart(); };
	BaseParserRuleContext.ptr.prototype.SetStop = function(t) {
		var prc, t;
		prc = this;
		prc.stop = t;
	};
	BaseParserRuleContext.prototype.SetStop = function(t) { return this.$val.SetStop(t); };
	BaseParserRuleContext.ptr.prototype.GetStop = function() {
		var prc;
		prc = this;
		return prc.stop;
	};
	BaseParserRuleContext.prototype.GetStop = function() { return this.$val.GetStop(); };
	BaseParserRuleContext.ptr.prototype.GetToken = function(ttype, i) {
		var _r$2, _r$3, _tuple, c2, child, i, j, ok, prc, ttype, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; c2 = $f.c2; child = $f.child; i = $f.i; j = $f.j; ok = $f.ok; prc = $f.prc; ttype = $f.ttype; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prc = this;
		j = 0;
		/* while (true) { */ case 1:
			/* if (!(j < prc.children.$length)) { break; } */ if(!(j < prc.children.$length)) { $s = 2; continue; }
			child = (x = prc.children, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
			_tuple = $assertType(child, TerminalNode, true);
			c2 = _tuple[0];
			ok = _tuple[1];
			/* */ if (ok) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (ok) { */ case 3:
				_r$2 = c2.GetSymbol(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.GetTokenType(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === ttype) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_r$3 === ttype) { */ case 5:
					if (i === 0) {
						$s = -1; return c2;
					}
					i = i - (1) >> 0;
				/* } */ case 6:
			/* } */ case 4:
			j = j + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParserRuleContext.ptr.prototype.GetToken }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.c2 = c2; $f.child = child; $f.i = i; $f.j = j; $f.ok = ok; $f.prc = prc; $f.ttype = ttype; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParserRuleContext.prototype.GetToken = function(ttype, i) { return this.$val.GetToken(ttype, i); };
	BaseParserRuleContext.ptr.prototype.GetTokens = function(ttype) {
		var _r$2, _r$3, _tuple, child, j, ok, prc, tchild, tokens, ttype, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; child = $f.child; j = $f.j; ok = $f.ok; prc = $f.prc; tchild = $f.tchild; tokens = $f.tokens; ttype = $f.ttype; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prc = this;
		if (prc.children === sliceType$26.nil) {
			$s = -1; return $makeSlice(sliceType$27, 0);
		}
		tokens = $makeSlice(sliceType$27, 0);
		j = 0;
		/* while (true) { */ case 1:
			/* if (!(j < prc.children.$length)) { break; } */ if(!(j < prc.children.$length)) { $s = 2; continue; }
			child = (x = prc.children, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
			_tuple = $assertType(child, TerminalNode, true);
			tchild = _tuple[0];
			ok = _tuple[1];
			/* */ if (ok) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (ok) { */ case 3:
				_r$2 = tchild.GetSymbol(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.GetTokenType(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === ttype) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_r$3 === ttype) { */ case 5:
					tokens = $append(tokens, tchild);
				/* } */ case 6:
			/* } */ case 4:
			j = j + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return tokens;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParserRuleContext.ptr.prototype.GetTokens }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.child = child; $f.j = j; $f.ok = ok; $f.prc = prc; $f.tchild = tchild; $f.tokens = tokens; $f.ttype = ttype; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParserRuleContext.prototype.GetTokens = function(ttype) { return this.$val.GetTokens(ttype); };
	BaseParserRuleContext.ptr.prototype.GetPayload = function() {
		var prc;
		prc = this;
		return prc;
	};
	BaseParserRuleContext.prototype.GetPayload = function() { return this.$val.GetPayload(); };
	BaseParserRuleContext.ptr.prototype.getChild = function(ctxType, i) {
		var _i, _r$2, _ref, childType, ctxType, i, j, o, prc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _ref = $f._ref; childType = $f.childType; ctxType = $f.ctxType; i = $f.i; j = $f.j; o = $f.o; prc = $f.prc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prc = this;
		if (prc.children === sliceType$26.nil || i < 0 || i >= prc.children.$length) {
			$s = -1; return $ifaceNil;
		}
		j = -1;
		_ref = prc.children;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			o = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			childType = reflect.TypeOf(o);
			_r$2 = childType.Implements(ctxType); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r$2) { */ case 3:
				j = j + (1) >> 0;
				if (j === i) {
					$s = -1; return $assertType(o, RuleContext);
				}
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParserRuleContext.ptr.prototype.getChild }; } $f._i = _i; $f._r$2 = _r$2; $f._ref = _ref; $f.childType = childType; $f.ctxType = ctxType; $f.i = i; $f.j = j; $f.o = o; $f.prc = prc; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParserRuleContext.prototype.getChild = function(ctxType, i) { return this.$val.getChild(ctxType, i); };
	BaseParserRuleContext.ptr.prototype.GetTypedRuleContext = function(ctxType, i) {
		var _r$2, ctxType, i, prc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; ctxType = $f.ctxType; i = $f.i; prc = $f.prc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prc = this;
		_r$2 = prc.getChild(ctxType, i); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParserRuleContext.ptr.prototype.GetTypedRuleContext }; } $f._r$2 = _r$2; $f.ctxType = ctxType; $f.i = i; $f.prc = prc; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParserRuleContext.prototype.GetTypedRuleContext = function(ctxType, i) { return this.$val.GetTypedRuleContext(ctxType, i); };
	BaseParserRuleContext.ptr.prototype.GetTypedRuleContexts = function(ctxType) {
		var _i, _r$2, _ref, child, childType, contexts, ctxType, prc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _ref = $f._ref; child = $f.child; childType = $f.childType; contexts = $f.contexts; ctxType = $f.ctxType; prc = $f.prc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prc = this;
		if (prc.children === sliceType$26.nil) {
			$s = -1; return $makeSlice(sliceType$28, 0);
		}
		contexts = $makeSlice(sliceType$28, 0);
		_ref = prc.children;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			child = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			childType = reflect.TypeOf(child);
			_r$2 = childType.ConvertibleTo(ctxType); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r$2) { */ case 3:
				contexts = $append(contexts, $assertType(child, RuleContext));
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return contexts;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParserRuleContext.ptr.prototype.GetTypedRuleContexts }; } $f._i = _i; $f._r$2 = _r$2; $f._ref = _ref; $f.child = child; $f.childType = childType; $f.contexts = contexts; $f.ctxType = ctxType; $f.prc = prc; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParserRuleContext.prototype.GetTypedRuleContexts = function(ctxType) { return this.$val.GetTypedRuleContexts(ctxType); };
	BaseParserRuleContext.ptr.prototype.GetChildCount = function() {
		var prc;
		prc = this;
		if (prc.children === sliceType$26.nil) {
			return 0;
		}
		return prc.children.$length;
	};
	BaseParserRuleContext.prototype.GetChildCount = function() { return this.$val.GetChildCount(); };
	BaseParserRuleContext.ptr.prototype.GetSourceInterval = function() {
		var _arg, _arg$1, _r$2, _r$3, _r$4, prc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; prc = $f.prc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prc = this;
		if ($interfaceIsEqual(prc.start, $ifaceNil) || $interfaceIsEqual(prc.stop, $ifaceNil)) {
			$s = -1; return $pkg.TreeInvalidInterval;
		}
		_r$2 = prc.start.GetTokenIndex(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg = _r$2;
		_r$3 = prc.stop.GetTokenIndex(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$1 = _r$3;
		_r$4 = NewInterval(_arg, _arg$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParserRuleContext.ptr.prototype.GetSourceInterval }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.prc = prc; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParserRuleContext.prototype.GetSourceInterval = function() { return this.$val.GetSourceInterval(); };
	BaseParserRuleContext.ptr.prototype.String = function(ruleNames, stop) {
		var _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, _v$1, p, pi, prc, ri, ruleName, ruleNames, s, stop, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _v = $f._v; _v$1 = $f._v$1; p = $f.p; pi = $f.pi; prc = $f.prc; ri = $f.ri; ruleName = $f.ruleName; ruleNames = $f.ruleNames; s = $f.s; stop = $f.stop; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prc = this;
		p = prc;
		s = "[";
		/* while (true) { */ case 1:
			/* if (!(!($interfaceIsEqual(p, $ifaceNil)) && !($interfaceIsEqual(p, stop)))) { break; } */ if(!(!($interfaceIsEqual(p, $ifaceNil)) && !($interfaceIsEqual(p, stop)))) { $s = 2; continue; }
			/* */ if (ruleNames === sliceType.nil) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (ruleNames === sliceType.nil) { */ case 3:
				_r$2 = p.IsEmpty(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if (!_r$2) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (!_r$2) { */ case 6:
					_r$3 = p.GetInvokingState(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = strconv.Itoa(_r$3); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					s = s + (_r$4);
				/* } */ case 7:
				$s = 5; continue;
			/* } else { */ case 4:
				_r$5 = p.GetRuleIndex(); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				ri = _r$5;
				ruleName = "";
				if (ri >= 0 && ri < ruleNames.$length) {
					ruleName = ((ri < 0 || ri >= ruleNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : ruleNames.$array[ruleNames.$offset + ri]);
				} else {
					ruleName = strconv.Itoa(ri);
				}
				s = s + (ruleName);
			/* } */ case 5:
			_r$6 = p.GetParent(); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			if (!(!($interfaceIsEqual(_r$6, $ifaceNil)))) { _v = false; $s = 14; continue s; }
			if (!(ruleNames === sliceType.nil)) { _v$1 = true; $s = 16; continue s; }
			_r$7 = p.GetParent(); /* */ $s = 17; case 17: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$8 = $assertType(_r$7, ParserRuleContext).IsEmpty(); /* */ $s = 18; case 18: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_v$1 = !_r$8; case 16:
			_v = _v$1; case 14:
			/* */ if (_v) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_v) { */ case 12:
				s = s + (" ");
			/* } */ case 13:
			_r$9 = p.GetParent(); /* */ $s = 19; case 19: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			pi = _r$9;
			if (!($interfaceIsEqual(pi, $ifaceNil))) {
				p = $assertType(pi, ParserRuleContext);
			} else {
				p = $ifaceNil;
			}
		/* } */ $s = 1; continue; case 2:
		s = s + ("]");
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseParserRuleContext.ptr.prototype.String }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._v = _v; $f._v$1 = _v$1; $f.p = p; $f.pi = pi; $f.prc = prc; $f.ri = ri; $f.ruleName = ruleName; $f.ruleNames = ruleNames; $f.s = s; $f.stop = stop; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseParserRuleContext.prototype.String = function(ruleNames, stop) { return this.$val.String(ruleNames, stop); };
	NewBasePredictionContext = function(cachedHash) {
		var cachedHash, pc;
		pc = new BasePredictionContext.ptr(0);
		pc.cachedHash = cachedHash;
		return pc;
	};
	$pkg.NewBasePredictionContext = NewBasePredictionContext;
	BasePredictionContext.ptr.prototype.isEmpty = function() {
		var b;
		b = this;
		return false;
	};
	BasePredictionContext.prototype.isEmpty = function() { return this.$val.isEmpty(); };
	calculateHash = function(parent, returnState) {
		var _arg, _arg$1, _r$2, _r$3, h, parent, returnState, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$2 = $f._r$2; _r$3 = $f._r$3; h = $f.h; parent = $f.parent; returnState = $f.returnState; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = murmurInit(1);
		_arg = h;
		_r$2 = parent.hash(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$1 = _r$2;
		_r$3 = murmurUpdate(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		h = _r$3;
		h = murmurUpdate(h, returnState);
		$s = -1; return murmurFinish(h, 2);
		/* */ } return; } if ($f === undefined) { $f = { $blk: calculateHash }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.h = h; $f.parent = parent; $f.returnState = returnState; $f.$s = $s; $f.$r = $r; return $f;
	};
	calculateEmptyHash = function() {
		var h;
		h = murmurInit(1);
		return murmurFinish(h, 0);
	};
	NewPredictionContextCache = function() {
		var t;
		t = new PredictionContextCache.ptr(false);
		t.cache = {};
		return t;
	};
	$pkg.NewPredictionContextCache = NewPredictionContextCache;
	PredictionContextCache.ptr.prototype.add = function(ctx) {
		var _entry, _key, ctx, existing, p;
		p = this;
		if ($interfaceIsEqual(ctx, $pkg.BasePredictionContextEMPTY)) {
			return $pkg.BasePredictionContextEMPTY;
		}
		existing = (_entry = p.cache[PredictionContext.keyFor(ctx)], _entry !== undefined ? _entry.v : $ifaceNil);
		if (!($interfaceIsEqual(existing, $ifaceNil))) {
			return existing;
		}
		_key = ctx; (p.cache || $throwRuntimeError("assignment to entry in nil map"))[PredictionContext.keyFor(_key)] = { k: _key, v: ctx };
		return ctx;
	};
	PredictionContextCache.prototype.add = function(ctx) { return this.$val.add(ctx); };
	PredictionContextCache.ptr.prototype.Get = function(ctx) {
		var _entry, ctx, p;
		p = this;
		return (_entry = p.cache[PredictionContext.keyFor(ctx)], _entry !== undefined ? _entry.v : $ifaceNil);
	};
	PredictionContextCache.prototype.Get = function(ctx) { return this.$val.Get(ctx); };
	PredictionContextCache.ptr.prototype.length = function() {
		var p;
		p = this;
		return $keys(p.cache).length;
	};
	PredictionContextCache.prototype.length = function() { return this.$val.length(); };
	NewBaseSingletonPredictionContext = function(parent, returnState) {
		var _r$2, parent, returnState, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; parent = $f.parent; returnState = $f.returnState; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = new BaseSingletonPredictionContext.ptr(ptrType$63.nil, $ifaceNil, 0);
		s.BasePredictionContext = NewBasePredictionContext(37);
		/* */ if (!($interfaceIsEqual(parent, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(parent, $ifaceNil))) { */ case 1:
			_r$2 = calculateHash(parent, returnState); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			s.BasePredictionContext.cachedHash = _r$2;
			$s = 3; continue;
		/* } else { */ case 2:
			s.BasePredictionContext.cachedHash = calculateEmptyHash();
		/* } */ case 3:
		s.parentCtx = parent;
		s.returnState = returnState;
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewBaseSingletonPredictionContext }; } $f._r$2 = _r$2; $f.parent = parent; $f.returnState = returnState; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewBaseSingletonPredictionContext = NewBaseSingletonPredictionContext;
	SingletonBasePredictionContextCreate = function(parent, returnState) {
		var _r$2, parent, returnState, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; parent = $f.parent; returnState = $f.returnState; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ((returnState === 2147483647) && $interfaceIsEqual(parent, $ifaceNil)) {
			$s = -1; return $pkg.BasePredictionContextEMPTY;
		}
		_r$2 = NewBaseSingletonPredictionContext(parent, returnState); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SingletonBasePredictionContextCreate }; } $f._r$2 = _r$2; $f.parent = parent; $f.returnState = returnState; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SingletonBasePredictionContextCreate = SingletonBasePredictionContextCreate;
	BaseSingletonPredictionContext.ptr.prototype.length = function() {
		var b;
		b = this;
		return 1;
	};
	BaseSingletonPredictionContext.prototype.length = function() { return this.$val.length(); };
	BaseSingletonPredictionContext.ptr.prototype.GetParent = function(index) {
		var b, index;
		b = this;
		return b.parentCtx;
	};
	BaseSingletonPredictionContext.prototype.GetParent = function(index) { return this.$val.GetParent(index); };
	BaseSingletonPredictionContext.ptr.prototype.getReturnState = function(index) {
		var b, index;
		b = this;
		return b.returnState;
	};
	BaseSingletonPredictionContext.prototype.getReturnState = function(index) { return this.$val.getReturnState(index); };
	BaseSingletonPredictionContext.ptr.prototype.hasEmptyPath = function() {
		var b;
		b = this;
		return b.returnState === 2147483647;
	};
	BaseSingletonPredictionContext.prototype.hasEmptyPath = function() { return this.$val.hasEmptyPath(); };
	BaseSingletonPredictionContext.ptr.prototype.equals = function(other) {
		var _r$2, _r$3, _r$4, _r$5, _tuple, b, ok, other, otherP, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; b = $f.b; ok = $f.ok; other = $f.other; otherP = $f.otherP; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		/* */ if ($interfaceIsEqual(b, other)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(b, other)) { */ case 1:
			$s = -1; return true;
		/* } else { */ case 2:
			_tuple = $assertType(other, ptrType$64, true);
			ok = _tuple[1];
			/* */ if (!ok) { $s = 4; continue; }
			_r$2 = b.hash(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = other.hash(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!((_r$2 === _r$3))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!ok) { */ case 4:
				$s = -1; return false;
			/* } else if (!((_r$2 === _r$3))) { */ case 5:
				$s = -1; return false;
			/* } */ case 6:
		/* } */ case 3:
		otherP = $assertType(other, ptrType$64);
		_r$4 = other.getReturnState(0); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (!((b.returnState === _r$4))) { $s = 9; continue; }
		/* */ if ($interfaceIsEqual(b.parentCtx, $ifaceNil)) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (!((b.returnState === _r$4))) { */ case 9:
			$s = -1; return false;
		/* } else if ($interfaceIsEqual(b.parentCtx, $ifaceNil)) { */ case 10:
			$s = -1; return $interfaceIsEqual(otherP.parentCtx, $ifaceNil);
		/* } */ case 11:
		_r$5 = b.parentCtx.equals(otherP.parentCtx); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return _r$5;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseSingletonPredictionContext.ptr.prototype.equals }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.b = b; $f.ok = ok; $f.other = other; $f.otherP = otherP; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseSingletonPredictionContext.prototype.equals = function(other) { return this.$val.equals(other); };
	BaseSingletonPredictionContext.ptr.prototype.hash = function() {
		var _arg, _arg$1, _r$2, _r$3, b, h, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$2 = $f._r$2; _r$3 = $f._r$3; b = $f.b; h = $f.h; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		h = murmurInit(1);
		if ($interfaceIsEqual(b.parentCtx, $ifaceNil)) {
			$s = -1; return murmurFinish(h, 0);
		}
		_arg = h;
		_r$2 = b.parentCtx.hash(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$1 = _r$2;
		_r$3 = murmurUpdate(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		h = _r$3;
		h = murmurUpdate(h, b.returnState);
		$s = -1; return murmurFinish(h, 2);
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseSingletonPredictionContext.ptr.prototype.hash }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.b = b; $f.h = h; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseSingletonPredictionContext.prototype.hash = function() { return this.$val.hash(); };
	BaseSingletonPredictionContext.ptr.prototype.String = function() {
		var _r$2, b, up, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; b = $f.b; up = $f.up; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		up = "";
		/* */ if ($interfaceIsEqual(b.parentCtx, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(b.parentCtx, $ifaceNil)) { */ case 1:
			up = "";
			$s = 3; continue;
		/* } else { */ case 2:
			_r$2 = b.parentCtx.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			up = _r$2;
		/* } */ case 3:
		if (up.length === 0) {
			if (b.returnState === 2147483647) {
				$s = -1; return "$";
			}
			$s = -1; return strconv.Itoa(b.returnState);
		}
		$s = -1; return strconv.Itoa(b.returnState) + " " + up;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseSingletonPredictionContext.ptr.prototype.String }; } $f._r$2 = _r$2; $f.b = b; $f.up = up; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseSingletonPredictionContext.prototype.String = function() { return this.$val.String(); };
	NewEmptyPredictionContext = function() {
		var _r$2, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = new EmptyPredictionContext.ptr(ptrType$64.nil);
		_r$2 = NewBaseSingletonPredictionContext($ifaceNil, 2147483647); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p.BaseSingletonPredictionContext = _r$2;
		$s = -1; return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewEmptyPredictionContext }; } $f._r$2 = _r$2; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewEmptyPredictionContext = NewEmptyPredictionContext;
	EmptyPredictionContext.ptr.prototype.isEmpty = function() {
		var e;
		e = this;
		return true;
	};
	EmptyPredictionContext.prototype.isEmpty = function() { return this.$val.isEmpty(); };
	EmptyPredictionContext.ptr.prototype.GetParent = function(index) {
		var e, index;
		e = this;
		return $ifaceNil;
	};
	EmptyPredictionContext.prototype.GetParent = function(index) { return this.$val.GetParent(index); };
	EmptyPredictionContext.ptr.prototype.getReturnState = function(index) {
		var e, index;
		e = this;
		return e.BaseSingletonPredictionContext.returnState;
	};
	EmptyPredictionContext.prototype.getReturnState = function(index) { return this.$val.getReturnState(index); };
	EmptyPredictionContext.ptr.prototype.equals = function(other) {
		var e, other;
		e = this;
		return $interfaceIsEqual(e, other);
	};
	EmptyPredictionContext.prototype.equals = function(other) { return this.$val.equals(other); };
	EmptyPredictionContext.ptr.prototype.String = function() {
		var e;
		e = this;
		return "$";
	};
	EmptyPredictionContext.prototype.String = function() { return this.$val.String(); };
	NewArrayPredictionContext = function(parents, returnStates) {
		var _i, _r$2, _ref, c, i, parents, returnStates, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _ref = $f._ref; c = $f.c; i = $f.i; parents = $f.parents; returnStates = $f.returnStates; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = new ArrayPredictionContext.ptr(ptrType$63.nil, sliceType$29.nil, sliceType$6.nil);
		c.BasePredictionContext = NewBasePredictionContext(37);
		_ref = parents;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			_r$2 = calculateHash(((i < 0 || i >= parents.$length) ? ($throwRuntimeError("index out of range"), undefined) : parents.$array[parents.$offset + i]), ((i < 0 || i >= returnStates.$length) ? ($throwRuntimeError("index out of range"), undefined) : returnStates.$array[returnStates.$offset + i])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			c.BasePredictionContext.cachedHash = c.BasePredictionContext.cachedHash + (_r$2) >> 0;
			_i++;
		/* } */ $s = 1; continue; case 2:
		c.parents = parents;
		c.returnStates = returnStates;
		$s = -1; return c;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewArrayPredictionContext }; } $f._i = _i; $f._r$2 = _r$2; $f._ref = _ref; $f.c = c; $f.i = i; $f.parents = parents; $f.returnStates = returnStates; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewArrayPredictionContext = NewArrayPredictionContext;
	ArrayPredictionContext.ptr.prototype.GetReturnStates = function() {
		var a;
		a = this;
		return a.returnStates;
	};
	ArrayPredictionContext.prototype.GetReturnStates = function() { return this.$val.GetReturnStates(); };
	ArrayPredictionContext.ptr.prototype.hasEmptyPath = function() {
		var a;
		a = this;
		return a.getReturnState(a.length() - 1 >> 0) === 2147483647;
	};
	ArrayPredictionContext.prototype.hasEmptyPath = function() { return this.$val.hasEmptyPath(); };
	ArrayPredictionContext.ptr.prototype.isEmpty = function() {
		var a, x;
		a = this;
		return (x = a.returnStates, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) === 2147483647;
	};
	ArrayPredictionContext.prototype.isEmpty = function() { return this.$val.isEmpty(); };
	ArrayPredictionContext.ptr.prototype.length = function() {
		var a;
		a = this;
		return a.returnStates.$length;
	};
	ArrayPredictionContext.prototype.length = function() { return this.$val.length(); };
	ArrayPredictionContext.ptr.prototype.GetParent = function(index) {
		var a, index, x;
		a = this;
		return (x = a.parents, ((index < 0 || index >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + index]));
	};
	ArrayPredictionContext.prototype.GetParent = function(index) { return this.$val.GetParent(index); };
	ArrayPredictionContext.ptr.prototype.getReturnState = function(index) {
		var a, index, x;
		a = this;
		return (x = a.returnStates, ((index < 0 || index >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + index]));
	};
	ArrayPredictionContext.prototype.getReturnState = function(index) { return this.$val.getReturnState(index); };
	ArrayPredictionContext.ptr.prototype.equals = function(other) {
		var _r$2, _tuple, a, ok, other, otherP, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _tuple = $f._tuple; a = $f.a; ok = $f.ok; other = $f.other; otherP = $f.otherP; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_tuple = $assertType(other, ptrType$65, true);
		ok = _tuple[1];
		/* */ if (!ok) { $s = 1; continue; }
		_r$2 = other.hash(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (!((a.BasePredictionContext.cachedHash === _r$2))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 1:
			$s = -1; return false;
		/* } else if (!((a.BasePredictionContext.cachedHash === _r$2))) { */ case 2:
			$s = -1; return false;
		/* } else { */ case 3:
			otherP = $assertType(other, ptrType$65);
			$s = -1; return (a.$ptr_returnStates || (a.$ptr_returnStates = new ptrType$66(function() { return this.$target.returnStates; }, function($v) { this.$target.returnStates = $v; }, a))) === (otherP.$ptr_returnStates || (otherP.$ptr_returnStates = new ptrType$66(function() { return this.$target.returnStates; }, function($v) { this.$target.returnStates = $v; }, otherP))) && (a.$ptr_parents || (a.$ptr_parents = new ptrType$67(function() { return this.$target.parents; }, function($v) { this.$target.parents = $v; }, a))) === (otherP.$ptr_parents || (otherP.$ptr_parents = new ptrType$67(function() { return this.$target.parents; }, function($v) { this.$target.parents = $v; }, otherP)));
		/* } */ case 4:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ArrayPredictionContext.ptr.prototype.equals }; } $f._r$2 = _r$2; $f._tuple = _tuple; $f.a = a; $f.ok = ok; $f.other = other; $f.otherP = otherP; $f.$s = $s; $f.$r = $r; return $f;
	};
	ArrayPredictionContext.prototype.equals = function(other) { return this.$val.equals(other); };
	ArrayPredictionContext.ptr.prototype.hash = function() {
		var _arg, _arg$1, _i, _i$1, _r$2, _r$3, _ref, _ref$1, a, h, p, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _i$1 = $f._i$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; a = $f.a; h = $f.h; p = $f.p; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		h = murmurInit(1);
		_ref = a.parents;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			p = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_arg = h;
			_r$2 = p.hash(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg$1 = _r$2;
			_r$3 = murmurUpdate(_arg, _arg$1); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			h = _r$3;
			_i++;
		/* } */ $s = 1; continue; case 2:
		_ref$1 = a.returnStates;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			r = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			h = murmurUpdate(h, r);
			_i$1++;
		}
		$s = -1; return murmurFinish(h, $imul(2, a.parents.$length));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ArrayPredictionContext.ptr.prototype.hash }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._i$1 = _i$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f.a = a; $f.h = h; $f.p = p; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	ArrayPredictionContext.prototype.hash = function() { return this.$val.hash(); };
	ArrayPredictionContext.ptr.prototype.String = function() {
		var _r$2, a, i, s, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; a = $f.a; i = $f.i; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		if (a.isEmpty()) {
			$s = -1; return "[]";
		}
		s = "[";
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.returnStates.$length)) { break; } */ if(!(i < a.returnStates.$length)) { $s = 2; continue; }
			if (i > 0) {
				s = s + ", ";
			}
			/* */ if ((x = a.returnStates, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])) === 2147483647) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((x = a.returnStates, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])) === 2147483647) { */ case 3:
				s = s + "$";
				i = i + (1) >> 0;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			s = s + strconv.Itoa((x$1 = a.returnStates, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])));
			/* */ if (!($interfaceIsEqual((x$2 = a.parents, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i])), $ifaceNil))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!($interfaceIsEqual((x$2 = a.parents, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i])), $ifaceNil))) { */ case 5:
				_r$2 = (x$3 = a.parents, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i])).String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				s = s + " " + _r$2;
				$s = 7; continue;
			/* } else { */ case 6:
				s = s + "nil";
			/* } */ case 7:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return s + "]";
		/* */ } return; } if ($f === undefined) { $f = { $blk: ArrayPredictionContext.ptr.prototype.String }; } $f._r$2 = _r$2; $f.a = a; $f.i = i; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	ArrayPredictionContext.prototype.String = function() { return this.$val.String(); };
	predictionContextFromRuleContext = function(a, outerContext) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, a, outerContext, parent, state, transition, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; a = $f.a; outerContext = $f.outerContext; parent = $f.parent; state = $f.state; transition = $f.transition; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(outerContext, $ifaceNil)) {
			outerContext = $pkg.RuleContextEmpty;
		}
		_r$2 = outerContext.GetParent(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if ($interfaceIsEqual(_r$2, $ifaceNil) || $interfaceIsEqual(outerContext, $pkg.RuleContextEmpty)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(_r$2, $ifaceNil) || $interfaceIsEqual(outerContext, $pkg.RuleContextEmpty)) { */ case 1:
			$s = -1; return $pkg.BasePredictionContextEMPTY;
		/* } */ case 2:
		_arg = a;
		_r$3 = outerContext.GetParent(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$1 = $assertType(_r$3, RuleContext);
		_r$4 = predictionContextFromRuleContext(_arg, _arg$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		parent = _r$4;
		_r$5 = outerContext.GetInvokingState(); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		state = (x = a.states, x$1 = _r$5, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		_r$6 = state.GetTransitions(); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		transition = (x$2 = _r$6, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0]));
		_arg$2 = parent;
		_r$7 = $assertType(transition, ptrType$6).followState.GetStateNumber(); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_arg$3 = _r$7;
		_r$8 = SingletonBasePredictionContextCreate(_arg$2, _arg$3); /* */ $s = 9; case 9: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$s = -1; return _r$8;
		/* */ } return; } if ($f === undefined) { $f = { $blk: predictionContextFromRuleContext }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.a = a; $f.outerContext = outerContext; $f.parent = parent; $f.state = state; $f.transition = transition; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	merge = function(a, b, rootIsWildcard, mergeCache) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, a, ac, b, bc, mergeCache, ok, ok$1, ok$2, ok$3, ok1, ok2, rootIsWildcard, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; a = $f.a; ac = $f.ac; b = $f.b; bc = $f.bc; mergeCache = $f.mergeCache; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; ok1 = $f.ok1; ok2 = $f.ok2; rootIsWildcard = $f.rootIsWildcard; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(a, b)) {
			$s = -1; return a;
		}
		_tuple = $assertType(a, ptrType$64, true);
		ac = _tuple[0];
		ok1 = _tuple[1];
		_tuple$1 = $assertType(b, ptrType$64, true);
		bc = _tuple$1[0];
		ok2 = _tuple$1[1];
		/* */ if (ok1 && ok2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok1 && ok2) { */ case 1:
			_r$2 = mergeSingletons(ac, bc, rootIsWildcard, mergeCache); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } */ case 2:
		if (rootIsWildcard) {
			_tuple$2 = $assertType(a, ptrType$68, true);
			ok = _tuple$2[1];
			if (ok) {
				$s = -1; return a;
			}
			_tuple$3 = $assertType(b, ptrType$68, true);
			ok$1 = _tuple$3[1];
			if (ok$1) {
				$s = -1; return b;
			}
		}
		_tuple$4 = $assertType(a, ptrType$64, true);
		ok$2 = _tuple$4[1];
		/* */ if (ok$2) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (ok$2) { */ case 4:
			_r$3 = a.GetParent(0); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_arg = new sliceType$29([_r$3]);
			_r$4 = a.getReturnState(0); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_arg$1 = new sliceType$6([_r$4]);
			_r$5 = NewArrayPredictionContext(_arg, _arg$1); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			a = _r$5;
		/* } */ case 5:
		_tuple$5 = $assertType(b, ptrType$64, true);
		ok$3 = _tuple$5[1];
		/* */ if (ok$3) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (ok$3) { */ case 9:
			_r$6 = b.GetParent(0); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_arg$2 = new sliceType$29([_r$6]);
			_r$7 = b.getReturnState(0); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_arg$3 = new sliceType$6([_r$7]);
			_r$8 = NewArrayPredictionContext(_arg$2, _arg$3); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			b = _r$8;
		/* } */ case 10:
		_r$9 = mergeArrays($assertType(a, ptrType$65), $assertType(b, ptrType$65), rootIsWildcard, mergeCache); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		$s = -1; return _r$9;
		/* */ } return; } if ($f === undefined) { $f = { $blk: merge }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.a = a; $f.ac = ac; $f.b = b; $f.bc = bc; $f.mergeCache = mergeCache; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.ok1 = ok1; $f.ok2 = ok2; $f.rootIsWildcard = rootIsWildcard; $f.$s = $s; $f.$r = $r; return $f;
	};
	mergeSingletons = function(a, b, rootIsWildcard, mergeCache) {
		var _arg, _arg$1, _arg$10, _arg$11, _arg$12, _arg$13, _arg$14, _arg$15, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, a, apc, apc$1, b, mergeCache, parent, parents, parents$1, payloads, payloads$1, previous, rootIsWildcard, rootMerge, singleParent, spc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$12 = $f._arg$12; _arg$13 = $f._arg$13; _arg$14 = $f._arg$14; _arg$15 = $f._arg$15; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; a = $f.a; apc = $f.apc; apc$1 = $f.apc$1; b = $f.b; mergeCache = $f.mergeCache; parent = $f.parent; parents = $f.parents; parents$1 = $f.parents$1; payloads = $f.payloads; payloads$1 = $f.payloads$1; previous = $f.previous; rootIsWildcard = $f.rootIsWildcard; rootMerge = $f.rootMerge; singleParent = $f.singleParent; spc = $f.spc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!(mergeCache === ptrType$12.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(mergeCache === ptrType$12.nil)) { */ case 1:
			_r$2 = a.hash(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg = _r$2;
			_r$3 = b.hash(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_arg$1 = _r$3;
			_r$4 = mergeCache.Get(_arg, _arg$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			previous = _r$4;
			if (!($interfaceIsEqual(previous, $ifaceNil))) {
				$s = -1; return $assertType(previous, PredictionContext);
			}
			_r$5 = b.hash(); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_arg$2 = _r$5;
			_r$6 = a.hash(); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_arg$3 = _r$6;
			_r$7 = mergeCache.Get(_arg$2, _arg$3); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			previous = _r$7;
			if (!($interfaceIsEqual(previous, $ifaceNil))) {
				$s = -1; return $assertType(previous, PredictionContext);
			}
		/* } */ case 2:
		_r$8 = mergeRoot(a, b, rootIsWildcard); /* */ $s = 9; case 9: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		rootMerge = _r$8;
		/* */ if (!($interfaceIsEqual(rootMerge, $ifaceNil))) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (!($interfaceIsEqual(rootMerge, $ifaceNil))) { */ case 10:
			/* */ if (!(mergeCache === ptrType$12.nil)) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (!(mergeCache === ptrType$12.nil)) { */ case 12:
				_r$9 = a.hash(); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_arg$4 = _r$9;
				_r$10 = b.hash(); /* */ $s = 15; case 15: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_arg$5 = _r$10;
				_arg$6 = rootMerge;
				$r = mergeCache.set(_arg$4, _arg$5, _arg$6); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 13:
			$s = -1; return rootMerge;
		/* } */ case 11:
		/* */ if (a.returnState === b.returnState) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (a.returnState === b.returnState) { */ case 17:
			_r$11 = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache); /* */ $s = 19; case 19: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			parent = _r$11;
			if ($interfaceIsEqual(parent, a.parentCtx)) {
				$s = -1; return a;
			}
			if ($interfaceIsEqual(parent, b.parentCtx)) {
				$s = -1; return b;
			}
			_r$12 = SingletonBasePredictionContextCreate(parent, a.returnState); /* */ $s = 20; case 20: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			spc = _r$12;
			/* */ if (!(mergeCache === ptrType$12.nil)) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (!(mergeCache === ptrType$12.nil)) { */ case 21:
				_r$13 = a.hash(); /* */ $s = 23; case 23: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_arg$7 = _r$13;
				_r$14 = b.hash(); /* */ $s = 24; case 24: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_arg$8 = _r$14;
				_arg$9 = spc;
				$r = mergeCache.set(_arg$7, _arg$8, _arg$9); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 22:
			$s = -1; return spc;
		/* } */ case 18:
		singleParent = $ifaceNil;
		if (a === b || (!($interfaceIsEqual(a.parentCtx, $ifaceNil)) && $interfaceIsEqual(a.parentCtx, b.parentCtx))) {
			singleParent = a.parentCtx;
		}
		/* */ if (!($interfaceIsEqual(singleParent, $ifaceNil))) { $s = 26; continue; }
		/* */ $s = 27; continue;
		/* if (!($interfaceIsEqual(singleParent, $ifaceNil))) { */ case 26:
			payloads = new sliceType$6([a.returnState, b.returnState]);
			if (a.returnState > b.returnState) {
				(0 >= payloads.$length ? ($throwRuntimeError("index out of range"), undefined) : payloads.$array[payloads.$offset + 0] = b.returnState);
				(1 >= payloads.$length ? ($throwRuntimeError("index out of range"), undefined) : payloads.$array[payloads.$offset + 1] = a.returnState);
			}
			parents = new sliceType$29([singleParent, singleParent]);
			_r$15 = NewArrayPredictionContext(parents, payloads); /* */ $s = 28; case 28: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			apc = _r$15;
			/* */ if (!(mergeCache === ptrType$12.nil)) { $s = 29; continue; }
			/* */ $s = 30; continue;
			/* if (!(mergeCache === ptrType$12.nil)) { */ case 29:
				_r$16 = a.hash(); /* */ $s = 31; case 31: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				_arg$10 = _r$16;
				_r$17 = b.hash(); /* */ $s = 32; case 32: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_arg$11 = _r$17;
				_arg$12 = apc;
				$r = mergeCache.set(_arg$10, _arg$11, _arg$12); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 30:
			$s = -1; return apc;
		/* } */ case 27:
		payloads$1 = new sliceType$6([a.returnState, b.returnState]);
		parents$1 = new sliceType$29([a.parentCtx, b.parentCtx]);
		if (a.returnState > b.returnState) {
			(0 >= payloads$1.$length ? ($throwRuntimeError("index out of range"), undefined) : payloads$1.$array[payloads$1.$offset + 0] = b.returnState);
			(1 >= payloads$1.$length ? ($throwRuntimeError("index out of range"), undefined) : payloads$1.$array[payloads$1.$offset + 1] = a.returnState);
			parents$1 = new sliceType$29([b.parentCtx, a.parentCtx]);
		}
		_r$18 = NewArrayPredictionContext(parents$1, payloads$1); /* */ $s = 34; case 34: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		apc$1 = _r$18;
		/* */ if (!(mergeCache === ptrType$12.nil)) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (!(mergeCache === ptrType$12.nil)) { */ case 35:
			_r$19 = a.hash(); /* */ $s = 37; case 37: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			_arg$13 = _r$19;
			_r$20 = b.hash(); /* */ $s = 38; case 38: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			_arg$14 = _r$20;
			_arg$15 = apc$1;
			$r = mergeCache.set(_arg$13, _arg$14, _arg$15); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 36:
		$s = -1; return apc$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mergeSingletons }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$12 = _arg$12; $f._arg$13 = _arg$13; $f._arg$14 = _arg$14; $f._arg$15 = _arg$15; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.a = a; $f.apc = apc; $f.apc$1 = apc$1; $f.b = b; $f.mergeCache = mergeCache; $f.parent = parent; $f.parents = parents; $f.parents$1 = parents$1; $f.payloads = payloads; $f.payloads$1 = payloads$1; $f.previous = previous; $f.rootIsWildcard = rootIsWildcard; $f.rootMerge = rootMerge; $f.singleParent = singleParent; $f.spc = spc; $f.$s = $s; $f.$r = $r; return $f;
	};
	mergeRoot = function(a, b, rootIsWildcard) {
		var _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, a, b, parents, parents$1, payloads, payloads$1, rootIsWildcard, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; a = $f.a; b = $f.b; parents = $f.parents; parents$1 = $f.parents$1; payloads = $f.payloads; payloads$1 = $f.payloads$1; rootIsWildcard = $f.rootIsWildcard; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (rootIsWildcard) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (rootIsWildcard) { */ case 1:
			if ($interfaceIsEqual(a, $pkg.BasePredictionContextEMPTY)) {
				$s = -1; return $pkg.BasePredictionContextEMPTY;
			}
			if ($interfaceIsEqual(b, $pkg.BasePredictionContextEMPTY)) {
				$s = -1; return $pkg.BasePredictionContextEMPTY;
			}
			$s = 3; continue;
		/* } else { */ case 2:
			/* */ if ($interfaceIsEqual(a, $pkg.BasePredictionContextEMPTY) && $interfaceIsEqual(b, $pkg.BasePredictionContextEMPTY)) { $s = 4; continue; }
			/* */ if ($interfaceIsEqual(a, $pkg.BasePredictionContextEMPTY)) { $s = 5; continue; }
			/* */ if ($interfaceIsEqual(b, $pkg.BasePredictionContextEMPTY)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ($interfaceIsEqual(a, $pkg.BasePredictionContextEMPTY) && $interfaceIsEqual(b, $pkg.BasePredictionContextEMPTY)) { */ case 4:
				$s = -1; return $pkg.BasePredictionContextEMPTY;
			/* } else if ($interfaceIsEqual(a, $pkg.BasePredictionContextEMPTY)) { */ case 5:
				_r$2 = b.getReturnState(-1); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				payloads = new sliceType$6([_r$2, 2147483647]);
				_r$3 = b.GetParent(-1); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				parents = new sliceType$29([_r$3, $ifaceNil]);
				_r$4 = NewArrayPredictionContext(parents, payloads); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return _r$4;
			/* } else if ($interfaceIsEqual(b, $pkg.BasePredictionContextEMPTY)) { */ case 6:
				_r$5 = a.getReturnState(-1); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				payloads$1 = new sliceType$6([_r$5, 2147483647]);
				_r$6 = a.GetParent(-1); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				parents$1 = new sliceType$29([_r$6, $ifaceNil]);
				_r$7 = NewArrayPredictionContext(parents$1, payloads$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$s = -1; return _r$7;
			/* } */ case 7:
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mergeRoot }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.a = a; $f.b = b; $f.parents = parents; $f.parents$1 = parents$1; $f.payloads = payloads; $f.payloads$1 = payloads$1; $f.rootIsWildcard = rootIsWildcard; $f.$s = $s; $f.$r = $r; return $f;
	};
	mergeArrays = function(a, b, rootIsWildcard, mergeCache) {
		var M, _arg, _arg$1, _arg$10, _arg$11, _arg$12, _arg$13, _arg$14, _arg$15, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, a, aParent, axAX, b, bParent, bothDollars, i, j, k, mergeCache, mergedParent, mergedParents, mergedReturnStates, p, p$1, payload, pc, previous, rootIsWildcard, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; M = $f.M; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$12 = $f._arg$12; _arg$13 = $f._arg$13; _arg$14 = $f._arg$14; _arg$15 = $f._arg$15; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; a = $f.a; aParent = $f.aParent; axAX = $f.axAX; b = $f.b; bParent = $f.bParent; bothDollars = $f.bothDollars; i = $f.i; j = $f.j; k = $f.k; mergeCache = $f.mergeCache; mergedParent = $f.mergedParent; mergedParents = $f.mergedParents; mergedReturnStates = $f.mergedReturnStates; p = $f.p; p$1 = $f.p$1; payload = $f.payload; pc = $f.pc; previous = $f.previous; rootIsWildcard = $f.rootIsWildcard; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!(mergeCache === ptrType$12.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(mergeCache === ptrType$12.nil)) { */ case 1:
			_r$2 = a.hash(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg = _r$2;
			_r$3 = b.hash(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_arg$1 = _r$3;
			_r$4 = mergeCache.Get(_arg, _arg$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			previous = _r$4;
			if (!($interfaceIsEqual(previous, $ifaceNil))) {
				$s = -1; return $assertType(previous, PredictionContext);
			}
			_r$5 = b.hash(); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_arg$2 = _r$5;
			_r$6 = a.hash(); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_arg$3 = _r$6;
			_r$7 = mergeCache.Get(_arg$2, _arg$3); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			previous = _r$7;
			if (!($interfaceIsEqual(previous, $ifaceNil))) {
				$s = -1; return $assertType(previous, PredictionContext);
			}
		/* } */ case 2:
		i = 0;
		j = 0;
		k = 0;
		mergedReturnStates = $makeSlice(sliceType$6, (a.returnStates.$length + b.returnStates.$length >> 0));
		mergedParents = $makeSlice(sliceType$29, (a.returnStates.$length + b.returnStates.$length >> 0));
		/* while (true) { */ case 9:
			/* if (!(i < a.returnStates.$length && j < b.returnStates.$length)) { break; } */ if(!(i < a.returnStates.$length && j < b.returnStates.$length)) { $s = 10; continue; }
			aParent = (x = a.parents, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			bParent = (x$1 = b.parents, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j]));
			/* */ if ((x$2 = a.returnStates, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i])) === (x$3 = b.returnStates, ((j < 0 || j >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + j]))) { $s = 11; continue; }
			/* */ if ((x$4 = a.returnStates, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])) < (x$5 = b.returnStates, ((j < 0 || j >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + j]))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if ((x$2 = a.returnStates, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i])) === (x$3 = b.returnStates, ((j < 0 || j >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + j]))) { */ case 11:
				payload = (x$6 = a.returnStates, ((i < 0 || i >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i]));
				bothDollars = (payload === 2147483647) && $interfaceIsEqual(aParent, $ifaceNil) && $interfaceIsEqual(bParent, $ifaceNil);
				axAX = !($interfaceIsEqual(aParent, $ifaceNil)) && !($interfaceIsEqual(bParent, $ifaceNil)) && $interfaceIsEqual(aParent, bParent);
				/* */ if (bothDollars || axAX) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (bothDollars || axAX) { */ case 15:
					((k < 0 || k >= mergedParents.$length) ? ($throwRuntimeError("index out of range"), undefined) : mergedParents.$array[mergedParents.$offset + k] = aParent);
					((k < 0 || k >= mergedReturnStates.$length) ? ($throwRuntimeError("index out of range"), undefined) : mergedReturnStates.$array[mergedReturnStates.$offset + k] = payload);
					$s = 17; continue;
				/* } else { */ case 16:
					_r$8 = merge(aParent, bParent, rootIsWildcard, mergeCache); /* */ $s = 18; case 18: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					mergedParent = _r$8;
					((k < 0 || k >= mergedParents.$length) ? ($throwRuntimeError("index out of range"), undefined) : mergedParents.$array[mergedParents.$offset + k] = mergedParent);
					((k < 0 || k >= mergedReturnStates.$length) ? ($throwRuntimeError("index out of range"), undefined) : mergedReturnStates.$array[mergedReturnStates.$offset + k] = payload);
				/* } */ case 17:
				i = i + (1) >> 0;
				j = j + (1) >> 0;
				$s = 14; continue;
			/* } else if ((x$4 = a.returnStates, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])) < (x$5 = b.returnStates, ((j < 0 || j >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + j]))) { */ case 12:
				((k < 0 || k >= mergedParents.$length) ? ($throwRuntimeError("index out of range"), undefined) : mergedParents.$array[mergedParents.$offset + k] = aParent);
				((k < 0 || k >= mergedReturnStates.$length) ? ($throwRuntimeError("index out of range"), undefined) : mergedReturnStates.$array[mergedReturnStates.$offset + k] = (x$7 = a.returnStates, ((i < 0 || i >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i])));
				i = i + (1) >> 0;
				$s = 14; continue;
			/* } else { */ case 13:
				((k < 0 || k >= mergedParents.$length) ? ($throwRuntimeError("index out of range"), undefined) : mergedParents.$array[mergedParents.$offset + k] = bParent);
				((k < 0 || k >= mergedReturnStates.$length) ? ($throwRuntimeError("index out of range"), undefined) : mergedReturnStates.$array[mergedReturnStates.$offset + k] = (x$8 = b.returnStates, ((j < 0 || j >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + j])));
				j = j + (1) >> 0;
			/* } */ case 14:
			k = k + (1) >> 0;
		/* } */ $s = 9; continue; case 10:
		if (i < a.returnStates.$length) {
			p = i;
			while (true) {
				if (!(p < a.returnStates.$length)) { break; }
				((k < 0 || k >= mergedParents.$length) ? ($throwRuntimeError("index out of range"), undefined) : mergedParents.$array[mergedParents.$offset + k] = (x$9 = a.parents, ((p < 0 || p >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + p])));
				((k < 0 || k >= mergedReturnStates.$length) ? ($throwRuntimeError("index out of range"), undefined) : mergedReturnStates.$array[mergedReturnStates.$offset + k] = (x$10 = a.returnStates, ((p < 0 || p >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + p])));
				k = k + (1) >> 0;
				p = p + (1) >> 0;
			}
		} else {
			p$1 = j;
			while (true) {
				if (!(p$1 < b.returnStates.$length)) { break; }
				((k < 0 || k >= mergedParents.$length) ? ($throwRuntimeError("index out of range"), undefined) : mergedParents.$array[mergedParents.$offset + k] = (x$11 = b.parents, ((p$1 < 0 || p$1 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + p$1])));
				((k < 0 || k >= mergedReturnStates.$length) ? ($throwRuntimeError("index out of range"), undefined) : mergedReturnStates.$array[mergedReturnStates.$offset + k] = (x$12 = b.returnStates, ((p$1 < 0 || p$1 >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + p$1])));
				k = k + (1) >> 0;
				p$1 = p$1 + (1) >> 0;
			}
		}
		/* */ if (k < mergedParents.$length) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if (k < mergedParents.$length) { */ case 19:
			/* */ if (k === 1) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (k === 1) { */ case 21:
				_r$9 = SingletonBasePredictionContextCreate((0 >= mergedParents.$length ? ($throwRuntimeError("index out of range"), undefined) : mergedParents.$array[mergedParents.$offset + 0]), (0 >= mergedReturnStates.$length ? ($throwRuntimeError("index out of range"), undefined) : mergedReturnStates.$array[mergedReturnStates.$offset + 0])); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				pc = _r$9;
				/* */ if (!(mergeCache === ptrType$12.nil)) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (!(mergeCache === ptrType$12.nil)) { */ case 24:
					_r$10 = a.hash(); /* */ $s = 26; case 26: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_arg$4 = _r$10;
					_r$11 = b.hash(); /* */ $s = 27; case 27: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_arg$5 = _r$11;
					_arg$6 = pc;
					$r = mergeCache.set(_arg$4, _arg$5, _arg$6); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 25:
				$s = -1; return pc;
			/* } */ case 22:
			mergedParents = $subslice(mergedParents, 0, k);
			mergedReturnStates = $subslice(mergedReturnStates, 0, k);
		/* } */ case 20:
		_r$12 = NewArrayPredictionContext(mergedParents, mergedReturnStates); /* */ $s = 29; case 29: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		M = _r$12;
		/* */ if (M === a) { $s = 30; continue; }
		/* */ $s = 31; continue;
		/* if (M === a) { */ case 30:
			/* */ if (!(mergeCache === ptrType$12.nil)) { $s = 32; continue; }
			/* */ $s = 33; continue;
			/* if (!(mergeCache === ptrType$12.nil)) { */ case 32:
				_r$13 = a.hash(); /* */ $s = 34; case 34: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_arg$7 = _r$13;
				_r$14 = b.hash(); /* */ $s = 35; case 35: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_arg$8 = _r$14;
				_arg$9 = a;
				$r = mergeCache.set(_arg$7, _arg$8, _arg$9); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 33:
			$s = -1; return a;
		/* } */ case 31:
		/* */ if (M === b) { $s = 37; continue; }
		/* */ $s = 38; continue;
		/* if (M === b) { */ case 37:
			/* */ if (!(mergeCache === ptrType$12.nil)) { $s = 39; continue; }
			/* */ $s = 40; continue;
			/* if (!(mergeCache === ptrType$12.nil)) { */ case 39:
				_r$15 = a.hash(); /* */ $s = 41; case 41: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_arg$10 = _r$15;
				_r$16 = b.hash(); /* */ $s = 42; case 42: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				_arg$11 = _r$16;
				_arg$12 = b;
				$r = mergeCache.set(_arg$10, _arg$11, _arg$12); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 40:
			$s = -1; return b;
		/* } */ case 38:
		combineCommonParents(mergedParents);
		/* */ if (!(mergeCache === ptrType$12.nil)) { $s = 44; continue; }
		/* */ $s = 45; continue;
		/* if (!(mergeCache === ptrType$12.nil)) { */ case 44:
			_r$17 = a.hash(); /* */ $s = 46; case 46: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			_arg$13 = _r$17;
			_r$18 = b.hash(); /* */ $s = 47; case 47: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			_arg$14 = _r$18;
			_arg$15 = M;
			$r = mergeCache.set(_arg$13, _arg$14, _arg$15); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 45:
		$s = -1; return M;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mergeArrays }; } $f.M = M; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$12 = _arg$12; $f._arg$13 = _arg$13; $f._arg$14 = _arg$14; $f._arg$15 = _arg$15; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.a = a; $f.aParent = aParent; $f.axAX = axAX; $f.b = b; $f.bParent = bParent; $f.bothDollars = bothDollars; $f.i = i; $f.j = j; $f.k = k; $f.mergeCache = mergeCache; $f.mergedParent = mergedParent; $f.mergedParents = mergedParents; $f.mergedReturnStates = mergedReturnStates; $f.p = p; $f.p$1 = p$1; $f.payload = payload; $f.pc = pc; $f.previous = previous; $f.rootIsWildcard = rootIsWildcard; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	combineCommonParents = function(parents) {
		var _entry, _entry$1, _key, p, parent, parents, q, uniqueParents;
		uniqueParents = {};
		p = 0;
		while (true) {
			if (!(p < parents.$length)) { break; }
			parent = ((p < 0 || p >= parents.$length) ? ($throwRuntimeError("index out of range"), undefined) : parents.$array[parents.$offset + p]);
			if ($interfaceIsEqual((_entry = uniqueParents[PredictionContext.keyFor(parent)], _entry !== undefined ? _entry.v : $ifaceNil), $ifaceNil)) {
				_key = parent; (uniqueParents || $throwRuntimeError("assignment to entry in nil map"))[PredictionContext.keyFor(_key)] = { k: _key, v: parent };
			}
			p = p + (1) >> 0;
		}
		q = 0;
		while (true) {
			if (!(q < parents.$length)) { break; }
			((q < 0 || q >= parents.$length) ? ($throwRuntimeError("index out of range"), undefined) : parents.$array[parents.$offset + q] = (_entry$1 = uniqueParents[PredictionContext.keyFor(((q < 0 || q >= parents.$length) ? ($throwRuntimeError("index out of range"), undefined) : parents.$array[parents.$offset + q]))], _entry$1 !== undefined ? _entry$1.v : $ifaceNil));
			q = q + (1) >> 0;
		}
	};
	getCachedBasePredictionContext = function(context, contextCache, visited) {
		var _arg, _arg$1, _entry, _key, _key$1, _key$2, _key$3, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, changed, context, contextCache, existing, i, j, parent, parents, updated, visited, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _entry = $f._entry; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _v = $f._v; changed = $f.changed; context = $f.context; contextCache = $f.contextCache; existing = $f.existing; i = $f.i; j = $f.j; parent = $f.parent; parents = $f.parents; updated = $f.updated; visited = $f.visited; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = context.isEmpty(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$2) { */ case 1:
			$s = -1; return context;
		/* } */ case 2:
		existing = (_entry = visited[PredictionContext.keyFor(context)], _entry !== undefined ? _entry.v : $ifaceNil);
		if (!($interfaceIsEqual(existing, $ifaceNil))) {
			$s = -1; return existing;
		}
		existing = contextCache.Get(context);
		if (!($interfaceIsEqual(existing, $ifaceNil))) {
			_key = context; (visited || $throwRuntimeError("assignment to entry in nil map"))[PredictionContext.keyFor(_key)] = { k: _key, v: existing };
			$s = -1; return existing;
		}
		changed = false;
		_r$3 = context.length(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		parents = $makeSlice(sliceType$29, _r$3);
		i = 0;
		/* while (true) { */ case 5:
			/* if (!(i < parents.$length)) { break; } */ if(!(i < parents.$length)) { $s = 6; continue; }
			_r$4 = context.GetParent(i); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = getCachedBasePredictionContext(_r$4, contextCache, visited); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			parent = _r$5;
			if (changed) { _v = true; $s = 11; continue s; }
			_r$6 = context.GetParent(i); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_v = !($interfaceIsEqual(parent, _r$6)); case 11:
			/* */ if (_v) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_v) { */ case 9:
				/* */ if (!changed) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (!changed) { */ case 13:
					_r$7 = context.length(); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					parents = $makeSlice(sliceType$29, _r$7);
					j = 0;
					/* while (true) { */ case 16:
						_r$8 = context.length(); /* */ $s = 18; case 18: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						/* if (!(j < _r$8)) { break; } */ if(!(j < _r$8)) { $s = 17; continue; }
						_r$9 = context.GetParent(j); /* */ $s = 19; case 19: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						((j < 0 || j >= parents.$length) ? ($throwRuntimeError("index out of range"), undefined) : parents.$array[parents.$offset + j] = _r$9);
						j = j + (1) >> 0;
					/* } */ $s = 16; continue; case 17:
					changed = true;
				/* } */ case 14:
				((i < 0 || i >= parents.$length) ? ($throwRuntimeError("index out of range"), undefined) : parents.$array[parents.$offset + i] = parent);
			/* } */ case 10:
			i = i + (1) >> 0;
		/* } */ $s = 5; continue; case 6:
		if (!changed) {
			contextCache.add(context);
			_key$1 = context; (visited || $throwRuntimeError("assignment to entry in nil map"))[PredictionContext.keyFor(_key$1)] = { k: _key$1, v: context };
			$s = -1; return context;
		}
		updated = $ifaceNil;
		/* */ if (parents.$length === 0) { $s = 20; continue; }
		/* */ if (parents.$length === 1) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (parents.$length === 0) { */ case 20:
			updated = $pkg.BasePredictionContextEMPTY;
			$s = 23; continue;
		/* } else if (parents.$length === 1) { */ case 21:
			_arg = (0 >= parents.$length ? ($throwRuntimeError("index out of range"), undefined) : parents.$array[parents.$offset + 0]);
			_r$10 = context.getReturnState(0); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_arg$1 = _r$10;
			_r$11 = SingletonBasePredictionContextCreate(_arg, _arg$1); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			updated = _r$11;
			$s = 23; continue;
		/* } else { */ case 22:
			_r$12 = NewArrayPredictionContext(parents, $assertType(context, ptrType$65).GetReturnStates()); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			updated = _r$12;
		/* } */ case 23:
		contextCache.add(updated);
		_key$2 = updated; (visited || $throwRuntimeError("assignment to entry in nil map"))[PredictionContext.keyFor(_key$2)] = { k: _key$2, v: updated };
		_key$3 = context; (visited || $throwRuntimeError("assignment to entry in nil map"))[PredictionContext.keyFor(_key$3)] = { k: _key$3, v: updated };
		$s = -1; return updated;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getCachedBasePredictionContext }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._entry = _entry; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._v = _v; $f.changed = changed; $f.context = context; $f.contextCache = contextCache; $f.existing = existing; $f.i = i; $f.j = j; $f.parent = parent; $f.parents = parents; $f.updated = updated; $f.visited = visited; $f.$s = $s; $f.$r = $r; return $f;
	};
	PredictionModehasSLLConflictTerminatingPrediction = function(mode, configs) {
		var _i, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _v, altsets, c, configs, dup, mode, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _v = $f._v; altsets = $f.altsets; c = $f.c; configs = $f.configs; dup = $f.dup; mode = $f.mode; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = PredictionModeallConfigsInRuleStopStates(configs); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$2) { */ case 1:
			$s = -1; return true;
		/* } */ case 2:
		/* */ if (mode === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (mode === 0) { */ case 4:
			_r$3 = configs.HasSemanticContext(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$3) { */ case 6:
				dup = NewBaseATNConfigSet(false);
				_r$4 = configs.GetItems(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_ref = _r$4;
				_i = 0;
				/* while (true) { */ case 10:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 11; continue; }
					c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					_r$5 = NewBaseATNConfig2(c, $pkg.SemanticContextNone); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					c = _r$5;
					_r$6 = dup.Add(c, ptrType$12.nil); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$6;
					_i++;
				/* } */ $s = 10; continue; case 11:
				configs = dup;
			/* } */ case 7:
		/* } */ case 5:
		_r$7 = PredictionModegetConflictingAltSubsets(configs); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		altsets = _r$7;
		if (!(PredictionModehasConflictingAltSet(altsets))) { _v = false; $s = 15; continue s; }
		_r$8 = PredictionModehasStateAssociatedWithOneAlt(configs); /* */ $s = 16; case 16: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_v = !_r$8; case 15:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PredictionModehasSLLConflictTerminatingPrediction }; } $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._v = _v; $f.altsets = altsets; $f.c = c; $f.configs = configs; $f.dup = dup; $f.mode = mode; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.PredictionModehasSLLConflictTerminatingPrediction = PredictionModehasSLLConflictTerminatingPrediction;
	PredictionModehasConfigInRuleStopState = function(configs) {
		var _i, _r$2, _r$3, _ref, _tuple, c, configs, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; c = $f.c; configs = $f.configs; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = configs.GetItems(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_ref = _r$2;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$3 = c.GetState(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = $assertType(_r$3, ptrType$5, true);
			ok = _tuple[1];
			if (ok) {
				$s = -1; return true;
			}
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PredictionModehasConfigInRuleStopState }; } $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f.c = c; $f.configs = configs; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.PredictionModehasConfigInRuleStopState = PredictionModehasConfigInRuleStopState;
	PredictionModeallConfigsInRuleStopStates = function(configs) {
		var _i, _r$2, _r$3, _ref, _tuple, c, configs, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; c = $f.c; configs = $f.configs; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = configs.GetItems(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_ref = _r$2;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$3 = c.GetState(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = $assertType(_r$3, ptrType$5, true);
			ok = _tuple[1];
			if (!ok) {
				$s = -1; return false;
			}
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PredictionModeallConfigsInRuleStopStates }; } $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f.c = c; $f.configs = configs; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.PredictionModeallConfigsInRuleStopStates = PredictionModeallConfigsInRuleStopStates;
	PredictionModeresolvesToJustOneViableAlt = function(altsets) {
		var altsets;
		return PredictionModegetSingleViableAlt(altsets);
	};
	$pkg.PredictionModeresolvesToJustOneViableAlt = PredictionModeresolvesToJustOneViableAlt;
	PredictionModeallSubsetsConflict = function(altsets) {
		var altsets;
		return !PredictionModehasNonConflictingAltSet(altsets);
	};
	$pkg.PredictionModeallSubsetsConflict = PredictionModeallSubsetsConflict;
	PredictionModehasNonConflictingAltSet = function(altsets) {
		var alts, altsets, i;
		i = 0;
		while (true) {
			if (!(i < altsets.$length)) { break; }
			alts = ((i < 0 || i >= altsets.$length) ? ($throwRuntimeError("index out of range"), undefined) : altsets.$array[altsets.$offset + i]);
			if (alts.length() === 1) {
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	$pkg.PredictionModehasNonConflictingAltSet = PredictionModehasNonConflictingAltSet;
	PredictionModehasConflictingAltSet = function(altsets) {
		var alts, altsets, i;
		i = 0;
		while (true) {
			if (!(i < altsets.$length)) { break; }
			alts = ((i < 0 || i >= altsets.$length) ? ($throwRuntimeError("index out of range"), undefined) : altsets.$array[altsets.$offset + i]);
			if (alts.length() > 1) {
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	$pkg.PredictionModehasConflictingAltSet = PredictionModehasConflictingAltSet;
	PredictionModeallSubsetsEqual = function(altsets) {
		var alts, altsets, first, i;
		first = ptrType$11.nil;
		i = 0;
		while (true) {
			if (!(i < altsets.$length)) { break; }
			alts = ((i < 0 || i >= altsets.$length) ? ($throwRuntimeError("index out of range"), undefined) : altsets.$array[altsets.$offset + i]);
			if (first === ptrType$11.nil) {
				first = alts;
			} else if (!(alts === first)) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	$pkg.PredictionModeallSubsetsEqual = PredictionModeallSubsetsEqual;
	PredictionModegetUniqueAlt = function(altsets) {
		var all, altsets;
		all = PredictionModeGetAlts(altsets);
		if (all.length() === 1) {
			return all.minValue();
		}
		return $pkg.ATNInvalidAltNumber;
	};
	$pkg.PredictionModegetUniqueAlt = PredictionModegetUniqueAlt;
	PredictionModeGetAlts = function(altsets) {
		var _i, _ref, all, alts, altsets;
		all = NewBitSet();
		_ref = altsets;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			alts = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			all.or(alts);
			_i++;
		}
		return all;
	};
	$pkg.PredictionModeGetAlts = PredictionModeGetAlts;
	PredictionModegetConflictingAltSubsets = function(configs) {
		var _entry, _entry$1, _i, _i$1, _key, _keys, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _ref$1, _tuple, alts, c, configToAlts, configs, key, ok, v, values, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _keys = $f._keys; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; alts = $f.alts; c = $f.c; configToAlts = $f.configToAlts; configs = $f.configs; key = $f.key; ok = $f.ok; v = $f.v; values = $f.values; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		configToAlts = {};
		_r$2 = configs.GetItems(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_ref = _r$2;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$3 = c.GetState(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.GetStateNumber(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = c.GetContext(); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = _r$5.hash(); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			key = ($imul(31, _r$4)) + _r$6 >> 0;
			_tuple = (_entry = configToAlts[$Int.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$11.nil, false]);
			alts = _tuple[0];
			ok = _tuple[1];
			if (!ok) {
				alts = NewBitSet();
				_key = key; (configToAlts || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: alts };
			}
			_r$7 = c.GetAlt(); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$r = alts.add(_r$7); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 2; continue; case 3:
		values = $makeSlice(sliceType$30, 0, 10);
		_ref$1 = configToAlts;
		_i$1 = 0;
		_keys = $keys(_ref$1);
		while (true) {
			if (!(_i$1 < _keys.length)) { break; }
			_entry$1 = _ref$1[_keys[_i$1]];
			if (_entry$1 === undefined) {
				_i$1++;
				continue;
			}
			v = _entry$1.v;
			values = $append(values, v);
			_i$1++;
		}
		$s = -1; return values;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PredictionModegetConflictingAltSubsets }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._keys = _keys; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.alts = alts; $f.c = c; $f.configToAlts = configToAlts; $f.configs = configs; $f.key = key; $f.ok = ok; $f.v = v; $f.values = values; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.PredictionModegetConflictingAltSubsets = PredictionModegetConflictingAltSubsets;
	PredictionModeGetStateToAltMap = function(configs) {
		var _i, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, alts, c, configs, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; alts = $f.alts; c = $f.c; configs = $f.configs; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = NewAltDict();
		_r$2 = configs.GetItems(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_ref = _r$2;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$3 = c.GetState(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.String(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = m.Get(_r$4); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			alts = _r$5;
			/* */ if ($interfaceIsEqual(alts, $ifaceNil)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ($interfaceIsEqual(alts, $ifaceNil)) { */ case 7:
				alts = NewBitSet();
				_r$6 = c.GetState(); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$7 = _r$6.String(); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$r = m.put(_r$7, alts); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
			_r$8 = c.GetAlt(); /* */ $s = 12; case 12: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			$r = $assertType(alts, ptrType$11).add(_r$8); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PredictionModeGetStateToAltMap }; } $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f.alts = alts; $f.c = c; $f.configs = configs; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.PredictionModeGetStateToAltMap = PredictionModeGetStateToAltMap;
	PredictionModehasStateAssociatedWithOneAlt = function(configs) {
		var _r$2, _r$3, configs, i, values, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; configs = $f.configs; i = $f.i; values = $f.values; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = PredictionModeGetStateToAltMap(configs); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = _r$2.values(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		values = _r$3;
		i = 0;
		while (true) {
			if (!(i < values.$length)) { break; }
			if ($assertType(((i < 0 || i >= values.$length) ? ($throwRuntimeError("index out of range"), undefined) : values.$array[values.$offset + i]), ptrType$11).length() === 1) {
				$s = -1; return true;
			}
			i = i + (1) >> 0;
		}
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PredictionModehasStateAssociatedWithOneAlt }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.configs = configs; $f.i = i; $f.values = values; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.PredictionModehasStateAssociatedWithOneAlt = PredictionModehasStateAssociatedWithOneAlt;
	PredictionModegetSingleViableAlt = function(altsets) {
		var alts, altsets, i, minAlt, result;
		result = $pkg.ATNInvalidAltNumber;
		i = 0;
		while (true) {
			if (!(i < altsets.$length)) { break; }
			alts = ((i < 0 || i >= altsets.$length) ? ($throwRuntimeError("index out of range"), undefined) : altsets.$array[altsets.$offset + i]);
			minAlt = alts.minValue();
			if (result === $pkg.ATNInvalidAltNumber) {
				result = minAlt;
			} else if (!((result === minAlt))) {
				return $pkg.ATNInvalidAltNumber;
			}
			i = i + (1) >> 0;
		}
		return result;
	};
	$pkg.PredictionModegetSingleViableAlt = PredictionModegetSingleViableAlt;
	NewBaseRecognizer = function() {
		var rec;
		rec = new BaseRecognizer.ptr(sliceType$21.nil, 0, sliceType.nil, sliceType.nil, sliceType.nil, "");
		rec.listeners = new sliceType$21([$pkg.ConsoleErrorListenerINSTANCE]);
		rec.state = -1;
		return rec;
	};
	$pkg.NewBaseRecognizer = NewBaseRecognizer;
	BaseRecognizer.ptr.prototype.checkVersion = function(toolVersion) {
		var _r$2, b, runtimeVersion, toolVersion, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; b = $f.b; runtimeVersion = $f.runtimeVersion; toolVersion = $f.toolVersion; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		runtimeVersion = "4.7";
		/* */ if (!(runtimeVersion === toolVersion)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(runtimeVersion === toolVersion)) { */ case 1:
			_r$2 = fmt.Println(new sliceType$8([new $String("ANTLR runtime and generated code versions disagree: " + runtimeVersion + "!=" + toolVersion)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseRecognizer.ptr.prototype.checkVersion }; } $f._r$2 = _r$2; $f.b = b; $f.runtimeVersion = runtimeVersion; $f.toolVersion = toolVersion; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseRecognizer.prototype.checkVersion = function(toolVersion) { return this.$val.checkVersion(toolVersion); };
	BaseRecognizer.ptr.prototype.Action = function(context, ruleIndex, actionIndex) {
		var actionIndex, b, context, ruleIndex;
		b = this;
		$panic(new $String("action not implemented on Recognizer!"));
	};
	BaseRecognizer.prototype.Action = function(context, ruleIndex, actionIndex) { return this.$val.Action(context, ruleIndex, actionIndex); };
	BaseRecognizer.ptr.prototype.AddErrorListener = function(listener) {
		var b, listener;
		b = this;
		b.listeners = $append(b.listeners, listener);
	};
	BaseRecognizer.prototype.AddErrorListener = function(listener) { return this.$val.AddErrorListener(listener); };
	BaseRecognizer.ptr.prototype.RemoveErrorListeners = function() {
		var b;
		b = this;
		b.listeners = $makeSlice(sliceType$21, 0);
	};
	BaseRecognizer.prototype.RemoveErrorListeners = function() { return this.$val.RemoveErrorListeners(); };
	BaseRecognizer.ptr.prototype.GetRuleNames = function() {
		var b;
		b = this;
		return b.RuleNames;
	};
	BaseRecognizer.prototype.GetRuleNames = function() { return this.$val.GetRuleNames(); };
	BaseRecognizer.ptr.prototype.GetTokenNames = function() {
		var b;
		b = this;
		return b.LiteralNames;
	};
	BaseRecognizer.prototype.GetTokenNames = function() { return this.$val.GetTokenNames(); };
	BaseRecognizer.ptr.prototype.GetSymbolicNames = function() {
		var b;
		b = this;
		return b.SymbolicNames;
	};
	BaseRecognizer.prototype.GetSymbolicNames = function() { return this.$val.GetSymbolicNames(); };
	BaseRecognizer.ptr.prototype.GetLiteralNames = function() {
		var b;
		b = this;
		return b.LiteralNames;
	};
	BaseRecognizer.prototype.GetLiteralNames = function() { return this.$val.GetLiteralNames(); };
	BaseRecognizer.ptr.prototype.GetState = function() {
		var b;
		b = this;
		return b.state;
	};
	BaseRecognizer.prototype.GetState = function() { return this.$val.GetState(); };
	BaseRecognizer.ptr.prototype.SetState = function(v) {
		var b, v;
		b = this;
		b.state = v;
	};
	BaseRecognizer.prototype.SetState = function(v) { return this.$val.SetState(v); };
	BaseRecognizer.ptr.prototype.GetRuleIndexMap = function() {
		var b;
		b = this;
		$panic(new $String("Method not defined!"));
	};
	BaseRecognizer.prototype.GetRuleIndexMap = function() { return this.$val.GetRuleIndexMap(); };
	BaseRecognizer.ptr.prototype.GetTokenType = function(tokenName) {
		var b, tokenName;
		b = this;
		$panic(new $String("Method not defined!"));
	};
	BaseRecognizer.prototype.GetTokenType = function(tokenName) { return this.$val.GetTokenType(tokenName); };
	BaseRecognizer.ptr.prototype.GetErrorHeader = function(e) {
		var _r$2, _r$3, _r$4, _r$5, b, column, e, line, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; b = $f.b; column = $f.column; e = $f.e; line = $f.line; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r$2 = e.GetOffendingToken(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = _r$2.GetLine(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		line = _r$3;
		_r$4 = e.GetOffendingToken(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = _r$4.GetColumn(); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		column = _r$5;
		$s = -1; return "line " + strconv.Itoa(line) + ":" + strconv.Itoa(column);
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseRecognizer.ptr.prototype.GetErrorHeader }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.b = b; $f.column = column; $f.e = e; $f.line = line; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseRecognizer.prototype.GetErrorHeader = function(e) { return this.$val.GetErrorHeader(e); };
	BaseRecognizer.ptr.prototype.GetTokenErrorDisplay = function(t) {
		var _r$2, _r$3, _r$4, _r$5, b, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; b = $f.b; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return "<no token>";
		}
		_r$2 = t.GetText(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		s = _r$2;
		/* */ if (s === "") { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (s === "") { */ case 2:
			_r$3 = t.GetTokenType(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3 === -1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$3 === -1) { */ case 4:
				s = "<EOF>";
				$s = 6; continue;
			/* } else { */ case 5:
				_r$4 = t.GetTokenType(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$5 = strconv.Itoa(_r$4); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				s = "<" + _r$5 + ">";
			/* } */ case 6:
		/* } */ case 3:
		s = strings.Replace(s, "\t", "\\t", -1);
		s = strings.Replace(s, "\n", "\\n", -1);
		s = strings.Replace(s, "\r", "\\r", -1);
		$s = -1; return "'" + s + "'";
		/* */ } return; } if ($f === undefined) { $f = { $blk: BaseRecognizer.ptr.prototype.GetTokenErrorDisplay }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.b = b; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	BaseRecognizer.prototype.GetTokenErrorDisplay = function(t) { return this.$val.GetTokenErrorDisplay(t); };
	BaseRecognizer.ptr.prototype.GetErrorListenerDispatch = function() {
		var b;
		b = this;
		return NewProxyErrorListener(b.listeners);
	};
	BaseRecognizer.prototype.GetErrorListenerDispatch = function() { return this.$val.GetErrorListenerDispatch(); };
	BaseRecognizer.ptr.prototype.Sempred = function(localctx, ruleIndex, actionIndex) {
		var actionIndex, b, localctx, ruleIndex;
		b = this;
		return true;
	};
	BaseRecognizer.prototype.Sempred = function(localctx, ruleIndex, actionIndex) { return this.$val.Sempred(localctx, ruleIndex, actionIndex); };
	BaseRecognizer.ptr.prototype.Precpred = function(localctx, precedence) {
		var b, localctx, precedence;
		b = this;
		return true;
	};
	BaseRecognizer.prototype.Precpred = function(localctx, precedence) { return this.$val.Precpred(localctx, precedence); };
	NewBaseRuleContext = function(parent, invokingState) {
		var invokingState, parent, rn;
		rn = new BaseRuleContext.ptr($ifaceNil, 0, 0);
		rn.parentCtx = parent;
		if ($interfaceIsEqual(parent, $ifaceNil)) {
			rn.invokingState = -1;
		} else {
			rn.invokingState = invokingState;
		}
		return rn;
	};
	$pkg.NewBaseRuleContext = NewBaseRuleContext;
	BaseRuleContext.ptr.prototype.GetBaseRuleContext = function() {
		var b;
		b = this;
		return b;
	};
	BaseRuleContext.prototype.GetBaseRuleContext = function() { return this.$val.GetBaseRuleContext(); };
	BaseRuleContext.ptr.prototype.SetParent = function(v) {
		var b, v;
		b = this;
		if ($interfaceIsEqual(v, $ifaceNil)) {
			b.parentCtx = $ifaceNil;
		} else {
			b.parentCtx = $assertType(v, RuleContext);
		}
	};
	BaseRuleContext.prototype.SetParent = function(v) { return this.$val.SetParent(v); };
	BaseRuleContext.ptr.prototype.GetInvokingState = function() {
		var b;
		b = this;
		return b.invokingState;
	};
	BaseRuleContext.prototype.GetInvokingState = function() { return this.$val.GetInvokingState(); };
	BaseRuleContext.ptr.prototype.SetInvokingState = function(t) {
		var b, t;
		b = this;
		b.invokingState = t;
	};
	BaseRuleContext.prototype.SetInvokingState = function(t) { return this.$val.SetInvokingState(t); };
	BaseRuleContext.ptr.prototype.GetRuleIndex = function() {
		var b;
		b = this;
		return b.RuleIndex;
	};
	BaseRuleContext.prototype.GetRuleIndex = function() { return this.$val.GetRuleIndex(); };
	BaseRuleContext.ptr.prototype.GetAltNumber = function() {
		var b;
		b = this;
		return $pkg.ATNInvalidAltNumber;
	};
	BaseRuleContext.prototype.GetAltNumber = function() { return this.$val.GetAltNumber(); };
	BaseRuleContext.ptr.prototype.SetAltNumber = function(altNumber) {
		var altNumber, b;
		b = this;
	};
	BaseRuleContext.prototype.SetAltNumber = function(altNumber) { return this.$val.SetAltNumber(altNumber); };
	BaseRuleContext.ptr.prototype.IsEmpty = function() {
		var b;
		b = this;
		return b.invokingState === -1;
	};
	BaseRuleContext.prototype.IsEmpty = function() { return this.$val.IsEmpty(); };
	BaseRuleContext.ptr.prototype.GetParent = function() {
		var b;
		b = this;
		return b.parentCtx;
	};
	BaseRuleContext.prototype.GetParent = function() { return this.$val.GetParent(); };
	SemanticContextandContext = function(a, b) {
		var _r$2, a, b, result, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; a = $f.a; b = $f.b; result = $f.result; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(a, $ifaceNil) || $interfaceIsEqual(a, $pkg.SemanticContextNone)) {
			$s = -1; return b;
		}
		if ($interfaceIsEqual(b, $ifaceNil) || $interfaceIsEqual(b, $pkg.SemanticContextNone)) {
			$s = -1; return a;
		}
		_r$2 = NewAND(a, b); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		result = _r$2;
		if (result.opnds.$length === 1) {
			$s = -1; return (x = result.opnds, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		}
		$s = -1; return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SemanticContextandContext }; } $f._r$2 = _r$2; $f.a = a; $f.b = b; $f.result = result; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SemanticContextandContext = SemanticContextandContext;
	SemanticContextorContext = function(a, b) {
		var _r$2, a, b, result, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; a = $f.a; b = $f.b; result = $f.result; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(a, $ifaceNil)) {
			$s = -1; return b;
		}
		if ($interfaceIsEqual(b, $ifaceNil)) {
			$s = -1; return a;
		}
		if ($interfaceIsEqual(a, $pkg.SemanticContextNone) || $interfaceIsEqual(b, $pkg.SemanticContextNone)) {
			$s = -1; return $pkg.SemanticContextNone;
		}
		_r$2 = NewOR(a, b); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		result = _r$2;
		if (result.opnds.$length === 1) {
			$s = -1; return (x = result.opnds, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		}
		$s = -1; return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SemanticContextorContext }; } $f._r$2 = _r$2; $f.a = a; $f.b = b; $f.result = result; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SemanticContextorContext = SemanticContextorContext;
	NewPredicate = function(ruleIndex, predIndex, isCtxDependent) {
		var isCtxDependent, p, predIndex, ruleIndex;
		p = new Predicate.ptr(0, 0, false);
		p.ruleIndex = ruleIndex;
		p.predIndex = predIndex;
		p.isCtxDependent = isCtxDependent;
		return p;
	};
	$pkg.NewPredicate = NewPredicate;
	Predicate.ptr.prototype.evalPrecedence = function(parser, outerContext) {
		var outerContext, p, parser;
		p = this;
		return p;
	};
	Predicate.prototype.evalPrecedence = function(parser, outerContext) { return this.$val.evalPrecedence(parser, outerContext); };
	Predicate.ptr.prototype.evaluate = function(parser, outerContext) {
		var _r$2, localctx, outerContext, p, parser, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; localctx = $f.localctx; outerContext = $f.outerContext; p = $f.p; parser = $f.parser; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		localctx = $ifaceNil;
		if (p.isCtxDependent) {
			localctx = outerContext;
		}
		_r$2 = parser.Sempred(localctx, p.ruleIndex, p.predIndex); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Predicate.ptr.prototype.evaluate }; } $f._r$2 = _r$2; $f.localctx = localctx; $f.outerContext = outerContext; $f.p = p; $f.parser = parser; $f.$s = $s; $f.$r = $r; return $f;
	};
	Predicate.prototype.evaluate = function(parser, outerContext) { return this.$val.evaluate(parser, outerContext); };
	Predicate.ptr.prototype.equals = function(other) {
		var _tuple, ok, other, p;
		p = this;
		if ($interfaceIsEqual(p, other)) {
			return true;
		} else {
			_tuple = $assertType(other, ptrType$69, true);
			ok = _tuple[1];
			if (!ok) {
				return false;
			} else {
				return (p.ruleIndex === $assertType(other, ptrType$69).ruleIndex) && (p.predIndex === $assertType(other, ptrType$69).predIndex) && p.isCtxDependent === $assertType(other, ptrType$69).isCtxDependent;
			}
		}
	};
	Predicate.prototype.equals = function(other) { return this.$val.equals(other); };
	Predicate.ptr.prototype.hash = function() {
		var p;
		p = this;
		return ($imul(p.ruleIndex, 43)) + ($imul(p.predIndex, 47)) >> 0;
	};
	Predicate.prototype.hash = function() { return this.$val.hash(); };
	Predicate.ptr.prototype.String = function() {
		var p;
		p = this;
		return "{" + strconv.Itoa(p.ruleIndex) + ":" + strconv.Itoa(p.predIndex) + "}?";
	};
	Predicate.prototype.String = function() { return this.$val.String(); };
	NewPrecedencePredicate = function(precedence) {
		var p, precedence;
		p = new PrecedencePredicate.ptr(0);
		p.precedence = precedence;
		return p;
	};
	$pkg.NewPrecedencePredicate = NewPrecedencePredicate;
	PrecedencePredicate.ptr.prototype.evaluate = function(parser, outerContext) {
		var _r$2, outerContext, p, parser, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; outerContext = $f.outerContext; p = $f.p; parser = $f.parser; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = parser.Precpred(outerContext, p.precedence); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PrecedencePredicate.ptr.prototype.evaluate }; } $f._r$2 = _r$2; $f.outerContext = outerContext; $f.p = p; $f.parser = parser; $f.$s = $s; $f.$r = $r; return $f;
	};
	PrecedencePredicate.prototype.evaluate = function(parser, outerContext) { return this.$val.evaluate(parser, outerContext); };
	PrecedencePredicate.ptr.prototype.evalPrecedence = function(parser, outerContext) {
		var _r$2, outerContext, p, parser, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; outerContext = $f.outerContext; p = $f.p; parser = $f.parser; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = parser.Precpred(outerContext, p.precedence); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$2) { */ case 1:
			$s = -1; return $pkg.SemanticContextNone;
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PrecedencePredicate.ptr.prototype.evalPrecedence }; } $f._r$2 = _r$2; $f.outerContext = outerContext; $f.p = p; $f.parser = parser; $f.$s = $s; $f.$r = $r; return $f;
	};
	PrecedencePredicate.prototype.evalPrecedence = function(parser, outerContext) { return this.$val.evalPrecedence(parser, outerContext); };
	PrecedencePredicate.ptr.prototype.equals = function(other) {
		var _tuple, ok, other, p;
		p = this;
		if ($interfaceIsEqual(p, other)) {
			return true;
		} else {
			_tuple = $assertType(other, ptrType$70, true);
			ok = _tuple[1];
			if (!ok) {
				return false;
			} else {
				return p.precedence === $assertType(other, ptrType$70).precedence;
			}
		}
	};
	PrecedencePredicate.prototype.equals = function(other) { return this.$val.equals(other); };
	PrecedencePredicate.ptr.prototype.hash = function() {
		var p;
		p = this;
		return $imul(p.precedence, 51);
	};
	PrecedencePredicate.prototype.hash = function() { return this.$val.hash(); };
	PrecedencePredicate.ptr.prototype.String = function() {
		var p;
		p = this;
		return "{" + strconv.Itoa(p.precedence) + ">=prec}?";
	};
	PrecedencePredicate.prototype.String = function() { return this.$val.String(); };
	PrecedencePredicatefilterPrecedencePredicates = function(set) {
		var _i, _ref, _tuple, c2, ok, result, set, v;
		result = $makeSlice(sliceType$31, 0);
		_ref = set.values();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_tuple = $assertType(v, ptrType$70, true);
			c2 = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				result = $append(result, c2);
			}
			_i++;
		}
		return result;
	};
	$pkg.PrecedencePredicatefilterPrecedencePredicates = PrecedencePredicatefilterPrecedencePredicates;
	NewAND = function(a, b) {
		var _i, _i$1, _i$2, _i$3, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$2, _ref$3, _tuple, _tuple$1, a, aa, and, b, ba, i, o, o$1, ok, ok$1, operands, opnds, p, precedencePredicates, reduced, v, vs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; aa = $f.aa; and = $f.and; b = $f.b; ba = $f.ba; i = $f.i; o = $f.o; o$1 = $f.o$1; ok = $f.ok; ok$1 = $f.ok$1; operands = $f.operands; opnds = $f.opnds; p = $f.p; precedencePredicates = $f.precedencePredicates; reduced = $f.reduced; v = $f.v; vs = $f.vs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		operands = NewSet($throwNilPointerError, $throwNilPointerError);
		_tuple = $assertType(a, ptrType$71, true);
		aa = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_ref = aa.opnds;
			_i = 0;
			/* while (true) { */ case 4:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
				o = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				_r$2 = operands.add(o); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				_i++;
			/* } */ $s = 4; continue; case 5:
			$s = 3; continue;
		/* } else { */ case 2:
			_r$3 = operands.add(a); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 3:
		_tuple$1 = $assertType(b, ptrType$71, true);
		ba = _tuple$1[0];
		ok$1 = _tuple$1[1];
		/* */ if (ok$1) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (ok$1) { */ case 8:
			_ref$1 = ba.opnds;
			_i$1 = 0;
			/* while (true) { */ case 11:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 12; continue; }
				o$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				_r$4 = operands.add(o$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				_i$1++;
			/* } */ $s = 11; continue; case 12:
			$s = 10; continue;
		/* } else { */ case 9:
			_r$5 = operands.add(b); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 10:
		precedencePredicates = PrecedencePredicatefilterPrecedencePredicates(operands);
		/* */ if (precedencePredicates.$length > 0) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (precedencePredicates.$length > 0) { */ case 15:
			reduced = ptrType$70.nil;
			_ref$2 = precedencePredicates;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				p = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
				if (reduced === ptrType$70.nil || p.precedence < reduced.precedence) {
					reduced = p;
				}
				_i$2++;
			}
			_r$6 = operands.add(reduced); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
		/* } */ case 16:
		vs = operands.values();
		opnds = $makeSlice(sliceType$10, vs.$length);
		_ref$3 = vs;
		_i$3 = 0;
		while (true) {
			if (!(_i$3 < _ref$3.$length)) { break; }
			i = _i$3;
			v = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$3]);
			((i < 0 || i >= opnds.$length) ? ($throwRuntimeError("index out of range"), undefined) : opnds.$array[opnds.$offset + i] = $assertType(v, SemanticContext));
			_i$3++;
		}
		and = new AND.ptr(sliceType$10.nil);
		and.opnds = opnds;
		$s = -1; return and;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewAND }; } $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.aa = aa; $f.and = and; $f.b = b; $f.ba = ba; $f.i = i; $f.o = o; $f.o$1 = o$1; $f.ok = ok; $f.ok$1 = ok$1; $f.operands = operands; $f.opnds = opnds; $f.p = p; $f.precedencePredicates = precedencePredicates; $f.reduced = reduced; $f.v = v; $f.vs = vs; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewAND = NewAND;
	AND.ptr.prototype.equals = function(other) {
		var _i, _r$2, _ref, _tuple, a, i, ok, other, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; a = $f.a; i = $f.i; ok = $f.ok; other = $f.other; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		/* */ if ($interfaceIsEqual(a, other)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(a, other)) { */ case 1:
			$s = -1; return true;
		/* } else { */ case 2:
			_tuple = $assertType(other, ptrType$71, true);
			ok = _tuple[1];
			/* */ if (!ok) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!ok) { */ case 4:
				$s = -1; return false;
			/* } else { */ case 5:
				_ref = $assertType(other, ptrType$71).opnds;
				_i = 0;
				/* while (true) { */ case 7:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
					i = _i;
					v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					_r$2 = (x = a.opnds, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).equals(v); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (!_r$2) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!_r$2) { */ case 9:
						$s = -1; return false;
					/* } */ case 10:
					_i++;
				/* } */ $s = 7; continue; case 8:
				$s = -1; return true;
			/* } */ case 6:
		/* } */ case 3:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: AND.ptr.prototype.equals }; } $f._i = _i; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f.a = a; $f.i = i; $f.ok = ok; $f.other = other; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	AND.prototype.equals = function(other) { return this.$val.equals(other); };
	AND.ptr.prototype.evaluate = function(parser, outerContext) {
		var _r$2, a, i, outerContext, parser, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; a = $f.a; i = $f.i; outerContext = $f.outerContext; parser = $f.parser; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.opnds.$length)) { break; } */ if(!(i < a.opnds.$length)) { $s = 2; continue; }
			_r$2 = (x = a.opnds, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).evaluate(parser, outerContext); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (!_r$2) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r$2) { */ case 3:
				$s = -1; return false;
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: AND.ptr.prototype.evaluate }; } $f._r$2 = _r$2; $f.a = a; $f.i = i; $f.outerContext = outerContext; $f.parser = parser; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	AND.prototype.evaluate = function(parser, outerContext) { return this.$val.evaluate(parser, outerContext); };
	AND.ptr.prototype.evalPrecedence = function(parser, outerContext) {
		var _i, _r$2, _r$3, _ref, a, context, differs, evaluated, i, o, operands, outerContext, parser, result, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; a = $f.a; context = $f.context; differs = $f.differs; evaluated = $f.evaluated; i = $f.i; o = $f.o; operands = $f.operands; outerContext = $f.outerContext; parser = $f.parser; result = $f.result; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		differs = false;
		operands = $makeSlice(sliceType$10, 0);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.opnds.$length)) { break; } */ if(!(i < a.opnds.$length)) { $s = 2; continue; }
			context = (x = a.opnds, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			_r$2 = context.evalPrecedence(parser, outerContext); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			evaluated = _r$2;
			differs = differs || (!($interfaceIsEqual(evaluated, context)));
			if ($interfaceIsEqual(evaluated, $ifaceNil)) {
				$s = -1; return $ifaceNil;
			} else if (!($interfaceIsEqual(evaluated, $pkg.SemanticContextNone))) {
				operands = $append(operands, evaluated);
			}
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (!differs) {
			$s = -1; return a;
		}
		if (operands.$length === 0) {
			$s = -1; return $pkg.SemanticContextNone;
		}
		result = $ifaceNil;
		_ref = operands;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			o = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if ($interfaceIsEqual(result, $ifaceNil)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ($interfaceIsEqual(result, $ifaceNil)) { */ case 6:
				result = o;
				$s = 8; continue;
			/* } else { */ case 7:
				_r$3 = SemanticContextandContext(result, o); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				result = _r$3;
			/* } */ case 8:
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: AND.ptr.prototype.evalPrecedence }; } $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.a = a; $f.context = context; $f.differs = differs; $f.evaluated = evaluated; $f.i = i; $f.o = o; $f.operands = operands; $f.outerContext = outerContext; $f.parser = parser; $f.result = result; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	AND.prototype.evalPrecedence = function(parser, outerContext) { return this.$val.evalPrecedence(parser, outerContext); };
	AND.ptr.prototype.hash = function() {
		var _arg, _arg$1, _i, _r$2, _r$3, _ref, a, h, op, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; a = $f.a; h = $f.h; op = $f.op; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		h = murmurInit(37);
		_ref = a.opnds;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			op = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_arg = h;
			_r$2 = op.hash(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg$1 = _r$2;
			_r$3 = murmurUpdate(_arg, _arg$1); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			h = _r$3;
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return murmurFinish(h, a.opnds.$length);
		/* */ } return; } if ($f === undefined) { $f = { $blk: AND.ptr.prototype.hash }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.a = a; $f.h = h; $f.op = op; $f.$s = $s; $f.$r = $r; return $f;
	};
	AND.prototype.hash = function() { return this.$val.hash(); };
	OR.ptr.prototype.hash = function() {
		var _arg, _arg$1, _i, _r$2, _r$3, _ref, a, h, op, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; a = $f.a; h = $f.h; op = $f.op; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		h = murmurInit(41);
		_ref = a.opnds;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			op = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_arg = h;
			_r$2 = op.hash(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg$1 = _r$2;
			_r$3 = murmurUpdate(_arg, _arg$1); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			h = _r$3;
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return murmurFinish(h, a.opnds.$length);
		/* */ } return; } if ($f === undefined) { $f = { $blk: OR.ptr.prototype.hash }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.a = a; $f.h = h; $f.op = op; $f.$s = $s; $f.$r = $r; return $f;
	};
	OR.prototype.hash = function() { return this.$val.hash(); };
	AND.ptr.prototype.String = function() {
		var _i, _r$2, _ref, a, o, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _ref = $f._ref; a = $f.a; o = $f.o; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		s = "";
		_ref = a.opnds;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			o = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$2 = fmt.Sprint(new sliceType$8([o])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			s = s + ("&& " + _r$2);
			_i++;
		/* } */ $s = 1; continue; case 2:
		if (s.length > 3) {
			$s = -1; return $substring(s, 0, 3);
		}
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: AND.ptr.prototype.String }; } $f._i = _i; $f._r$2 = _r$2; $f._ref = _ref; $f.a = a; $f.o = o; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	AND.prototype.String = function() { return this.$val.String(); };
	NewOR = function(a, b) {
		var _i, _i$1, _i$2, _i$3, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$2, _ref$3, _tuple, _tuple$1, a, aa, b, ba, i, o, o$1, o$2, ok, ok$1, operands, opnds, p, precedencePredicates, reduced, v, vs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; aa = $f.aa; b = $f.b; ba = $f.ba; i = $f.i; o = $f.o; o$1 = $f.o$1; o$2 = $f.o$2; ok = $f.ok; ok$1 = $f.ok$1; operands = $f.operands; opnds = $f.opnds; p = $f.p; precedencePredicates = $f.precedencePredicates; reduced = $f.reduced; v = $f.v; vs = $f.vs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		operands = NewSet($throwNilPointerError, $throwNilPointerError);
		_tuple = $assertType(a, ptrType$72, true);
		aa = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_ref = aa.opnds;
			_i = 0;
			/* while (true) { */ case 4:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
				o = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				_r$2 = operands.add(o); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				_i++;
			/* } */ $s = 4; continue; case 5:
			$s = 3; continue;
		/* } else { */ case 2:
			_r$3 = operands.add(a); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 3:
		_tuple$1 = $assertType(b, ptrType$72, true);
		ba = _tuple$1[0];
		ok$1 = _tuple$1[1];
		/* */ if (ok$1) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (ok$1) { */ case 8:
			_ref$1 = ba.opnds;
			_i$1 = 0;
			/* while (true) { */ case 11:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 12; continue; }
				o$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				_r$4 = operands.add(o$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				_i$1++;
			/* } */ $s = 11; continue; case 12:
			$s = 10; continue;
		/* } else { */ case 9:
			_r$5 = operands.add(b); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 10:
		precedencePredicates = PrecedencePredicatefilterPrecedencePredicates(operands);
		/* */ if (precedencePredicates.$length > 0) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (precedencePredicates.$length > 0) { */ case 15:
			reduced = ptrType$70.nil;
			_ref$2 = precedencePredicates;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				p = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
				if (reduced === ptrType$70.nil || p.precedence > reduced.precedence) {
					reduced = p;
				}
				_i$2++;
			}
			_r$6 = operands.add(reduced); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
		/* } */ case 16:
		vs = operands.values();
		opnds = $makeSlice(sliceType$10, vs.$length);
		_ref$3 = vs;
		_i$3 = 0;
		while (true) {
			if (!(_i$3 < _ref$3.$length)) { break; }
			i = _i$3;
			v = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$3]);
			((i < 0 || i >= opnds.$length) ? ($throwRuntimeError("index out of range"), undefined) : opnds.$array[opnds.$offset + i] = $assertType(v, SemanticContext));
			_i$3++;
		}
		o$2 = new OR.ptr(sliceType$10.nil);
		o$2.opnds = opnds;
		$s = -1; return o$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewOR }; } $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.aa = aa; $f.b = b; $f.ba = ba; $f.i = i; $f.o = o; $f.o$1 = o$1; $f.o$2 = o$2; $f.ok = ok; $f.ok$1 = ok$1; $f.operands = operands; $f.opnds = opnds; $f.p = p; $f.precedencePredicates = precedencePredicates; $f.reduced = reduced; $f.v = v; $f.vs = vs; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewOR = NewOR;
	OR.ptr.prototype.equals = function(other) {
		var _i, _r$2, _ref, _tuple, i, o, ok, other, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; i = $f.i; o = $f.o; ok = $f.ok; other = $f.other; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		o = this;
		/* */ if ($interfaceIsEqual(o, other)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(o, other)) { */ case 1:
			$s = -1; return true;
		/* } else { */ case 2:
			_tuple = $assertType(other, ptrType$72, true);
			ok = _tuple[1];
			/* */ if (!ok) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!ok) { */ case 4:
				$s = -1; return false;
			/* } else { */ case 5:
				_ref = $assertType(other, ptrType$72).opnds;
				_i = 0;
				/* while (true) { */ case 7:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
					i = _i;
					v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					_r$2 = (x = o.opnds, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).equals(v); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (!_r$2) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!_r$2) { */ case 9:
						$s = -1; return false;
					/* } */ case 10:
					_i++;
				/* } */ $s = 7; continue; case 8:
				$s = -1; return true;
			/* } */ case 6:
		/* } */ case 3:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: OR.ptr.prototype.equals }; } $f._i = _i; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f.i = i; $f.o = o; $f.ok = ok; $f.other = other; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	OR.prototype.equals = function(other) { return this.$val.equals(other); };
	OR.ptr.prototype.evaluate = function(parser, outerContext) {
		var _r$2, i, o, outerContext, parser, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; i = $f.i; o = $f.o; outerContext = $f.outerContext; parser = $f.parser; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		o = this;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < o.opnds.$length)) { break; } */ if(!(i < o.opnds.$length)) { $s = 2; continue; }
			_r$2 = (x = o.opnds, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).evaluate(parser, outerContext); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r$2) { */ case 3:
				$s = -1; return true;
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: OR.ptr.prototype.evaluate }; } $f._r$2 = _r$2; $f.i = i; $f.o = o; $f.outerContext = outerContext; $f.parser = parser; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	OR.prototype.evaluate = function(parser, outerContext) { return this.$val.evaluate(parser, outerContext); };
	OR.ptr.prototype.evalPrecedence = function(parser, outerContext) {
		var _i, _r$2, _r$3, _ref, context, differs, evaluated, i, o, o$1, operands, outerContext, parser, result, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; context = $f.context; differs = $f.differs; evaluated = $f.evaluated; i = $f.i; o = $f.o; o$1 = $f.o$1; operands = $f.operands; outerContext = $f.outerContext; parser = $f.parser; result = $f.result; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		o = this;
		differs = false;
		operands = $makeSlice(sliceType$10, 0);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < o.opnds.$length)) { break; } */ if(!(i < o.opnds.$length)) { $s = 2; continue; }
			context = (x = o.opnds, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			_r$2 = context.evalPrecedence(parser, outerContext); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			evaluated = _r$2;
			differs = differs || (!($interfaceIsEqual(evaluated, context)));
			if ($interfaceIsEqual(evaluated, $pkg.SemanticContextNone)) {
				$s = -1; return $pkg.SemanticContextNone;
			} else if (!($interfaceIsEqual(evaluated, $ifaceNil))) {
				operands = $append(operands, evaluated);
			}
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (!differs) {
			$s = -1; return o;
		}
		if (operands.$length === 0) {
			$s = -1; return $ifaceNil;
		}
		result = $ifaceNil;
		_ref = operands;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			o$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if ($interfaceIsEqual(result, $ifaceNil)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ($interfaceIsEqual(result, $ifaceNil)) { */ case 6:
				result = o$1;
				$s = 8; continue;
			/* } else { */ case 7:
				_r$3 = SemanticContextorContext(result, o$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				result = _r$3;
			/* } */ case 8:
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: OR.ptr.prototype.evalPrecedence }; } $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.context = context; $f.differs = differs; $f.evaluated = evaluated; $f.i = i; $f.o = o; $f.o$1 = o$1; $f.operands = operands; $f.outerContext = outerContext; $f.parser = parser; $f.result = result; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	OR.prototype.evalPrecedence = function(parser, outerContext) { return this.$val.evalPrecedence(parser, outerContext); };
	OR.ptr.prototype.String = function() {
		var _i, _r$2, _ref, o, o$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _ref = $f._ref; o = $f.o; o$1 = $f.o$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		o = this;
		s = "";
		_ref = o.opnds;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			o$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$2 = fmt.Sprint(new sliceType$8([o$1])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			s = s + ("|| " + _r$2);
			_i++;
		/* } */ $s = 1; continue; case 2:
		if (s.length > 3) {
			$s = -1; return $substring(s, 0, 3);
		}
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: OR.ptr.prototype.String }; } $f._i = _i; $f._r$2 = _r$2; $f._ref = _ref; $f.o = o; $f.o$1 = o$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	OR.prototype.String = function() { return this.$val.String(); };
	BaseToken.ptr.prototype.GetChannel = function() {
		var b;
		b = this;
		return b.channel;
	};
	BaseToken.prototype.GetChannel = function() { return this.$val.GetChannel(); };
	BaseToken.ptr.prototype.GetStart = function() {
		var b;
		b = this;
		return b.start;
	};
	BaseToken.prototype.GetStart = function() { return this.$val.GetStart(); };
	BaseToken.ptr.prototype.GetStop = function() {
		var b;
		b = this;
		return b.stop;
	};
	BaseToken.prototype.GetStop = function() { return this.$val.GetStop(); };
	BaseToken.ptr.prototype.GetLine = function() {
		var b;
		b = this;
		return b.line;
	};
	BaseToken.prototype.GetLine = function() { return this.$val.GetLine(); };
	BaseToken.ptr.prototype.GetColumn = function() {
		var b;
		b = this;
		return b.column;
	};
	BaseToken.prototype.GetColumn = function() { return this.$val.GetColumn(); };
	BaseToken.ptr.prototype.GetTokenType = function() {
		var b;
		b = this;
		return b.tokenType;
	};
	BaseToken.prototype.GetTokenType = function() { return this.$val.GetTokenType(); };
	BaseToken.ptr.prototype.GetSource = function() {
		var b;
		b = this;
		return b.source;
	};
	BaseToken.prototype.GetSource = function() { return this.$val.GetSource(); };
	BaseToken.ptr.prototype.GetTokenIndex = function() {
		var b;
		b = this;
		return b.tokenIndex;
	};
	BaseToken.prototype.GetTokenIndex = function() { return this.$val.GetTokenIndex(); };
	BaseToken.ptr.prototype.SetTokenIndex = function(v) {
		var b, v;
		b = this;
		b.tokenIndex = v;
	};
	BaseToken.prototype.SetTokenIndex = function(v) { return this.$val.SetTokenIndex(v); };
	BaseToken.ptr.prototype.GetTokenSource = function() {
		var b;
		b = this;
		return b.source.tokenSource;
	};
	BaseToken.prototype.GetTokenSource = function() { return this.$val.GetTokenSource(); };
	BaseToken.ptr.prototype.GetInputStream = function() {
		var b;
		b = this;
		return b.source.charStream;
	};
	BaseToken.prototype.GetInputStream = function() { return this.$val.GetInputStream(); };
	NewCommonToken = function(source, tokenType, channel, start, stop) {
		var _r$2, _r$3, channel, source, start, stop, t, tokenType, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; channel = $f.channel; source = $f.source; start = $f.start; stop = $f.stop; t = $f.t; tokenType = $f.tokenType; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = new CommonToken.ptr(ptrType$73.nil);
		t.BaseToken = new BaseToken.ptr(ptrType$28.nil, 0, 0, 0, 0, 0, 0, 0, "", false);
		t.BaseToken.source = source;
		t.BaseToken.tokenType = tokenType;
		t.BaseToken.channel = channel;
		t.BaseToken.start = start;
		t.BaseToken.stop = stop;
		t.BaseToken.tokenIndex = -1;
		/* */ if (!($interfaceIsEqual(t.BaseToken.source.tokenSource, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(t.BaseToken.source.tokenSource, $ifaceNil))) { */ case 1:
			_r$2 = source.tokenSource.GetLine(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			t.BaseToken.line = _r$2;
			_r$3 = source.tokenSource.GetCharPositionInLine(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			t.BaseToken.column = _r$3;
			$s = 3; continue;
		/* } else { */ case 2:
			t.BaseToken.column = -1;
		/* } */ case 3:
		$s = -1; return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewCommonToken }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.channel = channel; $f.source = source; $f.start = start; $f.stop = stop; $f.t = t; $f.tokenType = tokenType; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewCommonToken = NewCommonToken;
	CommonToken.ptr.prototype.GetText = function() {
		var _r$2, _r$3, c, input, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; c = $f.c; input = $f.input; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if (!(c.BaseToken.text === "")) {
			$s = -1; return c.BaseToken.text;
		}
		input = c.BaseToken.GetInputStream();
		if ($interfaceIsEqual(input, $ifaceNil)) {
			$s = -1; return "";
		}
		_r$2 = input.Size(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		n = _r$2;
		/* */ if (c.BaseToken.start < n && c.BaseToken.stop < n) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (c.BaseToken.start < n && c.BaseToken.stop < n) { */ case 2:
			_r$3 = input.GetTextFromInterval(NewInterval(c.BaseToken.start, c.BaseToken.stop)); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 3:
		$s = -1; return "<EOF>";
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonToken.ptr.prototype.GetText }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.c = c; $f.input = input; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonToken.prototype.GetText = function() { return this.$val.GetText(); };
	CommonToken.ptr.prototype.SetText = function(text) {
		var c, text;
		c = this;
		c.BaseToken.text = text;
	};
	CommonToken.prototype.SetText = function(text) { return this.$val.SetText(text); };
	CommonToken.ptr.prototype.String = function() {
		var _r$2, c, ch, txt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; c = $f.c; ch = $f.ch; txt = $f.txt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r$2 = c.GetText(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		txt = _r$2;
		if (!(txt === "")) {
			txt = strings.Replace(txt, "\n", "\\n", -1);
			txt = strings.Replace(txt, "\r", "\\r", -1);
			txt = strings.Replace(txt, "\t", "\\t", -1);
		} else {
			txt = "<no text>";
		}
		ch = "";
		if (c.BaseToken.channel > 0) {
			ch = ",channel=" + strconv.Itoa(c.BaseToken.channel);
		} else {
			ch = "";
		}
		$s = -1; return "[@" + strconv.Itoa(c.BaseToken.tokenIndex) + "," + strconv.Itoa(c.BaseToken.start) + ":" + strconv.Itoa(c.BaseToken.stop) + "='" + txt + "',<" + strconv.Itoa(c.BaseToken.tokenType) + ">" + ch + "," + strconv.Itoa(c.BaseToken.line) + ":" + strconv.Itoa(c.BaseToken.column) + "]";
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommonToken.ptr.prototype.String }; } $f._r$2 = _r$2; $f.c = c; $f.ch = ch; $f.txt = txt; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommonToken.prototype.String = function() { return this.$val.String(); };
	NewTraceListener = function(parser) {
		var parser, tl;
		tl = new TraceListener.ptr(ptrType$77.nil);
		tl.parser = parser;
		return tl;
	};
	$pkg.NewTraceListener = NewTraceListener;
	TraceListener.ptr.prototype.VisitErrorNode = function(param) {
		var param, t;
		t = this;
	};
	TraceListener.prototype.VisitErrorNode = function(param) { return this.$val.VisitErrorNode(param); };
	TraceListener.ptr.prototype.EnterEveryRule = function(ctx) {
		var _r$2, _r$3, _r$4, _r$5, ctx, t, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; ctx = $f.ctx; t = $f.t; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$2 = ctx.GetRuleIndex(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = t.parser.input.LT(1); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = _r$3.GetText(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = fmt.Println(new sliceType$8([new $String("enter   " + (x = t.parser.BaseRecognizer.GetRuleNames(), x$1 = _r$2, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) + ", LT(1)=" + _r$4)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TraceListener.ptr.prototype.EnterEveryRule }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.ctx = ctx; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	TraceListener.prototype.EnterEveryRule = function(ctx) { return this.$val.EnterEveryRule(ctx); };
	TraceListener.ptr.prototype.VisitTerminal = function(node) {
		var _r$2, _r$3, _r$4, _r$5, node, t, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; node = $f.node; t = $f.t; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$2 = node.GetSymbol(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = fmt.Sprint(new sliceType$8([_r$2])); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = t.parser.ctx.GetRuleIndex(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = fmt.Println(new sliceType$8([new $String("consume " + _r$3 + " rule " + (x = t.parser.BaseRecognizer.GetRuleNames(), x$1 = _r$4, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])))])); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TraceListener.ptr.prototype.VisitTerminal }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.node = node; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	TraceListener.prototype.VisitTerminal = function(node) { return this.$val.VisitTerminal(node); };
	TraceListener.ptr.prototype.ExitEveryRule = function(ctx) {
		var _r$2, _r$3, _r$4, _r$5, ctx, t, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; ctx = $f.ctx; t = $f.t; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$2 = ctx.GetRuleIndex(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = t.parser.input.LT(1); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = _r$3.GetText(); /* */ $s = 3; case 3: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = fmt.Println(new sliceType$8([new $String("exit    " + (x = t.parser.BaseRecognizer.GetRuleNames(), x$1 = _r$2, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) + ", LT(1)=" + _r$4)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TraceListener.ptr.prototype.ExitEveryRule }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.ctx = ctx; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	TraceListener.prototype.ExitEveryRule = function(ctx) { return this.$val.ExitEveryRule(ctx); };
	NewBaseTransition = function(target) {
		var t, target;
		if ($interfaceIsEqual(target, $ifaceNil)) {
			$panic(new $String("target cannot be nil."));
		}
		t = new BaseTransition.ptr($ifaceNil, false, 0, ptrType.nil, 0);
		t.target = target;
		t.isEpsilon = false;
		t.intervalSet = ptrType.nil;
		return t;
	};
	$pkg.NewBaseTransition = NewBaseTransition;
	BaseTransition.ptr.prototype.getTarget = function() {
		var t;
		t = this;
		return t.target;
	};
	BaseTransition.prototype.getTarget = function() { return this.$val.getTarget(); };
	BaseTransition.ptr.prototype.setTarget = function(s) {
		var s, t;
		t = this;
		t.target = s;
	};
	BaseTransition.prototype.setTarget = function(s) { return this.$val.setTarget(s); };
	BaseTransition.ptr.prototype.getIsEpsilon = function() {
		var t;
		t = this;
		return t.isEpsilon;
	};
	BaseTransition.prototype.getIsEpsilon = function() { return this.$val.getIsEpsilon(); };
	BaseTransition.ptr.prototype.getLabel = function() {
		var t;
		t = this;
		return t.intervalSet;
	};
	BaseTransition.prototype.getLabel = function() { return this.$val.getLabel(); };
	BaseTransition.ptr.prototype.getSerializationType = function() {
		var t;
		t = this;
		return t.serializationType;
	};
	BaseTransition.prototype.getSerializationType = function() { return this.$val.getSerializationType(); };
	BaseTransition.ptr.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) {
		var maxVocabSymbol, minVocabSymbol, symbol, t;
		t = this;
		$panic(new $String("Not implemented"));
	};
	BaseTransition.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) { return this.$val.Matches(symbol, minVocabSymbol, maxVocabSymbol); };
	NewAtomTransition = function(target, intervalSet) {
		var intervalSet, t, target;
		t = new AtomTransition.ptr(ptrType$78.nil);
		t.BaseTransition = NewBaseTransition(target);
		t.BaseTransition.label = intervalSet;
		t.BaseTransition.intervalSet = t.makeLabel();
		t.BaseTransition.serializationType = 5;
		return t;
	};
	$pkg.NewAtomTransition = NewAtomTransition;
	AtomTransition.ptr.prototype.makeLabel = function() {
		var s, t;
		t = this;
		s = NewIntervalSet();
		s.addOne(t.BaseTransition.label);
		return s;
	};
	AtomTransition.prototype.makeLabel = function() { return this.$val.makeLabel(); };
	AtomTransition.ptr.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) {
		var maxVocabSymbol, minVocabSymbol, symbol, t;
		t = this;
		return t.BaseTransition.label === symbol;
	};
	AtomTransition.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) { return this.$val.Matches(symbol, minVocabSymbol, maxVocabSymbol); };
	AtomTransition.ptr.prototype.String = function() {
		var t;
		t = this;
		return strconv.Itoa(t.BaseTransition.label);
	};
	AtomTransition.prototype.String = function() { return this.$val.String(); };
	NewRuleTransition = function(ruleStart, ruleIndex, precedence, followState) {
		var followState, precedence, ruleIndex, ruleStart, t;
		t = new RuleTransition.ptr(ptrType$78.nil, $ifaceNil, 0, 0);
		t.BaseTransition = NewBaseTransition(ruleStart);
		t.ruleIndex = ruleIndex;
		t.precedence = precedence;
		t.followState = followState;
		t.BaseTransition.serializationType = 3;
		t.BaseTransition.isEpsilon = true;
		return t;
	};
	$pkg.NewRuleTransition = NewRuleTransition;
	RuleTransition.ptr.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) {
		var maxVocabSymbol, minVocabSymbol, symbol, t;
		t = this;
		return false;
	};
	RuleTransition.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) { return this.$val.Matches(symbol, minVocabSymbol, maxVocabSymbol); };
	NewEpsilonTransition = function(target, outermostPrecedenceReturn) {
		var outermostPrecedenceReturn, t, target;
		t = new EpsilonTransition.ptr(ptrType$78.nil, 0);
		t.BaseTransition = NewBaseTransition(target);
		t.BaseTransition.serializationType = 1;
		t.BaseTransition.isEpsilon = true;
		t.outermostPrecedenceReturn = outermostPrecedenceReturn;
		return t;
	};
	$pkg.NewEpsilonTransition = NewEpsilonTransition;
	EpsilonTransition.ptr.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) {
		var maxVocabSymbol, minVocabSymbol, symbol, t;
		t = this;
		return false;
	};
	EpsilonTransition.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) { return this.$val.Matches(symbol, minVocabSymbol, maxVocabSymbol); };
	EpsilonTransition.ptr.prototype.String = function() {
		var t;
		t = this;
		return "epsilon";
	};
	EpsilonTransition.prototype.String = function() { return this.$val.String(); };
	NewRangeTransition = function(target, start, stop) {
		var start, stop, t, target;
		t = new RangeTransition.ptr(ptrType$78.nil, 0, 0);
		t.BaseTransition = NewBaseTransition(target);
		t.BaseTransition.serializationType = 2;
		t.start = start;
		t.stop = stop;
		t.BaseTransition.intervalSet = t.makeLabel();
		return t;
	};
	$pkg.NewRangeTransition = NewRangeTransition;
	RangeTransition.ptr.prototype.makeLabel = function() {
		var s, t;
		t = this;
		s = NewIntervalSet();
		s.addRange(t.start, t.stop);
		return s;
	};
	RangeTransition.prototype.makeLabel = function() { return this.$val.makeLabel(); };
	RangeTransition.ptr.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) {
		var maxVocabSymbol, minVocabSymbol, symbol, t;
		t = this;
		return symbol >= t.start && symbol <= t.stop;
	};
	RangeTransition.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) { return this.$val.Matches(symbol, minVocabSymbol, maxVocabSymbol); };
	RangeTransition.ptr.prototype.String = function() {
		var t;
		t = this;
		return "'" + ($encodeRune(t.start)) + "'..'" + ($encodeRune(t.stop)) + "'";
	};
	RangeTransition.prototype.String = function() { return this.$val.String(); };
	NewBasePredicateTransition = function(target) {
		var t, target;
		t = new BaseAbstractPredicateTransition.ptr(ptrType$78.nil);
		t.BaseTransition = NewBaseTransition(target);
		return t;
	};
	$pkg.NewBasePredicateTransition = NewBasePredicateTransition;
	BaseAbstractPredicateTransition.ptr.prototype.IAbstractPredicateTransitionFoo = function() {
		var a;
		a = this;
	};
	BaseAbstractPredicateTransition.prototype.IAbstractPredicateTransitionFoo = function() { return this.$val.IAbstractPredicateTransitionFoo(); };
	NewPredicateTransition = function(target, ruleIndex, predIndex, isCtxDependent) {
		var isCtxDependent, predIndex, ruleIndex, t, target;
		t = new PredicateTransition.ptr(ptrType$79.nil, false, 0, 0);
		t.BaseAbstractPredicateTransition = NewBasePredicateTransition(target);
		t.BaseAbstractPredicateTransition.BaseTransition.serializationType = 4;
		t.ruleIndex = ruleIndex;
		t.predIndex = predIndex;
		t.isCtxDependent = isCtxDependent;
		t.BaseAbstractPredicateTransition.BaseTransition.isEpsilon = true;
		return t;
	};
	$pkg.NewPredicateTransition = NewPredicateTransition;
	PredicateTransition.ptr.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) {
		var maxVocabSymbol, minVocabSymbol, symbol, t;
		t = this;
		return false;
	};
	PredicateTransition.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) { return this.$val.Matches(symbol, minVocabSymbol, maxVocabSymbol); };
	PredicateTransition.ptr.prototype.getPredicate = function() {
		var t;
		t = this;
		return NewPredicate(t.ruleIndex, t.predIndex, t.isCtxDependent);
	};
	PredicateTransition.prototype.getPredicate = function() { return this.$val.getPredicate(); };
	PredicateTransition.ptr.prototype.String = function() {
		var t;
		t = this;
		return "pred_" + strconv.Itoa(t.ruleIndex) + ":" + strconv.Itoa(t.predIndex);
	};
	PredicateTransition.prototype.String = function() { return this.$val.String(); };
	NewActionTransition = function(target, ruleIndex, actionIndex, isCtxDependent) {
		var actionIndex, isCtxDependent, ruleIndex, t, target;
		t = new ActionTransition.ptr(ptrType$78.nil, false, 0, 0, 0);
		t.BaseTransition = NewBaseTransition(target);
		t.BaseTransition.serializationType = 6;
		t.ruleIndex = ruleIndex;
		t.actionIndex = actionIndex;
		t.isCtxDependent = isCtxDependent;
		t.BaseTransition.isEpsilon = true;
		return t;
	};
	$pkg.NewActionTransition = NewActionTransition;
	ActionTransition.ptr.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) {
		var maxVocabSymbol, minVocabSymbol, symbol, t;
		t = this;
		return false;
	};
	ActionTransition.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) { return this.$val.Matches(symbol, minVocabSymbol, maxVocabSymbol); };
	ActionTransition.ptr.prototype.String = function() {
		var t;
		t = this;
		return "action_" + strconv.Itoa(t.ruleIndex) + ":" + strconv.Itoa(t.actionIndex);
	};
	ActionTransition.prototype.String = function() { return this.$val.String(); };
	NewSetTransition = function(target, set) {
		var set, t, target;
		t = new SetTransition.ptr(ptrType$78.nil);
		t.BaseTransition = NewBaseTransition(target);
		t.BaseTransition.serializationType = 7;
		if (!(set === ptrType.nil)) {
			t.BaseTransition.intervalSet = set;
		} else {
			t.BaseTransition.intervalSet = NewIntervalSet();
			t.BaseTransition.intervalSet.addOne(0);
		}
		return t;
	};
	$pkg.NewSetTransition = NewSetTransition;
	SetTransition.ptr.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) {
		var maxVocabSymbol, minVocabSymbol, symbol, t;
		t = this;
		return t.BaseTransition.intervalSet.contains(symbol);
	};
	SetTransition.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) { return this.$val.Matches(symbol, minVocabSymbol, maxVocabSymbol); };
	SetTransition.ptr.prototype.String = function() {
		var t;
		t = this;
		return t.BaseTransition.intervalSet.String();
	};
	SetTransition.prototype.String = function() { return this.$val.String(); };
	NewNotSetTransition = function(target, set) {
		var set, t, target;
		t = new NotSetTransition.ptr(ptrType$80.nil);
		t.SetTransition = NewSetTransition(target, set);
		t.SetTransition.BaseTransition.serializationType = 8;
		return t;
	};
	$pkg.NewNotSetTransition = NewNotSetTransition;
	NotSetTransition.ptr.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) {
		var maxVocabSymbol, minVocabSymbol, symbol, t;
		t = this;
		return symbol >= minVocabSymbol && symbol <= maxVocabSymbol && !t.SetTransition.BaseTransition.intervalSet.contains(symbol);
	};
	NotSetTransition.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) { return this.$val.Matches(symbol, minVocabSymbol, maxVocabSymbol); };
	NotSetTransition.ptr.prototype.String = function() {
		var t;
		t = this;
		return "~" + t.SetTransition.BaseTransition.intervalSet.String();
	};
	NotSetTransition.prototype.String = function() { return this.$val.String(); };
	NewWildcardTransition = function(target) {
		var t, target;
		t = new WildcardTransition.ptr(ptrType$78.nil);
		t.BaseTransition = NewBaseTransition(target);
		t.BaseTransition.serializationType = 9;
		return t;
	};
	$pkg.NewWildcardTransition = NewWildcardTransition;
	WildcardTransition.ptr.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) {
		var maxVocabSymbol, minVocabSymbol, symbol, t;
		t = this;
		return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
	};
	WildcardTransition.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) { return this.$val.Matches(symbol, minVocabSymbol, maxVocabSymbol); };
	WildcardTransition.ptr.prototype.String = function() {
		var t;
		t = this;
		return ".";
	};
	WildcardTransition.prototype.String = function() { return this.$val.String(); };
	NewPrecedencePredicateTransition = function(target, precedence) {
		var precedence, t, target;
		t = new PrecedencePredicateTransition.ptr(ptrType$79.nil, 0);
		t.BaseAbstractPredicateTransition = NewBasePredicateTransition(target);
		t.BaseAbstractPredicateTransition.BaseTransition.serializationType = 10;
		t.precedence = precedence;
		t.BaseAbstractPredicateTransition.BaseTransition.isEpsilon = true;
		return t;
	};
	$pkg.NewPrecedencePredicateTransition = NewPrecedencePredicateTransition;
	PrecedencePredicateTransition.ptr.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) {
		var maxVocabSymbol, minVocabSymbol, symbol, t;
		t = this;
		return false;
	};
	PrecedencePredicateTransition.prototype.Matches = function(symbol, minVocabSymbol, maxVocabSymbol) { return this.$val.Matches(symbol, minVocabSymbol, maxVocabSymbol); };
	PrecedencePredicateTransition.ptr.prototype.getPredicate = function() {
		var t;
		t = this;
		return NewPrecedencePredicate(t.precedence);
	};
	PrecedencePredicateTransition.prototype.getPredicate = function() { return this.$val.getPredicate(); };
	PrecedencePredicateTransition.ptr.prototype.String = function() {
		var _r$2, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$2 = fmt.Sprint(new sliceType$8([new $Int(t.precedence)])); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2 + " >= _p";
		/* */ } return; } if ($f === undefined) { $f = { $blk: PrecedencePredicateTransition.ptr.prototype.String }; } $f._r$2 = _r$2; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	PrecedencePredicateTransition.prototype.String = function() { return this.$val.String(); };
	NewTerminalNodeImpl = function(symbol) {
		var symbol, tn;
		tn = new TerminalNodeImpl.ptr($ifaceNil, $ifaceNil);
		tn.parentCtx = $ifaceNil;
		tn.symbol = symbol;
		return tn;
	};
	$pkg.NewTerminalNodeImpl = NewTerminalNodeImpl;
	TerminalNodeImpl.ptr.prototype.GetChild = function(i) {
		var i, t;
		t = this;
		return $ifaceNil;
	};
	TerminalNodeImpl.prototype.GetChild = function(i) { return this.$val.GetChild(i); };
	TerminalNodeImpl.ptr.prototype.GetChildren = function() {
		var t;
		t = this;
		return sliceType$26.nil;
	};
	TerminalNodeImpl.prototype.GetChildren = function() { return this.$val.GetChildren(); };
	TerminalNodeImpl.ptr.prototype.SetChildren = function(tree) {
		var t, tree;
		t = this;
		$panic(new $String("Cannot set children on terminal node"));
	};
	TerminalNodeImpl.prototype.SetChildren = function(tree) { return this.$val.SetChildren(tree); };
	TerminalNodeImpl.ptr.prototype.GetSymbol = function() {
		var t;
		t = this;
		return t.symbol;
	};
	TerminalNodeImpl.prototype.GetSymbol = function() { return this.$val.GetSymbol(); };
	TerminalNodeImpl.ptr.prototype.GetParent = function() {
		var t;
		t = this;
		return t.parentCtx;
	};
	TerminalNodeImpl.prototype.GetParent = function() { return this.$val.GetParent(); };
	TerminalNodeImpl.ptr.prototype.SetParent = function(tree) {
		var t, tree;
		t = this;
		t.parentCtx = $assertType(tree, RuleContext);
	};
	TerminalNodeImpl.prototype.SetParent = function(tree) { return this.$val.SetParent(tree); };
	TerminalNodeImpl.ptr.prototype.GetPayload = function() {
		var t;
		t = this;
		return t.symbol;
	};
	TerminalNodeImpl.prototype.GetPayload = function() { return this.$val.GetPayload(); };
	TerminalNodeImpl.ptr.prototype.GetSourceInterval = function() {
		var _r$2, t, tokenIndex, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; t = $f.t; tokenIndex = $f.tokenIndex; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(t.symbol, $ifaceNil)) {
			$s = -1; return $pkg.TreeInvalidInterval;
		}
		_r$2 = t.symbol.GetTokenIndex(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		tokenIndex = _r$2;
		$s = -1; return NewInterval(tokenIndex, tokenIndex);
		/* */ } return; } if ($f === undefined) { $f = { $blk: TerminalNodeImpl.ptr.prototype.GetSourceInterval }; } $f._r$2 = _r$2; $f.t = t; $f.tokenIndex = tokenIndex; $f.$s = $s; $f.$r = $r; return $f;
	};
	TerminalNodeImpl.prototype.GetSourceInterval = function() { return this.$val.GetSourceInterval(); };
	TerminalNodeImpl.ptr.prototype.GetChildCount = function() {
		var t;
		t = this;
		return 0;
	};
	TerminalNodeImpl.prototype.GetChildCount = function() { return this.$val.GetChildCount(); };
	TerminalNodeImpl.ptr.prototype.Accept = function(v) {
		var _r$2, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$2 = v.VisitTerminal(t); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TerminalNodeImpl.ptr.prototype.Accept }; } $f._r$2 = _r$2; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	TerminalNodeImpl.prototype.Accept = function(v) { return this.$val.Accept(v); };
	TerminalNodeImpl.ptr.prototype.GetText = function() {
		var _r$2, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$2 = t.symbol.GetText(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TerminalNodeImpl.ptr.prototype.GetText }; } $f._r$2 = _r$2; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	TerminalNodeImpl.prototype.GetText = function() { return this.$val.GetText(); };
	TerminalNodeImpl.ptr.prototype.String = function() {
		var _r$2, _r$3, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$2 = t.symbol.GetTokenType(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2 === -1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$2 === -1) { */ case 1:
			$s = -1; return "<EOF>";
		/* } */ case 2:
		_r$3 = t.symbol.GetText(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TerminalNodeImpl.ptr.prototype.String }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	TerminalNodeImpl.prototype.String = function() { return this.$val.String(); };
	TerminalNodeImpl.ptr.prototype.ToStringTree = function(s, r) {
		var _r$2, r, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; r = $f.r; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$2 = t.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TerminalNodeImpl.ptr.prototype.ToStringTree }; } $f._r$2 = _r$2; $f.r = r; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	TerminalNodeImpl.prototype.ToStringTree = function(s, r) { return this.$val.ToStringTree(s, r); };
	NewErrorNodeImpl = function(token) {
		var en, token;
		en = new ErrorNodeImpl.ptr(ptrType$2.nil);
		en.TerminalNodeImpl = NewTerminalNodeImpl(token);
		return en;
	};
	$pkg.NewErrorNodeImpl = NewErrorNodeImpl;
	ErrorNodeImpl.ptr.prototype.Accept = function(v) {
		var _r$2, e, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; e = $f.e; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r$2 = v.VisitErrorNode(e); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ErrorNodeImpl.ptr.prototype.Accept }; } $f._r$2 = _r$2; $f.e = e; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ErrorNodeImpl.prototype.Accept = function(v) { return this.$val.Accept(v); };
	NewParseTreeWalker = function() {
		return new ParseTreeWalker.ptr();
	};
	$pkg.NewParseTreeWalker = NewParseTreeWalker;
	ParseTreeWalker.ptr.prototype.Walk = function(listener, t) {
		var _r$2, _r$3, _ref, child, i, listener, p, t, tt, tt$1, tt$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; child = $f.child; i = $f.i; listener = $f.listener; p = $f.p; t = $f.t; tt = $f.tt; tt$1 = $f.tt$1; tt$2 = $f.tt$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = t;
		/* */ if ($assertType(_ref, ErrorNode, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, TerminalNode, true)[1]) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($assertType(_ref, ErrorNode, true)[1]) { */ case 1:
			tt = _ref;
			$r = listener.VisitErrorNode(tt); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 4; continue;
		/* } else if ($assertType(_ref, TerminalNode, true)[1]) { */ case 2:
			tt$1 = _ref;
			$r = listener.VisitTerminal(tt$1); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 4; continue;
		/* } else { */ case 3:
			tt$2 = _ref;
			$r = p.EnterRule(listener, $assertType(t, RuleNode)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = 0;
			/* while (true) { */ case 8:
				_r$2 = t.GetChildCount(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* if (!(i < _r$2)) { break; } */ if(!(i < _r$2)) { $s = 9; continue; }
				_r$3 = t.GetChild(i); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				child = _r$3;
				$r = p.Walk(listener, child); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i = i + (1) >> 0;
			/* } */ $s = 8; continue; case 9:
			$r = p.ExitRule(listener, $assertType(t, RuleNode)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParseTreeWalker.ptr.prototype.Walk }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.child = child; $f.i = i; $f.listener = listener; $f.p = p; $f.t = t; $f.tt = tt; $f.tt$1 = tt$1; $f.tt$2 = tt$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParseTreeWalker.prototype.Walk = function(listener, t) { return this.$val.Walk(listener, t); };
	ParseTreeWalker.ptr.prototype.EnterRule = function(listener, r) {
		var _r$2, ctx, listener, p, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; ctx = $f.ctx; listener = $f.listener; p = $f.p; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = r.GetRuleContext(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		ctx = $assertType(_r$2, ParserRuleContext);
		$r = listener.EnterEveryRule(ctx); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ctx.EnterRule(listener); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParseTreeWalker.ptr.prototype.EnterRule }; } $f._r$2 = _r$2; $f.ctx = ctx; $f.listener = listener; $f.p = p; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParseTreeWalker.prototype.EnterRule = function(listener, r) { return this.$val.EnterRule(listener, r); };
	ParseTreeWalker.ptr.prototype.ExitRule = function(listener, r) {
		var _r$2, ctx, listener, p, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; ctx = $f.ctx; listener = $f.listener; p = $f.p; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r$2 = r.GetRuleContext(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		ctx = $assertType(_r$2, ParserRuleContext);
		$r = ctx.ExitRule(listener); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = listener.ExitEveryRule(ctx); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParseTreeWalker.ptr.prototype.ExitRule }; } $f._r$2 = _r$2; $f.ctx = ctx; $f.listener = listener; $f.p = p; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParseTreeWalker.prototype.ExitRule = function(listener, r) { return this.$val.ExitRule(listener, r); };
	TreesStringTree = function(tree, ruleNames, recog) {
		var _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, c, i, recog, res, ruleNames, s, tree, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; c = $f.c; i = $f.i; recog = $f.recog; res = $f.res; ruleNames = $f.ruleNames; s = $f.s; tree = $f.tree; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!($interfaceIsEqual(recog, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(recog, $ifaceNil))) { */ case 1:
			_r$2 = recog.GetRuleNames(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			ruleNames = _r$2;
		/* } */ case 2:
		_r$3 = TreesGetNodeText(tree, ruleNames, $ifaceNil); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		s = _r$3;
		s = EscapeWhitespace(s, false);
		_r$4 = tree.GetChildCount(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		c = _r$4;
		if (c === 0) {
			$s = -1; return s;
		}
		res = "(" + s + " ";
		/* */ if (c > 0) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (c > 0) { */ case 6:
			_r$5 = tree.GetChild(0); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = TreesStringTree(_r$5, ruleNames, $ifaceNil); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			s = _r$6;
			res = res + (s);
		/* } */ case 7:
		i = 1;
		/* while (true) { */ case 10:
			/* if (!(i < c)) { break; } */ if(!(i < c)) { $s = 11; continue; }
			_r$7 = tree.GetChild(i); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$8 = TreesStringTree(_r$7, ruleNames, $ifaceNil); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			s = _r$8;
			res = res + ((" " + s));
			i = i + (1) >> 0;
		/* } */ $s = 10; continue; case 11:
		res = res + (")");
		$s = -1; return res;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TreesStringTree }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.c = c; $f.i = i; $f.recog = recog; $f.res = res; $f.ruleNames = ruleNames; $f.s = s; $f.tree = tree; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TreesStringTree = TreesStringTree;
	TreesGetNodeText = function(t, ruleNames, recog) {
		var _arg, _arg$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, altNumber, ok, p2, payload, recog, ruleNames, t, t2, t2$1, t2$2, t3, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; altNumber = $f.altNumber; ok = $f.ok; p2 = $f.p2; payload = $f.payload; recog = $f.recog; ruleNames = $f.ruleNames; t = $f.t; t2 = $f.t2; t2$1 = $f.t2$1; t2$2 = $f.t2$2; t3 = $f.t3; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!($interfaceIsEqual(recog, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(recog, $ifaceNil))) { */ case 1:
			_r$2 = recog.GetRuleNames(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			ruleNames = _r$2;
		/* } */ case 2:
		/* */ if (!(ruleNames === sliceType.nil)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(ruleNames === sliceType.nil)) { */ case 4:
			_ref = t;
			/* */ if ($assertType(_ref, RuleNode, true)[1]) { $s = 6; continue; }
			/* */ if ($assertType(_ref, ErrorNode, true)[1]) { $s = 7; continue; }
			/* */ if ($assertType(_ref, TerminalNode, true)[1]) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ($assertType(_ref, RuleNode, true)[1]) { */ case 6:
				t2 = _ref;
				_r$3 = t2.GetRuleContext(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				t3 = _r$3;
				_r$4 = t3.GetAltNumber(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				altNumber = _r$4;
				/* */ if (!((altNumber === $pkg.ATNInvalidAltNumber))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (!((altNumber === $pkg.ATNInvalidAltNumber))) { */ case 12:
					_r$5 = t3.GetRuleIndex(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg = new $String((x = _r$5, ((x < 0 || x >= ruleNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : ruleNames.$array[ruleNames.$offset + x])));
					_arg$1 = new $Int(altNumber);
					_r$6 = fmt.Sprintf("%s:%d", new sliceType$8([_arg, _arg$1])); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$s = -1; return _r$6;
				/* } */ case 13:
				_r$7 = t3.GetRuleIndex(); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$s = -1; return (x$1 = _r$7, ((x$1 < 0 || x$1 >= ruleNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : ruleNames.$array[ruleNames.$offset + x$1]));
			/* } else if ($assertType(_ref, ErrorNode, true)[1]) { */ case 7:
				t2$1 = _ref;
				_r$8 = fmt.Sprint(new sliceType$8([t2$1])); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$s = -1; return _r$8;
			/* } else if ($assertType(_ref, TerminalNode, true)[1]) { */ case 8:
				t2$2 = _ref;
				_r$9 = t2$2.GetSymbol(); /* */ $s = 20; case 20: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				/* */ if (!($interfaceIsEqual(_r$9, $ifaceNil))) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (!($interfaceIsEqual(_r$9, $ifaceNil))) { */ case 18:
					_r$10 = t2$2.GetSymbol(); /* */ $s = 21; case 21: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_r$11 = _r$10.GetText(); /* */ $s = 22; case 22: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					$s = -1; return _r$11;
				/* } */ case 19:
			/* } */ case 9:
		/* } */ case 5:
		_r$12 = t.GetPayload(); /* */ $s = 23; case 23: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		payload = _r$12;
		_tuple = $assertType(payload, Token, true);
		p2 = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (ok) { */ case 24:
			_r$13 = p2.GetText(); /* */ $s = 26; case 26: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$s = -1; return _r$13;
		/* } */ case 25:
		_r$14 = t.GetPayload(); /* */ $s = 27; case 27: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$15 = fmt.Sprint(new sliceType$8([_r$14])); /* */ $s = 28; case 28: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		$s = -1; return _r$15;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TreesGetNodeText }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f.altNumber = altNumber; $f.ok = ok; $f.p2 = p2; $f.payload = payload; $f.recog = recog; $f.ruleNames = ruleNames; $f.t = t; $f.t2 = t2; $f.t2$1 = t2$1; $f.t2$2 = t2$2; $f.t3 = t3; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TreesGetNodeText = TreesGetNodeText;
	intMin = function(a, b) {
		var a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	intMax = function(a, b) {
		var a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	$ptrType(IntStack).prototype.Pop = function() {
		var l, s, v, x;
		s = this;
		l = s.$get().$length - 1 >> 0;
		if (l < 0) {
			return [0, $pkg.ErrEmptyStack];
		}
		v = (x = s.$get(), ((l < 0 || l >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + l]));
		s.$set($subslice((s.$get()), 0, l));
		return [v, $ifaceNil];
	};
	$ptrType(IntStack).prototype.Push = function(e) {
		var e, s;
		s = this;
		s.$set($append(s.$get(), e));
	};
	NewSet = function(hashcodeFunction, equalsFunction) {
		var equalsFunction, hashcodeFunction, s;
		s = new Set.ptr(false, $throwNilPointerError, $throwNilPointerError);
		s.data = {};
		if (!(hashcodeFunction === $throwNilPointerError)) {
			s.hashcodeFunction = hashcodeFunction;
		} else {
			s.hashcodeFunction = standardHashFunction;
		}
		if (equalsFunction === $throwNilPointerError) {
			s.equalsFunction = standardEqualsFunction;
		} else {
			s.equalsFunction = equalsFunction;
		}
		return s;
	};
	$pkg.NewSet = NewSet;
	standardEqualsFunction = function(a, b) {
		var _r$2, _tuple, _tuple$1, a, ac, b, bc, oka, okb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; ac = $f.ac; b = $f.b; bc = $f.bc; oka = $f.oka; okb = $f.okb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(a, comparable, true);
		ac = _tuple[0];
		oka = _tuple[1];
		_tuple$1 = $assertType(b, comparable, true);
		bc = _tuple$1[0];
		okb = _tuple$1[1];
		if (!oka || !okb) {
			$panic(new $String("Not Comparable"));
		}
		_r$2 = ac.equals(bc); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: standardEqualsFunction }; } $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.ac = ac; $f.b = b; $f.bc = bc; $f.oka = oka; $f.okb = okb; $f.$s = $s; $f.$r = $r; return $f;
	};
	standardHashFunction = function(a) {
		var _r$2, _tuple, a, h, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _tuple = $f._tuple; a = $f.a; h = $f.h; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(a, hasher, true);
		h = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r$2 = h.hash(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } */ case 2:
		$panic(new $String("Not Hasher"));
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: standardHashFunction }; } $f._r$2 = _r$2; $f._tuple = _tuple; $f.a = a; $f.h = h; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	Set.ptr.prototype.length = function() {
		var s;
		s = this;
		return $keys(s.data).length;
	};
	Set.prototype.length = function() { return this.$val.length(); };
	Set.ptr.prototype.add = function(value) {
		var _entry, _entry$1, _entry$2, _key, _key$1, _r$2, _r$3, i, key, s, v, value, values, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _key = $f._key; _key$1 = $f._key$1; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; key = $f.key; s = $f.s; v = $f.v; value = $f.value; values = $f.values; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.hashcodeFunction(value); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		key = _r$2;
		values = (_entry = s.data[$Int.keyFor(key)], _entry !== undefined ? _entry.v : sliceType$8.nil);
		/* */ if (!((_entry$1 = s.data[$Int.keyFor(key)], _entry$1 !== undefined ? _entry$1.v : sliceType$8.nil) === sliceType$8.nil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((_entry$1 = s.data[$Int.keyFor(key)], _entry$1 !== undefined ? _entry$1.v : sliceType$8.nil) === sliceType$8.nil)) { */ case 2:
			i = 0;
			/* while (true) { */ case 4:
				/* if (!(i < values.$length)) { break; } */ if(!(i < values.$length)) { $s = 5; continue; }
				_r$3 = s.equalsFunction(value, ((i < 0 || i >= values.$length) ? ($throwRuntimeError("index out of range"), undefined) : values.$array[values.$offset + i])); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (_r$3) { */ case 6:
					$s = -1; return ((i < 0 || i >= values.$length) ? ($throwRuntimeError("index out of range"), undefined) : values.$array[values.$offset + i]);
				/* } */ case 7:
				i = i + (1) >> 0;
			/* } */ $s = 4; continue; case 5:
			_key = key; (s.data || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: $append((_entry$2 = s.data[$Int.keyFor(key)], _entry$2 !== undefined ? _entry$2.v : sliceType$8.nil), value) };
			$s = -1; return value;
		/* } */ case 3:
		v = $makeSlice(sliceType$8, 1, 10);
		(0 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 0] = value);
		_key$1 = key; (s.data || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$1)] = { k: _key$1, v: v };
		$s = -1; return value;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Set.ptr.prototype.add }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._key = _key; $f._key$1 = _key$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.key = key; $f.s = s; $f.v = v; $f.value = value; $f.values = values; $f.$s = $s; $f.$r = $r; return $f;
	};
	Set.prototype.add = function(value) { return this.$val.add(value); };
	Set.ptr.prototype.contains = function(value) {
		var _entry, _entry$1, _r$2, _r$3, i, key, s, value, values, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; key = $f.key; s = $f.s; value = $f.value; values = $f.values; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.hashcodeFunction(value); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		key = _r$2;
		values = (_entry = s.data[$Int.keyFor(key)], _entry !== undefined ? _entry.v : sliceType$8.nil);
		/* */ if (!((_entry$1 = s.data[$Int.keyFor(key)], _entry$1 !== undefined ? _entry$1.v : sliceType$8.nil) === sliceType$8.nil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((_entry$1 = s.data[$Int.keyFor(key)], _entry$1 !== undefined ? _entry$1.v : sliceType$8.nil) === sliceType$8.nil)) { */ case 2:
			i = 0;
			/* while (true) { */ case 4:
				/* if (!(i < values.$length)) { break; } */ if(!(i < values.$length)) { $s = 5; continue; }
				_r$3 = s.equalsFunction(value, ((i < 0 || i >= values.$length) ? ($throwRuntimeError("index out of range"), undefined) : values.$array[values.$offset + i])); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (_r$3) { */ case 6:
					$s = -1; return true;
				/* } */ case 7:
				i = i + (1) >> 0;
			/* } */ $s = 4; continue; case 5:
		/* } */ case 3:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Set.ptr.prototype.contains }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.key = key; $f.s = s; $f.value = value; $f.values = values; $f.$s = $s; $f.$r = $r; return $f;
	};
	Set.prototype.contains = function(value) { return this.$val.contains(value); };
	Set.ptr.prototype.values = function() {
		var _entry, _i, _keys, _ref, l, s, v;
		s = this;
		l = sliceType$8.nil;
		_ref = s.data;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			v = _entry.v;
			l = $appendSlice(l, v);
			_i++;
		}
		return l;
	};
	Set.prototype.values = function() { return this.$val.values(); };
	Set.ptr.prototype.String = function() {
		var _entry, _i, _i$1, _keys, _r$2, _ref, _ref$1, av, r, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _keys = $f._keys; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; av = $f.av; r = $f.r; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		r = "";
		_ref = s.data;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			av = _entry.v;
			_ref$1 = av;
			_i$1 = 0;
			/* while (true) { */ case 3:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 4; continue; }
				v = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				_r$2 = fmt.Sprint(new sliceType$8([v])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				r = r + (_r$2);
				_i$1++;
			/* } */ $s = 3; continue; case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Set.ptr.prototype.String }; } $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._keys = _keys; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f.av = av; $f.r = r; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Set.prototype.String = function() { return this.$val.String(); };
	NewBitSet = function() {
		var b;
		b = new BitSet.ptr(false);
		b.data = {};
		return b;
	};
	$pkg.NewBitSet = NewBitSet;
	BitSet.ptr.prototype.add = function(value) {
		var _key, b, value;
		b = this;
		_key = value; (b.data || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: true };
	};
	BitSet.prototype.add = function(value) { return this.$val.add(value); };
	BitSet.ptr.prototype.or = function(set) {
		var _entry, _i, _keys, _ref, b, k, set;
		b = this;
		_ref = set.data;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			b.add(k);
			_i++;
		}
	};
	BitSet.prototype.or = function(set) { return this.$val.or(set); };
	BitSet.ptr.prototype.remove = function(value) {
		var b, value;
		b = this;
		delete b.data[$Int.keyFor(value)];
	};
	BitSet.prototype.remove = function(value) { return this.$val.remove(value); };
	BitSet.ptr.prototype.contains = function(value) {
		var _entry, b, value;
		b = this;
		return (_entry = b.data[$Int.keyFor(value)], _entry !== undefined ? _entry.v : false);
	};
	BitSet.prototype.contains = function(value) { return this.$val.contains(value); };
	BitSet.ptr.prototype.values = function() {
		var _entry, _i, _keys, _ref, b, i, k, ks, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _ref = $f._ref; b = $f.b; i = $f.i; k = $f.k; ks = $f.ks; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		ks = $makeSlice(sliceType$6, $keys(b.data).length);
		i = 0;
		_ref = b.data;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			((i < 0 || i >= ks.$length) ? ($throwRuntimeError("index out of range"), undefined) : ks.$array[ks.$offset + i] = k);
			i = i + (1) >> 0;
			_i++;
		}
		$r = sort.Ints(ks); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return ks;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BitSet.ptr.prototype.values }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._ref = _ref; $f.b = b; $f.i = i; $f.k = k; $f.ks = ks; $f.$s = $s; $f.$r = $r; return $f;
	};
	BitSet.prototype.values = function() { return this.$val.values(); };
	BitSet.ptr.prototype.minValue = function() {
		var _entry, _i, _keys, _ref, b, k, min$1;
		b = this;
		min$1 = 2147483647;
		_ref = b.data;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			if (k < min$1) {
				min$1 = k;
			}
			_i++;
		}
		return min$1;
	};
	BitSet.prototype.minValue = function() { return this.$val.minValue(); };
	BitSet.ptr.prototype.equals = function(other) {
		var _entry, _entry$1, _i, _keys, _ref, _tuple, b, k, ok, other, otherBitSet, v;
		b = this;
		_tuple = $assertType(other, ptrType$11, true);
		otherBitSet = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return false;
		}
		if (!(($keys(b.data).length === $keys(otherBitSet.data).length))) {
			return false;
		}
		_ref = b.data;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			v = _entry.v;
			if (!((_entry$1 = otherBitSet.data[$Int.keyFor(k)], _entry$1 !== undefined ? _entry$1.v : false) === v)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	BitSet.prototype.equals = function(other) { return this.$val.equals(other); };
	BitSet.ptr.prototype.length = function() {
		var b;
		b = this;
		return $keys(b.data).length;
	};
	BitSet.prototype.length = function() { return this.$val.length(); };
	BitSet.ptr.prototype.String = function() {
		var _i, _r$2, _ref, b, i, val, vals, valsS, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _ref = $f._ref; b = $f.b; i = $f.i; val = $f.val; vals = $f.vals; valsS = $f.valsS; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r$2 = b.values(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		vals = _r$2;
		valsS = $makeSlice(sliceType, vals.$length);
		_ref = vals;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			val = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= valsS.$length) ? ($throwRuntimeError("index out of range"), undefined) : valsS.$array[valsS.$offset + i] = strconv.Itoa(val));
			_i++;
		}
		$s = -1; return "{" + strings.Join(valsS, ", ") + "}";
		/* */ } return; } if ($f === undefined) { $f = { $blk: BitSet.ptr.prototype.String }; } $f._i = _i; $f._r$2 = _r$2; $f._ref = _ref; $f.b = b; $f.i = i; $f.val = val; $f.vals = vals; $f.valsS = valsS; $f.$s = $s; $f.$r = $r; return $f;
	};
	BitSet.prototype.String = function() { return this.$val.String(); };
	NewAltDict = function() {
		var d;
		d = new AltDict.ptr(false);
		d.data = {};
		return d;
	};
	$pkg.NewAltDict = NewAltDict;
	AltDict.ptr.prototype.Get = function(key) {
		var _entry, a, key;
		a = this;
		key = "k-" + key;
		return (_entry = a.data[$String.keyFor(key)], _entry !== undefined ? _entry.v : $ifaceNil);
	};
	AltDict.prototype.Get = function(key) { return this.$val.Get(key); };
	AltDict.ptr.prototype.put = function(key, value) {
		var _key, a, key, value;
		a = this;
		key = "k-" + key;
		_key = key; (a.data || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: value };
	};
	AltDict.prototype.put = function(key, value) { return this.$val.put(key, value); };
	AltDict.ptr.prototype.values = function() {
		var _entry, _i, _keys, _ref, a, i, v, vs;
		a = this;
		vs = $makeSlice(sliceType$8, $keys(a.data).length);
		i = 0;
		_ref = a.data;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			v = _entry.v;
			((i < 0 || i >= vs.$length) ? ($throwRuntimeError("index out of range"), undefined) : vs.$array[vs.$offset + i] = v);
			i = i + (1) >> 0;
			_i++;
		}
		return vs;
	};
	AltDict.prototype.values = function() { return this.$val.values(); };
	NewDoubleDict = function() {
		var dd;
		dd = new DoubleDict.ptr(false);
		dd.data = {};
		return dd;
	};
	$pkg.NewDoubleDict = NewDoubleDict;
	DoubleDict.ptr.prototype.Get = function(a, b) {
		var _entry, _entry$1, a, b, d, data;
		d = this;
		data = (_entry = d.data[$Int.keyFor(a)], _entry !== undefined ? _entry.v : false);
		if (data === false) {
			return $ifaceNil;
		}
		return (_entry$1 = data[$Int.keyFor(b)], _entry$1 !== undefined ? _entry$1.v : $ifaceNil);
	};
	DoubleDict.prototype.Get = function(a, b) { return this.$val.Get(a, b); };
	DoubleDict.ptr.prototype.set = function(a, b, o) {
		var _entry, _key, _key$1, a, b, d, data, o;
		d = this;
		data = (_entry = d.data[$Int.keyFor(a)], _entry !== undefined ? _entry.v : false);
		if (data === false) {
			data = {};
			_key = a; (d.data || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: data };
		}
		_key$1 = b; (data || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$1)] = { k: _key$1, v: o };
	};
	DoubleDict.prototype.set = function(a, b, o) { return this.$val.set(a, b, o); };
	EscapeWhitespace = function(s, escapeSpaces) {
		var escapeSpaces, s;
		s = strings.Replace(s, "\t", "\\t", -1);
		s = strings.Replace(s, "\n", "\\n", -1);
		s = strings.Replace(s, "\r", "\\r", -1);
		if (escapeSpaces) {
			s = strings.Replace(s, " ", "\xC2\xB7", -1);
		}
		return s;
	};
	$pkg.EscapeWhitespace = EscapeWhitespace;
	murmurInit = function(seed) {
		var seed;
		return seed;
	};
	murmurUpdate = function(h1_32, k1_32) {
		var h1, h1_32, k1, k1_32, x, x$1, x$2, x$3, x$4, x$5;
		k1 = (new $Int64(0, k1_32));
		h1 = (new $Int64(0, h1_32));
		k1 = $mul64(k1, (new $Int64(0, 3432918353)));
		k1 = (x = $shiftLeft64(k1, 15), x$1 = $shiftRightInt64(k1, 17), new $Int64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		k1 = $mul64(k1, (new $Int64(0, 461845907)));
		h1 = (x$2 = k1, new $Int64(h1.$high ^ x$2.$high, (h1.$low ^ x$2.$low) >>> 0));
		h1 = (x$3 = $shiftLeft64(h1, 13), x$4 = $shiftRightInt64(h1, 19), new $Int64(x$3.$high | x$4.$high, (x$3.$low | x$4.$low) >>> 0));
		h1 = (x$5 = $mul64(h1, new $Int64(0, 5)), new $Int64(x$5.$high + 0, x$5.$low + 3864292196));
		return (((h1.$low + ((h1.$high >> 31) * 4294967296)) >> 0));
	};
	murmurFinish = function(h1_32, numberOfWords) {
		var h1, h1_32, numberOfWords, x, x$1, x$2, x$3;
		h1 = (new $Int64(0, h1_32));
		h1 = (x = ($mul64((new $Int64(0, numberOfWords)), new $Int64(0, 4))), new $Int64(h1.$high ^ x.$high, (h1.$low ^ x.$low) >>> 0));
		h1 = (x$1 = $shiftRightInt64(h1, 16), new $Int64(h1.$high ^ x$1.$high, (h1.$low ^ x$1.$low) >>> 0));
		h1 = $mul64(h1, (new $Int64(0, 2246822507)));
		h1 = (x$2 = $shiftRightInt64(h1, 13), new $Int64(h1.$high ^ x$2.$high, (h1.$low ^ x$2.$low) >>> 0));
		h1 = $mul64(h1, (new $Int64(0, 3266489909)));
		h1 = (x$3 = $shiftRightInt64(h1, 16), new $Int64(h1.$high ^ x$3.$high, (h1.$low ^ x$3.$low) >>> 0));
		return (((h1.$low + ((h1.$high >> 31) * 4294967296)) >> 0));
	};
	ptrType$23.methods = [{prop: "NextTokensInContext", name: "NextTokensInContext", pkg: "", typ: $funcType([ATNState, RuleContext], [ptrType], false)}, {prop: "NextTokensNoContext", name: "NextTokensNoContext", pkg: "", typ: $funcType([ATNState], [ptrType], false)}, {prop: "NextTokens", name: "NextTokens", pkg: "", typ: $funcType([ATNState, RuleContext], [ptrType], false)}, {prop: "addState", name: "addState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNState], [], false)}, {prop: "removeState", name: "removeState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNState], [], false)}, {prop: "defineDecisionState", name: "defineDecisionState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([DecisionState], [$Int], false)}, {prop: "getDecisionState", name: "getDecisionState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [DecisionState], false)}, {prop: "getExpectedTokens", name: "getExpectedTokens", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int, RuleContext], [ptrType], false)}];
	ptrType$7.methods = [{prop: "getPrecedenceFilterSuppressed", name: "getPrecedenceFilterSuppressed", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Bool], false)}, {prop: "setPrecedenceFilterSuppressed", name: "setPrecedenceFilterSuppressed", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Bool], [], false)}, {prop: "GetState", name: "GetState", pkg: "", typ: $funcType([], [ATNState], false)}, {prop: "GetAlt", name: "GetAlt", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetContext", name: "SetContext", pkg: "", typ: $funcType([PredictionContext], [], false)}, {prop: "GetContext", name: "GetContext", pkg: "", typ: $funcType([], [PredictionContext], false)}, {prop: "GetSemanticContext", name: "GetSemanticContext", pkg: "", typ: $funcType([], [SemanticContext], false)}, {prop: "GetReachesIntoOuterContext", name: "GetReachesIntoOuterContext", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetReachesIntoOuterContext", name: "SetReachesIntoOuterContext", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$emptyInterface], [$Bool], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$9.methods = [{prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$emptyInterface], [$Bool], false)}];
	ptrType$13.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([ATNConfig, ptrType$12], [$Bool], false)}, {prop: "GetStates", name: "GetStates", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "HasSemanticContext", name: "HasSemanticContext", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetHasSemanticContext", name: "SetHasSemanticContext", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "GetPredicates", name: "GetPredicates", pkg: "", typ: $funcType([], [sliceType$10], false)}, {prop: "GetItems", name: "GetItems", pkg: "", typ: $funcType([], [sliceType$9], false)}, {prop: "OptimizeConfigs", name: "OptimizeConfigs", pkg: "", typ: $funcType([ptrType$52], [], false)}, {prop: "AddAll", name: "AddAll", pkg: "", typ: $funcType([sliceType$9], [$Bool], false)}, {prop: "Equals", name: "Equals", pkg: "", typ: $funcType([$emptyInterface], [$Bool], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "hashCodeConfigs", name: "hashCodeConfigs", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Contains", name: "Contains", pkg: "", typ: $funcType([ATNConfig], [$Bool], false)}, {prop: "ContainsFast", name: "ContainsFast", pkg: "", typ: $funcType([ATNConfig], [$Bool], false)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([], [], false)}, {prop: "FullContext", name: "FullContext", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "GetDipsIntoOuterContext", name: "GetDipsIntoOuterContext", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetDipsIntoOuterContext", name: "SetDipsIntoOuterContext", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "GetUniqueAlt", name: "GetUniqueAlt", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetUniqueAlt", name: "SetUniqueAlt", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "GetConflictingAlts", name: "GetConflictingAlts", pkg: "", typ: $funcType([], [ptrType$11], false)}, {prop: "SetConflictingAlts", name: "SetConflictingAlts", pkg: "", typ: $funcType([ptrType$11], [], false)}, {prop: "ReadOnly", name: "ReadOnly", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetReadOnly", name: "SetReadOnly", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$81.methods = [{prop: "isFeatureSupported", name: "isFeatureSupported", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$String, $String], [$Bool], false)}, {prop: "DeserializeFromUInt16", name: "DeserializeFromUInt16", pkg: "", typ: $funcType([sliceType$34], [ptrType$23], false)}, {prop: "reset", name: "reset", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([sliceType$11], [], false)}, {prop: "checkVersion", name: "checkVersion", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [], false)}, {prop: "checkUUID", name: "checkUUID", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [], false)}, {prop: "readATN", name: "readATN", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [ptrType$23], false)}, {prop: "readStates", name: "readStates", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$23], [], false)}, {prop: "readRules", name: "readRules", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$23], [], false)}, {prop: "readModes", name: "readModes", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$23], [], false)}, {prop: "readSets", name: "readSets", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$23, sliceType$12, funcType], [sliceType$12], false)}, {prop: "readEdges", name: "readEdges", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$23, sliceType$12], [], false)}, {prop: "readDecisions", name: "readDecisions", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$23], [], false)}, {prop: "readLexerActions", name: "readLexerActions", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$23], [], false)}, {prop: "generateRuleBypassTransitions", name: "generateRuleBypassTransitions", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$23], [], false)}, {prop: "generateRuleBypassTransition", name: "generateRuleBypassTransition", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$23, $Int], [], false)}, {prop: "stateIsEndStateFor", name: "stateIsEndStateFor", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNState, $Int], [ATNState], false)}, {prop: "markPrecedenceDecisions", name: "markPrecedenceDecisions", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$23], [], false)}, {prop: "verifyATN", name: "verifyATN", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$23], [], false)}, {prop: "checkCondition", name: "checkCondition", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Bool, $String], [], false)}, {prop: "readInt", name: "readInt", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "readInt32", name: "readInt32", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "readUUID", name: "readUUID", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$String], false)}, {prop: "edgeFactory", name: "edgeFactory", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$23, $Int, $Int, $Int, $Int, $Int, $Int, sliceType$12], [Transition], false)}, {prop: "stateFactory", name: "stateFactory", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int, $Int], [ATNState], false)}, {prop: "lexerActionFactory", name: "lexerActionFactory", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int, $Int, $Int], [LexerAction], false)}];
	ptrType$52.methods = [{prop: "getCachedContext", name: "getCachedContext", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([PredictionContext], [PredictionContext], false)}, {prop: "SharedContextCache", name: "SharedContextCache", pkg: "", typ: $funcType([], [ptrType$24], false)}, {prop: "ATN", name: "ATN", pkg: "", typ: $funcType([], [ptrType$23], false)}, {prop: "DecisionToDFA", name: "DecisionToDFA", pkg: "", typ: $funcType([], [sliceType$17], false)}];
	ptrType$26.methods = [{prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetRuleIndex", name: "SetRuleIndex", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "GetEpsilonOnlyTransitions", name: "GetEpsilonOnlyTransitions", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "GetATN", name: "GetATN", pkg: "", typ: $funcType([], [ptrType$23], false)}, {prop: "SetATN", name: "SetATN", pkg: "", typ: $funcType([ptrType$23], [], false)}, {prop: "GetTransitions", name: "GetTransitions", pkg: "", typ: $funcType([], [sliceType$15], false)}, {prop: "SetTransitions", name: "SetTransitions", pkg: "", typ: $funcType([sliceType$15], [], false)}, {prop: "GetStateType", name: "GetStateType", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetStateNumber", name: "GetStateNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetStateNumber", name: "SetStateNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "GetNextTokenWithinRule", name: "GetNextTokenWithinRule", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "SetNextTokenWithinRule", name: "SetNextTokenWithinRule", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$emptyInterface], [$Bool], false)}, {prop: "isNonGreedyExitState", name: "isNonGreedyExitState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Bool], false)}, {prop: "AddTransition", name: "AddTransition", pkg: "", typ: $funcType([Transition, $Int], [], false)}];
	ptrType$27.methods = [{prop: "getDecision", name: "getDecision", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "setDecision", name: "setDecision", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [], false)}, {prop: "getNonGreedy", name: "getNonGreedy", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Bool], false)}, {prop: "setNonGreedy", name: "setNonGreedy", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Bool], [], false)}];
	ptrType$17.methods = [{prop: "getEndState", name: "getEndState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [ptrType$16], false)}, {prop: "setEndState", name: "setEndState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$16], [], false)}];
	ptrType$82.methods = [{prop: "Create", name: "Create", pkg: "", typ: $funcType([ptrType$28, $Int, $String, $Int, $Int, $Int, $Int, $Int], [Token], false)}, {prop: "createThin", name: "createThin", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int, $String], [Token], false)}];
	ptrType$83.methods = [{prop: "GetAllTokens", name: "GetAllTokens", pkg: "", typ: $funcType([], [sliceType$18], false)}, {prop: "Mark", name: "Mark", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Release", name: "Release", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "reset", name: "reset", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([$Int], [Token], false)}, {prop: "Consume", name: "Consume", pkg: "", typ: $funcType([], [], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "fetch", name: "fetch", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [$Int], false)}, {prop: "GetTokens", name: "GetTokens", pkg: "", typ: $funcType([$Int, $Int, ptrType], [sliceType$18], false)}, {prop: "LA", name: "LA", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "lazyInit", name: "lazyInit", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [], false)}, {prop: "setup", name: "setup", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [], false)}, {prop: "GetTokenSource", name: "GetTokenSource", pkg: "", typ: $funcType([], [TokenSource], false)}, {prop: "SetTokenSource", name: "SetTokenSource", pkg: "", typ: $funcType([TokenSource], [], false)}, {prop: "NextTokenOnChannel", name: "NextTokenOnChannel", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "previousTokenOnChannel", name: "previousTokenOnChannel", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "getHiddenTokensToRight", name: "getHiddenTokensToRight", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int, $Int], [sliceType$18], false)}, {prop: "getHiddenTokensToLeft", name: "getHiddenTokensToLeft", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int, $Int], [sliceType$18], false)}, {prop: "filterForChannel", name: "filterForChannel", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int, $Int, $Int], [sliceType$18], false)}, {prop: "GetSourceName", name: "GetSourceName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetAllText", name: "GetAllText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GetTextFromTokens", name: "GetTextFromTokens", pkg: "", typ: $funcType([Token, Token], [$String], false)}, {prop: "GetTextFromRuleContext", name: "GetTextFromRuleContext", pkg: "", typ: $funcType([RuleContext], [$String], false)}, {prop: "GetTextFromInterval", name: "GetTextFromInterval", pkg: "", typ: $funcType([ptrType$29], [$String], false)}, {prop: "Fill", name: "Fill", pkg: "", typ: $funcType([], [], false)}, {prop: "adjustSeekIndex", name: "adjustSeekIndex", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [$Int], false)}, {prop: "LB", name: "LB", pkg: "", typ: $funcType([$Int], [Token], false)}, {prop: "LT", name: "LT", pkg: "", typ: $funcType([$Int], [Token], false)}, {prop: "getNumberOfOnChannelTokens", name: "getNumberOfOnChannelTokens", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}];
	ptrType$25.methods = [{prop: "getPrecedenceStartState", name: "getPrecedenceStartState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [ptrType$30], false)}, {prop: "setPrecedenceStartState", name: "setPrecedenceStartState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int, ptrType$30], [], false)}, {prop: "setPrecedenceDfa", name: "setPrecedenceDfa", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Bool], [], false)}, {prop: "getS0", name: "getS0", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [ptrType$30], false)}, {prop: "setS0", name: "setS0", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$30], [], false)}, {prop: "getState", name: "getState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [ptrType$30, $Bool], false)}, {prop: "setState", name: "setState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int, ptrType$30], [], false)}, {prop: "numStates", name: "numStates", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "sortedStates", name: "sortedStates", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [sliceType$19], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([sliceType, sliceType], [$String], false)}, {prop: "ToLexerString", name: "ToLexerString", pkg: "", typ: $funcType([], [$String], false)}];
	dfaStateList.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	ptrType$32.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "getEdgeLabel", name: "getEdgeLabel", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [$String], false)}, {prop: "GetStateString", name: "GetStateString", pkg: "", typ: $funcType([ptrType$30], [$String], false)}];
	ptrType$84.methods = [{prop: "getEdgeLabel", name: "getEdgeLabel", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [$String], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$31.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$30.methods = [{prop: "GetAltSet", name: "GetAltSet", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "setPrediction", name: "setPrediction", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$emptyInterface], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}];
	ptrType$33.methods = [{prop: "SyntaxError", name: "SyntaxError", pkg: "", typ: $funcType([Recognizer, $emptyInterface, $Int, $Int, $String, RecognitionException], [], false)}, {prop: "ReportAmbiguity", name: "ReportAmbiguity", pkg: "", typ: $funcType([Parser, ptrType$25, $Int, $Int, $Bool, ptrType$11, ATNConfigSet], [], false)}, {prop: "ReportAttemptingFullContext", name: "ReportAttemptingFullContext", pkg: "", typ: $funcType([Parser, ptrType$25, $Int, $Int, ptrType$11, ATNConfigSet], [], false)}, {prop: "ReportContextSensitivity", name: "ReportContextSensitivity", pkg: "", typ: $funcType([Parser, ptrType$25, $Int, $Int, $Int, ATNConfigSet], [], false)}];
	ptrType$86.methods = [{prop: "SyntaxError", name: "SyntaxError", pkg: "", typ: $funcType([Recognizer, $emptyInterface, $Int, $Int, $String, RecognitionException], [], false)}];
	ptrType$87.methods = [{prop: "SyntaxError", name: "SyntaxError", pkg: "", typ: $funcType([Recognizer, $emptyInterface, $Int, $Int, $String, RecognitionException], [], false)}, {prop: "ReportAmbiguity", name: "ReportAmbiguity", pkg: "", typ: $funcType([Parser, ptrType$25, $Int, $Int, $Bool, ptrType$11, ATNConfigSet], [], false)}, {prop: "ReportAttemptingFullContext", name: "ReportAttemptingFullContext", pkg: "", typ: $funcType([Parser, ptrType$25, $Int, $Int, ptrType$11, ATNConfigSet], [], false)}, {prop: "ReportContextSensitivity", name: "ReportContextSensitivity", pkg: "", typ: $funcType([Parser, ptrType$25, $Int, $Int, $Int, ATNConfigSet], [], false)}];
	ptrType$1.methods = [{prop: "reset", name: "reset", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Parser], [], false)}, {prop: "beginErrorCondition", name: "beginErrorCondition", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Parser], [], false)}, {prop: "inErrorRecoveryMode", name: "inErrorRecoveryMode", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Parser], [$Bool], false)}, {prop: "endErrorCondition", name: "endErrorCondition", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Parser], [], false)}, {prop: "ReportMatch", name: "ReportMatch", pkg: "", typ: $funcType([Parser], [], false)}, {prop: "ReportError", name: "ReportError", pkg: "", typ: $funcType([Parser, RecognitionException], [], false)}, {prop: "Recover", name: "Recover", pkg: "", typ: $funcType([Parser, RecognitionException], [], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([Parser], [], false)}, {prop: "ReportNoViableAlternative", name: "ReportNoViableAlternative", pkg: "", typ: $funcType([Parser, ptrType$34], [], false)}, {prop: "ReportInputMisMatch", name: "ReportInputMisMatch", pkg: "", typ: $funcType([Parser, ptrType$35], [], false)}, {prop: "ReportFailedPredicate", name: "ReportFailedPredicate", pkg: "", typ: $funcType([Parser, ptrType$36], [], false)}, {prop: "ReportUnwantedToken", name: "ReportUnwantedToken", pkg: "", typ: $funcType([Parser], [], false)}, {prop: "ReportMissingToken", name: "ReportMissingToken", pkg: "", typ: $funcType([Parser], [], false)}, {prop: "RecoverInline", name: "RecoverInline", pkg: "", typ: $funcType([Parser], [Token], false)}, {prop: "SingleTokenInsertion", name: "SingleTokenInsertion", pkg: "", typ: $funcType([Parser], [$Bool], false)}, {prop: "SingleTokenDeletion", name: "SingleTokenDeletion", pkg: "", typ: $funcType([Parser], [Token], false)}, {prop: "GetMissingSymbol", name: "GetMissingSymbol", pkg: "", typ: $funcType([Parser], [Token], false)}, {prop: "GetExpectedTokens", name: "GetExpectedTokens", pkg: "", typ: $funcType([Parser], [ptrType], false)}, {prop: "GetTokenErrorDisplay", name: "GetTokenErrorDisplay", pkg: "", typ: $funcType([Token], [$String], false)}, {prop: "escapeWSAndQuote", name: "escapeWSAndQuote", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$String], [$String], false)}, {prop: "getErrorRecoverySet", name: "getErrorRecoverySet", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Parser], [ptrType], false)}, {prop: "consumeUntil", name: "consumeUntil", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Parser, ptrType], [], false)}];
	ptrType$37.methods = [{prop: "GetMessage", name: "GetMessage", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GetOffendingToken", name: "GetOffendingToken", pkg: "", typ: $funcType([], [Token], false)}, {prop: "GetInputStream", name: "GetInputStream", pkg: "", typ: $funcType([], [IntStream], false)}, {prop: "getExpectedTokens", name: "getExpectedTokens", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [ptrType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$43.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$36.methods = [{prop: "formatMessage", name: "formatMessage", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$String, $String], [$String], false)}];
	ptrType$40.methods = [{prop: "reset", name: "reset", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [], false)}, {prop: "Consume", name: "Consume", pkg: "", typ: $funcType([], [], false)}, {prop: "LA", name: "LA", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "LT", name: "LT", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Mark", name: "Mark", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Release", name: "Release", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([$Int, $Int], [$String], false)}, {prop: "GetTextFromTokens", name: "GetTextFromTokens", pkg: "", typ: $funcType([Token, Token], [$String], false)}, {prop: "GetTextFromInterval", name: "GetTextFromInterval", pkg: "", typ: $funcType([ptrType$29], [$String], false)}, {prop: "GetSourceName", name: "GetSourceName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$29.methods = [{prop: "Contains", name: "Contains", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "length", name: "length", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}];
	ptrType.methods = [{prop: "first", name: "first", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "addOne", name: "addOne", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [], false)}, {prop: "addRange", name: "addRange", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int, $Int], [], false)}, {prop: "addInterval", name: "addInterval", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$29], [], false)}, {prop: "addSet", name: "addSet", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType], [ptrType], false)}, {prop: "complement", name: "complement", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int, $Int], [ptrType], false)}, {prop: "contains", name: "contains", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [$Bool], false)}, {prop: "length", name: "length", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "removeRange", name: "removeRange", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$29], [], false)}, {prop: "removeOne", name: "removeOne", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "StringVerbose", name: "StringVerbose", pkg: "", typ: $funcType([sliceType, sliceType, $Bool], [$String], false)}, {prop: "toCharString", name: "toCharString", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$String], false)}, {prop: "toIndexString", name: "toIndexString", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$String], false)}, {prop: "toTokenString", name: "toTokenString", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([sliceType, sliceType], [$String], false)}, {prop: "elementName", name: "elementName", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([sliceType, sliceType, $Int], [$String], false)}];
	ptrType$89.methods = [{prop: "reset", name: "reset", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [], false)}, {prop: "GetInterpreter", name: "GetInterpreter", pkg: "", typ: $funcType([], [ILexerATNSimulator], false)}, {prop: "GetInputStream", name: "GetInputStream", pkg: "", typ: $funcType([], [CharStream], false)}, {prop: "GetSourceName", name: "GetSourceName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "setChannel", name: "setChannel", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [], false)}, {prop: "GetTokenFactory", name: "GetTokenFactory", pkg: "", typ: $funcType([], [TokenFactory], false)}, {prop: "setTokenFactory", name: "setTokenFactory", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([TokenFactory], [], false)}, {prop: "safeMatch", name: "safeMatch", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "NextToken", name: "NextToken", pkg: "", typ: $funcType([], [Token], false)}, {prop: "Skip", name: "Skip", pkg: "", typ: $funcType([], [], false)}, {prop: "More", name: "More", pkg: "", typ: $funcType([], [], false)}, {prop: "setMode", name: "setMode", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [], false)}, {prop: "pushMode", name: "pushMode", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [], false)}, {prop: "popMode", name: "popMode", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "inputStream", name: "inputStream", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [CharStream], false)}, {prop: "setInputStream", name: "setInputStream", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([CharStream], [], false)}, {prop: "GetTokenSourceCharStreamPair", name: "GetTokenSourceCharStreamPair", pkg: "", typ: $funcType([], [ptrType$28], false)}, {prop: "EmitToken", name: "EmitToken", pkg: "", typ: $funcType([Token], [], false)}, {prop: "Emit", name: "Emit", pkg: "", typ: $funcType([], [Token], false)}, {prop: "EmitEOF", name: "EmitEOF", pkg: "", typ: $funcType([], [Token], false)}, {prop: "GetCharPositionInLine", name: "GetCharPositionInLine", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetLine", name: "GetLine", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetType", name: "GetType", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "setType", name: "setType", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [], false)}, {prop: "GetCharIndex", name: "GetCharIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetText", name: "SetText", pkg: "", typ: $funcType([$String], [], false)}, {prop: "GetATN", name: "GetATN", pkg: "", typ: $funcType([], [ptrType$23], false)}, {prop: "getAllTokens", name: "getAllTokens", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [sliceType$18], false)}, {prop: "notifyListeners", name: "notifyListeners", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([RecognitionException], [], false)}, {prop: "getErrorDisplayForChar", name: "getErrorDisplayForChar", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int32], [$String], false)}, {prop: "getCharErrorDisplay", name: "getCharErrorDisplay", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int32], [$String], false)}, {prop: "Recover", name: "Recover", pkg: "", typ: $funcType([RecognitionException], [], false)}];
	ptrType$44.methods = [{prop: "execute", name: "execute", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Lexer], [], false)}, {prop: "getActionType", name: "getActionType", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "getIsPositionDependent", name: "getIsPositionDependent", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Bool], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([LexerAction], [$Bool], false)}];
	ptrType$90.methods = [{prop: "execute", name: "execute", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Lexer], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$45.methods = [{prop: "execute", name: "execute", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Lexer], [], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([LexerAction], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$46.methods = [{prop: "execute", name: "execute", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Lexer], [], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([LexerAction], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$91.methods = [{prop: "execute", name: "execute", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Lexer], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$92.methods = [{prop: "execute", name: "execute", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Lexer], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$47.methods = [{prop: "execute", name: "execute", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Lexer], [], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([LexerAction], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$48.methods = [{prop: "execute", name: "execute", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Lexer], [], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([LexerAction], [$Bool], false)}];
	ptrType$49.methods = [{prop: "execute", name: "execute", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Lexer], [], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([LexerAction], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$50.methods = [{prop: "execute", name: "execute", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Lexer], [], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([LexerAction], [$Bool], false)}];
	ptrType$8.methods = [{prop: "fixOffsetBeforeMatch", name: "fixOffsetBeforeMatch", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [ptrType$8], false)}, {prop: "execute", name: "execute", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Lexer, CharStream, $Int], [], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$emptyInterface], [$Bool], false)}];
	ptrType$93.methods = [{prop: "copyState", name: "copyState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$93], [], false)}, {prop: "Match", name: "Match", pkg: "", typ: $funcType([CharStream, $Int], [$Int], false)}, {prop: "reset", name: "reset", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [], false)}, {prop: "MatchATN", name: "MatchATN", pkg: "", typ: $funcType([CharStream], [$Int], false)}, {prop: "execATN", name: "execATN", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([CharStream, ptrType$30], [$Int], false)}, {prop: "getExistingTargetState", name: "getExistingTargetState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$30, $Int], [ptrType$30], false)}, {prop: "computeTargetState", name: "computeTargetState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([CharStream, ptrType$30, $Int], [ptrType$30], false)}, {prop: "failOrAccept", name: "failOrAccept", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$53, CharStream, ATNConfigSet, $Int], [$Int], false)}, {prop: "getReachableConfigSet", name: "getReachableConfigSet", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([CharStream, ATNConfigSet, ATNConfigSet, $Int], [], false)}, {prop: "accept", name: "accept", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([CharStream, ptrType$8, $Int, $Int, $Int, $Int], [], false)}, {prop: "getReachableTarget", name: "getReachableTarget", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Transition, $Int], [ATNState], false)}, {prop: "computeStartState", name: "computeStartState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([CharStream, ATNState], [ptrType$94], false)}, {prop: "closure", name: "closure", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([CharStream, ptrType$9, ATNConfigSet, $Bool, $Bool, $Bool], [$Bool], false)}, {prop: "getEpsilonTarget", name: "getEpsilonTarget", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([CharStream, ptrType$9, Transition, ATNConfigSet, $Bool, $Bool], [ptrType$9], false)}, {prop: "evaluatePredicate", name: "evaluatePredicate", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([CharStream, $Int, $Int, $Bool], [$Bool], false)}, {prop: "captureSimState", name: "captureSimState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$53, CharStream, ptrType$30], [], false)}, {prop: "addDFAEdge", name: "addDFAEdge", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$30, $Int, ptrType$30, ATNConfigSet], [ptrType$30], false)}, {prop: "addDFAState", name: "addDFAState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNConfigSet], [ptrType$30], false)}, {prop: "getDFA", name: "getDFA", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [ptrType$25], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([CharStream], [$String], false)}, {prop: "Consume", name: "Consume", pkg: "", typ: $funcType([CharStream], [], false)}, {prop: "GetCharPositionInLine", name: "GetCharPositionInLine", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetLine", name: "GetLine", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetTokenName", name: "GetTokenName", pkg: "", typ: $funcType([$Int], [$String], false)}];
	ptrType$53.methods = [{prop: "reset", name: "reset", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [], false)}];
	ptrType$95.methods = [{prop: "getDecisionLookahead", name: "getDecisionLookahead", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNState], [sliceType$12], false)}, {prop: "Look", name: "Look", pkg: "", typ: $funcType([ATNState, ATNState, RuleContext], [ptrType], false)}, {prop: "look2", name: "look2", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNState, ATNState, PredictionContext, ptrType, ptrType$10, ptrType$11, $Bool, $Bool, $Int], [], false)}, {prop: "look1", name: "look1", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNState, ATNState, PredictionContext, ptrType, ptrType$10, ptrType$11, $Bool, $Bool], [], false)}, {prop: "look3", name: "look3", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNState, PredictionContext, ptrType, ptrType$10, ptrType$11, $Bool, $Bool, ptrType$6], [], false)}];
	ptrType$77.methods = [{prop: "reset", name: "reset", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [], false)}, {prop: "GetErrorHandler", name: "GetErrorHandler", pkg: "", typ: $funcType([], [ErrorStrategy], false)}, {prop: "SetErrorHandler", name: "SetErrorHandler", pkg: "", typ: $funcType([ErrorStrategy], [], false)}, {prop: "Match", name: "Match", pkg: "", typ: $funcType([$Int], [Token], false)}, {prop: "MatchWildcard", name: "MatchWildcard", pkg: "", typ: $funcType([], [Token], false)}, {prop: "GetParserRuleContext", name: "GetParserRuleContext", pkg: "", typ: $funcType([], [ParserRuleContext], false)}, {prop: "SetParserRuleContext", name: "SetParserRuleContext", pkg: "", typ: $funcType([ParserRuleContext], [], false)}, {prop: "GetParseListeners", name: "GetParseListeners", pkg: "", typ: $funcType([], [sliceType$23], false)}, {prop: "AddParseListener", name: "AddParseListener", pkg: "", typ: $funcType([ParseTreeListener], [], false)}, {prop: "RemoveParseListener", name: "RemoveParseListener", pkg: "", typ: $funcType([ParseTreeListener], [], false)}, {prop: "removeParseListeners", name: "removeParseListeners", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [], false)}, {prop: "TriggerEnterRuleEvent", name: "TriggerEnterRuleEvent", pkg: "", typ: $funcType([], [], false)}, {prop: "TriggerExitRuleEvent", name: "TriggerExitRuleEvent", pkg: "", typ: $funcType([], [], false)}, {prop: "GetInterpreter", name: "GetInterpreter", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "GetATN", name: "GetATN", pkg: "", typ: $funcType([], [ptrType$23], false)}, {prop: "GetTokenFactory", name: "GetTokenFactory", pkg: "", typ: $funcType([], [TokenFactory], false)}, {prop: "setTokenFactory", name: "setTokenFactory", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([TokenFactory], [], false)}, {prop: "GetATNWithBypassAlts", name: "GetATNWithBypassAlts", pkg: "", typ: $funcType([], [], false)}, {prop: "compileParseTreePattern", name: "compileParseTreePattern", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Lexer, Lexer, Lexer], [], false)}, {prop: "GetInputStream", name: "GetInputStream", pkg: "", typ: $funcType([], [IntStream], false)}, {prop: "SetInputStream", name: "SetInputStream", pkg: "", typ: $funcType([TokenStream], [], false)}, {prop: "GetTokenStream", name: "GetTokenStream", pkg: "", typ: $funcType([], [TokenStream], false)}, {prop: "SetTokenStream", name: "SetTokenStream", pkg: "", typ: $funcType([TokenStream], [], false)}, {prop: "GetCurrentToken", name: "GetCurrentToken", pkg: "", typ: $funcType([], [Token], false)}, {prop: "NotifyErrorListeners", name: "NotifyErrorListeners", pkg: "", typ: $funcType([$String, Token, RecognitionException], [], false)}, {prop: "Consume", name: "Consume", pkg: "", typ: $funcType([], [Token], false)}, {prop: "addContextToParseTree", name: "addContextToParseTree", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [], false)}, {prop: "EnterRule", name: "EnterRule", pkg: "", typ: $funcType([ParserRuleContext, $Int, $Int], [], false)}, {prop: "ExitRule", name: "ExitRule", pkg: "", typ: $funcType([], [], false)}, {prop: "EnterOuterAlt", name: "EnterOuterAlt", pkg: "", typ: $funcType([ParserRuleContext, $Int], [], false)}, {prop: "GetPrecedence", name: "GetPrecedence", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "EnterRecursionRule", name: "EnterRecursionRule", pkg: "", typ: $funcType([ParserRuleContext, $Int, $Int, $Int], [], false)}, {prop: "PushNewRecursionContext", name: "PushNewRecursionContext", pkg: "", typ: $funcType([ParserRuleContext, $Int, $Int], [], false)}, {prop: "UnrollRecursionContexts", name: "UnrollRecursionContexts", pkg: "", typ: $funcType([ParserRuleContext], [], false)}, {prop: "GetInvokingContext", name: "GetInvokingContext", pkg: "", typ: $funcType([$Int], [ParserRuleContext], false)}, {prop: "Precpred", name: "Precpred", pkg: "", typ: $funcType([RuleContext, $Int], [$Bool], false)}, {prop: "inContext", name: "inContext", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ParserRuleContext], [$Bool], false)}, {prop: "IsExpectedToken", name: "IsExpectedToken", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "GetExpectedTokens", name: "GetExpectedTokens", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "GetExpectedTokensWithinCurrentRule", name: "GetExpectedTokensWithinCurrentRule", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([$String], [$Int], false)}, {prop: "GetRuleInvocationStack", name: "GetRuleInvocationStack", pkg: "", typ: $funcType([ParserRuleContext], [sliceType], false)}, {prop: "GetDFAStrings", name: "GetDFAStrings", pkg: "", typ: $funcType([], [$String], false)}, {prop: "DumpDFA", name: "DumpDFA", pkg: "", typ: $funcType([], [], false)}, {prop: "GetSourceName", name: "GetSourceName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetTrace", name: "SetTrace", pkg: "", typ: $funcType([ptrType$58], [], false)}];
	ptrType$57.methods = [{prop: "GetPredictionMode", name: "GetPredictionMode", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetPredictionMode", name: "SetPredictionMode", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "reset", name: "reset", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [], false)}, {prop: "AdaptivePredict", name: "AdaptivePredict", pkg: "", typ: $funcType([TokenStream, $Int, ParserRuleContext], [$Int], false)}, {prop: "execATN", name: "execATN", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$25, ptrType$30, TokenStream, $Int, ParserRuleContext], [$Int], false)}, {prop: "getExistingTargetState", name: "getExistingTargetState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$30, $Int], [ptrType$30], false)}, {prop: "computeTargetState", name: "computeTargetState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$25, ptrType$30, $Int], [ptrType$30], false)}, {prop: "predicateDFAState", name: "predicateDFAState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$30, DecisionState], [], false)}, {prop: "execATNWithFullContext", name: "execATNWithFullContext", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$25, ptrType$30, ATNConfigSet, TokenStream, $Int, ParserRuleContext], [$Int], false)}, {prop: "computeReachSet", name: "computeReachSet", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNConfigSet, $Int, $Bool], [ATNConfigSet], false)}, {prop: "removeAllConfigsNotInRuleStopState", name: "removeAllConfigsNotInRuleStopState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNConfigSet, $Bool], [ATNConfigSet], false)}, {prop: "computeStartState", name: "computeStartState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNState, RuleContext, $Bool], [ATNConfigSet], false)}, {prop: "applyPrecedenceFilter", name: "applyPrecedenceFilter", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNConfigSet], [ATNConfigSet], false)}, {prop: "getReachableTarget", name: "getReachableTarget", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Transition, $Int], [ATNState], false)}, {prop: "getPredsForAmbigAlts", name: "getPredsForAmbigAlts", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$11, ATNConfigSet, $Int], [sliceType$10], false)}, {prop: "getPredicatePredictions", name: "getPredicatePredictions", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$11, sliceType$10], [sliceType$20], false)}, {prop: "getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule", name: "getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNConfigSet, ParserRuleContext], [$Int], false)}, {prop: "GetAltThatFinishedDecisionEntryRule", name: "GetAltThatFinishedDecisionEntryRule", pkg: "", typ: $funcType([ATNConfigSet], [$Int], false)}, {prop: "splitAccordingToSemanticValidity", name: "splitAccordingToSemanticValidity", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNConfigSet, ParserRuleContext], [sliceType$25], false)}, {prop: "evalSemanticContext", name: "evalSemanticContext", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([sliceType$20, ParserRuleContext, $Bool], [ptrType$11], false)}, {prop: "closure", name: "closure", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNConfig, ATNConfigSet, ptrType$10, $Bool, $Bool, $Bool], [], false)}, {prop: "closureCheckingStopState", name: "closureCheckingStopState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNConfig, ATNConfigSet, ptrType$10, $Bool, $Bool, $Int, $Bool], [], false)}, {prop: "closureWork", name: "closureWork", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNConfig, ATNConfigSet, ptrType$10, $Bool, $Bool, $Int, $Bool], [], false)}, {prop: "getRuleName", name: "getRuleName", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [$String], false)}, {prop: "getEpsilonTarget", name: "getEpsilonTarget", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNConfig, Transition, $Bool, $Bool, $Bool, $Bool], [ATNConfig], false)}, {prop: "actionTransition", name: "actionTransition", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNConfig, ptrType$54], [ptrType$7], false)}, {prop: "precedenceTransition", name: "precedenceTransition", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNConfig, ptrType$60, $Bool, $Bool, $Bool], [ptrType$7], false)}, {prop: "predTransition", name: "predTransition", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNConfig, ptrType$38, $Bool, $Bool, $Bool], [ptrType$7], false)}, {prop: "ruleTransition", name: "ruleTransition", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNConfig, ptrType$6], [ptrType$7], false)}, {prop: "getConflictingAlts", name: "getConflictingAlts", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNConfigSet], [ptrType$11], false)}, {prop: "getConflictingAltsOrUniqueAlt", name: "getConflictingAltsOrUniqueAlt", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNConfigSet], [ptrType$11], false)}, {prop: "GetTokenName", name: "GetTokenName", pkg: "", typ: $funcType([$Int], [$String], false)}, {prop: "getLookaheadName", name: "getLookaheadName", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([TokenStream], [$String], false)}, {prop: "dumpDeadEndConfigs", name: "dumpDeadEndConfigs", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$34], [], false)}, {prop: "noViableAlt", name: "noViableAlt", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([TokenStream, ParserRuleContext, ATNConfigSet, $Int], [ptrType$34], false)}, {prop: "getUniqueAlt", name: "getUniqueAlt", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNConfigSet], [$Int], false)}, {prop: "addDFAEdge", name: "addDFAEdge", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$25, ptrType$30, $Int, ptrType$30], [ptrType$30], false)}, {prop: "addDFAState", name: "addDFAState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$25, ptrType$30], [ptrType$30], false)}, {prop: "ReportAttemptingFullContext", name: "ReportAttemptingFullContext", pkg: "", typ: $funcType([ptrType$25, ptrType$11, ATNConfigSet, $Int, $Int], [], false)}, {prop: "ReportContextSensitivity", name: "ReportContextSensitivity", pkg: "", typ: $funcType([ptrType$25, $Int, ATNConfigSet, $Int, $Int], [], false)}, {prop: "ReportAmbiguity", name: "ReportAmbiguity", pkg: "", typ: $funcType([ptrType$25, ptrType$30, $Int, $Int, $Bool, ptrType$11, ATNConfigSet], [], false)}];
	ptrType$62.methods = [{prop: "SetException", name: "SetException", pkg: "", typ: $funcType([RecognitionException], [], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$26], false)}, {prop: "CopyFrom", name: "CopyFrom", pkg: "", typ: $funcType([ptrType$62], [], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "EnterRule", name: "EnterRule", pkg: "", typ: $funcType([ParseTreeListener], [], false)}, {prop: "ExitRule", name: "ExitRule", pkg: "", typ: $funcType([ParseTreeListener], [], false)}, {prop: "addTerminalNodeChild", name: "addTerminalNodeChild", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([TerminalNode], [TerminalNode], false)}, {prop: "AddChild", name: "AddChild", pkg: "", typ: $funcType([RuleContext], [RuleContext], false)}, {prop: "RemoveLastChild", name: "RemoveLastChild", pkg: "", typ: $funcType([], [], false)}, {prop: "AddTokenNode", name: "AddTokenNode", pkg: "", typ: $funcType([Token], [ptrType$2], false)}, {prop: "AddErrorNode", name: "AddErrorNode", pkg: "", typ: $funcType([Token], [ptrType$96], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [Tree], false)}, {prop: "GetChildOfType", name: "GetChildOfType", pkg: "", typ: $funcType([$Int, reflect.Type], [RuleContext], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType, Recognizer], [$String], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [RuleContext], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([ParseTreeVisitor], [$emptyInterface], false)}, {prop: "SetStart", name: "SetStart", pkg: "", typ: $funcType([Token], [], false)}, {prop: "GetStart", name: "GetStart", pkg: "", typ: $funcType([], [Token], false)}, {prop: "SetStop", name: "SetStop", pkg: "", typ: $funcType([Token], [], false)}, {prop: "GetStop", name: "GetStop", pkg: "", typ: $funcType([], [Token], false)}, {prop: "GetToken", name: "GetToken", pkg: "", typ: $funcType([$Int, $Int], [TerminalNode], false)}, {prop: "GetTokens", name: "GetTokens", pkg: "", typ: $funcType([$Int], [sliceType$27], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "getChild", name: "getChild", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([reflect.Type, $Int], [RuleContext], false)}, {prop: "GetTypedRuleContext", name: "GetTypedRuleContext", pkg: "", typ: $funcType([reflect.Type, $Int], [RuleContext], false)}, {prop: "GetTypedRuleContexts", name: "GetTypedRuleContexts", pkg: "", typ: $funcType([reflect.Type], [sliceType$28], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$29], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([sliceType, RuleContext], [$String], false)}];
	ptrType$63.methods = [{prop: "isEmpty", name: "isEmpty", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Bool], false)}];
	ptrType$24.methods = [{prop: "add", name: "add", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([PredictionContext], [PredictionContext], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([PredictionContext], [PredictionContext], false)}, {prop: "length", name: "length", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}];
	ptrType$64.methods = [{prop: "length", name: "length", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([$Int], [PredictionContext], false)}, {prop: "getReturnState", name: "getReturnState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [$Int], false)}, {prop: "hasEmptyPath", name: "hasEmptyPath", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Bool], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([PredictionContext], [$Bool], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$68.methods = [{prop: "isEmpty", name: "isEmpty", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Bool], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([$Int], [PredictionContext], false)}, {prop: "getReturnState", name: "getReturnState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [$Int], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([PredictionContext], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$65.methods = [{prop: "GetReturnStates", name: "GetReturnStates", pkg: "", typ: $funcType([], [sliceType$6], false)}, {prop: "hasEmptyPath", name: "hasEmptyPath", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Bool], false)}, {prop: "isEmpty", name: "isEmpty", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Bool], false)}, {prop: "length", name: "length", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([$Int], [PredictionContext], false)}, {prop: "getReturnState", name: "getReturnState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [$Int], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([PredictionContext], [$Bool], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$41.methods = [{prop: "checkVersion", name: "checkVersion", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$String], [], false)}, {prop: "Action", name: "Action", pkg: "", typ: $funcType([RuleContext, $Int, $Int], [], false)}, {prop: "AddErrorListener", name: "AddErrorListener", pkg: "", typ: $funcType([ErrorListener], [], false)}, {prop: "RemoveErrorListeners", name: "RemoveErrorListeners", pkg: "", typ: $funcType([], [], false)}, {prop: "GetRuleNames", name: "GetRuleNames", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "GetTokenNames", name: "GetTokenNames", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "GetSymbolicNames", name: "GetSymbolicNames", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "GetLiteralNames", name: "GetLiteralNames", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "GetState", name: "GetState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetState", name: "SetState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "GetRuleIndexMap", name: "GetRuleIndexMap", pkg: "", typ: $funcType([], [mapType$3], false)}, {prop: "GetTokenType", name: "GetTokenType", pkg: "", typ: $funcType([$String], [$Int], false)}, {prop: "GetErrorHeader", name: "GetErrorHeader", pkg: "", typ: $funcType([RecognitionException], [$String], false)}, {prop: "GetTokenErrorDisplay", name: "GetTokenErrorDisplay", pkg: "", typ: $funcType([Token], [$String], false)}, {prop: "GetErrorListenerDispatch", name: "GetErrorListenerDispatch", pkg: "", typ: $funcType([], [ErrorListener], false)}, {prop: "Sempred", name: "Sempred", pkg: "", typ: $funcType([RuleContext, $Int, $Int], [$Bool], false)}, {prop: "Precpred", name: "Precpred", pkg: "", typ: $funcType([RuleContext, $Int], [$Bool], false)}];
	ptrType$61.methods = [{prop: "GetBaseRuleContext", name: "GetBaseRuleContext", pkg: "", typ: $funcType([], [ptrType$61], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([Tree], [], false)}, {prop: "GetInvokingState", name: "GetInvokingState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetInvokingState", name: "SetInvokingState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetAltNumber", name: "GetAltNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetAltNumber", name: "SetAltNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [Tree], false)}];
	ptrType$69.methods = [{prop: "evalPrecedence", name: "evalPrecedence", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Recognizer, RuleContext], [SemanticContext], false)}, {prop: "evaluate", name: "evaluate", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Recognizer, RuleContext], [$Bool], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$emptyInterface], [$Bool], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$70.methods = [{prop: "evaluate", name: "evaluate", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Recognizer, RuleContext], [$Bool], false)}, {prop: "evalPrecedence", name: "evalPrecedence", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Recognizer, RuleContext], [SemanticContext], false)}, {prop: "compareTo", name: "compareTo", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$70], [$Int], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$emptyInterface], [$Bool], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$71.methods = [{prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$emptyInterface], [$Bool], false)}, {prop: "evaluate", name: "evaluate", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Recognizer, RuleContext], [$Bool], false)}, {prop: "evalPrecedence", name: "evalPrecedence", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Recognizer, RuleContext], [SemanticContext], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$72.methods = [{prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$emptyInterface], [$Bool], false)}, {prop: "evaluate", name: "evaluate", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Recognizer, RuleContext], [$Bool], false)}, {prop: "evalPrecedence", name: "evalPrecedence", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Recognizer, RuleContext], [SemanticContext], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$73.methods = [{prop: "GetChannel", name: "GetChannel", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetStart", name: "GetStart", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetStop", name: "GetStop", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetLine", name: "GetLine", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetColumn", name: "GetColumn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetTokenType", name: "GetTokenType", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSource", name: "GetSource", pkg: "", typ: $funcType([], [ptrType$28], false)}, {prop: "GetTokenIndex", name: "GetTokenIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetTokenIndex", name: "SetTokenIndex", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "GetTokenSource", name: "GetTokenSource", pkg: "", typ: $funcType([], [TokenSource], false)}, {prop: "GetInputStream", name: "GetInputStream", pkg: "", typ: $funcType([], [CharStream], false)}];
	ptrType$97.methods = [{prop: "clone", name: "clone", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [ptrType$97], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetText", name: "SetText", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$58.methods = [{prop: "VisitErrorNode", name: "VisitErrorNode", pkg: "", typ: $funcType([ErrorNode], [], false)}, {prop: "EnterEveryRule", name: "EnterEveryRule", pkg: "", typ: $funcType([ParserRuleContext], [], false)}, {prop: "VisitTerminal", name: "VisitTerminal", pkg: "", typ: $funcType([TerminalNode], [], false)}, {prop: "ExitEveryRule", name: "ExitEveryRule", pkg: "", typ: $funcType([ParserRuleContext], [], false)}];
	ptrType$78.methods = [{prop: "getTarget", name: "getTarget", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [ATNState], false)}, {prop: "setTarget", name: "setTarget", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNState], [], false)}, {prop: "getIsEpsilon", name: "getIsEpsilon", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Bool], false)}, {prop: "getLabel", name: "getLabel", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [ptrType], false)}, {prop: "getSerializationType", name: "getSerializationType", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "Matches", name: "Matches", pkg: "", typ: $funcType([$Int, $Int, $Int], [$Bool], false)}];
	ptrType$101.methods = [{prop: "makeLabel", name: "makeLabel", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [ptrType], false)}, {prop: "Matches", name: "Matches", pkg: "", typ: $funcType([$Int, $Int, $Int], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$6.methods = [{prop: "Matches", name: "Matches", pkg: "", typ: $funcType([$Int, $Int, $Int], [$Bool], false)}];
	ptrType$59.methods = [{prop: "Matches", name: "Matches", pkg: "", typ: $funcType([$Int, $Int, $Int], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$102.methods = [{prop: "makeLabel", name: "makeLabel", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [ptrType], false)}, {prop: "Matches", name: "Matches", pkg: "", typ: $funcType([$Int, $Int, $Int], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$79.methods = [{prop: "IAbstractPredicateTransitionFoo", name: "IAbstractPredicateTransitionFoo", pkg: "", typ: $funcType([], [], false)}];
	ptrType$38.methods = [{prop: "Matches", name: "Matches", pkg: "", typ: $funcType([$Int, $Int, $Int], [$Bool], false)}, {prop: "getPredicate", name: "getPredicate", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [ptrType$69], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$54.methods = [{prop: "Matches", name: "Matches", pkg: "", typ: $funcType([$Int, $Int, $Int], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$80.methods = [{prop: "Matches", name: "Matches", pkg: "", typ: $funcType([$Int, $Int, $Int], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$56.methods = [{prop: "Matches", name: "Matches", pkg: "", typ: $funcType([$Int, $Int, $Int], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$55.methods = [{prop: "Matches", name: "Matches", pkg: "", typ: $funcType([$Int, $Int, $Int], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$60.methods = [{prop: "Matches", name: "Matches", pkg: "", typ: $funcType([$Int, $Int, $Int], [$Bool], false)}, {prop: "getPredicate", name: "getPredicate", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [ptrType$70], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [Tree], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$26], false)}, {prop: "SetChildren", name: "SetChildren", pkg: "", typ: $funcType([sliceType$26], [], false)}, {prop: "GetSymbol", name: "GetSymbol", pkg: "", typ: $funcType([], [Token], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [Tree], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([Tree], [], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$29], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([ParseTreeVisitor], [$emptyInterface], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType, Recognizer], [$String], false)}];
	ptrType$96.methods = [{prop: "errorNode", name: "errorNode", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([ParseTreeVisitor], [$emptyInterface], false)}];
	ptrType$105.methods = [{prop: "Walk", name: "Walk", pkg: "", typ: $funcType([ParseTreeListener, Tree], [], false)}, {prop: "EnterRule", name: "EnterRule", pkg: "", typ: $funcType([ParseTreeListener, RuleNode], [], false)}, {prop: "ExitRule", name: "ExitRule", pkg: "", typ: $funcType([ParseTreeListener, RuleNode], [], false)}];
	ptrType$42.methods = [{prop: "Pop", name: "Pop", pkg: "", typ: $funcType([], [$Int, $error], false)}, {prop: "Push", name: "Push", pkg: "", typ: $funcType([$Int], [], false)}];
	ptrType$10.methods = [{prop: "length", name: "length", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "add", name: "add", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$emptyInterface], [$emptyInterface], false)}, {prop: "contains", name: "contains", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$emptyInterface], [$Bool], false)}, {prop: "values", name: "values", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [sliceType$8], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$11.methods = [{prop: "add", name: "add", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [], false)}, {prop: "clear", name: "clear", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [], false)}, {prop: "or", name: "or", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$11], [], false)}, {prop: "remove", name: "remove", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [], false)}, {prop: "contains", name: "contains", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [$Bool], false)}, {prop: "values", name: "values", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [sliceType$6], false)}, {prop: "minValue", name: "minValue", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$emptyInterface], [$Bool], false)}, {prop: "length", name: "length", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$106.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$emptyInterface], false)}, {prop: "put", name: "put", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "values", name: "values", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [sliceType$8], false)}];
	ptrType$12.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$Int, $Int], [$emptyInterface], false)}, {prop: "set", name: "set", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int, $Int, $emptyInterface], [], false)}];
	ATN.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "DecisionToState", name: "DecisionToState", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "grammarType", name: "grammarType", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "lexerActions", name: "lexerActions", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "maxTokenType", name: "maxTokenType", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "modeNameToStartState", name: "modeNameToStartState", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "modeToStartState", name: "modeToStartState", anonymous: false, exported: false, typ: sliceType$3, tag: ""}, {prop: "ruleToStartState", name: "ruleToStartState", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "ruleToStopState", name: "ruleToStopState", anonymous: false, exported: false, typ: sliceType$5, tag: ""}, {prop: "ruleToTokenType", name: "ruleToTokenType", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "states", name: "states", anonymous: false, exported: false, typ: sliceType$7, tag: ""}]);
	comparable.init([{prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$emptyInterface], [$Bool], false)}]);
	ATNConfig.init([{prop: "GetAlt", name: "GetAlt", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetContext", name: "GetContext", pkg: "", typ: $funcType([], [PredictionContext], false)}, {prop: "GetReachesIntoOuterContext", name: "GetReachesIntoOuterContext", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSemanticContext", name: "GetSemanticContext", pkg: "", typ: $funcType([], [SemanticContext], false)}, {prop: "GetState", name: "GetState", pkg: "", typ: $funcType([], [ATNState], false)}, {prop: "SetContext", name: "SetContext", pkg: "", typ: $funcType([PredictionContext], [], false)}, {prop: "SetReachesIntoOuterContext", name: "SetReachesIntoOuterContext", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$emptyInterface], [$Bool], false)}, {prop: "getPrecedenceFilterSuppressed", name: "getPrecedenceFilterSuppressed", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Bool], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "setPrecedenceFilterSuppressed", name: "setPrecedenceFilterSuppressed", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Bool], [], false)}]);
	BaseATNConfig.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "precedenceFilterSuppressed", name: "precedenceFilterSuppressed", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "state", name: "state", anonymous: false, exported: false, typ: ATNState, tag: ""}, {prop: "alt", name: "alt", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "context", name: "context", anonymous: false, exported: false, typ: PredictionContext, tag: ""}, {prop: "semanticContext", name: "semanticContext", anonymous: false, exported: false, typ: SemanticContext, tag: ""}, {prop: "reachesIntoOuterContext", name: "reachesIntoOuterContext", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	LexerATNConfig.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseATNConfig", name: "BaseATNConfig", anonymous: true, exported: true, typ: ptrType$7, tag: ""}, {prop: "lexerActionExecutor", name: "lexerActionExecutor", anonymous: false, exported: false, typ: ptrType$8, tag: ""}, {prop: "passedThroughNonGreedyDecision", name: "passedThroughNonGreedyDecision", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	ATNConfigSet.init([{prop: "Add", name: "Add", pkg: "", typ: $funcType([ATNConfig, ptrType$12], [$Bool], false)}, {prop: "AddAll", name: "AddAll", pkg: "", typ: $funcType([sliceType$9], [$Bool], false)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([], [], false)}, {prop: "Contains", name: "Contains", pkg: "", typ: $funcType([ATNConfig], [$Bool], false)}, {prop: "ContainsFast", name: "ContainsFast", pkg: "", typ: $funcType([ATNConfig], [$Bool], false)}, {prop: "Equals", name: "Equals", pkg: "", typ: $funcType([$emptyInterface], [$Bool], false)}, {prop: "FullContext", name: "FullContext", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "GetConflictingAlts", name: "GetConflictingAlts", pkg: "", typ: $funcType([], [ptrType$11], false)}, {prop: "GetDipsIntoOuterContext", name: "GetDipsIntoOuterContext", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "GetItems", name: "GetItems", pkg: "", typ: $funcType([], [sliceType$9], false)}, {prop: "GetPredicates", name: "GetPredicates", pkg: "", typ: $funcType([], [sliceType$10], false)}, {prop: "GetStates", name: "GetStates", pkg: "", typ: $funcType([], [ptrType$10], false)}, {prop: "GetUniqueAlt", name: "GetUniqueAlt", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "HasSemanticContext", name: "HasSemanticContext", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OptimizeConfigs", name: "OptimizeConfigs", pkg: "", typ: $funcType([ptrType$52], [], false)}, {prop: "ReadOnly", name: "ReadOnly", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetConflictingAlts", name: "SetConflictingAlts", pkg: "", typ: $funcType([ptrType$11], [], false)}, {prop: "SetDipsIntoOuterContext", name: "SetDipsIntoOuterContext", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "SetHasSemanticContext", name: "SetHasSemanticContext", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "SetReadOnly", name: "SetReadOnly", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "SetUniqueAlt", name: "SetUniqueAlt", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}]);
	BaseATNConfigSet.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "cachedHash", name: "cachedHash", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "configLookup", name: "configLookup", anonymous: false, exported: false, typ: ptrType$10, tag: ""}, {prop: "configs", name: "configs", anonymous: false, exported: false, typ: sliceType$9, tag: ""}, {prop: "conflictingAlts", name: "conflictingAlts", anonymous: false, exported: false, typ: ptrType$11, tag: ""}, {prop: "dipsIntoOuterContext", name: "dipsIntoOuterContext", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "fullCtx", name: "fullCtx", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "hasSemanticContext", name: "hasSemanticContext", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "readOnly", name: "readOnly", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "uniqueAlt", name: "uniqueAlt", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	OrderedATNConfigSet.init("", [{prop: "BaseATNConfigSet", name: "BaseATNConfigSet", anonymous: true, exported: true, typ: ptrType$13, tag: ""}]);
	ATNDeserializationOptions.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "readOnly", name: "readOnly", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "verifyATN", name: "verifyATN", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "generateRuleBypassTransitions", name: "generateRuleBypassTransitions", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	LoopEndStateIntPair.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "item0", name: "item0", anonymous: false, exported: false, typ: ptrType$15, tag: ""}, {prop: "item1", name: "item1", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	BlockStartStateIntPair.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "item0", name: "item0", anonymous: false, exported: false, typ: BlockStartState, tag: ""}, {prop: "item1", name: "item1", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	ATNDeserializer.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "deserializationOptions", name: "deserializationOptions", anonymous: false, exported: false, typ: ptrType$14, tag: ""}, {prop: "data", name: "data", anonymous: false, exported: false, typ: sliceType$11, tag: ""}, {prop: "pos", name: "pos", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "uuid", name: "uuid", anonymous: false, exported: false, typ: $String, tag: ""}]);
	BaseATNSimulator.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "atn", name: "atn", anonymous: false, exported: false, typ: ptrType$23, tag: ""}, {prop: "sharedContextCache", name: "sharedContextCache", anonymous: false, exported: false, typ: ptrType$24, tag: ""}, {prop: "decisionToDFA", name: "decisionToDFA", anonymous: false, exported: false, typ: sliceType$17, tag: ""}]);
	ATNState.init([{prop: "AddTransition", name: "AddTransition", pkg: "", typ: $funcType([Transition, $Int], [], false)}, {prop: "GetATN", name: "GetATN", pkg: "", typ: $funcType([], [ptrType$23], false)}, {prop: "GetEpsilonOnlyTransitions", name: "GetEpsilonOnlyTransitions", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "GetNextTokenWithinRule", name: "GetNextTokenWithinRule", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetStateNumber", name: "GetStateNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetStateType", name: "GetStateType", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetTransitions", name: "GetTransitions", pkg: "", typ: $funcType([], [sliceType$15], false)}, {prop: "SetATN", name: "SetATN", pkg: "", typ: $funcType([ptrType$23], [], false)}, {prop: "SetNextTokenWithinRule", name: "SetNextTokenWithinRule", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "SetRuleIndex", name: "SetRuleIndex", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetStateNumber", name: "SetStateNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetTransitions", name: "SetTransitions", pkg: "", typ: $funcType([sliceType$15], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}]);
	BaseATNState.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "NextTokenWithinRule", name: "NextTokenWithinRule", anonymous: false, exported: true, typ: ptrType, tag: ""}, {prop: "atn", name: "atn", anonymous: false, exported: false, typ: ptrType$23, tag: ""}, {prop: "epsilonOnlyTransitions", name: "epsilonOnlyTransitions", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "ruleIndex", name: "ruleIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "stateNumber", name: "stateNumber", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "stateType", name: "stateType", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "transitions", name: "transitions", anonymous: false, exported: false, typ: sliceType$15, tag: ""}]);
	BasicState.init("", [{prop: "BaseATNState", name: "BaseATNState", anonymous: true, exported: true, typ: ptrType$26, tag: ""}]);
	DecisionState.init([{prop: "AddTransition", name: "AddTransition", pkg: "", typ: $funcType([Transition, $Int], [], false)}, {prop: "GetATN", name: "GetATN", pkg: "", typ: $funcType([], [ptrType$23], false)}, {prop: "GetEpsilonOnlyTransitions", name: "GetEpsilonOnlyTransitions", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "GetNextTokenWithinRule", name: "GetNextTokenWithinRule", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetStateNumber", name: "GetStateNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetStateType", name: "GetStateType", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetTransitions", name: "GetTransitions", pkg: "", typ: $funcType([], [sliceType$15], false)}, {prop: "SetATN", name: "SetATN", pkg: "", typ: $funcType([ptrType$23], [], false)}, {prop: "SetNextTokenWithinRule", name: "SetNextTokenWithinRule", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "SetRuleIndex", name: "SetRuleIndex", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetStateNumber", name: "SetStateNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetTransitions", name: "SetTransitions", pkg: "", typ: $funcType([sliceType$15], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "getDecision", name: "getDecision", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "getNonGreedy", name: "getNonGreedy", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Bool], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "setDecision", name: "setDecision", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [], false)}, {prop: "setNonGreedy", name: "setNonGreedy", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Bool], [], false)}]);
	BaseDecisionState.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseATNState", name: "BaseATNState", anonymous: true, exported: true, typ: ptrType$26, tag: ""}, {prop: "decision", name: "decision", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "nonGreedy", name: "nonGreedy", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	BlockStartState.init([{prop: "AddTransition", name: "AddTransition", pkg: "", typ: $funcType([Transition, $Int], [], false)}, {prop: "GetATN", name: "GetATN", pkg: "", typ: $funcType([], [ptrType$23], false)}, {prop: "GetEpsilonOnlyTransitions", name: "GetEpsilonOnlyTransitions", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "GetNextTokenWithinRule", name: "GetNextTokenWithinRule", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetStateNumber", name: "GetStateNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetStateType", name: "GetStateType", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetTransitions", name: "GetTransitions", pkg: "", typ: $funcType([], [sliceType$15], false)}, {prop: "SetATN", name: "SetATN", pkg: "", typ: $funcType([ptrType$23], [], false)}, {prop: "SetNextTokenWithinRule", name: "SetNextTokenWithinRule", pkg: "", typ: $funcType([ptrType], [], false)}, {prop: "SetRuleIndex", name: "SetRuleIndex", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetStateNumber", name: "SetStateNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetTransitions", name: "SetTransitions", pkg: "", typ: $funcType([sliceType$15], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "getDecision", name: "getDecision", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "getEndState", name: "getEndState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [ptrType$16], false)}, {prop: "getNonGreedy", name: "getNonGreedy", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Bool], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "setDecision", name: "setDecision", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [], false)}, {prop: "setEndState", name: "setEndState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ptrType$16], [], false)}, {prop: "setNonGreedy", name: "setNonGreedy", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Bool], [], false)}]);
	BaseBlockStartState.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseDecisionState", name: "BaseDecisionState", anonymous: true, exported: true, typ: ptrType$27, tag: ""}, {prop: "endState", name: "endState", anonymous: false, exported: false, typ: ptrType$16, tag: ""}]);
	BasicBlockStartState.init("", [{prop: "BaseBlockStartState", name: "BaseBlockStartState", anonymous: true, exported: true, typ: ptrType$17, tag: ""}]);
	BlockEndState.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseATNState", name: "BaseATNState", anonymous: true, exported: true, typ: ptrType$26, tag: ""}, {prop: "startState", name: "startState", anonymous: false, exported: false, typ: ATNState, tag: ""}]);
	RuleStopState.init("", [{prop: "BaseATNState", name: "BaseATNState", anonymous: true, exported: true, typ: ptrType$26, tag: ""}]);
	RuleStartState.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseATNState", name: "BaseATNState", anonymous: true, exported: true, typ: ptrType$26, tag: ""}, {prop: "stopState", name: "stopState", anonymous: false, exported: false, typ: ATNState, tag: ""}, {prop: "isPrecedenceRule", name: "isPrecedenceRule", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	PlusLoopbackState.init("", [{prop: "BaseDecisionState", name: "BaseDecisionState", anonymous: true, exported: true, typ: ptrType$27, tag: ""}]);
	PlusBlockStartState.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseBlockStartState", name: "BaseBlockStartState", anonymous: true, exported: true, typ: ptrType$17, tag: ""}, {prop: "loopBackState", name: "loopBackState", anonymous: false, exported: false, typ: ATNState, tag: ""}]);
	StarBlockStartState.init("", [{prop: "BaseBlockStartState", name: "BaseBlockStartState", anonymous: true, exported: true, typ: ptrType$17, tag: ""}]);
	StarLoopbackState.init("", [{prop: "BaseATNState", name: "BaseATNState", anonymous: true, exported: true, typ: ptrType$26, tag: ""}]);
	StarLoopEntryState.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseDecisionState", name: "BaseDecisionState", anonymous: true, exported: true, typ: ptrType$27, tag: ""}, {prop: "loopBackState", name: "loopBackState", anonymous: false, exported: false, typ: ATNState, tag: ""}, {prop: "precedenceRuleDecision", name: "precedenceRuleDecision", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	LoopEndState.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseATNState", name: "BaseATNState", anonymous: true, exported: true, typ: ptrType$26, tag: ""}, {prop: "loopBackState", name: "loopBackState", anonymous: false, exported: false, typ: ATNState, tag: ""}]);
	TokensStartState.init("", [{prop: "BaseDecisionState", name: "BaseDecisionState", anonymous: true, exported: true, typ: ptrType$27, tag: ""}]);
	CharStream.init([{prop: "Consume", name: "Consume", pkg: "", typ: $funcType([], [], false)}, {prop: "GetSourceName", name: "GetSourceName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([$Int, $Int], [$String], false)}, {prop: "GetTextFromInterval", name: "GetTextFromInterval", pkg: "", typ: $funcType([ptrType$29], [$String], false)}, {prop: "GetTextFromTokens", name: "GetTextFromTokens", pkg: "", typ: $funcType([Token, Token], [$String], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "LA", name: "LA", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "Mark", name: "Mark", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Release", name: "Release", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}]);
	TokenFactory.init([{prop: "Create", name: "Create", pkg: "", typ: $funcType([ptrType$28, $Int, $String, $Int, $Int, $Int, $Int, $Int], [Token], false)}]);
	CommonTokenFactory.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "copyText", name: "copyText", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	CommonTokenStream.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "channel", name: "channel", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "fetchedEOF", name: "fetchedEOF", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "tokenSource", name: "tokenSource", anonymous: false, exported: false, typ: TokenSource, tag: ""}, {prop: "tokens", name: "tokens", anonymous: false, exported: false, typ: sliceType$18, tag: ""}]);
	DFA.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "atnStartState", name: "atnStartState", anonymous: false, exported: false, typ: DecisionState, tag: ""}, {prop: "decision", name: "decision", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "states", name: "states", anonymous: false, exported: false, typ: mapType$1, tag: ""}, {prop: "statesMu", name: "statesMu", anonymous: false, exported: false, typ: sync.RWMutex, tag: ""}, {prop: "s0", name: "s0", anonymous: false, exported: false, typ: ptrType$30, tag: ""}, {prop: "s0Mu", name: "s0Mu", anonymous: false, exported: false, typ: sync.RWMutex, tag: ""}, {prop: "precedenceDfa", name: "precedenceDfa", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	dfaStateList.init(ptrType$30);
	DFASerializer.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "dfa", name: "dfa", anonymous: false, exported: false, typ: ptrType$25, tag: ""}, {prop: "literalNames", name: "literalNames", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "symbolicNames", name: "symbolicNames", anonymous: false, exported: false, typ: sliceType, tag: ""}]);
	LexerDFASerializer.init("", [{prop: "DFASerializer", name: "DFASerializer", anonymous: true, exported: true, typ: ptrType$32, tag: ""}]);
	PredPrediction.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "alt", name: "alt", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "pred", name: "pred", anonymous: false, exported: false, typ: SemanticContext, tag: ""}]);
	DFAState.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "stateNumber", name: "stateNumber", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "configs", name: "configs", anonymous: false, exported: false, typ: ATNConfigSet, tag: ""}, {prop: "edges", name: "edges", anonymous: false, exported: false, typ: sliceType$19, tag: ""}, {prop: "isAcceptState", name: "isAcceptState", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "prediction", name: "prediction", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "lexerActionExecutor", name: "lexerActionExecutor", anonymous: false, exported: false, typ: ptrType$8, tag: ""}, {prop: "requiresFullContext", name: "requiresFullContext", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "predicates", name: "predicates", anonymous: false, exported: false, typ: sliceType$20, tag: ""}]);
	ErrorListener.init([{prop: "ReportAmbiguity", name: "ReportAmbiguity", pkg: "", typ: $funcType([Parser, ptrType$25, $Int, $Int, $Bool, ptrType$11, ATNConfigSet], [], false)}, {prop: "ReportAttemptingFullContext", name: "ReportAttemptingFullContext", pkg: "", typ: $funcType([Parser, ptrType$25, $Int, $Int, ptrType$11, ATNConfigSet], [], false)}, {prop: "ReportContextSensitivity", name: "ReportContextSensitivity", pkg: "", typ: $funcType([Parser, ptrType$25, $Int, $Int, $Int, ATNConfigSet], [], false)}, {prop: "SyntaxError", name: "SyntaxError", pkg: "", typ: $funcType([Recognizer, $emptyInterface, $Int, $Int, $String, RecognitionException], [], false)}]);
	DefaultErrorListener.init("", []);
	ConsoleErrorListener.init("", [{prop: "DefaultErrorListener", name: "DefaultErrorListener", anonymous: true, exported: true, typ: ptrType$33, tag: ""}]);
	ProxyErrorListener.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "DefaultErrorListener", name: "DefaultErrorListener", anonymous: true, exported: true, typ: ptrType$33, tag: ""}, {prop: "delegates", name: "delegates", anonymous: false, exported: false, typ: sliceType$21, tag: ""}]);
	ErrorStrategy.init([{prop: "Recover", name: "Recover", pkg: "", typ: $funcType([Parser, RecognitionException], [], false)}, {prop: "RecoverInline", name: "RecoverInline", pkg: "", typ: $funcType([Parser], [Token], false)}, {prop: "ReportError", name: "ReportError", pkg: "", typ: $funcType([Parser, RecognitionException], [], false)}, {prop: "ReportMatch", name: "ReportMatch", pkg: "", typ: $funcType([Parser], [], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([Parser], [], false)}, {prop: "inErrorRecoveryMode", name: "inErrorRecoveryMode", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Parser], [$Bool], false)}, {prop: "reset", name: "reset", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Parser], [], false)}]);
	DefaultErrorStrategy.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "errorRecoveryMode", name: "errorRecoveryMode", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "lastErrorIndex", name: "lastErrorIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "lastErrorStates", name: "lastErrorStates", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	RecognitionException.init([{prop: "GetInputStream", name: "GetInputStream", pkg: "", typ: $funcType([], [IntStream], false)}, {prop: "GetMessage", name: "GetMessage", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GetOffendingToken", name: "GetOffendingToken", pkg: "", typ: $funcType([], [Token], false)}]);
	BaseRecognitionException.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "message", name: "message", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "recognizer", name: "recognizer", anonymous: false, exported: false, typ: Recognizer, tag: ""}, {prop: "offendingToken", name: "offendingToken", anonymous: false, exported: false, typ: Token, tag: ""}, {prop: "offendingState", name: "offendingState", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "ctx", name: "ctx", anonymous: false, exported: false, typ: RuleContext, tag: ""}, {prop: "input", name: "input", anonymous: false, exported: false, typ: IntStream, tag: ""}]);
	LexerNoViableAltException.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseRecognitionException", name: "BaseRecognitionException", anonymous: true, exported: true, typ: ptrType$37, tag: ""}, {prop: "startIndex", name: "startIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "deadEndConfigs", name: "deadEndConfigs", anonymous: false, exported: false, typ: ATNConfigSet, tag: ""}]);
	NoViableAltException.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseRecognitionException", name: "BaseRecognitionException", anonymous: true, exported: true, typ: ptrType$37, tag: ""}, {prop: "startToken", name: "startToken", anonymous: false, exported: false, typ: Token, tag: ""}, {prop: "offendingToken", name: "offendingToken", anonymous: false, exported: false, typ: Token, tag: ""}, {prop: "ctx", name: "ctx", anonymous: false, exported: false, typ: ParserRuleContext, tag: ""}, {prop: "deadEndConfigs", name: "deadEndConfigs", anonymous: false, exported: false, typ: ATNConfigSet, tag: ""}]);
	InputMisMatchException.init("", [{prop: "BaseRecognitionException", name: "BaseRecognitionException", anonymous: true, exported: true, typ: ptrType$37, tag: ""}]);
	FailedPredicateException.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseRecognitionException", name: "BaseRecognitionException", anonymous: true, exported: true, typ: ptrType$37, tag: ""}, {prop: "ruleIndex", name: "ruleIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "predicateIndex", name: "predicateIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "predicate", name: "predicate", anonymous: false, exported: false, typ: $String, tag: ""}]);
	InputStream.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "data", name: "data", anonymous: false, exported: false, typ: sliceType$11, tag: ""}, {prop: "size", name: "size", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	IntStream.init([{prop: "Consume", name: "Consume", pkg: "", typ: $funcType([], [], false)}, {prop: "GetSourceName", name: "GetSourceName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "LA", name: "LA", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "Mark", name: "Mark", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Release", name: "Release", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}]);
	Interval.init("", [{prop: "Start", name: "Start", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Stop", name: "Stop", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	IntervalSet.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "intervals", name: "intervals", anonymous: false, exported: false, typ: sliceType$22, tag: ""}, {prop: "readOnly", name: "readOnly", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	Lexer.init([{prop: "Action", name: "Action", pkg: "", typ: $funcType([RuleContext, $Int, $Int], [], false)}, {prop: "AddErrorListener", name: "AddErrorListener", pkg: "", typ: $funcType([ErrorListener], [], false)}, {prop: "Emit", name: "Emit", pkg: "", typ: $funcType([], [Token], false)}, {prop: "GetATN", name: "GetATN", pkg: "", typ: $funcType([], [ptrType$23], false)}, {prop: "GetCharPositionInLine", name: "GetCharPositionInLine", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetErrorListenerDispatch", name: "GetErrorListenerDispatch", pkg: "", typ: $funcType([], [ErrorListener], false)}, {prop: "GetInputStream", name: "GetInputStream", pkg: "", typ: $funcType([], [CharStream], false)}, {prop: "GetLine", name: "GetLine", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetLiteralNames", name: "GetLiteralNames", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "GetRuleNames", name: "GetRuleNames", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "GetSourceName", name: "GetSourceName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GetState", name: "GetState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSymbolicNames", name: "GetSymbolicNames", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "GetTokenFactory", name: "GetTokenFactory", pkg: "", typ: $funcType([], [TokenFactory], false)}, {prop: "More", name: "More", pkg: "", typ: $funcType([], [], false)}, {prop: "NextToken", name: "NextToken", pkg: "", typ: $funcType([], [Token], false)}, {prop: "Precpred", name: "Precpred", pkg: "", typ: $funcType([RuleContext, $Int], [$Bool], false)}, {prop: "RemoveErrorListeners", name: "RemoveErrorListeners", pkg: "", typ: $funcType([], [], false)}, {prop: "Sempred", name: "Sempred", pkg: "", typ: $funcType([RuleContext, $Int, $Int], [$Bool], false)}, {prop: "SetState", name: "SetState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Skip", name: "Skip", pkg: "", typ: $funcType([], [], false)}, {prop: "popMode", name: "popMode", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "pushMode", name: "pushMode", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [], false)}, {prop: "setChannel", name: "setChannel", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [], false)}, {prop: "setMode", name: "setMode", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [], false)}, {prop: "setTokenFactory", name: "setTokenFactory", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([TokenFactory], [], false)}, {prop: "setType", name: "setType", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [], false)}]);
	BaseLexer.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseRecognizer", name: "BaseRecognizer", anonymous: true, exported: true, typ: ptrType$41, tag: ""}, {prop: "Interpreter", name: "Interpreter", anonymous: false, exported: true, typ: ILexerATNSimulator, tag: ""}, {prop: "TokenStartCharIndex", name: "TokenStartCharIndex", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "TokenStartLine", name: "TokenStartLine", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "TokenStartColumn", name: "TokenStartColumn", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "ActionType", name: "ActionType", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Virt", name: "Virt", anonymous: false, exported: true, typ: Lexer, tag: ""}, {prop: "input", name: "input", anonymous: false, exported: false, typ: CharStream, tag: ""}, {prop: "factory", name: "factory", anonymous: false, exported: false, typ: TokenFactory, tag: ""}, {prop: "tokenFactorySourcePair", name: "tokenFactorySourcePair", anonymous: false, exported: false, typ: ptrType$28, tag: ""}, {prop: "token", name: "token", anonymous: false, exported: false, typ: Token, tag: ""}, {prop: "hitEOF", name: "hitEOF", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "channel", name: "channel", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "thetype", name: "thetype", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "modeStack", name: "modeStack", anonymous: false, exported: false, typ: IntStack, tag: ""}, {prop: "mode", name: "mode", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "text", name: "text", anonymous: false, exported: false, typ: $String, tag: ""}]);
	LexerAction.init([{prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([LexerAction], [$Bool], false)}, {prop: "execute", name: "execute", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Lexer], [], false)}, {prop: "getActionType", name: "getActionType", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "getIsPositionDependent", name: "getIsPositionDependent", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Bool], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}]);
	BaseLexerAction.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "actionType", name: "actionType", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "isPositionDependent", name: "isPositionDependent", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	LexerSkipAction.init("", [{prop: "BaseLexerAction", name: "BaseLexerAction", anonymous: true, exported: true, typ: ptrType$44, tag: ""}]);
	LexerTypeAction.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseLexerAction", name: "BaseLexerAction", anonymous: true, exported: true, typ: ptrType$44, tag: ""}, {prop: "thetype", name: "thetype", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	LexerPushModeAction.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseLexerAction", name: "BaseLexerAction", anonymous: true, exported: true, typ: ptrType$44, tag: ""}, {prop: "mode", name: "mode", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	LexerPopModeAction.init("", [{prop: "BaseLexerAction", name: "BaseLexerAction", anonymous: true, exported: true, typ: ptrType$44, tag: ""}]);
	LexerMoreAction.init("", [{prop: "BaseLexerAction", name: "BaseLexerAction", anonymous: true, exported: true, typ: ptrType$44, tag: ""}]);
	LexerModeAction.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseLexerAction", name: "BaseLexerAction", anonymous: true, exported: true, typ: ptrType$44, tag: ""}, {prop: "mode", name: "mode", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	LexerCustomAction.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseLexerAction", name: "BaseLexerAction", anonymous: true, exported: true, typ: ptrType$44, tag: ""}, {prop: "ruleIndex", name: "ruleIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "actionIndex", name: "actionIndex", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	LexerChannelAction.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseLexerAction", name: "BaseLexerAction", anonymous: true, exported: true, typ: ptrType$44, tag: ""}, {prop: "channel", name: "channel", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	LexerIndexedCustomAction.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseLexerAction", name: "BaseLexerAction", anonymous: true, exported: true, typ: ptrType$44, tag: ""}, {prop: "offset", name: "offset", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "lexerAction", name: "lexerAction", anonymous: false, exported: false, typ: LexerAction, tag: ""}, {prop: "isPositionDependent", name: "isPositionDependent", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	LexerActionExecutor.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "lexerActions", name: "lexerActions", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "cachedHash", name: "cachedHash", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	ILexerATNSimulator.init([{prop: "ATN", name: "ATN", pkg: "", typ: $funcType([], [ptrType$23], false)}, {prop: "Consume", name: "Consume", pkg: "", typ: $funcType([CharStream], [], false)}, {prop: "DecisionToDFA", name: "DecisionToDFA", pkg: "", typ: $funcType([], [sliceType$17], false)}, {prop: "GetCharPositionInLine", name: "GetCharPositionInLine", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetLine", name: "GetLine", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([CharStream], [$String], false)}, {prop: "Match", name: "Match", pkg: "", typ: $funcType([CharStream, $Int], [$Int], false)}, {prop: "SharedContextCache", name: "SharedContextCache", pkg: "", typ: $funcType([], [ptrType$24], false)}, {prop: "reset", name: "reset", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [], false)}]);
	LexerATNSimulator.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseATNSimulator", name: "BaseATNSimulator", anonymous: true, exported: true, typ: ptrType$52, tag: ""}, {prop: "recog", name: "recog", anonymous: false, exported: false, typ: Lexer, tag: ""}, {prop: "predictionMode", name: "predictionMode", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "mergeCache", name: "mergeCache", anonymous: false, exported: false, typ: DoubleDict, tag: ""}, {prop: "startIndex", name: "startIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "Line", name: "Line", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "CharPositionInLine", name: "CharPositionInLine", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "mode", name: "mode", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "prevAccept", name: "prevAccept", anonymous: false, exported: false, typ: ptrType$53, tag: ""}, {prop: "MatchCalls", name: "MatchCalls", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	SimState.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "index", name: "index", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "line", name: "line", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "column", name: "column", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "dfaState", name: "dfaState", anonymous: false, exported: false, typ: ptrType$30, tag: ""}]);
	LL1Analyzer.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "atn", name: "atn", anonymous: false, exported: false, typ: ptrType$23, tag: ""}]);
	Parser.init([{prop: "Action", name: "Action", pkg: "", typ: $funcType([RuleContext, $Int, $Int], [], false)}, {prop: "AddErrorListener", name: "AddErrorListener", pkg: "", typ: $funcType([ErrorListener], [], false)}, {prop: "Consume", name: "Consume", pkg: "", typ: $funcType([], [Token], false)}, {prop: "GetATN", name: "GetATN", pkg: "", typ: $funcType([], [ptrType$23], false)}, {prop: "GetCurrentToken", name: "GetCurrentToken", pkg: "", typ: $funcType([], [Token], false)}, {prop: "GetErrorHandler", name: "GetErrorHandler", pkg: "", typ: $funcType([], [ErrorStrategy], false)}, {prop: "GetErrorListenerDispatch", name: "GetErrorListenerDispatch", pkg: "", typ: $funcType([], [ErrorListener], false)}, {prop: "GetExpectedTokens", name: "GetExpectedTokens", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "GetInputStream", name: "GetInputStream", pkg: "", typ: $funcType([], [IntStream], false)}, {prop: "GetInterpreter", name: "GetInterpreter", pkg: "", typ: $funcType([], [ptrType$57], false)}, {prop: "GetLiteralNames", name: "GetLiteralNames", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "GetParseListeners", name: "GetParseListeners", pkg: "", typ: $funcType([], [sliceType$23], false)}, {prop: "GetParserRuleContext", name: "GetParserRuleContext", pkg: "", typ: $funcType([], [ParserRuleContext], false)}, {prop: "GetPrecedence", name: "GetPrecedence", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetRuleInvocationStack", name: "GetRuleInvocationStack", pkg: "", typ: $funcType([ParserRuleContext], [sliceType], false)}, {prop: "GetRuleNames", name: "GetRuleNames", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "GetState", name: "GetState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSymbolicNames", name: "GetSymbolicNames", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "GetTokenFactory", name: "GetTokenFactory", pkg: "", typ: $funcType([], [TokenFactory], false)}, {prop: "GetTokenStream", name: "GetTokenStream", pkg: "", typ: $funcType([], [TokenStream], false)}, {prop: "IsExpectedToken", name: "IsExpectedToken", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "NotifyErrorListeners", name: "NotifyErrorListeners", pkg: "", typ: $funcType([$String, Token, RecognitionException], [], false)}, {prop: "Precpred", name: "Precpred", pkg: "", typ: $funcType([RuleContext, $Int], [$Bool], false)}, {prop: "RemoveErrorListeners", name: "RemoveErrorListeners", pkg: "", typ: $funcType([], [], false)}, {prop: "Sempred", name: "Sempred", pkg: "", typ: $funcType([RuleContext, $Int, $Int], [$Bool], false)}, {prop: "SetErrorHandler", name: "SetErrorHandler", pkg: "", typ: $funcType([ErrorStrategy], [], false)}, {prop: "SetParserRuleContext", name: "SetParserRuleContext", pkg: "", typ: $funcType([ParserRuleContext], [], false)}, {prop: "SetState", name: "SetState", pkg: "", typ: $funcType([$Int], [], false)}]);
	BaseParser.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseRecognizer", name: "BaseRecognizer", anonymous: true, exported: true, typ: ptrType$41, tag: ""}, {prop: "Interpreter", name: "Interpreter", anonymous: false, exported: true, typ: ptrType$57, tag: ""}, {prop: "BuildParseTrees", name: "BuildParseTrees", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "input", name: "input", anonymous: false, exported: false, typ: TokenStream, tag: ""}, {prop: "errHandler", name: "errHandler", anonymous: false, exported: false, typ: ErrorStrategy, tag: ""}, {prop: "precedenceStack", name: "precedenceStack", anonymous: false, exported: false, typ: IntStack, tag: ""}, {prop: "ctx", name: "ctx", anonymous: false, exported: false, typ: ParserRuleContext, tag: ""}, {prop: "tracer", name: "tracer", anonymous: false, exported: false, typ: ptrType$58, tag: ""}, {prop: "parseListeners", name: "parseListeners", anonymous: false, exported: false, typ: sliceType$23, tag: ""}, {prop: "_SyntaxErrors", name: "_SyntaxErrors", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	ParserATNSimulator.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseATNSimulator", name: "BaseATNSimulator", anonymous: true, exported: true, typ: ptrType$52, tag: ""}, {prop: "parser", name: "parser", anonymous: false, exported: false, typ: Parser, tag: ""}, {prop: "predictionMode", name: "predictionMode", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "input", name: "input", anonymous: false, exported: false, typ: TokenStream, tag: ""}, {prop: "startIndex", name: "startIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "dfa", name: "dfa", anonymous: false, exported: false, typ: ptrType$25, tag: ""}, {prop: "mergeCache", name: "mergeCache", anonymous: false, exported: false, typ: ptrType$12, tag: ""}, {prop: "outerContext", name: "outerContext", anonymous: false, exported: false, typ: ParserRuleContext, tag: ""}]);
	ParserRuleContext.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([ParseTreeVisitor], [$emptyInterface], false)}, {prop: "AddChild", name: "AddChild", pkg: "", typ: $funcType([RuleContext], [RuleContext], false)}, {prop: "AddErrorNode", name: "AddErrorNode", pkg: "", typ: $funcType([Token], [ptrType$96], false)}, {prop: "AddTokenNode", name: "AddTokenNode", pkg: "", typ: $funcType([Token], [ptrType$2], false)}, {prop: "EnterRule", name: "EnterRule", pkg: "", typ: $funcType([ParseTreeListener], [], false)}, {prop: "ExitRule", name: "ExitRule", pkg: "", typ: $funcType([ParseTreeListener], [], false)}, {prop: "GetAltNumber", name: "GetAltNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetBaseRuleContext", name: "GetBaseRuleContext", pkg: "", typ: $funcType([], [ptrType$61], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$26], false)}, {prop: "GetInvokingState", name: "GetInvokingState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [Tree], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [RuleContext], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$29], false)}, {prop: "GetStart", name: "GetStart", pkg: "", typ: $funcType([], [Token], false)}, {prop: "GetStop", name: "GetStop", pkg: "", typ: $funcType([], [Token], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "RemoveLastChild", name: "RemoveLastChild", pkg: "", typ: $funcType([], [], false)}, {prop: "SetAltNumber", name: "SetAltNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetException", name: "SetException", pkg: "", typ: $funcType([RecognitionException], [], false)}, {prop: "SetInvokingState", name: "SetInvokingState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([Tree], [], false)}, {prop: "SetStart", name: "SetStart", pkg: "", typ: $funcType([Token], [], false)}, {prop: "SetStop", name: "SetStop", pkg: "", typ: $funcType([Token], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([sliceType, RuleContext], [$String], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType, Recognizer], [$String], false)}]);
	BaseParserRuleContext.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseRuleContext", name: "BaseRuleContext", anonymous: true, exported: true, typ: ptrType$61, tag: ""}, {prop: "start", name: "start", anonymous: false, exported: false, typ: Token, tag: ""}, {prop: "stop", name: "stop", anonymous: false, exported: false, typ: Token, tag: ""}, {prop: "exception", name: "exception", anonymous: false, exported: false, typ: RecognitionException, tag: ""}, {prop: "children", name: "children", anonymous: false, exported: false, typ: sliceType$26, tag: ""}]);
	PredictionContext.init([{prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([$Int], [PredictionContext], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([PredictionContext], [$Bool], false)}, {prop: "getReturnState", name: "getReturnState", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$Int], [$Int], false)}, {prop: "hasEmptyPath", name: "hasEmptyPath", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Bool], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "isEmpty", name: "isEmpty", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Bool], false)}, {prop: "length", name: "length", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}]);
	BasePredictionContext.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "cachedHash", name: "cachedHash", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	PredictionContextCache.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "cache", name: "cache", anonymous: false, exported: false, typ: mapType$2, tag: ""}]);
	BaseSingletonPredictionContext.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BasePredictionContext", name: "BasePredictionContext", anonymous: true, exported: true, typ: ptrType$63, tag: ""}, {prop: "parentCtx", name: "parentCtx", anonymous: false, exported: false, typ: PredictionContext, tag: ""}, {prop: "returnState", name: "returnState", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	EmptyPredictionContext.init("", [{prop: "BaseSingletonPredictionContext", name: "BaseSingletonPredictionContext", anonymous: true, exported: true, typ: ptrType$64, tag: ""}]);
	ArrayPredictionContext.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BasePredictionContext", name: "BasePredictionContext", anonymous: true, exported: true, typ: ptrType$63, tag: ""}, {prop: "parents", name: "parents", anonymous: false, exported: false, typ: sliceType$29, tag: ""}, {prop: "returnStates", name: "returnStates", anonymous: false, exported: false, typ: sliceType$6, tag: ""}]);
	Recognizer.init([{prop: "Action", name: "Action", pkg: "", typ: $funcType([RuleContext, $Int, $Int], [], false)}, {prop: "AddErrorListener", name: "AddErrorListener", pkg: "", typ: $funcType([ErrorListener], [], false)}, {prop: "GetATN", name: "GetATN", pkg: "", typ: $funcType([], [ptrType$23], false)}, {prop: "GetErrorListenerDispatch", name: "GetErrorListenerDispatch", pkg: "", typ: $funcType([], [ErrorListener], false)}, {prop: "GetLiteralNames", name: "GetLiteralNames", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "GetRuleNames", name: "GetRuleNames", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "GetState", name: "GetState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSymbolicNames", name: "GetSymbolicNames", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "Precpred", name: "Precpred", pkg: "", typ: $funcType([RuleContext, $Int], [$Bool], false)}, {prop: "RemoveErrorListeners", name: "RemoveErrorListeners", pkg: "", typ: $funcType([], [], false)}, {prop: "Sempred", name: "Sempred", pkg: "", typ: $funcType([RuleContext, $Int, $Int], [$Bool], false)}, {prop: "SetState", name: "SetState", pkg: "", typ: $funcType([$Int], [], false)}]);
	BaseRecognizer.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "listeners", name: "listeners", anonymous: false, exported: false, typ: sliceType$21, tag: ""}, {prop: "state", name: "state", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "RuleNames", name: "RuleNames", anonymous: false, exported: true, typ: sliceType, tag: ""}, {prop: "LiteralNames", name: "LiteralNames", anonymous: false, exported: true, typ: sliceType, tag: ""}, {prop: "SymbolicNames", name: "SymbolicNames", anonymous: false, exported: true, typ: sliceType, tag: ""}, {prop: "GrammarFileName", name: "GrammarFileName", anonymous: false, exported: true, typ: $String, tag: ""}]);
	RuleContext.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([ParseTreeVisitor], [$emptyInterface], false)}, {prop: "GetAltNumber", name: "GetAltNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetBaseRuleContext", name: "GetBaseRuleContext", pkg: "", typ: $funcType([], [ptrType$61], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$26], false)}, {prop: "GetInvokingState", name: "GetInvokingState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [Tree], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [RuleContext], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$29], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetAltNumber", name: "SetAltNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetInvokingState", name: "SetInvokingState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([Tree], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([sliceType, RuleContext], [$String], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType, Recognizer], [$String], false)}]);
	BaseRuleContext.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "parentCtx", name: "parentCtx", anonymous: false, exported: false, typ: RuleContext, tag: ""}, {prop: "invokingState", name: "invokingState", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "RuleIndex", name: "RuleIndex", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	SemanticContext.init([{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "equals", name: "equals", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([$emptyInterface], [$Bool], false)}, {prop: "evalPrecedence", name: "evalPrecedence", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Recognizer, RuleContext], [SemanticContext], false)}, {prop: "evaluate", name: "evaluate", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([Recognizer, RuleContext], [$Bool], false)}, {prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}]);
	Predicate.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "ruleIndex", name: "ruleIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "predIndex", name: "predIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "isCtxDependent", name: "isCtxDependent", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	PrecedencePredicate.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "precedence", name: "precedence", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	AND.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "opnds", name: "opnds", anonymous: false, exported: false, typ: sliceType$10, tag: ""}]);
	OR.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "opnds", name: "opnds", anonymous: false, exported: false, typ: sliceType$10, tag: ""}]);
	TokenSourceCharStreamPair.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "tokenSource", name: "tokenSource", anonymous: false, exported: false, typ: TokenSource, tag: ""}, {prop: "charStream", name: "charStream", anonymous: false, exported: false, typ: CharStream, tag: ""}]);
	Token.init([{prop: "GetChannel", name: "GetChannel", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetColumn", name: "GetColumn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetInputStream", name: "GetInputStream", pkg: "", typ: $funcType([], [CharStream], false)}, {prop: "GetLine", name: "GetLine", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSource", name: "GetSource", pkg: "", typ: $funcType([], [ptrType$28], false)}, {prop: "GetStart", name: "GetStart", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetStop", name: "GetStop", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GetTokenIndex", name: "GetTokenIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetTokenSource", name: "GetTokenSource", pkg: "", typ: $funcType([], [TokenSource], false)}, {prop: "GetTokenType", name: "GetTokenType", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetText", name: "SetText", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetTokenIndex", name: "SetTokenIndex", pkg: "", typ: $funcType([$Int], [], false)}]);
	BaseToken.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "source", name: "source", anonymous: false, exported: false, typ: ptrType$28, tag: ""}, {prop: "tokenType", name: "tokenType", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "channel", name: "channel", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "start", name: "start", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "stop", name: "stop", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "tokenIndex", name: "tokenIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "line", name: "line", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "column", name: "column", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "text", name: "text", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "readOnly", name: "readOnly", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	CommonToken.init("", [{prop: "BaseToken", name: "BaseToken", anonymous: true, exported: true, typ: ptrType$73, tag: ""}]);
	TokenSource.init([{prop: "GetCharPositionInLine", name: "GetCharPositionInLine", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetInputStream", name: "GetInputStream", pkg: "", typ: $funcType([], [CharStream], false)}, {prop: "GetLine", name: "GetLine", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSourceName", name: "GetSourceName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GetTokenFactory", name: "GetTokenFactory", pkg: "", typ: $funcType([], [TokenFactory], false)}, {prop: "More", name: "More", pkg: "", typ: $funcType([], [], false)}, {prop: "NextToken", name: "NextToken", pkg: "", typ: $funcType([], [Token], false)}, {prop: "Skip", name: "Skip", pkg: "", typ: $funcType([], [], false)}, {prop: "setTokenFactory", name: "setTokenFactory", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([TokenFactory], [], false)}]);
	TokenStream.init([{prop: "Consume", name: "Consume", pkg: "", typ: $funcType([], [], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([$Int], [Token], false)}, {prop: "GetAllText", name: "GetAllText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GetSourceName", name: "GetSourceName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GetTextFromInterval", name: "GetTextFromInterval", pkg: "", typ: $funcType([ptrType$29], [$String], false)}, {prop: "GetTextFromRuleContext", name: "GetTextFromRuleContext", pkg: "", typ: $funcType([RuleContext], [$String], false)}, {prop: "GetTextFromTokens", name: "GetTextFromTokens", pkg: "", typ: $funcType([Token, Token], [$String], false)}, {prop: "GetTokenSource", name: "GetTokenSource", pkg: "", typ: $funcType([], [TokenSource], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "LA", name: "LA", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "LT", name: "LT", pkg: "", typ: $funcType([$Int], [Token], false)}, {prop: "Mark", name: "Mark", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Release", name: "Release", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetTokenSource", name: "SetTokenSource", pkg: "", typ: $funcType([TokenSource], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}]);
	TraceListener.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "parser", name: "parser", anonymous: false, exported: false, typ: ptrType$77, tag: ""}]);
	Transition.init([{prop: "Matches", name: "Matches", pkg: "", typ: $funcType([$Int, $Int, $Int], [$Bool], false)}, {prop: "getIsEpsilon", name: "getIsEpsilon", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Bool], false)}, {prop: "getLabel", name: "getLabel", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [ptrType], false)}, {prop: "getSerializationType", name: "getSerializationType", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "getTarget", name: "getTarget", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [ATNState], false)}, {prop: "setTarget", name: "setTarget", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNState], [], false)}]);
	BaseTransition.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "target", name: "target", anonymous: false, exported: false, typ: ATNState, tag: ""}, {prop: "isEpsilon", name: "isEpsilon", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "label", name: "label", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "intervalSet", name: "intervalSet", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "serializationType", name: "serializationType", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	AtomTransition.init("", [{prop: "BaseTransition", name: "BaseTransition", anonymous: true, exported: true, typ: ptrType$78, tag: ""}]);
	RuleTransition.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseTransition", name: "BaseTransition", anonymous: true, exported: true, typ: ptrType$78, tag: ""}, {prop: "followState", name: "followState", anonymous: false, exported: false, typ: ATNState, tag: ""}, {prop: "ruleIndex", name: "ruleIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "precedence", name: "precedence", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	EpsilonTransition.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseTransition", name: "BaseTransition", anonymous: true, exported: true, typ: ptrType$78, tag: ""}, {prop: "outermostPrecedenceReturn", name: "outermostPrecedenceReturn", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	RangeTransition.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseTransition", name: "BaseTransition", anonymous: true, exported: true, typ: ptrType$78, tag: ""}, {prop: "start", name: "start", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "stop", name: "stop", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	AbstractPredicateTransition.init([{prop: "IAbstractPredicateTransitionFoo", name: "IAbstractPredicateTransitionFoo", pkg: "", typ: $funcType([], [], false)}, {prop: "Matches", name: "Matches", pkg: "", typ: $funcType([$Int, $Int, $Int], [$Bool], false)}, {prop: "getIsEpsilon", name: "getIsEpsilon", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Bool], false)}, {prop: "getLabel", name: "getLabel", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [ptrType], false)}, {prop: "getSerializationType", name: "getSerializationType", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}, {prop: "getTarget", name: "getTarget", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [ATNState], false)}, {prop: "setTarget", name: "setTarget", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([ATNState], [], false)}]);
	BaseAbstractPredicateTransition.init("", [{prop: "BaseTransition", name: "BaseTransition", anonymous: true, exported: true, typ: ptrType$78, tag: ""}]);
	PredicateTransition.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseAbstractPredicateTransition", name: "BaseAbstractPredicateTransition", anonymous: true, exported: true, typ: ptrType$79, tag: ""}, {prop: "isCtxDependent", name: "isCtxDependent", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "ruleIndex", name: "ruleIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "predIndex", name: "predIndex", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	ActionTransition.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseTransition", name: "BaseTransition", anonymous: true, exported: true, typ: ptrType$78, tag: ""}, {prop: "isCtxDependent", name: "isCtxDependent", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "ruleIndex", name: "ruleIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "actionIndex", name: "actionIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "predIndex", name: "predIndex", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	SetTransition.init("", [{prop: "BaseTransition", name: "BaseTransition", anonymous: true, exported: true, typ: ptrType$78, tag: ""}]);
	NotSetTransition.init("", [{prop: "SetTransition", name: "SetTransition", anonymous: true, exported: true, typ: ptrType$80, tag: ""}]);
	WildcardTransition.init("", [{prop: "BaseTransition", name: "BaseTransition", anonymous: true, exported: true, typ: ptrType$78, tag: ""}]);
	PrecedencePredicateTransition.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "BaseAbstractPredicateTransition", name: "BaseAbstractPredicateTransition", anonymous: true, exported: true, typ: ptrType$79, tag: ""}, {prop: "precedence", name: "precedence", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	Tree.init([{prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$26], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [Tree], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([Tree], [], false)}]);
	ParseTree.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([ParseTreeVisitor], [$emptyInterface], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$26], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [Tree], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$29], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([Tree], [], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType, Recognizer], [$String], false)}]);
	RuleNode.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([ParseTreeVisitor], [$emptyInterface], false)}, {prop: "GetBaseRuleContext", name: "GetBaseRuleContext", pkg: "", typ: $funcType([], [ptrType$61], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$26], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [Tree], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [RuleContext], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$29], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([Tree], [], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType, Recognizer], [$String], false)}]);
	TerminalNode.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([ParseTreeVisitor], [$emptyInterface], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$26], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [Tree], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$29], false)}, {prop: "GetSymbol", name: "GetSymbol", pkg: "", typ: $funcType([], [Token], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([Tree], [], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType, Recognizer], [$String], false)}]);
	ErrorNode.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([ParseTreeVisitor], [$emptyInterface], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$26], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [Tree], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$29], false)}, {prop: "GetSymbol", name: "GetSymbol", pkg: "", typ: $funcType([], [Token], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([Tree], [], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType, Recognizer], [$String], false)}, {prop: "errorNode", name: "errorNode", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [], false)}]);
	ParseTreeVisitor.init([{prop: "Visit", name: "Visit", pkg: "", typ: $funcType([ParseTree], [$emptyInterface], false)}, {prop: "VisitChildren", name: "VisitChildren", pkg: "", typ: $funcType([RuleNode], [$emptyInterface], false)}, {prop: "VisitErrorNode", name: "VisitErrorNode", pkg: "", typ: $funcType([ErrorNode], [$emptyInterface], false)}, {prop: "VisitTerminal", name: "VisitTerminal", pkg: "", typ: $funcType([TerminalNode], [$emptyInterface], false)}]);
	ParseTreeListener.init([{prop: "EnterEveryRule", name: "EnterEveryRule", pkg: "", typ: $funcType([ParserRuleContext], [], false)}, {prop: "ExitEveryRule", name: "ExitEveryRule", pkg: "", typ: $funcType([ParserRuleContext], [], false)}, {prop: "VisitErrorNode", name: "VisitErrorNode", pkg: "", typ: $funcType([ErrorNode], [], false)}, {prop: "VisitTerminal", name: "VisitTerminal", pkg: "", typ: $funcType([TerminalNode], [], false)}]);
	TerminalNodeImpl.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "parentCtx", name: "parentCtx", anonymous: false, exported: false, typ: RuleContext, tag: ""}, {prop: "symbol", name: "symbol", anonymous: false, exported: false, typ: Token, tag: ""}]);
	ErrorNodeImpl.init("", [{prop: "TerminalNodeImpl", name: "TerminalNodeImpl", anonymous: true, exported: true, typ: ptrType$2, tag: ""}]);
	ParseTreeWalker.init("", []);
	IntStack.init($Int);
	Set.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "data", name: "data", anonymous: false, exported: false, typ: mapType$5, tag: ""}, {prop: "hashcodeFunction", name: "hashcodeFunction", anonymous: false, exported: false, typ: funcType$1, tag: ""}, {prop: "equalsFunction", name: "equalsFunction", anonymous: false, exported: false, typ: funcType$2, tag: ""}]);
	hasher.init([{prop: "hash", name: "hash", pkg: "github.com/antlr/antlr4/runtime/Go/antlr", typ: $funcType([], [$Int], false)}]);
	BitSet.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "data", name: "data", anonymous: false, exported: false, typ: mapType$6, tag: ""}]);
	AltDict.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "data", name: "data", anonymous: false, exported: false, typ: mapType$7, tag: ""}]);
	DoubleDict.init("github.com/antlr/antlr4/runtime/Go/antlr", [{prop: "data", name: "data", anonymous: false, exported: false, typ: mapType$9, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hex.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf16.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ATNInvalidAltNumber = 0;
		$pkg.ATNDeserializationOptionsdefaultOptions = new ATNDeserializationOptions.ptr(true, false, false);
		$pkg.BaseSerializedUUID = "AADB8D7E-AEEF-4415-AD2B-8204D6CF042E";
		$pkg.AddedUnicodeSMP = "59627784-3BE5-417A-B9EB-8131A7286089";
		$pkg.SupportedUUIDs = new sliceType([$pkg.BaseSerializedUUID, $pkg.AddedUnicodeSMP]);
		$pkg.SerializedVersion = 3;
		$pkg.SerializedUUID = $pkg.AddedUnicodeSMP;
		_r = createByteToHex(); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		byteToHex = _r;
		$pkg.ATNSimulatorError = NewDFAState(2147483647, NewBaseATNConfigSet(false));
		$pkg.CommonTokenFactoryDEFAULT = NewCommonTokenFactory(false);
		$pkg.ConsoleErrorListenerINSTANCE = NewConsoleErrorListener();
		$pkg.LexerSkipActionINSTANCE = NewLexerSkipAction();
		$pkg.LexerPopModeActionINSTANCE = NewLexerPopModeAction();
		$pkg.LexerMoreActionINSTANCE = NewLexerMoreAction();
		$pkg.LexerATNSimulatorDebug = false;
		$pkg.LexerATNSimulatorMinDFAEdge = 0;
		$pkg.LexerATNSimulatorMaxDFAEdge = 127;
		bypassAltsAtnCache = {};
		$pkg.ParserATNSimulatorDebug = false;
		$pkg.ParserATNSimulatorListATNDecisions = false;
		$pkg.ParserATNSimulatorDFADebug = false;
		$pkg.ParserATNSimulatorRetryDebug = false;
		$pkg.RuleContextEmpty = NewBaseParserRuleContext($ifaceNil, -1);
		tokenTypeMapCache = {};
		ruleIndexMapCache = {};
		$pkg.SemanticContextNone = NewPredicate(-1, -1, false);
		$pkg.TreeInvalidInterval = NewInterval(-1, -2);
		$pkg.ParseTreeWalkerDefault = NewParseTreeWalker();
		$pkg.ErrEmptyStack = errors.New("Stack is empty");
		_r$1 = NewEmptyPredictionContext(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$pkg.BasePredictionContextEMPTY = _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/mgrzeszczak/funlang/generated"] = (function() {
	var $pkg = {}, $init, fmt, antlr, reflect, strconv, unicode, FunlangLexer, FunlangParser, IProgramContext, ProgramContext, IStatementContext, StatementContext, IExecutionContext, ExecutionContext, IParameterListContext, ParameterListContext, IParametersContext, ParametersContext, IDefinitionContext, DefinitionContext, INameContext, NameContext, IFunctionContext, FunctionContext, IInnerFunctionsContext, InnerFunctionsContext, IFunctionListContext, FunctionListContext, ICompositionContext, CompositionContext, IPrimitiveRecursionContext, PrimitiveRecursionContext, IZeroContext, ZeroContext, ISuccessorContext, SuccessorContext, IProjectionContext, ProjectionContext, INumberContext, NumberContext, FunlangVisitor, sliceType, ptrType, sliceType$1, ptrType$1, sliceType$2, ptrType$2, ptrType$3, ptrType$4, ptrType$5, sliceType$3, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, sliceType$4, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, sliceType$5, ptrType$20, ptrType$21, sliceType$6, ptrType$23, ptrType$24, ptrType$25, ptrType$26, ptrType$27, ptrType$28, ptrType$29, ptrType$30, ptrType$31, ptrType$32, ptrType$33, ptrType$34, ptrType$35, ptrType$36, ptrType$38, ptrType$39, ptrType$40, ptrType$41, sliceType$7, ptrType$42, sliceType$8, serializedLexerAtn, lexerDeserializer, lexerAtn, lexerChannelNames, lexerModeNames, lexerLiteralNames, lexerSymbolicNames, lexerRuleNames, lexerDecisionToDFA, parserATN, deserializer, deserializedATN, literalNames, symbolicNames, ruleNames, decisionToDFA, _r, _r$1, init, NewFunlangLexer, init$1, NewFunlangParser, NewProgramContext, NewStatementContext, NewExecutionContext, NewParameterListContext, NewParametersContext, NewDefinitionContext, NewNameContext, NewFunctionContext, NewInnerFunctionsContext, NewFunctionListContext, NewCompositionContext, NewPrimitiveRecursionContext, NewZeroContext, NewSuccessorContext, NewProjectionContext, NewNumberContext;
	fmt = $packages["fmt"];
	antlr = $packages["github.com/antlr/antlr4/runtime/Go/antlr"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	unicode = $packages["unicode"];
	FunlangLexer = $pkg.FunlangLexer = $newType(0, $kindStruct, "generated.FunlangLexer", true, "github.com/mgrzeszczak/funlang/generated", true, function(BaseLexer_, channelNames_, modeNames_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseLexer = ptrType$2.nil;
			this.channelNames = sliceType$1.nil;
			this.modeNames = sliceType$1.nil;
			return;
		}
		this.BaseLexer = BaseLexer_;
		this.channelNames = channelNames_;
		this.modeNames = modeNames_;
	});
	FunlangParser = $pkg.FunlangParser = $newType(0, $kindStruct, "generated.FunlangParser", true, "github.com/mgrzeszczak/funlang/generated", true, function(BaseParser_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseParser = ptrType$3.nil;
			return;
		}
		this.BaseParser = BaseParser_;
	});
	IProgramContext = $pkg.IProgramContext = $newType(8, $kindInterface, "generated.IProgramContext", true, "github.com/mgrzeszczak/funlang/generated", true, null);
	ProgramContext = $pkg.ProgramContext = $newType(0, $kindStruct, "generated.ProgramContext", true, "github.com/mgrzeszczak/funlang/generated", true, function(BaseParserRuleContext_, parser_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseParserRuleContext = ptrType$4.nil;
			this.parser = $ifaceNil;
			return;
		}
		this.BaseParserRuleContext = BaseParserRuleContext_;
		this.parser = parser_;
	});
	IStatementContext = $pkg.IStatementContext = $newType(8, $kindInterface, "generated.IStatementContext", true, "github.com/mgrzeszczak/funlang/generated", true, null);
	StatementContext = $pkg.StatementContext = $newType(0, $kindStruct, "generated.StatementContext", true, "github.com/mgrzeszczak/funlang/generated", true, function(BaseParserRuleContext_, parser_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseParserRuleContext = ptrType$4.nil;
			this.parser = $ifaceNil;
			return;
		}
		this.BaseParserRuleContext = BaseParserRuleContext_;
		this.parser = parser_;
	});
	IExecutionContext = $pkg.IExecutionContext = $newType(8, $kindInterface, "generated.IExecutionContext", true, "github.com/mgrzeszczak/funlang/generated", true, null);
	ExecutionContext = $pkg.ExecutionContext = $newType(0, $kindStruct, "generated.ExecutionContext", true, "github.com/mgrzeszczak/funlang/generated", true, function(BaseParserRuleContext_, parser_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseParserRuleContext = ptrType$4.nil;
			this.parser = $ifaceNil;
			return;
		}
		this.BaseParserRuleContext = BaseParserRuleContext_;
		this.parser = parser_;
	});
	IParameterListContext = $pkg.IParameterListContext = $newType(8, $kindInterface, "generated.IParameterListContext", true, "github.com/mgrzeszczak/funlang/generated", true, null);
	ParameterListContext = $pkg.ParameterListContext = $newType(0, $kindStruct, "generated.ParameterListContext", true, "github.com/mgrzeszczak/funlang/generated", true, function(BaseParserRuleContext_, parser_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseParserRuleContext = ptrType$4.nil;
			this.parser = $ifaceNil;
			return;
		}
		this.BaseParserRuleContext = BaseParserRuleContext_;
		this.parser = parser_;
	});
	IParametersContext = $pkg.IParametersContext = $newType(8, $kindInterface, "generated.IParametersContext", true, "github.com/mgrzeszczak/funlang/generated", true, null);
	ParametersContext = $pkg.ParametersContext = $newType(0, $kindStruct, "generated.ParametersContext", true, "github.com/mgrzeszczak/funlang/generated", true, function(BaseParserRuleContext_, parser_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseParserRuleContext = ptrType$4.nil;
			this.parser = $ifaceNil;
			return;
		}
		this.BaseParserRuleContext = BaseParserRuleContext_;
		this.parser = parser_;
	});
	IDefinitionContext = $pkg.IDefinitionContext = $newType(8, $kindInterface, "generated.IDefinitionContext", true, "github.com/mgrzeszczak/funlang/generated", true, null);
	DefinitionContext = $pkg.DefinitionContext = $newType(0, $kindStruct, "generated.DefinitionContext", true, "github.com/mgrzeszczak/funlang/generated", true, function(BaseParserRuleContext_, parser_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseParserRuleContext = ptrType$4.nil;
			this.parser = $ifaceNil;
			return;
		}
		this.BaseParserRuleContext = BaseParserRuleContext_;
		this.parser = parser_;
	});
	INameContext = $pkg.INameContext = $newType(8, $kindInterface, "generated.INameContext", true, "github.com/mgrzeszczak/funlang/generated", true, null);
	NameContext = $pkg.NameContext = $newType(0, $kindStruct, "generated.NameContext", true, "github.com/mgrzeszczak/funlang/generated", true, function(BaseParserRuleContext_, parser_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseParserRuleContext = ptrType$4.nil;
			this.parser = $ifaceNil;
			return;
		}
		this.BaseParserRuleContext = BaseParserRuleContext_;
		this.parser = parser_;
	});
	IFunctionContext = $pkg.IFunctionContext = $newType(8, $kindInterface, "generated.IFunctionContext", true, "github.com/mgrzeszczak/funlang/generated", true, null);
	FunctionContext = $pkg.FunctionContext = $newType(0, $kindStruct, "generated.FunctionContext", true, "github.com/mgrzeszczak/funlang/generated", true, function(BaseParserRuleContext_, parser_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseParserRuleContext = ptrType$4.nil;
			this.parser = $ifaceNil;
			return;
		}
		this.BaseParserRuleContext = BaseParserRuleContext_;
		this.parser = parser_;
	});
	IInnerFunctionsContext = $pkg.IInnerFunctionsContext = $newType(8, $kindInterface, "generated.IInnerFunctionsContext", true, "github.com/mgrzeszczak/funlang/generated", true, null);
	InnerFunctionsContext = $pkg.InnerFunctionsContext = $newType(0, $kindStruct, "generated.InnerFunctionsContext", true, "github.com/mgrzeszczak/funlang/generated", true, function(BaseParserRuleContext_, parser_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseParserRuleContext = ptrType$4.nil;
			this.parser = $ifaceNil;
			return;
		}
		this.BaseParserRuleContext = BaseParserRuleContext_;
		this.parser = parser_;
	});
	IFunctionListContext = $pkg.IFunctionListContext = $newType(8, $kindInterface, "generated.IFunctionListContext", true, "github.com/mgrzeszczak/funlang/generated", true, null);
	FunctionListContext = $pkg.FunctionListContext = $newType(0, $kindStruct, "generated.FunctionListContext", true, "github.com/mgrzeszczak/funlang/generated", true, function(BaseParserRuleContext_, parser_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseParserRuleContext = ptrType$4.nil;
			this.parser = $ifaceNil;
			return;
		}
		this.BaseParserRuleContext = BaseParserRuleContext_;
		this.parser = parser_;
	});
	ICompositionContext = $pkg.ICompositionContext = $newType(8, $kindInterface, "generated.ICompositionContext", true, "github.com/mgrzeszczak/funlang/generated", true, null);
	CompositionContext = $pkg.CompositionContext = $newType(0, $kindStruct, "generated.CompositionContext", true, "github.com/mgrzeszczak/funlang/generated", true, function(BaseParserRuleContext_, parser_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseParserRuleContext = ptrType$4.nil;
			this.parser = $ifaceNil;
			return;
		}
		this.BaseParserRuleContext = BaseParserRuleContext_;
		this.parser = parser_;
	});
	IPrimitiveRecursionContext = $pkg.IPrimitiveRecursionContext = $newType(8, $kindInterface, "generated.IPrimitiveRecursionContext", true, "github.com/mgrzeszczak/funlang/generated", true, null);
	PrimitiveRecursionContext = $pkg.PrimitiveRecursionContext = $newType(0, $kindStruct, "generated.PrimitiveRecursionContext", true, "github.com/mgrzeszczak/funlang/generated", true, function(BaseParserRuleContext_, parser_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseParserRuleContext = ptrType$4.nil;
			this.parser = $ifaceNil;
			return;
		}
		this.BaseParserRuleContext = BaseParserRuleContext_;
		this.parser = parser_;
	});
	IZeroContext = $pkg.IZeroContext = $newType(8, $kindInterface, "generated.IZeroContext", true, "github.com/mgrzeszczak/funlang/generated", true, null);
	ZeroContext = $pkg.ZeroContext = $newType(0, $kindStruct, "generated.ZeroContext", true, "github.com/mgrzeszczak/funlang/generated", true, function(BaseParserRuleContext_, parser_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseParserRuleContext = ptrType$4.nil;
			this.parser = $ifaceNil;
			return;
		}
		this.BaseParserRuleContext = BaseParserRuleContext_;
		this.parser = parser_;
	});
	ISuccessorContext = $pkg.ISuccessorContext = $newType(8, $kindInterface, "generated.ISuccessorContext", true, "github.com/mgrzeszczak/funlang/generated", true, null);
	SuccessorContext = $pkg.SuccessorContext = $newType(0, $kindStruct, "generated.SuccessorContext", true, "github.com/mgrzeszczak/funlang/generated", true, function(BaseParserRuleContext_, parser_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseParserRuleContext = ptrType$4.nil;
			this.parser = $ifaceNil;
			return;
		}
		this.BaseParserRuleContext = BaseParserRuleContext_;
		this.parser = parser_;
	});
	IProjectionContext = $pkg.IProjectionContext = $newType(8, $kindInterface, "generated.IProjectionContext", true, "github.com/mgrzeszczak/funlang/generated", true, null);
	ProjectionContext = $pkg.ProjectionContext = $newType(0, $kindStruct, "generated.ProjectionContext", true, "github.com/mgrzeszczak/funlang/generated", true, function(BaseParserRuleContext_, parser_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseParserRuleContext = ptrType$4.nil;
			this.parser = $ifaceNil;
			return;
		}
		this.BaseParserRuleContext = BaseParserRuleContext_;
		this.parser = parser_;
	});
	INumberContext = $pkg.INumberContext = $newType(8, $kindInterface, "generated.INumberContext", true, "github.com/mgrzeszczak/funlang/generated", true, null);
	NumberContext = $pkg.NumberContext = $newType(0, $kindStruct, "generated.NumberContext", true, "github.com/mgrzeszczak/funlang/generated", true, function(BaseParserRuleContext_, parser_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BaseParserRuleContext = ptrType$4.nil;
			this.parser = $ifaceNil;
			return;
		}
		this.BaseParserRuleContext = BaseParserRuleContext_;
		this.parser = parser_;
	});
	FunlangVisitor = $pkg.FunlangVisitor = $newType(8, $kindInterface, "generated.FunlangVisitor", true, "github.com/mgrzeszczak/funlang/generated", true, null);
	sliceType = $sliceType($Uint16);
	ptrType = $ptrType(antlr.ATNDeserializationOptions);
	sliceType$1 = $sliceType($String);
	ptrType$1 = $ptrType(antlr.DFA);
	sliceType$2 = $sliceType(ptrType$1);
	ptrType$2 = $ptrType(antlr.BaseLexer);
	ptrType$3 = $ptrType(antlr.BaseParser);
	ptrType$4 = $ptrType(antlr.BaseParserRuleContext);
	ptrType$5 = $ptrType(IStatementContext);
	sliceType$3 = $sliceType(IStatementContext);
	ptrType$6 = $ptrType(IDefinitionContext);
	ptrType$7 = $ptrType(IExecutionContext);
	ptrType$8 = $ptrType(INameContext);
	ptrType$9 = $ptrType(IParametersContext);
	ptrType$10 = $ptrType(INumberContext);
	ptrType$11 = $ptrType(IParameterListContext);
	ptrType$12 = $ptrType(IFunctionContext);
	ptrType$13 = $ptrType(ICompositionContext);
	ptrType$14 = $ptrType(IInnerFunctionsContext);
	sliceType$4 = $sliceType(antlr.ParseTreeListener);
	ptrType$15 = $ptrType(IFunctionListContext);
	ptrType$16 = $ptrType(IPrimitiveRecursionContext);
	ptrType$17 = $ptrType(IZeroContext);
	ptrType$18 = $ptrType(ISuccessorContext);
	ptrType$19 = $ptrType(IProjectionContext);
	sliceType$5 = $sliceType(INumberContext);
	ptrType$20 = $ptrType(FunctionContext);
	ptrType$21 = $ptrType(CompositionContext);
	sliceType$6 = $sliceType($emptyInterface);
	ptrType$23 = $ptrType(ProgramContext);
	ptrType$24 = $ptrType(StatementContext);
	ptrType$25 = $ptrType(ExecutionContext);
	ptrType$26 = $ptrType(ParameterListContext);
	ptrType$27 = $ptrType(ParametersContext);
	ptrType$28 = $ptrType(DefinitionContext);
	ptrType$29 = $ptrType(NameContext);
	ptrType$30 = $ptrType(InnerFunctionsContext);
	ptrType$31 = $ptrType(FunctionListContext);
	ptrType$32 = $ptrType(PrimitiveRecursionContext);
	ptrType$33 = $ptrType(ZeroContext);
	ptrType$34 = $ptrType(SuccessorContext);
	ptrType$35 = $ptrType(ProjectionContext);
	ptrType$36 = $ptrType(NumberContext);
	ptrType$38 = $ptrType(FunlangParser);
	ptrType$39 = $ptrType(antlr.ErrorNodeImpl);
	ptrType$40 = $ptrType(antlr.TerminalNodeImpl);
	ptrType$41 = $ptrType(antlr.BaseRuleContext);
	sliceType$7 = $sliceType(antlr.Tree);
	ptrType$42 = $ptrType(antlr.Interval);
	sliceType$8 = $sliceType(antlr.TerminalNode);
	init = function() {
		var _i, _ref, ds, index;
		_ref = lexerAtn.DecisionToState;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			index = _i;
			ds = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((index < 0 || index >= lexerDecisionToDFA.$length) ? ($throwRuntimeError("index out of range"), undefined) : lexerDecisionToDFA.$array[lexerDecisionToDFA.$offset + index] = antlr.NewDFA(ds, index));
			_i++;
		}
	};
	NewFunlangLexer = function(input) {
		var input, l;
		l = new FunlangLexer.ptr(ptrType$2.nil, sliceType$1.nil, sliceType$1.nil);
		l.BaseLexer = antlr.NewBaseLexer(input);
		l.BaseLexer.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache());
		l.channelNames = lexerChannelNames;
		l.modeNames = lexerModeNames;
		l.BaseLexer.BaseRecognizer.RuleNames = lexerRuleNames;
		l.BaseLexer.BaseRecognizer.LiteralNames = lexerLiteralNames;
		l.BaseLexer.BaseRecognizer.SymbolicNames = lexerSymbolicNames;
		l.BaseLexer.BaseRecognizer.GrammarFileName = "Funlang.g4";
		return l;
	};
	$pkg.NewFunlangLexer = NewFunlangLexer;
	init$1 = function() {
		var _i, _ref, ds, index;
		_ref = deserializedATN.DecisionToState;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			index = _i;
			ds = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((index < 0 || index >= decisionToDFA.$length) ? ($throwRuntimeError("index out of range"), undefined) : decisionToDFA.$array[decisionToDFA.$offset + index] = antlr.NewDFA(ds, index));
			_i++;
		}
	};
	NewFunlangParser = function(input) {
		var _r$2, input, this$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; input = $f.input; this$1 = $f.this$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		this$1 = new FunlangParser.ptr(ptrType$3.nil);
		_r$2 = antlr.NewBaseParser(input); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		this$1.BaseParser = _r$2;
		this$1.BaseParser.Interpreter = antlr.NewParserATNSimulator(this$1, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache());
		this$1.BaseParser.BaseRecognizer.RuleNames = ruleNames;
		this$1.BaseParser.BaseRecognizer.LiteralNames = literalNames;
		this$1.BaseParser.BaseRecognizer.SymbolicNames = symbolicNames;
		this$1.BaseParser.BaseRecognizer.GrammarFileName = "Funlang.g4";
		$s = -1; return this$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewFunlangParser }; } $f._r$2 = _r$2; $f.input = input; $f.this$1 = this$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewFunlangParser = NewFunlangParser;
	ProgramContext.ptr.prototype.IsProgramContext = function() {
	};
	ProgramContext.prototype.IsProgramContext = function() { return this.$val.IsProgramContext(); };
	NewProgramContext = function(parser, parent, invokingState) {
		var invokingState, p, parent, parser;
		p = new ProgramContext.ptr(ptrType$4.nil, $ifaceNil);
		p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState);
		p.parser = parser;
		p.BaseParserRuleContext.BaseRuleContext.RuleIndex = 0;
		return p;
	};
	$pkg.NewProgramContext = NewProgramContext;
	ProgramContext.ptr.prototype.GetParser = function() {
		var s;
		s = this;
		return s.parser;
	};
	ProgramContext.prototype.GetParser = function() { return this.$val.GetParser(); };
	ProgramContext.ptr.prototype.AllStatement = function() {
		var _i, _r$2, _r$3, _ref, i, s, t, ts, tst, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; i = $f.i; s = $f.s; t = $f.t; ts = $f.ts; tst = $f.tst; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$5.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContexts(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		ts = _r$3;
		tst = $makeSlice(sliceType$3, ts.$length);
		_ref = ts;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			t = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!($interfaceIsEqual(t, $ifaceNil))) {
				((i < 0 || i >= tst.$length) ? ($throwRuntimeError("index out of range"), undefined) : tst.$array[tst.$offset + i] = $assertType(t, IStatementContext));
			}
			_i++;
		}
		$s = -1; return tst;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProgramContext.ptr.prototype.AllStatement }; } $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.i = i; $f.s = s; $f.t = t; $f.ts = ts; $f.tst = tst; $f.$s = $s; $f.$r = $r; return $f;
	};
	ProgramContext.prototype.AllStatement = function() { return this.$val.AllStatement(); };
	ProgramContext.ptr.prototype.Statement = function(i) {
		var _r$2, _r$3, i, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$5.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, i); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, IStatementContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProgramContext.ptr.prototype.Statement }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	ProgramContext.prototype.Statement = function(i) { return this.$val.Statement(i); };
	ProgramContext.ptr.prototype.AllSemicolon = function() {
		var _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetTokens(9); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProgramContext.ptr.prototype.AllSemicolon }; } $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ProgramContext.prototype.AllSemicolon = function() { return this.$val.AllSemicolon(); };
	ProgramContext.ptr.prototype.Semicolon = function(i) {
		var _r$2, i, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; i = $f.i; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetToken(9, i); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProgramContext.ptr.prototype.Semicolon }; } $f._r$2 = _r$2; $f.i = i; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ProgramContext.prototype.Semicolon = function(i) { return this.$val.Semicolon(i); };
	ProgramContext.ptr.prototype.GetRuleContext = function() {
		var s;
		s = this;
		return s;
	};
	ProgramContext.prototype.GetRuleContext = function() { return this.$val.GetRuleContext(); };
	ProgramContext.ptr.prototype.ToStringTree = function(ruleNames$1, recog) {
		var _r$2, recog, ruleNames$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; recog = $f.recog; ruleNames$1 = $f.ruleNames$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = antlr.TreesStringTree(s, ruleNames$1, recog); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProgramContext.ptr.prototype.ToStringTree }; } $f._r$2 = _r$2; $f.recog = recog; $f.ruleNames$1 = ruleNames$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ProgramContext.prototype.ToStringTree = function(ruleNames$1, recog) { return this.$val.ToStringTree(ruleNames$1, recog); };
	ProgramContext.ptr.prototype.Accept = function(visitor) {
		var _r$2, _r$3, _ref, s, t, t$1, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; s = $f.s; t = $f.t; t$1 = $f.t$1; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_ref = visitor;
		/* */ if ($assertType(_ref, FunlangVisitor, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, FunlangVisitor, true)[1]) { */ case 1:
			t = _ref;
			_r$2 = t.VisitProgram(s); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } else { */ case 2:
			t$1 = _ref;
			_r$3 = t$1.VisitChildren(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProgramContext.ptr.prototype.Accept }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.s = s; $f.t = t; $f.t$1 = t$1; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	ProgramContext.prototype.Accept = function(visitor) { return this.$val.Accept(visitor); };
	FunlangParser.ptr.prototype.Program = function() {
		var _1, _la, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, localctx, ok, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _la = $f._la; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; localctx = $f.localctx; ok = $f.ok; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		localctx = [localctx];
		p = [p];
		localctx[0] = $ifaceNil;
		p[0] = this;
		localctx[0] = NewProgramContext(p[0], p[0].BaseParser.GetParserRuleContext(), p[0].BaseParser.BaseRecognizer.GetState());
		$r = p[0].BaseParser.EnterRule(localctx[0], 0, 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_la = 0;
		$deferred.push([(function(localctx, p) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = p[0].BaseParser.ExitRule(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		$deferred.push([(function(localctx, p) { return function $b() {
			var _tuple, err, ok, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			err = $recover();
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
				_tuple = $assertType(err, antlr.RecognitionException, true);
				v = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (ok) { */ case 3:
					$r = localctx[0].SetException(v); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().ReportError(p[0], v); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().Recover(p[0], v); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 5; continue;
				/* } else { */ case 4:
					$panic(err);
				/* } */ case 5:
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._tuple = _tuple; $f.err = err; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		p[0].BaseParser.BaseRecognizer.SetState(40);
		$r = p[0].BaseParser.GetErrorHandler().Sync(p[0]); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = p[0].BaseParser.GetTokenStream().LA(1); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_1 = _r$2;
			/* */ if ((_1 === (4)) || (_1 === (12))) { $s = 5; continue; }
			/* */ if (_1 === (-1)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_1 === (4)) || (_1 === (12))) { */ case 5:
				$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 1); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p[0].BaseParser.BaseRecognizer.SetState(35);
				$r = p[0].BaseParser.GetErrorHandler().Sync(p[0]); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$3 = p[0].BaseParser.GetTokenStream().LA(1); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_la = _r$3;
				ok = true;
				/* while (true) { */ case 12:
					/* if (!(ok)) { break; } */ if(!(ok)) { $s = 13; continue; }
					p[0].BaseParser.BaseRecognizer.SetState(32);
					_r$4 = p[0].Statement(); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
					p[0].BaseParser.BaseRecognizer.SetState(33);
					_r$5 = p[0].BaseParser.Match(9); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$5;
					p[0].BaseParser.BaseRecognizer.SetState(37);
					$r = p[0].BaseParser.GetErrorHandler().Sync(p[0]); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$6 = p[0].BaseParser.GetTokenStream().LA(1); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_la = _r$6;
					ok = (_la === 4) || (_la === 12);
				/* } */ $s = 12; continue; case 13:
				$s = 8; continue;
			/* } else if (_1 === (-1)) { */ case 6:
				$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 2); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 8; continue;
			/* } else { */ case 7:
				_r$7 = antlr.NewNoViableAltException(p[0], $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$panic(_r$7);
			/* } */ case 8:
		case 3:
		localctx[0] = localctx[0];
		$s = -1; return localctx[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  localctx[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.Program }; } $f._1 = _1; $f._la = _la; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.localctx = localctx; $f.ok = ok; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FunlangParser.prototype.Program = function() { return this.$val.Program(); };
	StatementContext.ptr.prototype.IsStatementContext = function() {
	};
	StatementContext.prototype.IsStatementContext = function() { return this.$val.IsStatementContext(); };
	NewStatementContext = function(parser, parent, invokingState) {
		var invokingState, p, parent, parser;
		p = new StatementContext.ptr(ptrType$4.nil, $ifaceNil);
		p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState);
		p.parser = parser;
		p.BaseParserRuleContext.BaseRuleContext.RuleIndex = 1;
		return p;
	};
	$pkg.NewStatementContext = NewStatementContext;
	StatementContext.ptr.prototype.GetParser = function() {
		var s;
		s = this;
		return s.parser;
	};
	StatementContext.prototype.GetParser = function() { return this.$val.GetParser(); };
	StatementContext.ptr.prototype.Definition = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$6.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, IDefinitionContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: StatementContext.ptr.prototype.Definition }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	StatementContext.prototype.Definition = function() { return this.$val.Definition(); };
	StatementContext.ptr.prototype.Execution = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$7.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, IExecutionContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: StatementContext.ptr.prototype.Execution }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	StatementContext.prototype.Execution = function() { return this.$val.Execution(); };
	StatementContext.ptr.prototype.GetRuleContext = function() {
		var s;
		s = this;
		return s;
	};
	StatementContext.prototype.GetRuleContext = function() { return this.$val.GetRuleContext(); };
	StatementContext.ptr.prototype.ToStringTree = function(ruleNames$1, recog) {
		var _r$2, recog, ruleNames$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; recog = $f.recog; ruleNames$1 = $f.ruleNames$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = antlr.TreesStringTree(s, ruleNames$1, recog); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StatementContext.ptr.prototype.ToStringTree }; } $f._r$2 = _r$2; $f.recog = recog; $f.ruleNames$1 = ruleNames$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	StatementContext.prototype.ToStringTree = function(ruleNames$1, recog) { return this.$val.ToStringTree(ruleNames$1, recog); };
	StatementContext.ptr.prototype.Accept = function(visitor) {
		var _r$2, _r$3, _ref, s, t, t$1, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; s = $f.s; t = $f.t; t$1 = $f.t$1; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_ref = visitor;
		/* */ if ($assertType(_ref, FunlangVisitor, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, FunlangVisitor, true)[1]) { */ case 1:
			t = _ref;
			_r$2 = t.VisitStatement(s); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } else { */ case 2:
			t$1 = _ref;
			_r$3 = t$1.VisitChildren(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StatementContext.ptr.prototype.Accept }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.s = s; $f.t = t; $f.t$1 = t$1; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	StatementContext.prototype.Accept = function(visitor) { return this.$val.Accept(visitor); };
	FunlangParser.ptr.prototype.Statement = function() {
		var _1, _r$2, _r$3, _r$4, _r$5, localctx, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; localctx = $f.localctx; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		localctx = [localctx];
		p = [p];
		localctx[0] = $ifaceNil;
		p[0] = this;
		localctx[0] = NewStatementContext(p[0], p[0].BaseParser.GetParserRuleContext(), p[0].BaseParser.BaseRecognizer.GetState());
		$r = p[0].BaseParser.EnterRule(localctx[0], 2, 1); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([(function(localctx, p) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = p[0].BaseParser.ExitRule(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		$deferred.push([(function(localctx, p) { return function $b() {
			var _tuple, err, ok, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			err = $recover();
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
				_tuple = $assertType(err, antlr.RecognitionException, true);
				v = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (ok) { */ case 3:
					$r = localctx[0].SetException(v); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().ReportError(p[0], v); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().Recover(p[0], v); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 5; continue;
				/* } else { */ case 4:
					$panic(err);
				/* } */ case 5:
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._tuple = _tuple; $f.err = err; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		p[0].BaseParser.BaseRecognizer.SetState(44);
		$r = p[0].BaseParser.GetErrorHandler().Sync(p[0]); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = p[0].BaseParser.GetTokenStream().LA(1); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_1 = _r$2;
			/* */ if (_1 === (4)) { $s = 5; continue; }
			/* */ if (_1 === (12)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (4)) { */ case 5:
				$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 1); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p[0].BaseParser.BaseRecognizer.SetState(42);
				_r$3 = p[0].Definition(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				$s = 8; continue;
			/* } else if (_1 === (12)) { */ case 6:
				$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 2); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p[0].BaseParser.BaseRecognizer.SetState(43);
				_r$4 = p[0].Execution(); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				$s = 8; continue;
			/* } else { */ case 7:
				_r$5 = antlr.NewNoViableAltException(p[0], $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$panic(_r$5);
			/* } */ case 8:
		case 3:
		localctx[0] = localctx[0];
		$s = -1; return localctx[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  localctx[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.Statement }; } $f._1 = _1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.localctx = localctx; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FunlangParser.prototype.Statement = function() { return this.$val.Statement(); };
	ExecutionContext.ptr.prototype.IsExecutionContext = function() {
	};
	ExecutionContext.prototype.IsExecutionContext = function() { return this.$val.IsExecutionContext(); };
	NewExecutionContext = function(parser, parent, invokingState) {
		var invokingState, p, parent, parser;
		p = new ExecutionContext.ptr(ptrType$4.nil, $ifaceNil);
		p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState);
		p.parser = parser;
		p.BaseParserRuleContext.BaseRuleContext.RuleIndex = 2;
		return p;
	};
	$pkg.NewExecutionContext = NewExecutionContext;
	ExecutionContext.ptr.prototype.GetParser = function() {
		var s;
		s = this;
		return s.parser;
	};
	ExecutionContext.prototype.GetParser = function() { return this.$val.GetParser(); };
	ExecutionContext.ptr.prototype.Name = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$8.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, INameContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ExecutionContext.ptr.prototype.Name }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	ExecutionContext.prototype.Name = function() { return this.$val.Name(); };
	ExecutionContext.ptr.prototype.Parameters = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$9.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, IParametersContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ExecutionContext.ptr.prototype.Parameters }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	ExecutionContext.prototype.Parameters = function() { return this.$val.Parameters(); };
	ExecutionContext.ptr.prototype.GetRuleContext = function() {
		var s;
		s = this;
		return s;
	};
	ExecutionContext.prototype.GetRuleContext = function() { return this.$val.GetRuleContext(); };
	ExecutionContext.ptr.prototype.ToStringTree = function(ruleNames$1, recog) {
		var _r$2, recog, ruleNames$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; recog = $f.recog; ruleNames$1 = $f.ruleNames$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = antlr.TreesStringTree(s, ruleNames$1, recog); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ExecutionContext.ptr.prototype.ToStringTree }; } $f._r$2 = _r$2; $f.recog = recog; $f.ruleNames$1 = ruleNames$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ExecutionContext.prototype.ToStringTree = function(ruleNames$1, recog) { return this.$val.ToStringTree(ruleNames$1, recog); };
	ExecutionContext.ptr.prototype.Accept = function(visitor) {
		var _r$2, _r$3, _ref, s, t, t$1, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; s = $f.s; t = $f.t; t$1 = $f.t$1; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_ref = visitor;
		/* */ if ($assertType(_ref, FunlangVisitor, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, FunlangVisitor, true)[1]) { */ case 1:
			t = _ref;
			_r$2 = t.VisitExecution(s); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } else { */ case 2:
			t$1 = _ref;
			_r$3 = t$1.VisitChildren(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ExecutionContext.ptr.prototype.Accept }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.s = s; $f.t = t; $f.t$1 = t$1; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	ExecutionContext.prototype.Accept = function(visitor) { return this.$val.Accept(visitor); };
	FunlangParser.ptr.prototype.Execution = function() {
		var _r$2, _r$3, localctx, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; localctx = $f.localctx; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		localctx = [localctx];
		p = [p];
		localctx[0] = $ifaceNil;
		p[0] = this;
		localctx[0] = NewExecutionContext(p[0], p[0].BaseParser.GetParserRuleContext(), p[0].BaseParser.BaseRecognizer.GetState());
		$r = p[0].BaseParser.EnterRule(localctx[0], 4, 2); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([(function(localctx, p) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = p[0].BaseParser.ExitRule(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		$deferred.push([(function(localctx, p) { return function $b() {
			var _tuple, err, ok, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			err = $recover();
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
				_tuple = $assertType(err, antlr.RecognitionException, true);
				v = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (ok) { */ case 3:
					$r = localctx[0].SetException(v); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().ReportError(p[0], v); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().Recover(p[0], v); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 5; continue;
				/* } else { */ case 4:
					$panic(err);
				/* } */ case 5:
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._tuple = _tuple; $f.err = err; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 1); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p[0].BaseParser.BaseRecognizer.SetState(46);
		_r$2 = p[0].Name(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		p[0].BaseParser.BaseRecognizer.SetState(47);
		_r$3 = p[0].Parameters(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		localctx[0] = localctx[0];
		$s = -1; return localctx[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  localctx[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.Execution }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.localctx = localctx; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FunlangParser.prototype.Execution = function() { return this.$val.Execution(); };
	ParameterListContext.ptr.prototype.IsParameterListContext = function() {
	};
	ParameterListContext.prototype.IsParameterListContext = function() { return this.$val.IsParameterListContext(); };
	NewParameterListContext = function(parser, parent, invokingState) {
		var invokingState, p, parent, parser;
		p = new ParameterListContext.ptr(ptrType$4.nil, $ifaceNil);
		p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState);
		p.parser = parser;
		p.BaseParserRuleContext.BaseRuleContext.RuleIndex = 3;
		return p;
	};
	$pkg.NewParameterListContext = NewParameterListContext;
	ParameterListContext.ptr.prototype.GetParser = function() {
		var s;
		s = this;
		return s.parser;
	};
	ParameterListContext.prototype.GetParser = function() { return this.$val.GetParser(); };
	ParameterListContext.ptr.prototype.Number = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$10.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, INumberContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParameterListContext.ptr.prototype.Number }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParameterListContext.prototype.Number = function() { return this.$val.Number(); };
	ParameterListContext.ptr.prototype.Comma = function() {
		var _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetToken(8, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParameterListContext.ptr.prototype.Comma }; } $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParameterListContext.prototype.Comma = function() { return this.$val.Comma(); };
	ParameterListContext.ptr.prototype.ParameterList = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$11.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, IParameterListContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParameterListContext.ptr.prototype.ParameterList }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParameterListContext.prototype.ParameterList = function() { return this.$val.ParameterList(); };
	ParameterListContext.ptr.prototype.GetRuleContext = function() {
		var s;
		s = this;
		return s;
	};
	ParameterListContext.prototype.GetRuleContext = function() { return this.$val.GetRuleContext(); };
	ParameterListContext.ptr.prototype.ToStringTree = function(ruleNames$1, recog) {
		var _r$2, recog, ruleNames$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; recog = $f.recog; ruleNames$1 = $f.ruleNames$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = antlr.TreesStringTree(s, ruleNames$1, recog); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParameterListContext.ptr.prototype.ToStringTree }; } $f._r$2 = _r$2; $f.recog = recog; $f.ruleNames$1 = ruleNames$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParameterListContext.prototype.ToStringTree = function(ruleNames$1, recog) { return this.$val.ToStringTree(ruleNames$1, recog); };
	ParameterListContext.ptr.prototype.Accept = function(visitor) {
		var _r$2, _r$3, _ref, s, t, t$1, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; s = $f.s; t = $f.t; t$1 = $f.t$1; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_ref = visitor;
		/* */ if ($assertType(_ref, FunlangVisitor, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, FunlangVisitor, true)[1]) { */ case 1:
			t = _ref;
			_r$2 = t.VisitParameterList(s); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } else { */ case 2:
			t$1 = _ref;
			_r$3 = t$1.VisitChildren(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParameterListContext.ptr.prototype.Accept }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.s = s; $f.t = t; $f.t$1 = t$1; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParameterListContext.prototype.Accept = function(visitor) { return this.$val.Accept(visitor); };
	FunlangParser.ptr.prototype.ParameterList = function() {
		var _1, _r$2, _r$3, _r$4, _r$5, _r$6, localctx, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; localctx = $f.localctx; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		localctx = [localctx];
		p = [p];
		localctx[0] = $ifaceNil;
		p[0] = this;
		localctx[0] = NewParameterListContext(p[0], p[0].BaseParser.GetParserRuleContext(), p[0].BaseParser.BaseRecognizer.GetState());
		$r = p[0].BaseParser.EnterRule(localctx[0], 6, 3); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([(function(localctx, p) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = p[0].BaseParser.ExitRule(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		$deferred.push([(function(localctx, p) { return function $b() {
			var _tuple, err, ok, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			err = $recover();
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
				_tuple = $assertType(err, antlr.RecognitionException, true);
				v = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (ok) { */ case 3:
					$r = localctx[0].SetException(v); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().ReportError(p[0], v); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().Recover(p[0], v); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 5; continue;
				/* } else { */ case 4:
					$panic(err);
				/* } */ case 5:
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._tuple = _tuple; $f.err = err; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		p[0].BaseParser.BaseRecognizer.SetState(54);
		$r = p[0].BaseParser.GetErrorHandler().Sync(p[0]); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = p[0].BaseParser.GetInterpreter().AdaptivePredict(p[0].BaseParser.GetTokenStream(), 3, p[0].BaseParser.GetParserRuleContext()); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_1 = _r$2;
			/* */ if (_1 === (1)) { $s = 5; continue; }
			/* */ if (_1 === (2)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (1)) { */ case 5:
				$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p[0].BaseParser.BaseRecognizer.SetState(49);
				_r$3 = p[0].Number(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				$s = 7; continue;
			/* } else if (_1 === (2)) { */ case 6:
				$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 2); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p[0].BaseParser.BaseRecognizer.SetState(50);
				_r$4 = p[0].Number(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				p[0].BaseParser.BaseRecognizer.SetState(51);
				_r$5 = p[0].BaseParser.Match(8); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				p[0].BaseParser.BaseRecognizer.SetState(52);
				_r$6 = p[0].ParameterList(); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
			/* } */ case 7:
		case 3:
		localctx[0] = localctx[0];
		$s = -1; return localctx[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  localctx[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.ParameterList }; } $f._1 = _1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.localctx = localctx; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FunlangParser.prototype.ParameterList = function() { return this.$val.ParameterList(); };
	ParametersContext.ptr.prototype.IsParametersContext = function() {
	};
	ParametersContext.prototype.IsParametersContext = function() { return this.$val.IsParametersContext(); };
	NewParametersContext = function(parser, parent, invokingState) {
		var invokingState, p, parent, parser;
		p = new ParametersContext.ptr(ptrType$4.nil, $ifaceNil);
		p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState);
		p.parser = parser;
		p.BaseParserRuleContext.BaseRuleContext.RuleIndex = 4;
		return p;
	};
	$pkg.NewParametersContext = NewParametersContext;
	ParametersContext.ptr.prototype.GetParser = function() {
		var s;
		s = this;
		return s.parser;
	};
	ParametersContext.prototype.GetParser = function() { return this.$val.GetParser(); };
	ParametersContext.ptr.prototype.OpenParam = function() {
		var _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetToken(10, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParametersContext.ptr.prototype.OpenParam }; } $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParametersContext.prototype.OpenParam = function() { return this.$val.OpenParam(); };
	ParametersContext.ptr.prototype.CloseParam = function() {
		var _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetToken(11, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParametersContext.ptr.prototype.CloseParam }; } $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParametersContext.prototype.CloseParam = function() { return this.$val.CloseParam(); };
	ParametersContext.ptr.prototype.ParameterList = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$11.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, IParameterListContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParametersContext.ptr.prototype.ParameterList }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParametersContext.prototype.ParameterList = function() { return this.$val.ParameterList(); };
	ParametersContext.ptr.prototype.GetRuleContext = function() {
		var s;
		s = this;
		return s;
	};
	ParametersContext.prototype.GetRuleContext = function() { return this.$val.GetRuleContext(); };
	ParametersContext.ptr.prototype.ToStringTree = function(ruleNames$1, recog) {
		var _r$2, recog, ruleNames$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; recog = $f.recog; ruleNames$1 = $f.ruleNames$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = antlr.TreesStringTree(s, ruleNames$1, recog); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParametersContext.ptr.prototype.ToStringTree }; } $f._r$2 = _r$2; $f.recog = recog; $f.ruleNames$1 = ruleNames$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParametersContext.prototype.ToStringTree = function(ruleNames$1, recog) { return this.$val.ToStringTree(ruleNames$1, recog); };
	ParametersContext.ptr.prototype.Accept = function(visitor) {
		var _r$2, _r$3, _ref, s, t, t$1, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; s = $f.s; t = $f.t; t$1 = $f.t$1; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_ref = visitor;
		/* */ if ($assertType(_ref, FunlangVisitor, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, FunlangVisitor, true)[1]) { */ case 1:
			t = _ref;
			_r$2 = t.VisitParameters(s); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } else { */ case 2:
			t$1 = _ref;
			_r$3 = t$1.VisitChildren(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParametersContext.ptr.prototype.Accept }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.s = s; $f.t = t; $f.t$1 = t$1; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParametersContext.prototype.Accept = function(visitor) { return this.$val.Accept(visitor); };
	FunlangParser.ptr.prototype.Parameters = function() {
		var _1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, localctx, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; localctx = $f.localctx; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		localctx = [localctx];
		p = [p];
		localctx[0] = $ifaceNil;
		p[0] = this;
		localctx[0] = NewParametersContext(p[0], p[0].BaseParser.GetParserRuleContext(), p[0].BaseParser.BaseRecognizer.GetState());
		$r = p[0].BaseParser.EnterRule(localctx[0], 8, 4); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([(function(localctx, p) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = p[0].BaseParser.ExitRule(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		$deferred.push([(function(localctx, p) { return function $b() {
			var _tuple, err, ok, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			err = $recover();
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
				_tuple = $assertType(err, antlr.RecognitionException, true);
				v = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (ok) { */ case 3:
					$r = localctx[0].SetException(v); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().ReportError(p[0], v); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().Recover(p[0], v); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 5; continue;
				/* } else { */ case 4:
					$panic(err);
				/* } */ case 5:
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._tuple = _tuple; $f.err = err; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		p[0].BaseParser.BaseRecognizer.SetState(62);
		$r = p[0].BaseParser.GetErrorHandler().Sync(p[0]); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = p[0].BaseParser.GetInterpreter().AdaptivePredict(p[0].BaseParser.GetTokenStream(), 4, p[0].BaseParser.GetParserRuleContext()); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_1 = _r$2;
			/* */ if (_1 === (1)) { $s = 5; continue; }
			/* */ if (_1 === (2)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (1)) { */ case 5:
				$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p[0].BaseParser.BaseRecognizer.SetState(56);
				_r$3 = p[0].BaseParser.Match(10); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				p[0].BaseParser.BaseRecognizer.SetState(57);
				_r$4 = p[0].BaseParser.Match(11); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				$s = 7; continue;
			/* } else if (_1 === (2)) { */ case 6:
				$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 2); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p[0].BaseParser.BaseRecognizer.SetState(58);
				_r$5 = p[0].BaseParser.Match(10); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				p[0].BaseParser.BaseRecognizer.SetState(59);
				_r$6 = p[0].ParameterList(); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				p[0].BaseParser.BaseRecognizer.SetState(60);
				_r$7 = p[0].BaseParser.Match(11); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
			/* } */ case 7:
		case 3:
		localctx[0] = localctx[0];
		$s = -1; return localctx[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  localctx[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.Parameters }; } $f._1 = _1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.localctx = localctx; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FunlangParser.prototype.Parameters = function() { return this.$val.Parameters(); };
	DefinitionContext.ptr.prototype.IsDefinitionContext = function() {
	};
	DefinitionContext.prototype.IsDefinitionContext = function() { return this.$val.IsDefinitionContext(); };
	NewDefinitionContext = function(parser, parent, invokingState) {
		var invokingState, p, parent, parser;
		p = new DefinitionContext.ptr(ptrType$4.nil, $ifaceNil);
		p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState);
		p.parser = parser;
		p.BaseParserRuleContext.BaseRuleContext.RuleIndex = 5;
		return p;
	};
	$pkg.NewDefinitionContext = NewDefinitionContext;
	DefinitionContext.ptr.prototype.GetParser = function() {
		var s;
		s = this;
		return s.parser;
	};
	DefinitionContext.prototype.GetParser = function() { return this.$val.GetParser(); };
	DefinitionContext.ptr.prototype.Define = function() {
		var _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetToken(4, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefinitionContext.ptr.prototype.Define }; } $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefinitionContext.prototype.Define = function() { return this.$val.Define(); };
	DefinitionContext.ptr.prototype.Name = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$8.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, INameContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefinitionContext.ptr.prototype.Name }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefinitionContext.prototype.Name = function() { return this.$val.Name(); };
	DefinitionContext.ptr.prototype.AssignmentOperator = function() {
		var _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetToken(5, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefinitionContext.ptr.prototype.AssignmentOperator }; } $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefinitionContext.prototype.AssignmentOperator = function() { return this.$val.AssignmentOperator(); };
	DefinitionContext.ptr.prototype.Function = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$12.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, IFunctionContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefinitionContext.ptr.prototype.Function }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefinitionContext.prototype.Function = function() { return this.$val.Function(); };
	DefinitionContext.ptr.prototype.GetRuleContext = function() {
		var s;
		s = this;
		return s;
	};
	DefinitionContext.prototype.GetRuleContext = function() { return this.$val.GetRuleContext(); };
	DefinitionContext.ptr.prototype.ToStringTree = function(ruleNames$1, recog) {
		var _r$2, recog, ruleNames$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; recog = $f.recog; ruleNames$1 = $f.ruleNames$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = antlr.TreesStringTree(s, ruleNames$1, recog); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefinitionContext.ptr.prototype.ToStringTree }; } $f._r$2 = _r$2; $f.recog = recog; $f.ruleNames$1 = ruleNames$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefinitionContext.prototype.ToStringTree = function(ruleNames$1, recog) { return this.$val.ToStringTree(ruleNames$1, recog); };
	DefinitionContext.ptr.prototype.Accept = function(visitor) {
		var _r$2, _r$3, _ref, s, t, t$1, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; s = $f.s; t = $f.t; t$1 = $f.t$1; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_ref = visitor;
		/* */ if ($assertType(_ref, FunlangVisitor, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, FunlangVisitor, true)[1]) { */ case 1:
			t = _ref;
			_r$2 = t.VisitDefinition(s); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } else { */ case 2:
			t$1 = _ref;
			_r$3 = t$1.VisitChildren(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefinitionContext.ptr.prototype.Accept }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.s = s; $f.t = t; $f.t$1 = t$1; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	DefinitionContext.prototype.Accept = function(visitor) { return this.$val.Accept(visitor); };
	FunlangParser.ptr.prototype.Definition = function() {
		var _r$2, _r$3, _r$4, _r$5, localctx, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; localctx = $f.localctx; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		localctx = [localctx];
		p = [p];
		localctx[0] = $ifaceNil;
		p[0] = this;
		localctx[0] = NewDefinitionContext(p[0], p[0].BaseParser.GetParserRuleContext(), p[0].BaseParser.BaseRecognizer.GetState());
		$r = p[0].BaseParser.EnterRule(localctx[0], 10, 5); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([(function(localctx, p) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = p[0].BaseParser.ExitRule(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		$deferred.push([(function(localctx, p) { return function $b() {
			var _tuple, err, ok, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			err = $recover();
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
				_tuple = $assertType(err, antlr.RecognitionException, true);
				v = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (ok) { */ case 3:
					$r = localctx[0].SetException(v); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().ReportError(p[0], v); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().Recover(p[0], v); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 5; continue;
				/* } else { */ case 4:
					$panic(err);
				/* } */ case 5:
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._tuple = _tuple; $f.err = err; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 1); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p[0].BaseParser.BaseRecognizer.SetState(64);
		_r$2 = p[0].BaseParser.Match(4); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		p[0].BaseParser.BaseRecognizer.SetState(65);
		_r$3 = p[0].Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		p[0].BaseParser.BaseRecognizer.SetState(66);
		_r$4 = p[0].BaseParser.Match(5); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		p[0].BaseParser.BaseRecognizer.SetState(67);
		_r$5 = p[0].function$(0); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		localctx[0] = localctx[0];
		$s = -1; return localctx[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  localctx[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.Definition }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.localctx = localctx; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FunlangParser.prototype.Definition = function() { return this.$val.Definition(); };
	NameContext.ptr.prototype.IsNameContext = function() {
	};
	NameContext.prototype.IsNameContext = function() { return this.$val.IsNameContext(); };
	NewNameContext = function(parser, parent, invokingState) {
		var invokingState, p, parent, parser;
		p = new NameContext.ptr(ptrType$4.nil, $ifaceNil);
		p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState);
		p.parser = parser;
		p.BaseParserRuleContext.BaseRuleContext.RuleIndex = 6;
		return p;
	};
	$pkg.NewNameContext = NewNameContext;
	NameContext.ptr.prototype.GetParser = function() {
		var s;
		s = this;
		return s.parser;
	};
	NameContext.prototype.GetParser = function() { return this.$val.GetParser(); };
	NameContext.ptr.prototype.AllNondigit = function() {
		var _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetTokens(12); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NameContext.ptr.prototype.AllNondigit }; } $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	NameContext.prototype.AllNondigit = function() { return this.$val.AllNondigit(); };
	NameContext.ptr.prototype.Nondigit = function(i) {
		var _r$2, i, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; i = $f.i; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetToken(12, i); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NameContext.ptr.prototype.Nondigit }; } $f._r$2 = _r$2; $f.i = i; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	NameContext.prototype.Nondigit = function(i) { return this.$val.Nondigit(i); };
	NameContext.ptr.prototype.AllDigit = function() {
		var _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetTokens(13); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NameContext.ptr.prototype.AllDigit }; } $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	NameContext.prototype.AllDigit = function() { return this.$val.AllDigit(); };
	NameContext.ptr.prototype.Digit = function(i) {
		var _r$2, i, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; i = $f.i; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetToken(13, i); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NameContext.ptr.prototype.Digit }; } $f._r$2 = _r$2; $f.i = i; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	NameContext.prototype.Digit = function(i) { return this.$val.Digit(i); };
	NameContext.ptr.prototype.GetRuleContext = function() {
		var s;
		s = this;
		return s;
	};
	NameContext.prototype.GetRuleContext = function() { return this.$val.GetRuleContext(); };
	NameContext.ptr.prototype.ToStringTree = function(ruleNames$1, recog) {
		var _r$2, recog, ruleNames$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; recog = $f.recog; ruleNames$1 = $f.ruleNames$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = antlr.TreesStringTree(s, ruleNames$1, recog); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NameContext.ptr.prototype.ToStringTree }; } $f._r$2 = _r$2; $f.recog = recog; $f.ruleNames$1 = ruleNames$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	NameContext.prototype.ToStringTree = function(ruleNames$1, recog) { return this.$val.ToStringTree(ruleNames$1, recog); };
	NameContext.ptr.prototype.Accept = function(visitor) {
		var _r$2, _r$3, _ref, s, t, t$1, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; s = $f.s; t = $f.t; t$1 = $f.t$1; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_ref = visitor;
		/* */ if ($assertType(_ref, FunlangVisitor, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, FunlangVisitor, true)[1]) { */ case 1:
			t = _ref;
			_r$2 = t.VisitName(s); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } else { */ case 2:
			t$1 = _ref;
			_r$3 = t$1.VisitChildren(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NameContext.ptr.prototype.Accept }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.s = s; $f.t = t; $f.t$1 = t$1; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	NameContext.prototype.Accept = function(visitor) { return this.$val.Accept(visitor); };
	FunlangParser.ptr.prototype.Name = function() {
		var _alt, _la, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, localctx, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _alt = $f._alt; _la = $f._la; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; localctx = $f.localctx; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		localctx = [localctx];
		p = [p];
		localctx[0] = $ifaceNil;
		p[0] = this;
		localctx[0] = NewNameContext(p[0], p[0].BaseParser.GetParserRuleContext(), p[0].BaseParser.BaseRecognizer.GetState());
		$r = p[0].BaseParser.EnterRule(localctx[0], 12, 6); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_la = 0;
		$deferred.push([(function(localctx, p) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = p[0].BaseParser.ExitRule(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		$deferred.push([(function(localctx, p) { return function $b() {
			var _tuple, err, ok, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			err = $recover();
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
				_tuple = $assertType(err, antlr.RecognitionException, true);
				v = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (ok) { */ case 3:
					$r = localctx[0].SetException(v); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().ReportError(p[0], v); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().Recover(p[0], v); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 5; continue;
				/* } else { */ case 4:
					$panic(err);
				/* } */ case 5:
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._tuple = _tuple; $f.err = err; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		_alt = 0;
		$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 1); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p[0].BaseParser.BaseRecognizer.SetState(69);
		_r$2 = p[0].BaseParser.Match(12); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		p[0].BaseParser.BaseRecognizer.SetState(73);
		$r = p[0].BaseParser.GetErrorHandler().Sync(p[0]); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = p[0].BaseParser.GetInterpreter().AdaptivePredict(p[0].BaseParser.GetTokenStream(), 5, p[0].BaseParser.GetParserRuleContext()); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_alt = _r$3;
		/* while (true) { */ case 6:
			/* if (!(!((_alt === 2)) && !((_alt === antlr.ATNInvalidAltNumber)))) { break; } */ if(!(!((_alt === 2)) && !((_alt === antlr.ATNInvalidAltNumber)))) { $s = 7; continue; }
			/* */ if (_alt === 1) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_alt === 1) { */ case 8:
				p[0].BaseParser.BaseRecognizer.SetState(70);
				_r$4 = p[0].BaseParser.GetTokenStream().LA(1); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_la = _r$4;
				/* */ if (!((_la === 12) || (_la === 13))) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!((_la === 12) || (_la === 13))) { */ case 11:
					_r$5 = p[0].BaseParser.GetErrorHandler().RecoverInline(p[0]); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$5;
					$s = 13; continue;
				/* } else { */ case 12:
					$r = p[0].BaseParser.GetErrorHandler().ReportMatch(p[0]); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$6 = p[0].BaseParser.Consume(); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$6;
				/* } */ case 13:
			/* } */ case 9:
			p[0].BaseParser.BaseRecognizer.SetState(75);
			$r = p[0].BaseParser.GetErrorHandler().Sync(p[0]); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$7 = p[0].BaseParser.GetInterpreter().AdaptivePredict(p[0].BaseParser.GetTokenStream(), 5, p[0].BaseParser.GetParserRuleContext()); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_alt = _r$7;
		/* } */ $s = 6; continue; case 7:
		localctx[0] = localctx[0];
		$s = -1; return localctx[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  localctx[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.Name }; } $f._alt = _alt; $f._la = _la; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.localctx = localctx; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FunlangParser.prototype.Name = function() { return this.$val.Name(); };
	FunctionContext.ptr.prototype.IsFunctionContext = function() {
	};
	FunctionContext.prototype.IsFunctionContext = function() { return this.$val.IsFunctionContext(); };
	NewFunctionContext = function(parser, parent, invokingState) {
		var invokingState, p, parent, parser;
		p = new FunctionContext.ptr(ptrType$4.nil, $ifaceNil);
		p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState);
		p.parser = parser;
		p.BaseParserRuleContext.BaseRuleContext.RuleIndex = 7;
		return p;
	};
	$pkg.NewFunctionContext = NewFunctionContext;
	FunctionContext.ptr.prototype.GetParser = function() {
		var s;
		s = this;
		return s.parser;
	};
	FunctionContext.prototype.GetParser = function() { return this.$val.GetParser(); };
	FunctionContext.ptr.prototype.Composition = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$13.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, ICompositionContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunctionContext.ptr.prototype.Composition }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunctionContext.prototype.Composition = function() { return this.$val.Composition(); };
	FunctionContext.ptr.prototype.Function = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$12.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, IFunctionContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunctionContext.ptr.prototype.Function }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunctionContext.prototype.Function = function() { return this.$val.Function(); };
	FunctionContext.ptr.prototype.CompositionOperator = function() {
		var _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetToken(6, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunctionContext.ptr.prototype.CompositionOperator }; } $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunctionContext.prototype.CompositionOperator = function() { return this.$val.CompositionOperator(); };
	FunctionContext.ptr.prototype.InnerFunctions = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$14.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, IInnerFunctionsContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunctionContext.ptr.prototype.InnerFunctions }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunctionContext.prototype.InnerFunctions = function() { return this.$val.InnerFunctions(); };
	FunctionContext.ptr.prototype.GetRuleContext = function() {
		var s;
		s = this;
		return s;
	};
	FunctionContext.prototype.GetRuleContext = function() { return this.$val.GetRuleContext(); };
	FunctionContext.ptr.prototype.ToStringTree = function(ruleNames$1, recog) {
		var _r$2, recog, ruleNames$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; recog = $f.recog; ruleNames$1 = $f.ruleNames$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = antlr.TreesStringTree(s, ruleNames$1, recog); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunctionContext.ptr.prototype.ToStringTree }; } $f._r$2 = _r$2; $f.recog = recog; $f.ruleNames$1 = ruleNames$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunctionContext.prototype.ToStringTree = function(ruleNames$1, recog) { return this.$val.ToStringTree(ruleNames$1, recog); };
	FunctionContext.ptr.prototype.Accept = function(visitor) {
		var _r$2, _r$3, _ref, s, t, t$1, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; s = $f.s; t = $f.t; t$1 = $f.t$1; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_ref = visitor;
		/* */ if ($assertType(_ref, FunlangVisitor, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, FunlangVisitor, true)[1]) { */ case 1:
			t = _ref;
			_r$2 = t.VisitFunction(s); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } else { */ case 2:
			t$1 = _ref;
			_r$3 = t$1.VisitChildren(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunctionContext.ptr.prototype.Accept }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.s = s; $f.t = t; $f.t$1 = t$1; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunctionContext.prototype.Accept = function(visitor) { return this.$val.Accept(visitor); };
	FunlangParser.ptr.prototype.Function = function() {
		var _r$2, localctx, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; localctx = $f.localctx; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		localctx = $ifaceNil;
		p = this;
		_r$2 = p.function$(0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		localctx = _r$2;
		$s = -1; return localctx;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.Function }; } $f._r$2 = _r$2; $f.localctx = localctx; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunlangParser.prototype.Function = function() { return this.$val.Function(); };
	FunlangParser.ptr.prototype.function$ = function(_p) {
		var _alt, _p, _parentState, _parentctx, _prevctx, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _startState, localctx, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _alt = $f._alt; _p = $f._p; _parentState = $f._parentState; _parentctx = $f._parentctx; _prevctx = $f._prevctx; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _startState = $f._startState; localctx = $f.localctx; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		_parentctx = [_parentctx];
		localctx = [localctx];
		p = [p];
		localctx[0] = $ifaceNil;
		p[0] = this;
		_parentctx[0] = p[0].BaseParser.GetParserRuleContext();
		_parentState = p[0].BaseParser.BaseRecognizer.GetState();
		localctx[0] = NewFunctionContext(p[0], p[0].BaseParser.GetParserRuleContext(), _parentState);
		_prevctx = localctx[0];
		$unused(_prevctx);
		_startState = 14;
		$r = p[0].BaseParser.EnterRecursionRule(localctx[0], 14, 7, _p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([(function(_parentctx, localctx, p) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = p[0].BaseParser.UnrollRecursionContexts(_parentctx[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(_parentctx, localctx, p), []]);
		$deferred.push([(function(_parentctx, localctx, p) { return function $b() {
			var _tuple, err, ok, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			err = $recover();
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
				_tuple = $assertType(err, antlr.RecognitionException, true);
				v = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (ok) { */ case 3:
					$r = localctx[0].SetException(v); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().ReportError(p[0], v); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().Recover(p[0], v); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 5; continue;
				/* } else { */ case 4:
					$panic(err);
				/* } */ case 5:
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._tuple = _tuple; $f.err = err; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}; })(_parentctx, localctx, p), []]);
		_alt = 0;
		$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 1); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p[0].BaseParser.BaseRecognizer.SetState(77);
		_r$2 = p[0].composition(0); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = p[0].BaseParser.GetTokenStream().LT(-1); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$r = p[0].BaseParser.GetParserRuleContext().SetStop(_r$3); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p[0].BaseParser.BaseRecognizer.SetState(84);
		$r = p[0].BaseParser.GetErrorHandler().Sync(p[0]); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$4 = p[0].BaseParser.GetInterpreter().AdaptivePredict(p[0].BaseParser.GetTokenStream(), 6, p[0].BaseParser.GetParserRuleContext()); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_alt = _r$4;
		/* while (true) { */ case 8:
			/* if (!(!((_alt === 2)) && !((_alt === antlr.ATNInvalidAltNumber)))) { break; } */ if(!(!((_alt === 2)) && !((_alt === antlr.ATNInvalidAltNumber)))) { $s = 9; continue; }
			/* */ if (_alt === 1) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_alt === 1) { */ case 10:
				/* */ if (!(p[0].BaseParser.GetParseListeners() === sliceType$4.nil)) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (!(p[0].BaseParser.GetParseListeners() === sliceType$4.nil)) { */ case 12:
					$r = p[0].BaseParser.TriggerExitRuleEvent(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 13:
				_prevctx = localctx[0];
				localctx[0] = NewFunctionContext(p[0], _parentctx[0], _parentState);
				$r = p[0].BaseParser.PushNewRecursionContext(localctx[0], _startState, 7); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p[0].BaseParser.BaseRecognizer.SetState(79);
				/* */ if (!(p[0].BaseParser.Precpred(p[0].BaseParser.GetParserRuleContext(), 1))) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (!(p[0].BaseParser.Precpred(p[0].BaseParser.GetParserRuleContext(), 1))) { */ case 16:
					_r$5 = antlr.NewFailedPredicateException(p[0], "p.Precpred(p.GetParserRuleContext(), 1)", ""); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$panic(_r$5);
				/* } */ case 17:
				p[0].BaseParser.BaseRecognizer.SetState(80);
				_r$6 = p[0].BaseParser.Match(6); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				p[0].BaseParser.BaseRecognizer.SetState(81);
				_r$7 = p[0].InnerFunctions(); /* */ $s = 20; case 20: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
			/* } */ case 11:
			p[0].BaseParser.BaseRecognizer.SetState(86);
			$r = p[0].BaseParser.GetErrorHandler().Sync(p[0]); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$8 = p[0].BaseParser.GetInterpreter().AdaptivePredict(p[0].BaseParser.GetTokenStream(), 6, p[0].BaseParser.GetParserRuleContext()); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_alt = _r$8;
		/* } */ $s = 8; continue; case 9:
		localctx[0] = localctx[0];
		$s = -1; return localctx[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  localctx[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.function$ }; } $f._alt = _alt; $f._p = _p; $f._parentState = _parentState; $f._parentctx = _parentctx; $f._prevctx = _prevctx; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._startState = _startState; $f.localctx = localctx; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FunlangParser.prototype.function$ = function(_p) { return this.$val.function$(_p); };
	InnerFunctionsContext.ptr.prototype.IsInnerFunctionsContext = function() {
	};
	InnerFunctionsContext.prototype.IsInnerFunctionsContext = function() { return this.$val.IsInnerFunctionsContext(); };
	NewInnerFunctionsContext = function(parser, parent, invokingState) {
		var invokingState, p, parent, parser;
		p = new InnerFunctionsContext.ptr(ptrType$4.nil, $ifaceNil);
		p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState);
		p.parser = parser;
		p.BaseParserRuleContext.BaseRuleContext.RuleIndex = 8;
		return p;
	};
	$pkg.NewInnerFunctionsContext = NewInnerFunctionsContext;
	InnerFunctionsContext.ptr.prototype.GetParser = function() {
		var s;
		s = this;
		return s.parser;
	};
	InnerFunctionsContext.prototype.GetParser = function() { return this.$val.GetParser(); };
	InnerFunctionsContext.ptr.prototype.OpenParam = function() {
		var _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetToken(10, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: InnerFunctionsContext.ptr.prototype.OpenParam }; } $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	InnerFunctionsContext.prototype.OpenParam = function() { return this.$val.OpenParam(); };
	InnerFunctionsContext.ptr.prototype.FunctionList = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$15.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, IFunctionListContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: InnerFunctionsContext.ptr.prototype.FunctionList }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	InnerFunctionsContext.prototype.FunctionList = function() { return this.$val.FunctionList(); };
	InnerFunctionsContext.ptr.prototype.CloseParam = function() {
		var _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetToken(11, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: InnerFunctionsContext.ptr.prototype.CloseParam }; } $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	InnerFunctionsContext.prototype.CloseParam = function() { return this.$val.CloseParam(); };
	InnerFunctionsContext.ptr.prototype.Function = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$12.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, IFunctionContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: InnerFunctionsContext.ptr.prototype.Function }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	InnerFunctionsContext.prototype.Function = function() { return this.$val.Function(); };
	InnerFunctionsContext.ptr.prototype.GetRuleContext = function() {
		var s;
		s = this;
		return s;
	};
	InnerFunctionsContext.prototype.GetRuleContext = function() { return this.$val.GetRuleContext(); };
	InnerFunctionsContext.ptr.prototype.ToStringTree = function(ruleNames$1, recog) {
		var _r$2, recog, ruleNames$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; recog = $f.recog; ruleNames$1 = $f.ruleNames$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = antlr.TreesStringTree(s, ruleNames$1, recog); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: InnerFunctionsContext.ptr.prototype.ToStringTree }; } $f._r$2 = _r$2; $f.recog = recog; $f.ruleNames$1 = ruleNames$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	InnerFunctionsContext.prototype.ToStringTree = function(ruleNames$1, recog) { return this.$val.ToStringTree(ruleNames$1, recog); };
	InnerFunctionsContext.ptr.prototype.Accept = function(visitor) {
		var _r$2, _r$3, _ref, s, t, t$1, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; s = $f.s; t = $f.t; t$1 = $f.t$1; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_ref = visitor;
		/* */ if ($assertType(_ref, FunlangVisitor, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, FunlangVisitor, true)[1]) { */ case 1:
			t = _ref;
			_r$2 = t.VisitInnerFunctions(s); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } else { */ case 2:
			t$1 = _ref;
			_r$3 = t$1.VisitChildren(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: InnerFunctionsContext.ptr.prototype.Accept }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.s = s; $f.t = t; $f.t$1 = t$1; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	InnerFunctionsContext.prototype.Accept = function(visitor) { return this.$val.Accept(visitor); };
	FunlangParser.ptr.prototype.InnerFunctions = function() {
		var _1, _r$2, _r$3, _r$4, _r$5, _r$6, localctx, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; localctx = $f.localctx; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		localctx = [localctx];
		p = [p];
		localctx[0] = $ifaceNil;
		p[0] = this;
		localctx[0] = NewInnerFunctionsContext(p[0], p[0].BaseParser.GetParserRuleContext(), p[0].BaseParser.BaseRecognizer.GetState());
		$r = p[0].BaseParser.EnterRule(localctx[0], 16, 8); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([(function(localctx, p) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = p[0].BaseParser.ExitRule(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		$deferred.push([(function(localctx, p) { return function $b() {
			var _tuple, err, ok, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			err = $recover();
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
				_tuple = $assertType(err, antlr.RecognitionException, true);
				v = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (ok) { */ case 3:
					$r = localctx[0].SetException(v); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().ReportError(p[0], v); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().Recover(p[0], v); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 5; continue;
				/* } else { */ case 4:
					$panic(err);
				/* } */ case 5:
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._tuple = _tuple; $f.err = err; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		p[0].BaseParser.BaseRecognizer.SetState(92);
		$r = p[0].BaseParser.GetErrorHandler().Sync(p[0]); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = p[0].BaseParser.GetInterpreter().AdaptivePredict(p[0].BaseParser.GetTokenStream(), 7, p[0].BaseParser.GetParserRuleContext()); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_1 = _r$2;
			/* */ if (_1 === (1)) { $s = 5; continue; }
			/* */ if (_1 === (2)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (1)) { */ case 5:
				$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p[0].BaseParser.BaseRecognizer.SetState(87);
				_r$3 = p[0].BaseParser.Match(10); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				p[0].BaseParser.BaseRecognizer.SetState(88);
				_r$4 = p[0].FunctionList(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				p[0].BaseParser.BaseRecognizer.SetState(89);
				_r$5 = p[0].BaseParser.Match(11); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				$s = 7; continue;
			/* } else if (_1 === (2)) { */ case 6:
				$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 2); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p[0].BaseParser.BaseRecognizer.SetState(91);
				_r$6 = p[0].function$(0); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
			/* } */ case 7:
		case 3:
		localctx[0] = localctx[0];
		$s = -1; return localctx[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  localctx[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.InnerFunctions }; } $f._1 = _1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.localctx = localctx; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FunlangParser.prototype.InnerFunctions = function() { return this.$val.InnerFunctions(); };
	FunctionListContext.ptr.prototype.IsFunctionListContext = function() {
	};
	FunctionListContext.prototype.IsFunctionListContext = function() { return this.$val.IsFunctionListContext(); };
	NewFunctionListContext = function(parser, parent, invokingState) {
		var invokingState, p, parent, parser;
		p = new FunctionListContext.ptr(ptrType$4.nil, $ifaceNil);
		p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState);
		p.parser = parser;
		p.BaseParserRuleContext.BaseRuleContext.RuleIndex = 9;
		return p;
	};
	$pkg.NewFunctionListContext = NewFunctionListContext;
	FunctionListContext.ptr.prototype.GetParser = function() {
		var s;
		s = this;
		return s.parser;
	};
	FunctionListContext.prototype.GetParser = function() { return this.$val.GetParser(); };
	FunctionListContext.ptr.prototype.Function = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$12.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, IFunctionContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunctionListContext.ptr.prototype.Function }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunctionListContext.prototype.Function = function() { return this.$val.Function(); };
	FunctionListContext.ptr.prototype.Comma = function() {
		var _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetToken(8, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunctionListContext.ptr.prototype.Comma }; } $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunctionListContext.prototype.Comma = function() { return this.$val.Comma(); };
	FunctionListContext.ptr.prototype.FunctionList = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$15.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, IFunctionListContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunctionListContext.ptr.prototype.FunctionList }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunctionListContext.prototype.FunctionList = function() { return this.$val.FunctionList(); };
	FunctionListContext.ptr.prototype.GetRuleContext = function() {
		var s;
		s = this;
		return s;
	};
	FunctionListContext.prototype.GetRuleContext = function() { return this.$val.GetRuleContext(); };
	FunctionListContext.ptr.prototype.ToStringTree = function(ruleNames$1, recog) {
		var _r$2, recog, ruleNames$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; recog = $f.recog; ruleNames$1 = $f.ruleNames$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = antlr.TreesStringTree(s, ruleNames$1, recog); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunctionListContext.ptr.prototype.ToStringTree }; } $f._r$2 = _r$2; $f.recog = recog; $f.ruleNames$1 = ruleNames$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunctionListContext.prototype.ToStringTree = function(ruleNames$1, recog) { return this.$val.ToStringTree(ruleNames$1, recog); };
	FunctionListContext.ptr.prototype.Accept = function(visitor) {
		var _r$2, _r$3, _ref, s, t, t$1, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; s = $f.s; t = $f.t; t$1 = $f.t$1; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_ref = visitor;
		/* */ if ($assertType(_ref, FunlangVisitor, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, FunlangVisitor, true)[1]) { */ case 1:
			t = _ref;
			_r$2 = t.VisitFunctionList(s); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } else { */ case 2:
			t$1 = _ref;
			_r$3 = t$1.VisitChildren(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunctionListContext.ptr.prototype.Accept }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.s = s; $f.t = t; $f.t$1 = t$1; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunctionListContext.prototype.Accept = function(visitor) { return this.$val.Accept(visitor); };
	FunlangParser.ptr.prototype.FunctionList = function() {
		var _1, _r$2, _r$3, _r$4, _r$5, _r$6, localctx, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; localctx = $f.localctx; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		localctx = [localctx];
		p = [p];
		localctx[0] = $ifaceNil;
		p[0] = this;
		localctx[0] = NewFunctionListContext(p[0], p[0].BaseParser.GetParserRuleContext(), p[0].BaseParser.BaseRecognizer.GetState());
		$r = p[0].BaseParser.EnterRule(localctx[0], 18, 9); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([(function(localctx, p) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = p[0].BaseParser.ExitRule(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		$deferred.push([(function(localctx, p) { return function $b() {
			var _tuple, err, ok, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			err = $recover();
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
				_tuple = $assertType(err, antlr.RecognitionException, true);
				v = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (ok) { */ case 3:
					$r = localctx[0].SetException(v); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().ReportError(p[0], v); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().Recover(p[0], v); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 5; continue;
				/* } else { */ case 4:
					$panic(err);
				/* } */ case 5:
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._tuple = _tuple; $f.err = err; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		p[0].BaseParser.BaseRecognizer.SetState(99);
		$r = p[0].BaseParser.GetErrorHandler().Sync(p[0]); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = p[0].BaseParser.GetInterpreter().AdaptivePredict(p[0].BaseParser.GetTokenStream(), 8, p[0].BaseParser.GetParserRuleContext()); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_1 = _r$2;
			/* */ if (_1 === (1)) { $s = 5; continue; }
			/* */ if (_1 === (2)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (1)) { */ case 5:
				$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p[0].BaseParser.BaseRecognizer.SetState(94);
				_r$3 = p[0].function$(0); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				$s = 7; continue;
			/* } else if (_1 === (2)) { */ case 6:
				$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 2); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p[0].BaseParser.BaseRecognizer.SetState(95);
				_r$4 = p[0].function$(0); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				p[0].BaseParser.BaseRecognizer.SetState(96);
				_r$5 = p[0].BaseParser.Match(8); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				p[0].BaseParser.BaseRecognizer.SetState(97);
				_r$6 = p[0].FunctionList(); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
			/* } */ case 7:
		case 3:
		localctx[0] = localctx[0];
		$s = -1; return localctx[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  localctx[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.FunctionList }; } $f._1 = _1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.localctx = localctx; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FunlangParser.prototype.FunctionList = function() { return this.$val.FunctionList(); };
	CompositionContext.ptr.prototype.IsCompositionContext = function() {
	};
	CompositionContext.prototype.IsCompositionContext = function() { return this.$val.IsCompositionContext(); };
	NewCompositionContext = function(parser, parent, invokingState) {
		var invokingState, p, parent, parser;
		p = new CompositionContext.ptr(ptrType$4.nil, $ifaceNil);
		p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState);
		p.parser = parser;
		p.BaseParserRuleContext.BaseRuleContext.RuleIndex = 10;
		return p;
	};
	$pkg.NewCompositionContext = NewCompositionContext;
	CompositionContext.ptr.prototype.GetParser = function() {
		var s;
		s = this;
		return s.parser;
	};
	CompositionContext.prototype.GetParser = function() { return this.$val.GetParser(); };
	CompositionContext.ptr.prototype.PrimitiveRecursion = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$16.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, IPrimitiveRecursionContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: CompositionContext.ptr.prototype.PrimitiveRecursion }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	CompositionContext.prototype.PrimitiveRecursion = function() { return this.$val.PrimitiveRecursion(); };
	CompositionContext.ptr.prototype.Composition = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$13.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, ICompositionContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: CompositionContext.ptr.prototype.Composition }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	CompositionContext.prototype.Composition = function() { return this.$val.Composition(); };
	CompositionContext.ptr.prototype.PrimitiveRecursionOperator = function() {
		var _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetToken(7, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CompositionContext.ptr.prototype.PrimitiveRecursionOperator }; } $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CompositionContext.prototype.PrimitiveRecursionOperator = function() { return this.$val.PrimitiveRecursionOperator(); };
	CompositionContext.ptr.prototype.GetRuleContext = function() {
		var s;
		s = this;
		return s;
	};
	CompositionContext.prototype.GetRuleContext = function() { return this.$val.GetRuleContext(); };
	CompositionContext.ptr.prototype.ToStringTree = function(ruleNames$1, recog) {
		var _r$2, recog, ruleNames$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; recog = $f.recog; ruleNames$1 = $f.ruleNames$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = antlr.TreesStringTree(s, ruleNames$1, recog); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CompositionContext.ptr.prototype.ToStringTree }; } $f._r$2 = _r$2; $f.recog = recog; $f.ruleNames$1 = ruleNames$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CompositionContext.prototype.ToStringTree = function(ruleNames$1, recog) { return this.$val.ToStringTree(ruleNames$1, recog); };
	CompositionContext.ptr.prototype.Accept = function(visitor) {
		var _r$2, _r$3, _ref, s, t, t$1, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; s = $f.s; t = $f.t; t$1 = $f.t$1; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_ref = visitor;
		/* */ if ($assertType(_ref, FunlangVisitor, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, FunlangVisitor, true)[1]) { */ case 1:
			t = _ref;
			_r$2 = t.VisitComposition(s); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } else { */ case 2:
			t$1 = _ref;
			_r$3 = t$1.VisitChildren(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CompositionContext.ptr.prototype.Accept }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.s = s; $f.t = t; $f.t$1 = t$1; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	CompositionContext.prototype.Accept = function(visitor) { return this.$val.Accept(visitor); };
	FunlangParser.ptr.prototype.Composition = function() {
		var _r$2, localctx, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; localctx = $f.localctx; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		localctx = $ifaceNil;
		p = this;
		_r$2 = p.composition(0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		localctx = _r$2;
		$s = -1; return localctx;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.Composition }; } $f._r$2 = _r$2; $f.localctx = localctx; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunlangParser.prototype.Composition = function() { return this.$val.Composition(); };
	FunlangParser.ptr.prototype.composition = function(_p) {
		var _alt, _p, _parentState, _parentctx, _prevctx, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _startState, localctx, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _alt = $f._alt; _p = $f._p; _parentState = $f._parentState; _parentctx = $f._parentctx; _prevctx = $f._prevctx; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _startState = $f._startState; localctx = $f.localctx; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		_parentctx = [_parentctx];
		localctx = [localctx];
		p = [p];
		localctx[0] = $ifaceNil;
		p[0] = this;
		_parentctx[0] = p[0].BaseParser.GetParserRuleContext();
		_parentState = p[0].BaseParser.BaseRecognizer.GetState();
		localctx[0] = NewCompositionContext(p[0], p[0].BaseParser.GetParserRuleContext(), _parentState);
		_prevctx = localctx[0];
		$unused(_prevctx);
		_startState = 20;
		$r = p[0].BaseParser.EnterRecursionRule(localctx[0], 20, 10, _p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([(function(_parentctx, localctx, p) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = p[0].BaseParser.UnrollRecursionContexts(_parentctx[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(_parentctx, localctx, p), []]);
		$deferred.push([(function(_parentctx, localctx, p) { return function $b() {
			var _tuple, err, ok, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			err = $recover();
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
				_tuple = $assertType(err, antlr.RecognitionException, true);
				v = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (ok) { */ case 3:
					$r = localctx[0].SetException(v); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().ReportError(p[0], v); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().Recover(p[0], v); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 5; continue;
				/* } else { */ case 4:
					$panic(err);
				/* } */ case 5:
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._tuple = _tuple; $f.err = err; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}; })(_parentctx, localctx, p), []]);
		_alt = 0;
		$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 1); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p[0].BaseParser.BaseRecognizer.SetState(102);
		_r$2 = p[0].PrimitiveRecursion(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = p[0].BaseParser.GetTokenStream().LT(-1); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$r = p[0].BaseParser.GetParserRuleContext().SetStop(_r$3); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p[0].BaseParser.BaseRecognizer.SetState(109);
		$r = p[0].BaseParser.GetErrorHandler().Sync(p[0]); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$4 = p[0].BaseParser.GetInterpreter().AdaptivePredict(p[0].BaseParser.GetTokenStream(), 9, p[0].BaseParser.GetParserRuleContext()); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_alt = _r$4;
		/* while (true) { */ case 8:
			/* if (!(!((_alt === 2)) && !((_alt === antlr.ATNInvalidAltNumber)))) { break; } */ if(!(!((_alt === 2)) && !((_alt === antlr.ATNInvalidAltNumber)))) { $s = 9; continue; }
			/* */ if (_alt === 1) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_alt === 1) { */ case 10:
				/* */ if (!(p[0].BaseParser.GetParseListeners() === sliceType$4.nil)) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (!(p[0].BaseParser.GetParseListeners() === sliceType$4.nil)) { */ case 12:
					$r = p[0].BaseParser.TriggerExitRuleEvent(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 13:
				_prevctx = localctx[0];
				localctx[0] = NewCompositionContext(p[0], _parentctx[0], _parentState);
				$r = p[0].BaseParser.PushNewRecursionContext(localctx[0], _startState, 10); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p[0].BaseParser.BaseRecognizer.SetState(104);
				/* */ if (!(p[0].BaseParser.Precpred(p[0].BaseParser.GetParserRuleContext(), 2))) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (!(p[0].BaseParser.Precpred(p[0].BaseParser.GetParserRuleContext(), 2))) { */ case 16:
					_r$5 = antlr.NewFailedPredicateException(p[0], "p.Precpred(p.GetParserRuleContext(), 2)", ""); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$panic(_r$5);
				/* } */ case 17:
				p[0].BaseParser.BaseRecognizer.SetState(105);
				_r$6 = p[0].BaseParser.Match(7); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				p[0].BaseParser.BaseRecognizer.SetState(106);
				_r$7 = p[0].PrimitiveRecursion(); /* */ $s = 20; case 20: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
			/* } */ case 11:
			p[0].BaseParser.BaseRecognizer.SetState(111);
			$r = p[0].BaseParser.GetErrorHandler().Sync(p[0]); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$8 = p[0].BaseParser.GetInterpreter().AdaptivePredict(p[0].BaseParser.GetTokenStream(), 9, p[0].BaseParser.GetParserRuleContext()); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_alt = _r$8;
		/* } */ $s = 8; continue; case 9:
		localctx[0] = localctx[0];
		$s = -1; return localctx[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  localctx[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.composition }; } $f._alt = _alt; $f._p = _p; $f._parentState = _parentState; $f._parentctx = _parentctx; $f._prevctx = _prevctx; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._startState = _startState; $f.localctx = localctx; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FunlangParser.prototype.composition = function(_p) { return this.$val.composition(_p); };
	PrimitiveRecursionContext.ptr.prototype.IsPrimitiveRecursionContext = function() {
	};
	PrimitiveRecursionContext.prototype.IsPrimitiveRecursionContext = function() { return this.$val.IsPrimitiveRecursionContext(); };
	NewPrimitiveRecursionContext = function(parser, parent, invokingState) {
		var invokingState, p, parent, parser;
		p = new PrimitiveRecursionContext.ptr(ptrType$4.nil, $ifaceNil);
		p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState);
		p.parser = parser;
		p.BaseParserRuleContext.BaseRuleContext.RuleIndex = 11;
		return p;
	};
	$pkg.NewPrimitiveRecursionContext = NewPrimitiveRecursionContext;
	PrimitiveRecursionContext.ptr.prototype.GetParser = function() {
		var s;
		s = this;
		return s.parser;
	};
	PrimitiveRecursionContext.prototype.GetParser = function() { return this.$val.GetParser(); };
	PrimitiveRecursionContext.ptr.prototype.OpenParam = function() {
		var _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetToken(10, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PrimitiveRecursionContext.ptr.prototype.OpenParam }; } $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	PrimitiveRecursionContext.prototype.OpenParam = function() { return this.$val.OpenParam(); };
	PrimitiveRecursionContext.ptr.prototype.Function = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$12.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, IFunctionContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: PrimitiveRecursionContext.ptr.prototype.Function }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	PrimitiveRecursionContext.prototype.Function = function() { return this.$val.Function(); };
	PrimitiveRecursionContext.ptr.prototype.CloseParam = function() {
		var _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetToken(11, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PrimitiveRecursionContext.ptr.prototype.CloseParam }; } $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	PrimitiveRecursionContext.prototype.CloseParam = function() { return this.$val.CloseParam(); };
	PrimitiveRecursionContext.ptr.prototype.Zero = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$17.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, IZeroContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: PrimitiveRecursionContext.ptr.prototype.Zero }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	PrimitiveRecursionContext.prototype.Zero = function() { return this.$val.Zero(); };
	PrimitiveRecursionContext.ptr.prototype.Successor = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$18.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, ISuccessorContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: PrimitiveRecursionContext.ptr.prototype.Successor }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	PrimitiveRecursionContext.prototype.Successor = function() { return this.$val.Successor(); };
	PrimitiveRecursionContext.ptr.prototype.Projection = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$19.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, IProjectionContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: PrimitiveRecursionContext.ptr.prototype.Projection }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	PrimitiveRecursionContext.prototype.Projection = function() { return this.$val.Projection(); };
	PrimitiveRecursionContext.ptr.prototype.Name = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$8.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, INameContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: PrimitiveRecursionContext.ptr.prototype.Name }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	PrimitiveRecursionContext.prototype.Name = function() { return this.$val.Name(); };
	PrimitiveRecursionContext.ptr.prototype.GetRuleContext = function() {
		var s;
		s = this;
		return s;
	};
	PrimitiveRecursionContext.prototype.GetRuleContext = function() { return this.$val.GetRuleContext(); };
	PrimitiveRecursionContext.ptr.prototype.ToStringTree = function(ruleNames$1, recog) {
		var _r$2, recog, ruleNames$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; recog = $f.recog; ruleNames$1 = $f.ruleNames$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = antlr.TreesStringTree(s, ruleNames$1, recog); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PrimitiveRecursionContext.ptr.prototype.ToStringTree }; } $f._r$2 = _r$2; $f.recog = recog; $f.ruleNames$1 = ruleNames$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	PrimitiveRecursionContext.prototype.ToStringTree = function(ruleNames$1, recog) { return this.$val.ToStringTree(ruleNames$1, recog); };
	PrimitiveRecursionContext.ptr.prototype.Accept = function(visitor) {
		var _r$2, _r$3, _ref, s, t, t$1, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; s = $f.s; t = $f.t; t$1 = $f.t$1; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_ref = visitor;
		/* */ if ($assertType(_ref, FunlangVisitor, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, FunlangVisitor, true)[1]) { */ case 1:
			t = _ref;
			_r$2 = t.VisitPrimitiveRecursion(s); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } else { */ case 2:
			t$1 = _ref;
			_r$3 = t$1.VisitChildren(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PrimitiveRecursionContext.ptr.prototype.Accept }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.s = s; $f.t = t; $f.t$1 = t$1; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	PrimitiveRecursionContext.prototype.Accept = function(visitor) { return this.$val.Accept(visitor); };
	FunlangParser.ptr.prototype.PrimitiveRecursion = function() {
		var _1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, localctx, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; localctx = $f.localctx; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		localctx = [localctx];
		p = [p];
		localctx[0] = $ifaceNil;
		p[0] = this;
		localctx[0] = NewPrimitiveRecursionContext(p[0], p[0].BaseParser.GetParserRuleContext(), p[0].BaseParser.BaseRecognizer.GetState());
		$r = p[0].BaseParser.EnterRule(localctx[0], 22, 11); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([(function(localctx, p) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = p[0].BaseParser.ExitRule(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		$deferred.push([(function(localctx, p) { return function $b() {
			var _tuple, err, ok, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			err = $recover();
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
				_tuple = $assertType(err, antlr.RecognitionException, true);
				v = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (ok) { */ case 3:
					$r = localctx[0].SetException(v); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().ReportError(p[0], v); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().Recover(p[0], v); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 5; continue;
				/* } else { */ case 4:
					$panic(err);
				/* } */ case 5:
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._tuple = _tuple; $f.err = err; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		p[0].BaseParser.BaseRecognizer.SetState(120);
		$r = p[0].BaseParser.GetErrorHandler().Sync(p[0]); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = p[0].BaseParser.GetTokenStream().LA(1); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_1 = _r$2;
			/* */ if (_1 === (10)) { $s = 5; continue; }
			/* */ if (_1 === (1)) { $s = 6; continue; }
			/* */ if (_1 === (2)) { $s = 7; continue; }
			/* */ if (_1 === (3)) { $s = 8; continue; }
			/* */ if (_1 === (12)) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (10)) { */ case 5:
				$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 1); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p[0].BaseParser.BaseRecognizer.SetState(112);
				_r$3 = p[0].BaseParser.Match(10); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				p[0].BaseParser.BaseRecognizer.SetState(113);
				_r$4 = p[0].function$(0); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				p[0].BaseParser.BaseRecognizer.SetState(114);
				_r$5 = p[0].BaseParser.Match(11); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				$s = 11; continue;
			/* } else if (_1 === (1)) { */ case 6:
				$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 2); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p[0].BaseParser.BaseRecognizer.SetState(116);
				_r$6 = p[0].Zero(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				$s = 11; continue;
			/* } else if (_1 === (2)) { */ case 7:
				$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 3); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p[0].BaseParser.BaseRecognizer.SetState(117);
				_r$7 = p[0].Successor(); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
				$s = 11; continue;
			/* } else if (_1 === (3)) { */ case 8:
				$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 4); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p[0].BaseParser.BaseRecognizer.SetState(118);
				_r$8 = p[0].Projection(); /* */ $s = 21; case 21: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8;
				$s = 11; continue;
			/* } else if (_1 === (12)) { */ case 9:
				$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 5); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p[0].BaseParser.BaseRecognizer.SetState(119);
				_r$9 = p[0].Name(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$9;
				$s = 11; continue;
			/* } else { */ case 10:
				_r$10 = antlr.NewNoViableAltException(p[0], $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				$panic(_r$10);
			/* } */ case 11:
		case 3:
		localctx[0] = localctx[0];
		$s = -1; return localctx[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  localctx[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.PrimitiveRecursion }; } $f._1 = _1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.localctx = localctx; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FunlangParser.prototype.PrimitiveRecursion = function() { return this.$val.PrimitiveRecursion(); };
	ZeroContext.ptr.prototype.IsZeroContext = function() {
	};
	ZeroContext.prototype.IsZeroContext = function() { return this.$val.IsZeroContext(); };
	NewZeroContext = function(parser, parent, invokingState) {
		var invokingState, p, parent, parser;
		p = new ZeroContext.ptr(ptrType$4.nil, $ifaceNil);
		p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState);
		p.parser = parser;
		p.BaseParserRuleContext.BaseRuleContext.RuleIndex = 12;
		return p;
	};
	$pkg.NewZeroContext = NewZeroContext;
	ZeroContext.ptr.prototype.GetParser = function() {
		var s;
		s = this;
		return s.parser;
	};
	ZeroContext.prototype.GetParser = function() { return this.$val.GetParser(); };
	ZeroContext.ptr.prototype.OpenParam = function() {
		var _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetToken(10, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ZeroContext.ptr.prototype.OpenParam }; } $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ZeroContext.prototype.OpenParam = function() { return this.$val.OpenParam(); };
	ZeroContext.ptr.prototype.Number = function() {
		var _r$2, _r$3, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$10.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, INumberContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ZeroContext.ptr.prototype.Number }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	ZeroContext.prototype.Number = function() { return this.$val.Number(); };
	ZeroContext.ptr.prototype.CloseParam = function() {
		var _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetToken(11, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ZeroContext.ptr.prototype.CloseParam }; } $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ZeroContext.prototype.CloseParam = function() { return this.$val.CloseParam(); };
	ZeroContext.ptr.prototype.GetRuleContext = function() {
		var s;
		s = this;
		return s;
	};
	ZeroContext.prototype.GetRuleContext = function() { return this.$val.GetRuleContext(); };
	ZeroContext.ptr.prototype.ToStringTree = function(ruleNames$1, recog) {
		var _r$2, recog, ruleNames$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; recog = $f.recog; ruleNames$1 = $f.ruleNames$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = antlr.TreesStringTree(s, ruleNames$1, recog); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ZeroContext.ptr.prototype.ToStringTree }; } $f._r$2 = _r$2; $f.recog = recog; $f.ruleNames$1 = ruleNames$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ZeroContext.prototype.ToStringTree = function(ruleNames$1, recog) { return this.$val.ToStringTree(ruleNames$1, recog); };
	ZeroContext.ptr.prototype.Accept = function(visitor) {
		var _r$2, _r$3, _ref, s, t, t$1, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; s = $f.s; t = $f.t; t$1 = $f.t$1; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_ref = visitor;
		/* */ if ($assertType(_ref, FunlangVisitor, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, FunlangVisitor, true)[1]) { */ case 1:
			t = _ref;
			_r$2 = t.VisitZero(s); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } else { */ case 2:
			t$1 = _ref;
			_r$3 = t$1.VisitChildren(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ZeroContext.ptr.prototype.Accept }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.s = s; $f.t = t; $f.t$1 = t$1; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	ZeroContext.prototype.Accept = function(visitor) { return this.$val.Accept(visitor); };
	FunlangParser.ptr.prototype.Zero = function() {
		var _r$2, _r$3, _r$4, _r$5, localctx, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; localctx = $f.localctx; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		localctx = [localctx];
		p = [p];
		localctx[0] = $ifaceNil;
		p[0] = this;
		localctx[0] = NewZeroContext(p[0], p[0].BaseParser.GetParserRuleContext(), p[0].BaseParser.BaseRecognizer.GetState());
		$r = p[0].BaseParser.EnterRule(localctx[0], 24, 12); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([(function(localctx, p) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = p[0].BaseParser.ExitRule(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		$deferred.push([(function(localctx, p) { return function $b() {
			var _tuple, err, ok, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			err = $recover();
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
				_tuple = $assertType(err, antlr.RecognitionException, true);
				v = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (ok) { */ case 3:
					$r = localctx[0].SetException(v); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().ReportError(p[0], v); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().Recover(p[0], v); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 5; continue;
				/* } else { */ case 4:
					$panic(err);
				/* } */ case 5:
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._tuple = _tuple; $f.err = err; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 1); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p[0].BaseParser.BaseRecognizer.SetState(122);
		_r$2 = p[0].BaseParser.Match(1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		p[0].BaseParser.BaseRecognizer.SetState(123);
		_r$3 = p[0].BaseParser.Match(10); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		p[0].BaseParser.BaseRecognizer.SetState(124);
		_r$4 = p[0].Number(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		p[0].BaseParser.BaseRecognizer.SetState(125);
		_r$5 = p[0].BaseParser.Match(11); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		localctx[0] = localctx[0];
		$s = -1; return localctx[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  localctx[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.Zero }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.localctx = localctx; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FunlangParser.prototype.Zero = function() { return this.$val.Zero(); };
	SuccessorContext.ptr.prototype.IsSuccessorContext = function() {
	};
	SuccessorContext.prototype.IsSuccessorContext = function() { return this.$val.IsSuccessorContext(); };
	NewSuccessorContext = function(parser, parent, invokingState) {
		var invokingState, p, parent, parser;
		p = new SuccessorContext.ptr(ptrType$4.nil, $ifaceNil);
		p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState);
		p.parser = parser;
		p.BaseParserRuleContext.BaseRuleContext.RuleIndex = 13;
		return p;
	};
	$pkg.NewSuccessorContext = NewSuccessorContext;
	SuccessorContext.ptr.prototype.GetParser = function() {
		var s;
		s = this;
		return s.parser;
	};
	SuccessorContext.prototype.GetParser = function() { return this.$val.GetParser(); };
	SuccessorContext.ptr.prototype.GetRuleContext = function() {
		var s;
		s = this;
		return s;
	};
	SuccessorContext.prototype.GetRuleContext = function() { return this.$val.GetRuleContext(); };
	SuccessorContext.ptr.prototype.ToStringTree = function(ruleNames$1, recog) {
		var _r$2, recog, ruleNames$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; recog = $f.recog; ruleNames$1 = $f.ruleNames$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = antlr.TreesStringTree(s, ruleNames$1, recog); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SuccessorContext.ptr.prototype.ToStringTree }; } $f._r$2 = _r$2; $f.recog = recog; $f.ruleNames$1 = ruleNames$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	SuccessorContext.prototype.ToStringTree = function(ruleNames$1, recog) { return this.$val.ToStringTree(ruleNames$1, recog); };
	SuccessorContext.ptr.prototype.Accept = function(visitor) {
		var _r$2, _r$3, _ref, s, t, t$1, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; s = $f.s; t = $f.t; t$1 = $f.t$1; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_ref = visitor;
		/* */ if ($assertType(_ref, FunlangVisitor, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, FunlangVisitor, true)[1]) { */ case 1:
			t = _ref;
			_r$2 = t.VisitSuccessor(s); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } else { */ case 2:
			t$1 = _ref;
			_r$3 = t$1.VisitChildren(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SuccessorContext.ptr.prototype.Accept }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.s = s; $f.t = t; $f.t$1 = t$1; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	SuccessorContext.prototype.Accept = function(visitor) { return this.$val.Accept(visitor); };
	FunlangParser.ptr.prototype.Successor = function() {
		var _r$2, localctx, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; localctx = $f.localctx; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		localctx = [localctx];
		p = [p];
		localctx[0] = $ifaceNil;
		p[0] = this;
		localctx[0] = NewSuccessorContext(p[0], p[0].BaseParser.GetParserRuleContext(), p[0].BaseParser.BaseRecognizer.GetState());
		$r = p[0].BaseParser.EnterRule(localctx[0], 26, 13); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([(function(localctx, p) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = p[0].BaseParser.ExitRule(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		$deferred.push([(function(localctx, p) { return function $b() {
			var _tuple, err, ok, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			err = $recover();
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
				_tuple = $assertType(err, antlr.RecognitionException, true);
				v = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (ok) { */ case 3:
					$r = localctx[0].SetException(v); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().ReportError(p[0], v); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().Recover(p[0], v); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 5; continue;
				/* } else { */ case 4:
					$panic(err);
				/* } */ case 5:
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._tuple = _tuple; $f.err = err; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 1); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p[0].BaseParser.BaseRecognizer.SetState(127);
		_r$2 = p[0].BaseParser.Match(2); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		localctx[0] = localctx[0];
		$s = -1; return localctx[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  localctx[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.Successor }; } $f._r$2 = _r$2; $f.localctx = localctx; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FunlangParser.prototype.Successor = function() { return this.$val.Successor(); };
	ProjectionContext.ptr.prototype.IsProjectionContext = function() {
	};
	ProjectionContext.prototype.IsProjectionContext = function() { return this.$val.IsProjectionContext(); };
	NewProjectionContext = function(parser, parent, invokingState) {
		var invokingState, p, parent, parser;
		p = new ProjectionContext.ptr(ptrType$4.nil, $ifaceNil);
		p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState);
		p.parser = parser;
		p.BaseParserRuleContext.BaseRuleContext.RuleIndex = 14;
		return p;
	};
	$pkg.NewProjectionContext = NewProjectionContext;
	ProjectionContext.ptr.prototype.GetParser = function() {
		var s;
		s = this;
		return s.parser;
	};
	ProjectionContext.prototype.GetParser = function() { return this.$val.GetParser(); };
	ProjectionContext.ptr.prototype.OpenParam = function() {
		var _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetToken(10, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProjectionContext.ptr.prototype.OpenParam }; } $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ProjectionContext.prototype.OpenParam = function() { return this.$val.OpenParam(); };
	ProjectionContext.ptr.prototype.AllNumber = function() {
		var _i, _r$2, _r$3, _ref, i, s, t, ts, tst, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; i = $f.i; s = $f.s; t = $f.t; ts = $f.ts; tst = $f.tst; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$10.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContexts(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		ts = _r$3;
		tst = $makeSlice(sliceType$5, ts.$length);
		_ref = ts;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			t = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!($interfaceIsEqual(t, $ifaceNil))) {
				((i < 0 || i >= tst.$length) ? ($throwRuntimeError("index out of range"), undefined) : tst.$array[tst.$offset + i] = $assertType(t, INumberContext));
			}
			_i++;
		}
		$s = -1; return tst;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProjectionContext.ptr.prototype.AllNumber }; } $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.i = i; $f.s = s; $f.t = t; $f.ts = ts; $f.tst = tst; $f.$s = $s; $f.$r = $r; return $f;
	};
	ProjectionContext.prototype.AllNumber = function() { return this.$val.AllNumber(); };
	ProjectionContext.ptr.prototype.Number = function(i) {
		var _r$2, _r$3, i, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = reflect.TypeOf((ptrType$10.nil)).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = s.BaseParserRuleContext.GetTypedRuleContext(_r$2, i); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		t = _r$3;
		if ($interfaceIsEqual(t, $ifaceNil)) {
			$s = -1; return $ifaceNil;
		}
		$s = -1; return $assertType(t, INumberContext);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProjectionContext.ptr.prototype.Number }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	ProjectionContext.prototype.Number = function(i) { return this.$val.Number(i); };
	ProjectionContext.ptr.prototype.CloseParam = function() {
		var _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetToken(11, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProjectionContext.ptr.prototype.CloseParam }; } $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ProjectionContext.prototype.CloseParam = function() { return this.$val.CloseParam(); };
	ProjectionContext.ptr.prototype.GetRuleContext = function() {
		var s;
		s = this;
		return s;
	};
	ProjectionContext.prototype.GetRuleContext = function() { return this.$val.GetRuleContext(); };
	ProjectionContext.ptr.prototype.ToStringTree = function(ruleNames$1, recog) {
		var _r$2, recog, ruleNames$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; recog = $f.recog; ruleNames$1 = $f.ruleNames$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = antlr.TreesStringTree(s, ruleNames$1, recog); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProjectionContext.ptr.prototype.ToStringTree }; } $f._r$2 = _r$2; $f.recog = recog; $f.ruleNames$1 = ruleNames$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ProjectionContext.prototype.ToStringTree = function(ruleNames$1, recog) { return this.$val.ToStringTree(ruleNames$1, recog); };
	ProjectionContext.ptr.prototype.Accept = function(visitor) {
		var _r$2, _r$3, _ref, s, t, t$1, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; s = $f.s; t = $f.t; t$1 = $f.t$1; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_ref = visitor;
		/* */ if ($assertType(_ref, FunlangVisitor, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, FunlangVisitor, true)[1]) { */ case 1:
			t = _ref;
			_r$2 = t.VisitProjection(s); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } else { */ case 2:
			t$1 = _ref;
			_r$3 = t$1.VisitChildren(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProjectionContext.ptr.prototype.Accept }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.s = s; $f.t = t; $f.t$1 = t$1; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	ProjectionContext.prototype.Accept = function(visitor) { return this.$val.Accept(visitor); };
	FunlangParser.ptr.prototype.Projection = function() {
		var _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, localctx, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; localctx = $f.localctx; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		localctx = [localctx];
		p = [p];
		localctx[0] = $ifaceNil;
		p[0] = this;
		localctx[0] = NewProjectionContext(p[0], p[0].BaseParser.GetParserRuleContext(), p[0].BaseParser.BaseRecognizer.GetState());
		$r = p[0].BaseParser.EnterRule(localctx[0], 28, 14); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([(function(localctx, p) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = p[0].BaseParser.ExitRule(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		$deferred.push([(function(localctx, p) { return function $b() {
			var _tuple, err, ok, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			err = $recover();
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
				_tuple = $assertType(err, antlr.RecognitionException, true);
				v = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (ok) { */ case 3:
					$r = localctx[0].SetException(v); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().ReportError(p[0], v); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().Recover(p[0], v); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 5; continue;
				/* } else { */ case 4:
					$panic(err);
				/* } */ case 5:
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._tuple = _tuple; $f.err = err; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 1); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p[0].BaseParser.BaseRecognizer.SetState(129);
		_r$2 = p[0].BaseParser.Match(3); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		p[0].BaseParser.BaseRecognizer.SetState(130);
		_r$3 = p[0].BaseParser.Match(10); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		p[0].BaseParser.BaseRecognizer.SetState(131);
		_r$4 = p[0].Number(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		p[0].BaseParser.BaseRecognizer.SetState(132);
		_r$5 = p[0].BaseParser.Match(8); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		p[0].BaseParser.BaseRecognizer.SetState(133);
		_r$6 = p[0].Number(); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		p[0].BaseParser.BaseRecognizer.SetState(134);
		_r$7 = p[0].BaseParser.Match(11); /* */ $s = 8; case 8: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7;
		localctx[0] = localctx[0];
		$s = -1; return localctx[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  localctx[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.Projection }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.localctx = localctx; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FunlangParser.prototype.Projection = function() { return this.$val.Projection(); };
	NumberContext.ptr.prototype.IsNumberContext = function() {
	};
	NumberContext.prototype.IsNumberContext = function() { return this.$val.IsNumberContext(); };
	NewNumberContext = function(parser, parent, invokingState) {
		var invokingState, p, parent, parser;
		p = new NumberContext.ptr(ptrType$4.nil, $ifaceNil);
		p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState);
		p.parser = parser;
		p.BaseParserRuleContext.BaseRuleContext.RuleIndex = 15;
		return p;
	};
	$pkg.NewNumberContext = NewNumberContext;
	NumberContext.ptr.prototype.GetParser = function() {
		var s;
		s = this;
		return s.parser;
	};
	NumberContext.prototype.GetParser = function() { return this.$val.GetParser(); };
	NumberContext.ptr.prototype.AllDigit = function() {
		var _r$2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetTokens(13); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NumberContext.ptr.prototype.AllDigit }; } $f._r$2 = _r$2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	NumberContext.prototype.AllDigit = function() { return this.$val.AllDigit(); };
	NumberContext.ptr.prototype.Digit = function(i) {
		var _r$2, i, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; i = $f.i; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.BaseParserRuleContext.GetToken(13, i); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NumberContext.ptr.prototype.Digit }; } $f._r$2 = _r$2; $f.i = i; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	NumberContext.prototype.Digit = function(i) { return this.$val.Digit(i); };
	NumberContext.ptr.prototype.GetRuleContext = function() {
		var s;
		s = this;
		return s;
	};
	NumberContext.prototype.GetRuleContext = function() { return this.$val.GetRuleContext(); };
	NumberContext.ptr.prototype.ToStringTree = function(ruleNames$1, recog) {
		var _r$2, recog, ruleNames$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; recog = $f.recog; ruleNames$1 = $f.ruleNames$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = antlr.TreesStringTree(s, ruleNames$1, recog); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NumberContext.ptr.prototype.ToStringTree }; } $f._r$2 = _r$2; $f.recog = recog; $f.ruleNames$1 = ruleNames$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	NumberContext.prototype.ToStringTree = function(ruleNames$1, recog) { return this.$val.ToStringTree(ruleNames$1, recog); };
	NumberContext.ptr.prototype.Accept = function(visitor) {
		var _r$2, _r$3, _ref, s, t, t$1, visitor, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; s = $f.s; t = $f.t; t$1 = $f.t$1; visitor = $f.visitor; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_ref = visitor;
		/* */ if ($assertType(_ref, FunlangVisitor, true)[1]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($assertType(_ref, FunlangVisitor, true)[1]) { */ case 1:
			t = _ref;
			_r$2 = t.VisitNumber(s); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } else { */ case 2:
			t$1 = _ref;
			_r$3 = t$1.VisitChildren(s); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NumberContext.ptr.prototype.Accept }; } $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.s = s; $f.t = t; $f.t$1 = t$1; $f.visitor = visitor; $f.$s = $s; $f.$r = $r; return $f;
	};
	NumberContext.prototype.Accept = function(visitor) { return this.$val.Accept(visitor); };
	FunlangParser.ptr.prototype.Number = function() {
		var _la, _r$2, _r$3, _r$4, localctx, ok, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _la = $f._la; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; localctx = $f.localctx; ok = $f.ok; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		localctx = [localctx];
		p = [p];
		localctx[0] = $ifaceNil;
		p[0] = this;
		localctx[0] = NewNumberContext(p[0], p[0].BaseParser.GetParserRuleContext(), p[0].BaseParser.BaseRecognizer.GetState());
		$r = p[0].BaseParser.EnterRule(localctx[0], 30, 15); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_la = 0;
		$deferred.push([(function(localctx, p) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = p[0].BaseParser.ExitRule(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		$deferred.push([(function(localctx, p) { return function $b() {
			var _tuple, err, ok, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			err = $recover();
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
				_tuple = $assertType(err, antlr.RecognitionException, true);
				v = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (ok) { */ case 3:
					$r = localctx[0].SetException(v); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().ReportError(p[0], v); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p[0].BaseParser.GetErrorHandler().Recover(p[0], v); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 5; continue;
				/* } else { */ case 4:
					$panic(err);
				/* } */ case 5:
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._tuple = _tuple; $f.err = err; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}; })(localctx, p), []]);
		$r = p[0].BaseParser.EnterOuterAlt(localctx[0], 1); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p[0].BaseParser.BaseRecognizer.SetState(137);
		$r = p[0].BaseParser.GetErrorHandler().Sync(p[0]); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$2 = p[0].BaseParser.GetTokenStream().LA(1); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_la = _r$2;
		ok = true;
		/* while (true) { */ case 5:
			/* if (!(ok)) { break; } */ if(!(ok)) { $s = 6; continue; }
			p[0].BaseParser.BaseRecognizer.SetState(136);
			_r$3 = p[0].BaseParser.Match(13); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			p[0].BaseParser.BaseRecognizer.SetState(139);
			$r = p[0].BaseParser.GetErrorHandler().Sync(p[0]); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$4 = p[0].BaseParser.GetTokenStream().LA(1); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_la = _r$4;
			ok = _la === 13;
		/* } */ $s = 5; continue; case 6:
		localctx[0] = localctx[0];
		$s = -1; return localctx[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  localctx[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.Number }; } $f._la = _la; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.localctx = localctx; $f.ok = ok; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FunlangParser.prototype.Number = function() { return this.$val.Number(); };
	FunlangParser.ptr.prototype.Sempred = function(localctx, ruleIndex, predIndex) {
		var _1, _r$2, _r$3, _r$4, localctx, p, predIndex, ruleIndex, t, t$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; localctx = $f.localctx; p = $f.p; predIndex = $f.predIndex; ruleIndex = $f.ruleIndex; t = $f.t; t$1 = $f.t$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = ruleIndex;
			/* */ if (_1 === (7)) { $s = 2; continue; }
			/* */ if (_1 === (10)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (7)) { */ case 2:
				t = ptrType$20.nil;
				if (!($interfaceIsEqual(localctx, $ifaceNil))) {
					t = $assertType(localctx, ptrType$20);
				}
				_r$2 = p.Function_Sempred(t, predIndex); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return _r$2;
			/* } else if (_1 === (10)) { */ case 3:
				t$1 = ptrType$21.nil;
				if (!($interfaceIsEqual(localctx, $ifaceNil))) {
					t$1 = $assertType(localctx, ptrType$21);
				}
				_r$3 = p.Composition_Sempred(t$1, predIndex); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$s = -1; return _r$3;
			/* } else { */ case 4:
				_r$4 = fmt.Sprint(new sliceType$6([new $Int(ruleIndex)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$panic(new $String("No predicate with index: " + _r$4));
			/* } */ case 5:
		case 1:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.Sempred }; } $f._1 = _1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.localctx = localctx; $f.p = p; $f.predIndex = predIndex; $f.ruleIndex = ruleIndex; $f.t = t; $f.t$1 = t$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunlangParser.prototype.Sempred = function(localctx, ruleIndex, predIndex) { return this.$val.Sempred(localctx, ruleIndex, predIndex); };
	FunlangParser.ptr.prototype.Function_Sempred = function(localctx, predIndex) {
		var _1, _r$2, localctx, p, predIndex, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$2 = $f._r$2; localctx = $f.localctx; p = $f.p; predIndex = $f.predIndex; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = predIndex;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (_1 === (0)) { */ case 2:
				$s = -1; return p.BaseParser.Precpred(p.BaseParser.GetParserRuleContext(), 1);
			/* } else { */ case 3:
				_r$2 = fmt.Sprint(new sliceType$6([new $Int(predIndex)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$panic(new $String("No predicate with index: " + _r$2));
			/* } */ case 4:
		case 1:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.Function_Sempred }; } $f._1 = _1; $f._r$2 = _r$2; $f.localctx = localctx; $f.p = p; $f.predIndex = predIndex; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunlangParser.prototype.Function_Sempred = function(localctx, predIndex) { return this.$val.Function_Sempred(localctx, predIndex); };
	FunlangParser.ptr.prototype.Composition_Sempred = function(localctx, predIndex) {
		var _1, _r$2, localctx, p, predIndex, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$2 = $f._r$2; localctx = $f.localctx; p = $f.p; predIndex = $f.predIndex; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = predIndex;
			/* */ if (_1 === (1)) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (_1 === (1)) { */ case 2:
				$s = -1; return p.BaseParser.Precpred(p.BaseParser.GetParserRuleContext(), 2);
			/* } else { */ case 3:
				_r$2 = fmt.Sprint(new sliceType$6([new $Int(predIndex)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$panic(new $String("No predicate with index: " + _r$2));
			/* } */ case 4:
		case 1:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunlangParser.ptr.prototype.Composition_Sempred }; } $f._1 = _1; $f._r$2 = _r$2; $f.localctx = localctx; $f.p = p; $f.predIndex = predIndex; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunlangParser.prototype.Composition_Sempred = function(localctx, predIndex) { return this.$val.Composition_Sempred(localctx, predIndex); };
	ptrType$38.methods = [{prop: "Program", name: "Program", pkg: "", typ: $funcType([], [IProgramContext], false)}, {prop: "Statement", name: "Statement", pkg: "", typ: $funcType([], [IStatementContext], false)}, {prop: "Execution", name: "Execution", pkg: "", typ: $funcType([], [IExecutionContext], false)}, {prop: "ParameterList", name: "ParameterList", pkg: "", typ: $funcType([], [IParameterListContext], false)}, {prop: "Parameters", name: "Parameters", pkg: "", typ: $funcType([], [IParametersContext], false)}, {prop: "Definition", name: "Definition", pkg: "", typ: $funcType([], [IDefinitionContext], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [INameContext], false)}, {prop: "Function", name: "Function", pkg: "", typ: $funcType([], [IFunctionContext], false)}, {prop: "function$", name: "function", pkg: "github.com/mgrzeszczak/funlang/generated", typ: $funcType([$Int], [IFunctionContext], false)}, {prop: "InnerFunctions", name: "InnerFunctions", pkg: "", typ: $funcType([], [IInnerFunctionsContext], false)}, {prop: "FunctionList", name: "FunctionList", pkg: "", typ: $funcType([], [IFunctionListContext], false)}, {prop: "Composition", name: "Composition", pkg: "", typ: $funcType([], [ICompositionContext], false)}, {prop: "composition", name: "composition", pkg: "github.com/mgrzeszczak/funlang/generated", typ: $funcType([$Int], [ICompositionContext], false)}, {prop: "PrimitiveRecursion", name: "PrimitiveRecursion", pkg: "", typ: $funcType([], [IPrimitiveRecursionContext], false)}, {prop: "Zero", name: "Zero", pkg: "", typ: $funcType([], [IZeroContext], false)}, {prop: "Successor", name: "Successor", pkg: "", typ: $funcType([], [ISuccessorContext], false)}, {prop: "Projection", name: "Projection", pkg: "", typ: $funcType([], [IProjectionContext], false)}, {prop: "Number", name: "Number", pkg: "", typ: $funcType([], [INumberContext], false)}, {prop: "Sempred", name: "Sempred", pkg: "", typ: $funcType([antlr.RuleContext, $Int, $Int], [$Bool], false)}, {prop: "Function_Sempred", name: "Function_Sempred", pkg: "", typ: $funcType([antlr.RuleContext, $Int], [$Bool], false)}, {prop: "Composition_Sempred", name: "Composition_Sempred", pkg: "", typ: $funcType([antlr.RuleContext, $Int], [$Bool], false)}];
	ptrType$23.methods = [{prop: "IsProgramContext", name: "IsProgramContext", pkg: "", typ: $funcType([], [], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "AllStatement", name: "AllStatement", pkg: "", typ: $funcType([], [sliceType$3], false)}, {prop: "Statement", name: "Statement", pkg: "", typ: $funcType([$Int], [IStatementContext], false)}, {prop: "AllSemicolon", name: "AllSemicolon", pkg: "", typ: $funcType([], [sliceType$8], false)}, {prop: "Semicolon", name: "Semicolon", pkg: "", typ: $funcType([$Int], [antlr.TerminalNode], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}];
	ptrType$24.methods = [{prop: "IsStatementContext", name: "IsStatementContext", pkg: "", typ: $funcType([], [], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "Definition", name: "Definition", pkg: "", typ: $funcType([], [IDefinitionContext], false)}, {prop: "Execution", name: "Execution", pkg: "", typ: $funcType([], [IExecutionContext], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}];
	ptrType$25.methods = [{prop: "IsExecutionContext", name: "IsExecutionContext", pkg: "", typ: $funcType([], [], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [INameContext], false)}, {prop: "Parameters", name: "Parameters", pkg: "", typ: $funcType([], [IParametersContext], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}];
	ptrType$26.methods = [{prop: "IsParameterListContext", name: "IsParameterListContext", pkg: "", typ: $funcType([], [], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "Number", name: "Number", pkg: "", typ: $funcType([], [INumberContext], false)}, {prop: "Comma", name: "Comma", pkg: "", typ: $funcType([], [antlr.TerminalNode], false)}, {prop: "ParameterList", name: "ParameterList", pkg: "", typ: $funcType([], [IParameterListContext], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}];
	ptrType$27.methods = [{prop: "IsParametersContext", name: "IsParametersContext", pkg: "", typ: $funcType([], [], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "OpenParam", name: "OpenParam", pkg: "", typ: $funcType([], [antlr.TerminalNode], false)}, {prop: "CloseParam", name: "CloseParam", pkg: "", typ: $funcType([], [antlr.TerminalNode], false)}, {prop: "ParameterList", name: "ParameterList", pkg: "", typ: $funcType([], [IParameterListContext], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}];
	ptrType$28.methods = [{prop: "IsDefinitionContext", name: "IsDefinitionContext", pkg: "", typ: $funcType([], [], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "Define", name: "Define", pkg: "", typ: $funcType([], [antlr.TerminalNode], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [INameContext], false)}, {prop: "AssignmentOperator", name: "AssignmentOperator", pkg: "", typ: $funcType([], [antlr.TerminalNode], false)}, {prop: "Function", name: "Function", pkg: "", typ: $funcType([], [IFunctionContext], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}];
	ptrType$29.methods = [{prop: "IsNameContext", name: "IsNameContext", pkg: "", typ: $funcType([], [], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "AllNondigit", name: "AllNondigit", pkg: "", typ: $funcType([], [sliceType$8], false)}, {prop: "Nondigit", name: "Nondigit", pkg: "", typ: $funcType([$Int], [antlr.TerminalNode], false)}, {prop: "AllDigit", name: "AllDigit", pkg: "", typ: $funcType([], [sliceType$8], false)}, {prop: "Digit", name: "Digit", pkg: "", typ: $funcType([$Int], [antlr.TerminalNode], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}];
	ptrType$20.methods = [{prop: "IsFunctionContext", name: "IsFunctionContext", pkg: "", typ: $funcType([], [], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "Composition", name: "Composition", pkg: "", typ: $funcType([], [ICompositionContext], false)}, {prop: "Function", name: "Function", pkg: "", typ: $funcType([], [IFunctionContext], false)}, {prop: "CompositionOperator", name: "CompositionOperator", pkg: "", typ: $funcType([], [antlr.TerminalNode], false)}, {prop: "InnerFunctions", name: "InnerFunctions", pkg: "", typ: $funcType([], [IInnerFunctionsContext], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}];
	ptrType$30.methods = [{prop: "IsInnerFunctionsContext", name: "IsInnerFunctionsContext", pkg: "", typ: $funcType([], [], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "OpenParam", name: "OpenParam", pkg: "", typ: $funcType([], [antlr.TerminalNode], false)}, {prop: "FunctionList", name: "FunctionList", pkg: "", typ: $funcType([], [IFunctionListContext], false)}, {prop: "CloseParam", name: "CloseParam", pkg: "", typ: $funcType([], [antlr.TerminalNode], false)}, {prop: "Function", name: "Function", pkg: "", typ: $funcType([], [IFunctionContext], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}];
	ptrType$31.methods = [{prop: "IsFunctionListContext", name: "IsFunctionListContext", pkg: "", typ: $funcType([], [], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "Function", name: "Function", pkg: "", typ: $funcType([], [IFunctionContext], false)}, {prop: "Comma", name: "Comma", pkg: "", typ: $funcType([], [antlr.TerminalNode], false)}, {prop: "FunctionList", name: "FunctionList", pkg: "", typ: $funcType([], [IFunctionListContext], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}];
	ptrType$21.methods = [{prop: "IsCompositionContext", name: "IsCompositionContext", pkg: "", typ: $funcType([], [], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "PrimitiveRecursion", name: "PrimitiveRecursion", pkg: "", typ: $funcType([], [IPrimitiveRecursionContext], false)}, {prop: "Composition", name: "Composition", pkg: "", typ: $funcType([], [ICompositionContext], false)}, {prop: "PrimitiveRecursionOperator", name: "PrimitiveRecursionOperator", pkg: "", typ: $funcType([], [antlr.TerminalNode], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}];
	ptrType$32.methods = [{prop: "IsPrimitiveRecursionContext", name: "IsPrimitiveRecursionContext", pkg: "", typ: $funcType([], [], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "OpenParam", name: "OpenParam", pkg: "", typ: $funcType([], [antlr.TerminalNode], false)}, {prop: "Function", name: "Function", pkg: "", typ: $funcType([], [IFunctionContext], false)}, {prop: "CloseParam", name: "CloseParam", pkg: "", typ: $funcType([], [antlr.TerminalNode], false)}, {prop: "Zero", name: "Zero", pkg: "", typ: $funcType([], [IZeroContext], false)}, {prop: "Successor", name: "Successor", pkg: "", typ: $funcType([], [ISuccessorContext], false)}, {prop: "Projection", name: "Projection", pkg: "", typ: $funcType([], [IProjectionContext], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [INameContext], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}];
	ptrType$33.methods = [{prop: "IsZeroContext", name: "IsZeroContext", pkg: "", typ: $funcType([], [], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "OpenParam", name: "OpenParam", pkg: "", typ: $funcType([], [antlr.TerminalNode], false)}, {prop: "Number", name: "Number", pkg: "", typ: $funcType([], [INumberContext], false)}, {prop: "CloseParam", name: "CloseParam", pkg: "", typ: $funcType([], [antlr.TerminalNode], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}];
	ptrType$34.methods = [{prop: "IsSuccessorContext", name: "IsSuccessorContext", pkg: "", typ: $funcType([], [], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}];
	ptrType$35.methods = [{prop: "IsProjectionContext", name: "IsProjectionContext", pkg: "", typ: $funcType([], [], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "OpenParam", name: "OpenParam", pkg: "", typ: $funcType([], [antlr.TerminalNode], false)}, {prop: "AllNumber", name: "AllNumber", pkg: "", typ: $funcType([], [sliceType$5], false)}, {prop: "Number", name: "Number", pkg: "", typ: $funcType([$Int], [INumberContext], false)}, {prop: "CloseParam", name: "CloseParam", pkg: "", typ: $funcType([], [antlr.TerminalNode], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}];
	ptrType$36.methods = [{prop: "IsNumberContext", name: "IsNumberContext", pkg: "", typ: $funcType([], [], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "AllDigit", name: "AllDigit", pkg: "", typ: $funcType([], [sliceType$8], false)}, {prop: "Digit", name: "Digit", pkg: "", typ: $funcType([$Int], [antlr.TerminalNode], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}];
	FunlangLexer.init("github.com/mgrzeszczak/funlang/generated", [{prop: "BaseLexer", name: "BaseLexer", anonymous: true, exported: true, typ: ptrType$2, tag: ""}, {prop: "channelNames", name: "channelNames", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "modeNames", name: "modeNames", anonymous: false, exported: false, typ: sliceType$1, tag: ""}]);
	FunlangParser.init("", [{prop: "BaseParser", name: "BaseParser", anonymous: true, exported: true, typ: ptrType$3, tag: ""}]);
	IProgramContext.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}, {prop: "AddChild", name: "AddChild", pkg: "", typ: $funcType([antlr.RuleContext], [antlr.RuleContext], false)}, {prop: "AddErrorNode", name: "AddErrorNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$39], false)}, {prop: "AddTokenNode", name: "AddTokenNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$40], false)}, {prop: "EnterRule", name: "EnterRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "ExitRule", name: "ExitRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "GetAltNumber", name: "GetAltNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetBaseRuleContext", name: "GetBaseRuleContext", pkg: "", typ: $funcType([], [ptrType$41], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [antlr.Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$7], false)}, {prop: "GetInvokingState", name: "GetInvokingState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [antlr.Tree], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$42], false)}, {prop: "GetStart", name: "GetStart", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetStop", name: "GetStop", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsProgramContext", name: "IsProgramContext", pkg: "", typ: $funcType([], [], false)}, {prop: "RemoveLastChild", name: "RemoveLastChild", pkg: "", typ: $funcType([], [], false)}, {prop: "SetAltNumber", name: "SetAltNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetException", name: "SetException", pkg: "", typ: $funcType([antlr.RecognitionException], [], false)}, {prop: "SetInvokingState", name: "SetInvokingState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([antlr.Tree], [], false)}, {prop: "SetStart", name: "SetStart", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "SetStop", name: "SetStop", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([sliceType$1, antlr.RuleContext], [$String], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}]);
	ProgramContext.init("github.com/mgrzeszczak/funlang/generated", [{prop: "BaseParserRuleContext", name: "BaseParserRuleContext", anonymous: true, exported: true, typ: ptrType$4, tag: ""}, {prop: "parser", name: "parser", anonymous: false, exported: false, typ: antlr.Parser, tag: ""}]);
	IStatementContext.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}, {prop: "AddChild", name: "AddChild", pkg: "", typ: $funcType([antlr.RuleContext], [antlr.RuleContext], false)}, {prop: "AddErrorNode", name: "AddErrorNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$39], false)}, {prop: "AddTokenNode", name: "AddTokenNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$40], false)}, {prop: "EnterRule", name: "EnterRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "ExitRule", name: "ExitRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "GetAltNumber", name: "GetAltNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetBaseRuleContext", name: "GetBaseRuleContext", pkg: "", typ: $funcType([], [ptrType$41], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [antlr.Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$7], false)}, {prop: "GetInvokingState", name: "GetInvokingState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [antlr.Tree], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$42], false)}, {prop: "GetStart", name: "GetStart", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetStop", name: "GetStop", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsStatementContext", name: "IsStatementContext", pkg: "", typ: $funcType([], [], false)}, {prop: "RemoveLastChild", name: "RemoveLastChild", pkg: "", typ: $funcType([], [], false)}, {prop: "SetAltNumber", name: "SetAltNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetException", name: "SetException", pkg: "", typ: $funcType([antlr.RecognitionException], [], false)}, {prop: "SetInvokingState", name: "SetInvokingState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([antlr.Tree], [], false)}, {prop: "SetStart", name: "SetStart", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "SetStop", name: "SetStop", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([sliceType$1, antlr.RuleContext], [$String], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}]);
	StatementContext.init("github.com/mgrzeszczak/funlang/generated", [{prop: "BaseParserRuleContext", name: "BaseParserRuleContext", anonymous: true, exported: true, typ: ptrType$4, tag: ""}, {prop: "parser", name: "parser", anonymous: false, exported: false, typ: antlr.Parser, tag: ""}]);
	IExecutionContext.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}, {prop: "AddChild", name: "AddChild", pkg: "", typ: $funcType([antlr.RuleContext], [antlr.RuleContext], false)}, {prop: "AddErrorNode", name: "AddErrorNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$39], false)}, {prop: "AddTokenNode", name: "AddTokenNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$40], false)}, {prop: "EnterRule", name: "EnterRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "ExitRule", name: "ExitRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "GetAltNumber", name: "GetAltNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetBaseRuleContext", name: "GetBaseRuleContext", pkg: "", typ: $funcType([], [ptrType$41], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [antlr.Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$7], false)}, {prop: "GetInvokingState", name: "GetInvokingState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [antlr.Tree], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$42], false)}, {prop: "GetStart", name: "GetStart", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetStop", name: "GetStop", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsExecutionContext", name: "IsExecutionContext", pkg: "", typ: $funcType([], [], false)}, {prop: "RemoveLastChild", name: "RemoveLastChild", pkg: "", typ: $funcType([], [], false)}, {prop: "SetAltNumber", name: "SetAltNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetException", name: "SetException", pkg: "", typ: $funcType([antlr.RecognitionException], [], false)}, {prop: "SetInvokingState", name: "SetInvokingState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([antlr.Tree], [], false)}, {prop: "SetStart", name: "SetStart", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "SetStop", name: "SetStop", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([sliceType$1, antlr.RuleContext], [$String], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}]);
	ExecutionContext.init("github.com/mgrzeszczak/funlang/generated", [{prop: "BaseParserRuleContext", name: "BaseParserRuleContext", anonymous: true, exported: true, typ: ptrType$4, tag: ""}, {prop: "parser", name: "parser", anonymous: false, exported: false, typ: antlr.Parser, tag: ""}]);
	IParameterListContext.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}, {prop: "AddChild", name: "AddChild", pkg: "", typ: $funcType([antlr.RuleContext], [antlr.RuleContext], false)}, {prop: "AddErrorNode", name: "AddErrorNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$39], false)}, {prop: "AddTokenNode", name: "AddTokenNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$40], false)}, {prop: "EnterRule", name: "EnterRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "ExitRule", name: "ExitRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "GetAltNumber", name: "GetAltNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetBaseRuleContext", name: "GetBaseRuleContext", pkg: "", typ: $funcType([], [ptrType$41], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [antlr.Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$7], false)}, {prop: "GetInvokingState", name: "GetInvokingState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [antlr.Tree], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$42], false)}, {prop: "GetStart", name: "GetStart", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetStop", name: "GetStop", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsParameterListContext", name: "IsParameterListContext", pkg: "", typ: $funcType([], [], false)}, {prop: "RemoveLastChild", name: "RemoveLastChild", pkg: "", typ: $funcType([], [], false)}, {prop: "SetAltNumber", name: "SetAltNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetException", name: "SetException", pkg: "", typ: $funcType([antlr.RecognitionException], [], false)}, {prop: "SetInvokingState", name: "SetInvokingState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([antlr.Tree], [], false)}, {prop: "SetStart", name: "SetStart", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "SetStop", name: "SetStop", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([sliceType$1, antlr.RuleContext], [$String], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}]);
	ParameterListContext.init("github.com/mgrzeszczak/funlang/generated", [{prop: "BaseParserRuleContext", name: "BaseParserRuleContext", anonymous: true, exported: true, typ: ptrType$4, tag: ""}, {prop: "parser", name: "parser", anonymous: false, exported: false, typ: antlr.Parser, tag: ""}]);
	IParametersContext.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}, {prop: "AddChild", name: "AddChild", pkg: "", typ: $funcType([antlr.RuleContext], [antlr.RuleContext], false)}, {prop: "AddErrorNode", name: "AddErrorNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$39], false)}, {prop: "AddTokenNode", name: "AddTokenNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$40], false)}, {prop: "EnterRule", name: "EnterRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "ExitRule", name: "ExitRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "GetAltNumber", name: "GetAltNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetBaseRuleContext", name: "GetBaseRuleContext", pkg: "", typ: $funcType([], [ptrType$41], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [antlr.Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$7], false)}, {prop: "GetInvokingState", name: "GetInvokingState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [antlr.Tree], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$42], false)}, {prop: "GetStart", name: "GetStart", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetStop", name: "GetStop", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsParametersContext", name: "IsParametersContext", pkg: "", typ: $funcType([], [], false)}, {prop: "RemoveLastChild", name: "RemoveLastChild", pkg: "", typ: $funcType([], [], false)}, {prop: "SetAltNumber", name: "SetAltNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetException", name: "SetException", pkg: "", typ: $funcType([antlr.RecognitionException], [], false)}, {prop: "SetInvokingState", name: "SetInvokingState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([antlr.Tree], [], false)}, {prop: "SetStart", name: "SetStart", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "SetStop", name: "SetStop", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([sliceType$1, antlr.RuleContext], [$String], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}]);
	ParametersContext.init("github.com/mgrzeszczak/funlang/generated", [{prop: "BaseParserRuleContext", name: "BaseParserRuleContext", anonymous: true, exported: true, typ: ptrType$4, tag: ""}, {prop: "parser", name: "parser", anonymous: false, exported: false, typ: antlr.Parser, tag: ""}]);
	IDefinitionContext.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}, {prop: "AddChild", name: "AddChild", pkg: "", typ: $funcType([antlr.RuleContext], [antlr.RuleContext], false)}, {prop: "AddErrorNode", name: "AddErrorNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$39], false)}, {prop: "AddTokenNode", name: "AddTokenNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$40], false)}, {prop: "EnterRule", name: "EnterRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "ExitRule", name: "ExitRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "GetAltNumber", name: "GetAltNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetBaseRuleContext", name: "GetBaseRuleContext", pkg: "", typ: $funcType([], [ptrType$41], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [antlr.Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$7], false)}, {prop: "GetInvokingState", name: "GetInvokingState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [antlr.Tree], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$42], false)}, {prop: "GetStart", name: "GetStart", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetStop", name: "GetStop", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDefinitionContext", name: "IsDefinitionContext", pkg: "", typ: $funcType([], [], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "RemoveLastChild", name: "RemoveLastChild", pkg: "", typ: $funcType([], [], false)}, {prop: "SetAltNumber", name: "SetAltNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetException", name: "SetException", pkg: "", typ: $funcType([antlr.RecognitionException], [], false)}, {prop: "SetInvokingState", name: "SetInvokingState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([antlr.Tree], [], false)}, {prop: "SetStart", name: "SetStart", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "SetStop", name: "SetStop", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([sliceType$1, antlr.RuleContext], [$String], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}]);
	DefinitionContext.init("github.com/mgrzeszczak/funlang/generated", [{prop: "BaseParserRuleContext", name: "BaseParserRuleContext", anonymous: true, exported: true, typ: ptrType$4, tag: ""}, {prop: "parser", name: "parser", anonymous: false, exported: false, typ: antlr.Parser, tag: ""}]);
	INameContext.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}, {prop: "AddChild", name: "AddChild", pkg: "", typ: $funcType([antlr.RuleContext], [antlr.RuleContext], false)}, {prop: "AddErrorNode", name: "AddErrorNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$39], false)}, {prop: "AddTokenNode", name: "AddTokenNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$40], false)}, {prop: "EnterRule", name: "EnterRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "ExitRule", name: "ExitRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "GetAltNumber", name: "GetAltNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetBaseRuleContext", name: "GetBaseRuleContext", pkg: "", typ: $funcType([], [ptrType$41], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [antlr.Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$7], false)}, {prop: "GetInvokingState", name: "GetInvokingState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [antlr.Tree], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$42], false)}, {prop: "GetStart", name: "GetStart", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetStop", name: "GetStop", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsNameContext", name: "IsNameContext", pkg: "", typ: $funcType([], [], false)}, {prop: "RemoveLastChild", name: "RemoveLastChild", pkg: "", typ: $funcType([], [], false)}, {prop: "SetAltNumber", name: "SetAltNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetException", name: "SetException", pkg: "", typ: $funcType([antlr.RecognitionException], [], false)}, {prop: "SetInvokingState", name: "SetInvokingState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([antlr.Tree], [], false)}, {prop: "SetStart", name: "SetStart", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "SetStop", name: "SetStop", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([sliceType$1, antlr.RuleContext], [$String], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}]);
	NameContext.init("github.com/mgrzeszczak/funlang/generated", [{prop: "BaseParserRuleContext", name: "BaseParserRuleContext", anonymous: true, exported: true, typ: ptrType$4, tag: ""}, {prop: "parser", name: "parser", anonymous: false, exported: false, typ: antlr.Parser, tag: ""}]);
	IFunctionContext.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}, {prop: "AddChild", name: "AddChild", pkg: "", typ: $funcType([antlr.RuleContext], [antlr.RuleContext], false)}, {prop: "AddErrorNode", name: "AddErrorNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$39], false)}, {prop: "AddTokenNode", name: "AddTokenNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$40], false)}, {prop: "EnterRule", name: "EnterRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "ExitRule", name: "ExitRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "GetAltNumber", name: "GetAltNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetBaseRuleContext", name: "GetBaseRuleContext", pkg: "", typ: $funcType([], [ptrType$41], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [antlr.Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$7], false)}, {prop: "GetInvokingState", name: "GetInvokingState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [antlr.Tree], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$42], false)}, {prop: "GetStart", name: "GetStart", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetStop", name: "GetStop", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsFunctionContext", name: "IsFunctionContext", pkg: "", typ: $funcType([], [], false)}, {prop: "RemoveLastChild", name: "RemoveLastChild", pkg: "", typ: $funcType([], [], false)}, {prop: "SetAltNumber", name: "SetAltNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetException", name: "SetException", pkg: "", typ: $funcType([antlr.RecognitionException], [], false)}, {prop: "SetInvokingState", name: "SetInvokingState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([antlr.Tree], [], false)}, {prop: "SetStart", name: "SetStart", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "SetStop", name: "SetStop", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([sliceType$1, antlr.RuleContext], [$String], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}]);
	FunctionContext.init("github.com/mgrzeszczak/funlang/generated", [{prop: "BaseParserRuleContext", name: "BaseParserRuleContext", anonymous: true, exported: true, typ: ptrType$4, tag: ""}, {prop: "parser", name: "parser", anonymous: false, exported: false, typ: antlr.Parser, tag: ""}]);
	IInnerFunctionsContext.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}, {prop: "AddChild", name: "AddChild", pkg: "", typ: $funcType([antlr.RuleContext], [antlr.RuleContext], false)}, {prop: "AddErrorNode", name: "AddErrorNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$39], false)}, {prop: "AddTokenNode", name: "AddTokenNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$40], false)}, {prop: "EnterRule", name: "EnterRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "ExitRule", name: "ExitRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "GetAltNumber", name: "GetAltNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetBaseRuleContext", name: "GetBaseRuleContext", pkg: "", typ: $funcType([], [ptrType$41], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [antlr.Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$7], false)}, {prop: "GetInvokingState", name: "GetInvokingState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [antlr.Tree], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$42], false)}, {prop: "GetStart", name: "GetStart", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetStop", name: "GetStop", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsInnerFunctionsContext", name: "IsInnerFunctionsContext", pkg: "", typ: $funcType([], [], false)}, {prop: "RemoveLastChild", name: "RemoveLastChild", pkg: "", typ: $funcType([], [], false)}, {prop: "SetAltNumber", name: "SetAltNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetException", name: "SetException", pkg: "", typ: $funcType([antlr.RecognitionException], [], false)}, {prop: "SetInvokingState", name: "SetInvokingState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([antlr.Tree], [], false)}, {prop: "SetStart", name: "SetStart", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "SetStop", name: "SetStop", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([sliceType$1, antlr.RuleContext], [$String], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}]);
	InnerFunctionsContext.init("github.com/mgrzeszczak/funlang/generated", [{prop: "BaseParserRuleContext", name: "BaseParserRuleContext", anonymous: true, exported: true, typ: ptrType$4, tag: ""}, {prop: "parser", name: "parser", anonymous: false, exported: false, typ: antlr.Parser, tag: ""}]);
	IFunctionListContext.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}, {prop: "AddChild", name: "AddChild", pkg: "", typ: $funcType([antlr.RuleContext], [antlr.RuleContext], false)}, {prop: "AddErrorNode", name: "AddErrorNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$39], false)}, {prop: "AddTokenNode", name: "AddTokenNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$40], false)}, {prop: "EnterRule", name: "EnterRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "ExitRule", name: "ExitRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "GetAltNumber", name: "GetAltNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetBaseRuleContext", name: "GetBaseRuleContext", pkg: "", typ: $funcType([], [ptrType$41], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [antlr.Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$7], false)}, {prop: "GetInvokingState", name: "GetInvokingState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [antlr.Tree], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$42], false)}, {prop: "GetStart", name: "GetStart", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetStop", name: "GetStop", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsFunctionListContext", name: "IsFunctionListContext", pkg: "", typ: $funcType([], [], false)}, {prop: "RemoveLastChild", name: "RemoveLastChild", pkg: "", typ: $funcType([], [], false)}, {prop: "SetAltNumber", name: "SetAltNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetException", name: "SetException", pkg: "", typ: $funcType([antlr.RecognitionException], [], false)}, {prop: "SetInvokingState", name: "SetInvokingState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([antlr.Tree], [], false)}, {prop: "SetStart", name: "SetStart", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "SetStop", name: "SetStop", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([sliceType$1, antlr.RuleContext], [$String], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}]);
	FunctionListContext.init("github.com/mgrzeszczak/funlang/generated", [{prop: "BaseParserRuleContext", name: "BaseParserRuleContext", anonymous: true, exported: true, typ: ptrType$4, tag: ""}, {prop: "parser", name: "parser", anonymous: false, exported: false, typ: antlr.Parser, tag: ""}]);
	ICompositionContext.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}, {prop: "AddChild", name: "AddChild", pkg: "", typ: $funcType([antlr.RuleContext], [antlr.RuleContext], false)}, {prop: "AddErrorNode", name: "AddErrorNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$39], false)}, {prop: "AddTokenNode", name: "AddTokenNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$40], false)}, {prop: "EnterRule", name: "EnterRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "ExitRule", name: "ExitRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "GetAltNumber", name: "GetAltNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetBaseRuleContext", name: "GetBaseRuleContext", pkg: "", typ: $funcType([], [ptrType$41], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [antlr.Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$7], false)}, {prop: "GetInvokingState", name: "GetInvokingState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [antlr.Tree], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$42], false)}, {prop: "GetStart", name: "GetStart", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetStop", name: "GetStop", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsCompositionContext", name: "IsCompositionContext", pkg: "", typ: $funcType([], [], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "RemoveLastChild", name: "RemoveLastChild", pkg: "", typ: $funcType([], [], false)}, {prop: "SetAltNumber", name: "SetAltNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetException", name: "SetException", pkg: "", typ: $funcType([antlr.RecognitionException], [], false)}, {prop: "SetInvokingState", name: "SetInvokingState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([antlr.Tree], [], false)}, {prop: "SetStart", name: "SetStart", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "SetStop", name: "SetStop", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([sliceType$1, antlr.RuleContext], [$String], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}]);
	CompositionContext.init("github.com/mgrzeszczak/funlang/generated", [{prop: "BaseParserRuleContext", name: "BaseParserRuleContext", anonymous: true, exported: true, typ: ptrType$4, tag: ""}, {prop: "parser", name: "parser", anonymous: false, exported: false, typ: antlr.Parser, tag: ""}]);
	IPrimitiveRecursionContext.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}, {prop: "AddChild", name: "AddChild", pkg: "", typ: $funcType([antlr.RuleContext], [antlr.RuleContext], false)}, {prop: "AddErrorNode", name: "AddErrorNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$39], false)}, {prop: "AddTokenNode", name: "AddTokenNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$40], false)}, {prop: "EnterRule", name: "EnterRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "ExitRule", name: "ExitRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "GetAltNumber", name: "GetAltNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetBaseRuleContext", name: "GetBaseRuleContext", pkg: "", typ: $funcType([], [ptrType$41], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [antlr.Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$7], false)}, {prop: "GetInvokingState", name: "GetInvokingState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [antlr.Tree], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$42], false)}, {prop: "GetStart", name: "GetStart", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetStop", name: "GetStop", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsPrimitiveRecursionContext", name: "IsPrimitiveRecursionContext", pkg: "", typ: $funcType([], [], false)}, {prop: "RemoveLastChild", name: "RemoveLastChild", pkg: "", typ: $funcType([], [], false)}, {prop: "SetAltNumber", name: "SetAltNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetException", name: "SetException", pkg: "", typ: $funcType([antlr.RecognitionException], [], false)}, {prop: "SetInvokingState", name: "SetInvokingState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([antlr.Tree], [], false)}, {prop: "SetStart", name: "SetStart", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "SetStop", name: "SetStop", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([sliceType$1, antlr.RuleContext], [$String], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}]);
	PrimitiveRecursionContext.init("github.com/mgrzeszczak/funlang/generated", [{prop: "BaseParserRuleContext", name: "BaseParserRuleContext", anonymous: true, exported: true, typ: ptrType$4, tag: ""}, {prop: "parser", name: "parser", anonymous: false, exported: false, typ: antlr.Parser, tag: ""}]);
	IZeroContext.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}, {prop: "AddChild", name: "AddChild", pkg: "", typ: $funcType([antlr.RuleContext], [antlr.RuleContext], false)}, {prop: "AddErrorNode", name: "AddErrorNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$39], false)}, {prop: "AddTokenNode", name: "AddTokenNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$40], false)}, {prop: "EnterRule", name: "EnterRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "ExitRule", name: "ExitRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "GetAltNumber", name: "GetAltNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetBaseRuleContext", name: "GetBaseRuleContext", pkg: "", typ: $funcType([], [ptrType$41], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [antlr.Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$7], false)}, {prop: "GetInvokingState", name: "GetInvokingState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [antlr.Tree], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$42], false)}, {prop: "GetStart", name: "GetStart", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetStop", name: "GetStop", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsZeroContext", name: "IsZeroContext", pkg: "", typ: $funcType([], [], false)}, {prop: "RemoveLastChild", name: "RemoveLastChild", pkg: "", typ: $funcType([], [], false)}, {prop: "SetAltNumber", name: "SetAltNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetException", name: "SetException", pkg: "", typ: $funcType([antlr.RecognitionException], [], false)}, {prop: "SetInvokingState", name: "SetInvokingState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([antlr.Tree], [], false)}, {prop: "SetStart", name: "SetStart", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "SetStop", name: "SetStop", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([sliceType$1, antlr.RuleContext], [$String], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}]);
	ZeroContext.init("github.com/mgrzeszczak/funlang/generated", [{prop: "BaseParserRuleContext", name: "BaseParserRuleContext", anonymous: true, exported: true, typ: ptrType$4, tag: ""}, {prop: "parser", name: "parser", anonymous: false, exported: false, typ: antlr.Parser, tag: ""}]);
	ISuccessorContext.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}, {prop: "AddChild", name: "AddChild", pkg: "", typ: $funcType([antlr.RuleContext], [antlr.RuleContext], false)}, {prop: "AddErrorNode", name: "AddErrorNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$39], false)}, {prop: "AddTokenNode", name: "AddTokenNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$40], false)}, {prop: "EnterRule", name: "EnterRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "ExitRule", name: "ExitRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "GetAltNumber", name: "GetAltNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetBaseRuleContext", name: "GetBaseRuleContext", pkg: "", typ: $funcType([], [ptrType$41], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [antlr.Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$7], false)}, {prop: "GetInvokingState", name: "GetInvokingState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [antlr.Tree], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$42], false)}, {prop: "GetStart", name: "GetStart", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetStop", name: "GetStop", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsSuccessorContext", name: "IsSuccessorContext", pkg: "", typ: $funcType([], [], false)}, {prop: "RemoveLastChild", name: "RemoveLastChild", pkg: "", typ: $funcType([], [], false)}, {prop: "SetAltNumber", name: "SetAltNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetException", name: "SetException", pkg: "", typ: $funcType([antlr.RecognitionException], [], false)}, {prop: "SetInvokingState", name: "SetInvokingState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([antlr.Tree], [], false)}, {prop: "SetStart", name: "SetStart", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "SetStop", name: "SetStop", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([sliceType$1, antlr.RuleContext], [$String], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}]);
	SuccessorContext.init("github.com/mgrzeszczak/funlang/generated", [{prop: "BaseParserRuleContext", name: "BaseParserRuleContext", anonymous: true, exported: true, typ: ptrType$4, tag: ""}, {prop: "parser", name: "parser", anonymous: false, exported: false, typ: antlr.Parser, tag: ""}]);
	IProjectionContext.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}, {prop: "AddChild", name: "AddChild", pkg: "", typ: $funcType([antlr.RuleContext], [antlr.RuleContext], false)}, {prop: "AddErrorNode", name: "AddErrorNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$39], false)}, {prop: "AddTokenNode", name: "AddTokenNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$40], false)}, {prop: "EnterRule", name: "EnterRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "ExitRule", name: "ExitRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "GetAltNumber", name: "GetAltNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetBaseRuleContext", name: "GetBaseRuleContext", pkg: "", typ: $funcType([], [ptrType$41], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [antlr.Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$7], false)}, {prop: "GetInvokingState", name: "GetInvokingState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [antlr.Tree], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$42], false)}, {prop: "GetStart", name: "GetStart", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetStop", name: "GetStop", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsProjectionContext", name: "IsProjectionContext", pkg: "", typ: $funcType([], [], false)}, {prop: "RemoveLastChild", name: "RemoveLastChild", pkg: "", typ: $funcType([], [], false)}, {prop: "SetAltNumber", name: "SetAltNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetException", name: "SetException", pkg: "", typ: $funcType([antlr.RecognitionException], [], false)}, {prop: "SetInvokingState", name: "SetInvokingState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([antlr.Tree], [], false)}, {prop: "SetStart", name: "SetStart", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "SetStop", name: "SetStop", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([sliceType$1, antlr.RuleContext], [$String], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}]);
	ProjectionContext.init("github.com/mgrzeszczak/funlang/generated", [{prop: "BaseParserRuleContext", name: "BaseParserRuleContext", anonymous: true, exported: true, typ: ptrType$4, tag: ""}, {prop: "parser", name: "parser", anonymous: false, exported: false, typ: antlr.Parser, tag: ""}]);
	INumberContext.init([{prop: "Accept", name: "Accept", pkg: "", typ: $funcType([antlr.ParseTreeVisitor], [$emptyInterface], false)}, {prop: "AddChild", name: "AddChild", pkg: "", typ: $funcType([antlr.RuleContext], [antlr.RuleContext], false)}, {prop: "AddErrorNode", name: "AddErrorNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$39], false)}, {prop: "AddTokenNode", name: "AddTokenNode", pkg: "", typ: $funcType([antlr.Token], [ptrType$40], false)}, {prop: "EnterRule", name: "EnterRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "ExitRule", name: "ExitRule", pkg: "", typ: $funcType([antlr.ParseTreeListener], [], false)}, {prop: "GetAltNumber", name: "GetAltNumber", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetBaseRuleContext", name: "GetBaseRuleContext", pkg: "", typ: $funcType([], [ptrType$41], false)}, {prop: "GetChild", name: "GetChild", pkg: "", typ: $funcType([$Int], [antlr.Tree], false)}, {prop: "GetChildCount", name: "GetChildCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetChildren", name: "GetChildren", pkg: "", typ: $funcType([], [sliceType$7], false)}, {prop: "GetInvokingState", name: "GetInvokingState", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetParent", name: "GetParent", pkg: "", typ: $funcType([], [antlr.Tree], false)}, {prop: "GetParser", name: "GetParser", pkg: "", typ: $funcType([], [antlr.Parser], false)}, {prop: "GetPayload", name: "GetPayload", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "GetRuleContext", name: "GetRuleContext", pkg: "", typ: $funcType([], [antlr.RuleContext], false)}, {prop: "GetRuleIndex", name: "GetRuleIndex", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetSourceInterval", name: "GetSourceInterval", pkg: "", typ: $funcType([], [ptrType$42], false)}, {prop: "GetStart", name: "GetStart", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetStop", name: "GetStop", pkg: "", typ: $funcType([], [antlr.Token], false)}, {prop: "GetText", name: "GetText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsNumberContext", name: "IsNumberContext", pkg: "", typ: $funcType([], [], false)}, {prop: "RemoveLastChild", name: "RemoveLastChild", pkg: "", typ: $funcType([], [], false)}, {prop: "SetAltNumber", name: "SetAltNumber", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetException", name: "SetException", pkg: "", typ: $funcType([antlr.RecognitionException], [], false)}, {prop: "SetInvokingState", name: "SetInvokingState", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetParent", name: "SetParent", pkg: "", typ: $funcType([antlr.Tree], [], false)}, {prop: "SetStart", name: "SetStart", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "SetStop", name: "SetStop", pkg: "", typ: $funcType([antlr.Token], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([sliceType$1, antlr.RuleContext], [$String], false)}, {prop: "ToStringTree", name: "ToStringTree", pkg: "", typ: $funcType([sliceType$1, antlr.Recognizer], [$String], false)}]);
	NumberContext.init("github.com/mgrzeszczak/funlang/generated", [{prop: "BaseParserRuleContext", name: "BaseParserRuleContext", anonymous: true, exported: true, typ: ptrType$4, tag: ""}, {prop: "parser", name: "parser", anonymous: false, exported: false, typ: antlr.Parser, tag: ""}]);
	FunlangVisitor.init([{prop: "Visit", name: "Visit", pkg: "", typ: $funcType([antlr.ParseTree], [$emptyInterface], false)}, {prop: "VisitChildren", name: "VisitChildren", pkg: "", typ: $funcType([antlr.RuleNode], [$emptyInterface], false)}, {prop: "VisitComposition", name: "VisitComposition", pkg: "", typ: $funcType([ptrType$21], [$emptyInterface], false)}, {prop: "VisitDefinition", name: "VisitDefinition", pkg: "", typ: $funcType([ptrType$28], [$emptyInterface], false)}, {prop: "VisitErrorNode", name: "VisitErrorNode", pkg: "", typ: $funcType([antlr.ErrorNode], [$emptyInterface], false)}, {prop: "VisitExecution", name: "VisitExecution", pkg: "", typ: $funcType([ptrType$25], [$emptyInterface], false)}, {prop: "VisitFunction", name: "VisitFunction", pkg: "", typ: $funcType([ptrType$20], [$emptyInterface], false)}, {prop: "VisitFunctionList", name: "VisitFunctionList", pkg: "", typ: $funcType([ptrType$31], [$emptyInterface], false)}, {prop: "VisitInnerFunctions", name: "VisitInnerFunctions", pkg: "", typ: $funcType([ptrType$30], [$emptyInterface], false)}, {prop: "VisitName", name: "VisitName", pkg: "", typ: $funcType([ptrType$29], [$emptyInterface], false)}, {prop: "VisitNumber", name: "VisitNumber", pkg: "", typ: $funcType([ptrType$36], [$emptyInterface], false)}, {prop: "VisitParameterList", name: "VisitParameterList", pkg: "", typ: $funcType([ptrType$26], [$emptyInterface], false)}, {prop: "VisitParameters", name: "VisitParameters", pkg: "", typ: $funcType([ptrType$27], [$emptyInterface], false)}, {prop: "VisitPrimitiveRecursion", name: "VisitPrimitiveRecursion", pkg: "", typ: $funcType([ptrType$32], [$emptyInterface], false)}, {prop: "VisitProgram", name: "VisitProgram", pkg: "", typ: $funcType([ptrType$23], [$emptyInterface], false)}, {prop: "VisitProjection", name: "VisitProjection", pkg: "", typ: $funcType([ptrType$35], [$emptyInterface], false)}, {prop: "VisitStatement", name: "VisitStatement", pkg: "", typ: $funcType([ptrType$24], [$emptyInterface], false)}, {prop: "VisitSuccessor", name: "VisitSuccessor", pkg: "", typ: $funcType([ptrType$34], [$emptyInterface], false)}, {prop: "VisitTerminal", name: "VisitTerminal", pkg: "", typ: $funcType([antlr.TerminalNode], [$emptyInterface], false)}, {prop: "VisitZero", name: "VisitZero", pkg: "", typ: $funcType([ptrType$33], [$emptyInterface], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = antlr.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		serializedLexerAtn = new sliceType([3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 19, 106, 8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9, 18, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3, 11, 3, 12, 3, 12, 3, 13, 3, 13, 3, 14, 3, 14, 3, 15, 6, 15, 67, 10, 15, 13, 15, 14, 15, 68, 3, 15, 3, 15, 3, 16, 3, 16, 5, 16, 75, 10, 16, 3, 16, 5, 16, 78, 10, 16, 3, 16, 3, 16, 3, 17, 3, 17, 3, 17, 3, 17, 7, 17, 86, 10, 17, 12, 17, 14, 17, 89, 11, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 18, 3, 18, 3, 18, 3, 18, 7, 18, 100, 10, 18, 12, 18, 14, 18, 103, 11, 18, 3, 18, 3, 18, 3, 87, 2, 19, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 25, 14, 27, 15, 29, 16, 31, 17, 33, 18, 35, 19, 3, 2, 6, 5, 2, 67, 92, 97, 97, 99, 124, 3, 2, 50, 59, 4, 2, 11, 11, 34, 34, 4, 2, 12, 12, 15, 15, 2, 110, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2, 2, 2, 2, 27, 3, 2, 2, 2, 2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2, 35, 3, 2, 2, 2, 3, 37, 3, 2, 2, 2, 5, 39, 3, 2, 2, 2, 7, 41, 3, 2, 2, 2, 9, 43, 3, 2, 2, 2, 11, 47, 3, 2, 2, 2, 13, 49, 3, 2, 2, 2, 15, 51, 3, 2, 2, 2, 17, 53, 3, 2, 2, 2, 19, 55, 3, 2, 2, 2, 21, 57, 3, 2, 2, 2, 23, 59, 3, 2, 2, 2, 25, 61, 3, 2, 2, 2, 27, 63, 3, 2, 2, 2, 29, 66, 3, 2, 2, 2, 31, 77, 3, 2, 2, 2, 33, 81, 3, 2, 2, 2, 35, 95, 3, 2, 2, 2, 37, 38, 7, 92, 2, 2, 38, 4, 3, 2, 2, 2, 39, 40, 7, 85, 2, 2, 40, 6, 3, 2, 2, 2, 41, 42, 7, 82, 2, 2, 42, 8, 3, 2, 2, 2, 43, 44, 7, 102, 2, 2, 44, 45, 7, 103, 2, 2, 45, 46, 7, 104, 2, 2, 46, 10, 3, 2, 2, 2, 47, 48, 7, 63, 2, 2, 48, 12, 3, 2, 2, 2, 49, 50, 7, 126, 2, 2, 50, 14, 3, 2, 2, 2, 51, 52, 7, 40, 2, 2, 52, 16, 3, 2, 2, 2, 53, 54, 7, 46, 2, 2, 54, 18, 3, 2, 2, 2, 55, 56, 7, 61, 2, 2, 56, 20, 3, 2, 2, 2, 57, 58, 7, 42, 2, 2, 58, 22, 3, 2, 2, 2, 59, 60, 7, 43, 2, 2, 60, 24, 3, 2, 2, 2, 61, 62, 9, 2, 2, 2, 62, 26, 3, 2, 2, 2, 63, 64, 9, 3, 2, 2, 64, 28, 3, 2, 2, 2, 65, 67, 9, 4, 2, 2, 66, 65, 3, 2, 2, 2, 67, 68, 3, 2, 2, 2, 68, 66, 3, 2, 2, 2, 68, 69, 3, 2, 2, 2, 69, 70, 3, 2, 2, 2, 70, 71, 8, 15, 2, 2, 71, 30, 3, 2, 2, 2, 72, 74, 7, 15, 2, 2, 73, 75, 7, 12, 2, 2, 74, 73, 3, 2, 2, 2, 74, 75, 3, 2, 2, 2, 75, 78, 3, 2, 2, 2, 76, 78, 7, 12, 2, 2, 77, 72, 3, 2, 2, 2, 77, 76, 3, 2, 2, 2, 78, 79, 3, 2, 2, 2, 79, 80, 8, 16, 2, 2, 80, 32, 3, 2, 2, 2, 81, 82, 7, 49, 2, 2, 82, 83, 7, 44, 2, 2, 83, 87, 3, 2, 2, 2, 84, 86, 11, 2, 2, 2, 85, 84, 3, 2, 2, 2, 86, 89, 3, 2, 2, 2, 87, 88, 3, 2, 2, 2, 87, 85, 3, 2, 2, 2, 88, 90, 3, 2, 2, 2, 89, 87, 3, 2, 2, 2, 90, 91, 7, 44, 2, 2, 91, 92, 7, 49, 2, 2, 92, 93, 3, 2, 2, 2, 93, 94, 8, 17, 2, 2, 94, 34, 3, 2, 2, 2, 95, 96, 7, 49, 2, 2, 96, 97, 7, 49, 2, 2, 97, 101, 3, 2, 2, 2, 98, 100, 10, 5, 2, 2, 99, 98, 3, 2, 2, 2, 100, 103, 3, 2, 2, 2, 101, 99, 3, 2, 2, 2, 101, 102, 3, 2, 2, 2, 102, 104, 3, 2, 2, 2, 103, 101, 3, 2, 2, 2, 104, 105, 8, 18, 2, 2, 105, 36, 3, 2, 2, 2, 8, 2, 68, 74, 77, 87, 101, 3, 8, 2, 2]);
		lexerDeserializer = antlr.NewATNDeserializer(ptrType.nil);
		_r = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		lexerAtn = _r;
		lexerChannelNames = new sliceType$1(["DEFAULT_TOKEN_CHANNEL", "HIDDEN"]);
		lexerModeNames = new sliceType$1(["DEFAULT_MODE"]);
		lexerLiteralNames = new sliceType$1(["", "'Z'", "'S'", "'P'", "'def'", "'='", "'|'", "'&'", "','", "';'", "'('", "')'"]);
		lexerSymbolicNames = new sliceType$1(["", "", "", "", "Define", "AssignmentOperator", "CompositionOperator", "PrimitiveRecursionOperator", "Comma", "Semicolon", "OpenParam", "CloseParam", "Nondigit", "Digit", "Whitespace", "Newline", "BlockComment", "LineComment"]);
		lexerRuleNames = new sliceType$1(["T__0", "T__1", "T__2", "Define", "AssignmentOperator", "CompositionOperator", "PrimitiveRecursionOperator", "Comma", "Semicolon", "OpenParam", "CloseParam", "Nondigit", "Digit", "Whitespace", "Newline", "BlockComment", "LineComment"]);
		lexerDecisionToDFA = $makeSlice(sliceType$2, lexerAtn.DecisionToState.$length);
		parserATN = new sliceType([3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 19, 144, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 3, 2, 3, 2, 3, 2, 6, 2, 38, 10, 2, 13, 2, 14, 2, 39, 3, 2, 5, 2, 43, 10, 2, 3, 3, 3, 3, 5, 3, 47, 10, 3, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 57, 10, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 65, 10, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 8, 3, 8, 7, 8, 74, 10, 8, 12, 8, 14, 8, 77, 11, 8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 7, 9, 85, 10, 9, 12, 9, 14, 9, 88, 11, 9, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 5, 10, 95, 10, 10, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 5, 11, 102, 10, 11, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 7, 12, 110, 10, 12, 12, 12, 14, 12, 113, 11, 12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 123, 10, 13, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 15, 3, 15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 17, 6, 17, 140, 10, 17, 13, 17, 14, 17, 141, 3, 17, 2, 4, 16, 22, 18, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 2, 3, 3, 2, 14, 15, 2, 142, 2, 42, 3, 2, 2, 2, 4, 46, 3, 2, 2, 2, 6, 48, 3, 2, 2, 2, 8, 56, 3, 2, 2, 2, 10, 64, 3, 2, 2, 2, 12, 66, 3, 2, 2, 2, 14, 71, 3, 2, 2, 2, 16, 78, 3, 2, 2, 2, 18, 94, 3, 2, 2, 2, 20, 101, 3, 2, 2, 2, 22, 103, 3, 2, 2, 2, 24, 122, 3, 2, 2, 2, 26, 124, 3, 2, 2, 2, 28, 129, 3, 2, 2, 2, 30, 131, 3, 2, 2, 2, 32, 139, 3, 2, 2, 2, 34, 35, 5, 4, 3, 2, 35, 36, 7, 11, 2, 2, 36, 38, 3, 2, 2, 2, 37, 34, 3, 2, 2, 2, 38, 39, 3, 2, 2, 2, 39, 37, 3, 2, 2, 2, 39, 40, 3, 2, 2, 2, 40, 43, 3, 2, 2, 2, 41, 43, 3, 2, 2, 2, 42, 37, 3, 2, 2, 2, 42, 41, 3, 2, 2, 2, 43, 3, 3, 2, 2, 2, 44, 47, 5, 12, 7, 2, 45, 47, 5, 6, 4, 2, 46, 44, 3, 2, 2, 2, 46, 45, 3, 2, 2, 2, 47, 5, 3, 2, 2, 2, 48, 49, 5, 14, 8, 2, 49, 50, 5, 10, 6, 2, 50, 7, 3, 2, 2, 2, 51, 57, 5, 32, 17, 2, 52, 53, 5, 32, 17, 2, 53, 54, 7, 10, 2, 2, 54, 55, 5, 8, 5, 2, 55, 57, 3, 2, 2, 2, 56, 51, 3, 2, 2, 2, 56, 52, 3, 2, 2, 2, 57, 9, 3, 2, 2, 2, 58, 59, 7, 12, 2, 2, 59, 65, 7, 13, 2, 2, 60, 61, 7, 12, 2, 2, 61, 62, 5, 8, 5, 2, 62, 63, 7, 13, 2, 2, 63, 65, 3, 2, 2, 2, 64, 58, 3, 2, 2, 2, 64, 60, 3, 2, 2, 2, 65, 11, 3, 2, 2, 2, 66, 67, 7, 6, 2, 2, 67, 68, 5, 14, 8, 2, 68, 69, 7, 7, 2, 2, 69, 70, 5, 16, 9, 2, 70, 13, 3, 2, 2, 2, 71, 75, 7, 14, 2, 2, 72, 74, 9, 2, 2, 2, 73, 72, 3, 2, 2, 2, 74, 77, 3, 2, 2, 2, 75, 73, 3, 2, 2, 2, 75, 76, 3, 2, 2, 2, 76, 15, 3, 2, 2, 2, 77, 75, 3, 2, 2, 2, 78, 79, 8, 9, 1, 2, 79, 80, 5, 22, 12, 2, 80, 86, 3, 2, 2, 2, 81, 82, 12, 3, 2, 2, 82, 83, 7, 8, 2, 2, 83, 85, 5, 18, 10, 2, 84, 81, 3, 2, 2, 2, 85, 88, 3, 2, 2, 2, 86, 84, 3, 2, 2, 2, 86, 87, 3, 2, 2, 2, 87, 17, 3, 2, 2, 2, 88, 86, 3, 2, 2, 2, 89, 90, 7, 12, 2, 2, 90, 91, 5, 20, 11, 2, 91, 92, 7, 13, 2, 2, 92, 95, 3, 2, 2, 2, 93, 95, 5, 16, 9, 2, 94, 89, 3, 2, 2, 2, 94, 93, 3, 2, 2, 2, 95, 19, 3, 2, 2, 2, 96, 102, 5, 16, 9, 2, 97, 98, 5, 16, 9, 2, 98, 99, 7, 10, 2, 2, 99, 100, 5, 20, 11, 2, 100, 102, 3, 2, 2, 2, 101, 96, 3, 2, 2, 2, 101, 97, 3, 2, 2, 2, 102, 21, 3, 2, 2, 2, 103, 104, 8, 12, 1, 2, 104, 105, 5, 24, 13, 2, 105, 111, 3, 2, 2, 2, 106, 107, 12, 4, 2, 2, 107, 108, 7, 9, 2, 2, 108, 110, 5, 24, 13, 2, 109, 106, 3, 2, 2, 2, 110, 113, 3, 2, 2, 2, 111, 109, 3, 2, 2, 2, 111, 112, 3, 2, 2, 2, 112, 23, 3, 2, 2, 2, 113, 111, 3, 2, 2, 2, 114, 115, 7, 12, 2, 2, 115, 116, 5, 16, 9, 2, 116, 117, 7, 13, 2, 2, 117, 123, 3, 2, 2, 2, 118, 123, 5, 26, 14, 2, 119, 123, 5, 28, 15, 2, 120, 123, 5, 30, 16, 2, 121, 123, 5, 14, 8, 2, 122, 114, 3, 2, 2, 2, 122, 118, 3, 2, 2, 2, 122, 119, 3, 2, 2, 2, 122, 120, 3, 2, 2, 2, 122, 121, 3, 2, 2, 2, 123, 25, 3, 2, 2, 2, 124, 125, 7, 3, 2, 2, 125, 126, 7, 12, 2, 2, 126, 127, 5, 32, 17, 2, 127, 128, 7, 13, 2, 2, 128, 27, 3, 2, 2, 2, 129, 130, 7, 4, 2, 2, 130, 29, 3, 2, 2, 2, 131, 132, 7, 5, 2, 2, 132, 133, 7, 12, 2, 2, 133, 134, 5, 32, 17, 2, 134, 135, 7, 10, 2, 2, 135, 136, 5, 32, 17, 2, 136, 137, 7, 13, 2, 2, 137, 31, 3, 2, 2, 2, 138, 140, 7, 15, 2, 2, 139, 138, 3, 2, 2, 2, 140, 141, 3, 2, 2, 2, 141, 139, 3, 2, 2, 2, 141, 142, 3, 2, 2, 2, 142, 33, 3, 2, 2, 2, 14, 39, 42, 46, 56, 64, 75, 86, 94, 101, 111, 122, 141]);
		deserializer = antlr.NewATNDeserializer(ptrType.nil);
		_r$1 = deserializer.DeserializeFromUInt16(parserATN); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		deserializedATN = _r$1;
		literalNames = new sliceType$1(["", "'Z'", "'S'", "'P'", "'def'", "'='", "'|'", "'&'", "','", "';'", "'('", "')'"]);
		symbolicNames = new sliceType$1(["", "", "", "", "Define", "AssignmentOperator", "CompositionOperator", "PrimitiveRecursionOperator", "Comma", "Semicolon", "OpenParam", "CloseParam", "Nondigit", "Digit", "Whitespace", "Newline", "BlockComment", "LineComment"]);
		ruleNames = new sliceType$1(["program", "statement", "execution", "parameterList", "parameters", "definition", "name", "function", "innerFunctions", "functionList", "composition", "primitiveRecursion", "zero", "successor", "projection", "number"]);
		decisionToDFA = $makeSlice(sliceType$2, deserializedATN.DecisionToState.$length);
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/mgrzeszczak/funlang/interpreter"] = (function() {
	var $pkg = {}, $init, errors, fmt, generated, strconv, Function, Console, FunlangInterpreter, sliceType, sliceType$1, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, sliceType$2, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, funcType, ptrType$14, ptrType$15, mapType, checkDomain, NewFunction, Zero, Successor, Projection, NewFunlangInterpreter;
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	generated = $packages["github.com/mgrzeszczak/funlang/generated"];
	strconv = $packages["strconv"];
	Function = $pkg.Function = $newType(0, $kindStruct, "interpreter.Function", true, "github.com/mgrzeszczak/funlang/interpreter", true, function(domain_, name_, body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.domain = 0;
			this.name = "";
			this.body = $throwNilPointerError;
			return;
		}
		this.domain = domain_;
		this.name = name_;
		this.body = body_;
	});
	Console = $pkg.Console = $newType(8, $kindInterface, "interpreter.Console", true, "github.com/mgrzeszczak/funlang/interpreter", true, null);
	FunlangInterpreter = $pkg.FunlangInterpreter = $newType(0, $kindStruct, "interpreter.FunlangInterpreter", true, "github.com/mgrzeszczak/funlang/interpreter", true, function(functions_, Console_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.functions = false;
			this.Console = $ifaceNil;
			return;
		}
		this.functions = functions_;
		this.Console = Console_;
	});
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Int);
	ptrType = $ptrType(generated.ParametersContext);
	ptrType$1 = $ptrType(generated.ParameterListContext);
	ptrType$2 = $ptrType(Function);
	ptrType$3 = $ptrType(generated.StatementContext);
	ptrType$4 = $ptrType(generated.DefinitionContext);
	ptrType$5 = $ptrType(generated.ExecutionContext);
	ptrType$6 = $ptrType(generated.FunctionContext);
	ptrType$7 = $ptrType(generated.CompositionContext);
	sliceType$2 = $sliceType(ptrType$2);
	ptrType$8 = $ptrType(generated.InnerFunctionsContext);
	ptrType$9 = $ptrType(generated.FunctionListContext);
	ptrType$10 = $ptrType(generated.PrimitiveRecursionContext);
	ptrType$11 = $ptrType(generated.ZeroContext);
	ptrType$12 = $ptrType(generated.ProjectionContext);
	ptrType$13 = $ptrType(generated.SuccessorContext);
	funcType = $funcType([sliceType$1], [$Int], false);
	ptrType$14 = $ptrType(generated.ProgramContext);
	ptrType$15 = $ptrType(FunlangInterpreter);
	mapType = $mapType($String, ptrType$2);
	Function.ptr.prototype.Domain = function() {
		var f;
		f = this;
		return f.domain;
	};
	Function.prototype.Domain = function() { return this.$val.Domain(); };
	Function.ptr.prototype.Name = function() {
		var f;
		f = this;
		return f.name;
	};
	Function.prototype.Name = function() { return this.$val.Name(); };
	Function.ptr.prototype.Call = function(args) {
		var _r, args, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; args = $f.args; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		f.checkArgs(args);
		_r = f.body(args); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Function.ptr.prototype.Call }; } $f._r = _r; $f.args = args; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Function.prototype.Call = function(args) { return this.$val.Call(args); };
	Function.ptr.prototype.checkArgs = function(args) {
		var _i, _ref, a, args, f;
		f = this;
		if (!((args.$length === f.domain))) {
			$panic($pkg.ERR_WRONG_ARG_COUNT);
		}
		_ref = args;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			a = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			f.checkArg(a);
			_i++;
		}
	};
	Function.prototype.checkArgs = function(args) { return this.$val.checkArgs(args); };
	Function.ptr.prototype.checkArg = function(arg) {
		var arg, f;
		f = this;
		if (arg < 0) {
			$panic($pkg.ERR_NEGATIVE_ARG);
		}
	};
	Function.prototype.checkArg = function(arg) { return this.$val.checkArg(arg); };
	checkDomain = function(domain) {
		var domain;
		if (domain < 0) {
			$panic($pkg.ERR_NEGATIVE_DOMAIN);
		}
	};
	NewFunction = function(name, domain, body) {
		var body, domain, name;
		checkDomain(domain);
		return new Function.ptr(domain, name, body);
	};
	$pkg.NewFunction = NewFunction;
	Function.ptr.prototype.Compose = function(funs) {
		var _i, _i$1, _r, _r$1, _r$2, _ref, _ref$1, domain, f, f$1, fun, funs, i, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; domain = $f.domain; f = $f.f; f$1 = $f.f$1; fun = $f.fun; funs = $f.funs; i = $f.i; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = [f];
		funs = [funs];
		f[0] = this;
		if (!((funs[0].$length === f[0].domain))) {
			$panic($pkg.ERR_WRONG_FUNC_COUNT);
		}
		domain = 0;
		if (funs[0].$length === 0) {
			domain = 0;
		} else {
			domain = (0 >= funs[0].$length ? ($throwRuntimeError("index out of range"), undefined) : funs[0].$array[funs[0].$offset + 0]).domain;
			_ref = funs[0];
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				fun = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (!((domain === fun.domain))) {
					$panic($pkg.ERR_INVALID_DOMAINS);
				}
				_i++;
			}
		}
		_r = fmt.Sprintf("%v(", new sliceType([new $String(f[0].name)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		name = _r;
		_ref$1 = funs[0];
		_i$1 = 0;
		/* while (true) { */ case 2:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 3; continue; }
			i = _i$1;
			f$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			/* */ if (!((i === (funs[0].$length - 1 >> 0)))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!((i === (funs[0].$length - 1 >> 0)))) { */ case 4:
				_r$1 = fmt.Sprintf("%v,", new sliceType([new $String(f$1.name)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				name = name + (_r$1);
				$s = 6; continue;
			/* } else { */ case 5:
				_r$2 = fmt.Sprintf("%v)", new sliceType([new $String(f$1.name)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				name = name + (_r$2);
			/* } */ case 6:
			_i$1++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return NewFunction(name, domain, (function(f, funs) { return function $b(input) {
			var _i$2, _r$3, _r$4, _ref$2, args, fun$1, i$1, input, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i$2 = $f._i$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref$2 = $f._ref$2; args = $f.args; fun$1 = $f.fun$1; i$1 = $f.i$1; input = $f.input; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			args = $makeSlice(sliceType$1, f[0].domain);
			_ref$2 = funs[0];
			_i$2 = 0;
			/* while (true) { */ case 1:
				/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 2; continue; }
				i$1 = _i$2;
				fun$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
				_r$3 = fun$1.Call(input); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				((i$1 < 0 || i$1 >= args.$length) ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + i$1] = _r$3);
				_i$2++;
			/* } */ $s = 1; continue; case 2:
			_r$4 = f[0].Call(args); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return _r$4;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._i$2 = _i$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref$2 = _ref$2; $f.args = args; $f.fun$1 = fun$1; $f.i$1 = i$1; $f.input = input; $f.$s = $s; $f.$r = $r; return $f;
		}; })(f, funs));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Function.ptr.prototype.Compose }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f.domain = domain; $f.f = f; $f.f$1 = f$1; $f.fun = fun; $f.funs = funs; $f.i = i; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	Function.prototype.Compose = function(funs) { return this.$val.Compose(funs); };
	Function.ptr.prototype.Recurse = function(h) {
		var domain, g, h;
		g = this;
		if (!((h.domain === (g.domain + 2 >> 0)))) {
			$panic($pkg.ERR_RECURSE_DOMAINS);
		}
		domain = g.domain + 1 >> 0;
		return NewFunction(g.name + "_r_" + h.name, domain, (function $b(args) {
			var _r, _r$1, args, hargs, i, n, v, values, x, x$1, x$2, x$3, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; args = $f.args; hargs = $f.hargs; i = $f.i; n = $f.n; v = $f.v; values = $f.values; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			hargs = $makeSlice(sliceType$1, (domain + 1 >> 0));
			n = (x = domain - 1 >> 0, ((x < 0 || x >= args.$length) ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + x]));
			values = $makeSlice(sliceType$1, (n + 1 >> 0));
			i = 0;
			/* while (true) { */ case 1:
				/* if (!(i <= n)) { break; } */ if(!(i <= n)) { $s = 2; continue; }
				v = 0;
				/* */ if (i === 0) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (i === 0) { */ case 3:
					_r = g.Call($subslice(args, 0, g.domain)); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					$s = 5; continue;
				/* } else { */ case 4:
					$copySlice($subslice(hargs, 0, g.domain), $subslice(args, 0, g.domain));
					(x$1 = g.domain, ((x$1 < 0 || x$1 >= hargs.$length) ? ($throwRuntimeError("index out of range"), undefined) : hargs.$array[hargs.$offset + x$1] = (i - 1 >> 0)));
					(x$3 = g.domain + 1 >> 0, ((x$3 < 0 || x$3 >= hargs.$length) ? ($throwRuntimeError("index out of range"), undefined) : hargs.$array[hargs.$offset + x$3] = (x$2 = i - 1 >> 0, ((x$2 < 0 || x$2 >= values.$length) ? ($throwRuntimeError("index out of range"), undefined) : values.$array[values.$offset + x$2]))));
					_r$1 = h.Call(hargs); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					v = _r$1;
				/* } */ case 5:
				((i < 0 || i >= values.$length) ? ($throwRuntimeError("index out of range"), undefined) : values.$array[values.$offset + i] = v);
				i = i + (1) >> 0;
			/* } */ $s = 1; continue; case 2:
			$s = -1; return ((n < 0 || n >= values.$length) ? ($throwRuntimeError("index out of range"), undefined) : values.$array[values.$offset + n]);
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f._r$1 = _r$1; $f.args = args; $f.hargs = hargs; $f.i = i; $f.n = n; $f.v = v; $f.values = values; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
		}));
	};
	Function.prototype.Recurse = function(h) { return this.$val.Recurse(h); };
	Zero = function(domain) {
		var _r, _r$1, domain, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; domain = $f.domain; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = fmt.Sprintf("Zero%v", new sliceType([new $Int(domain)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = NewFunction(_r, domain, (function(args) {
			var args;
			return 0;
		})); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Zero }; } $f._r = _r; $f._r$1 = _r$1; $f.domain = domain; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Zero = Zero;
	Successor = function() {
		return NewFunction("Successor", 1, (function(args) {
			var args;
			return (0 >= args.$length ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + 0]) + 1 >> 0;
		}));
	};
	$pkg.Successor = Successor;
	Projection = function(from, which) {
		var _r, _r$1, from, which, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; from = $f.from; which = $f.which; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		which = [which];
		_r = fmt.Sprintf("Projection(%v,%v)", new sliceType([new $Int(from), new $Int(which[0])])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = NewFunction(_r, from, (function(which) { return function(args) {
			var args;
			return ((which[0] < 0 || which[0] >= args.$length) ? ($throwRuntimeError("index out of range"), undefined) : args.$array[args.$offset + which[0]]);
		}; })(which)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Projection }; } $f._r = _r; $f._r$1 = _r$1; $f.from = from; $f.which = which; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Projection = Projection;
	NewFunlangInterpreter = function(console) {
		var console;
		return new FunlangInterpreter.ptr({}, console);
	};
	$pkg.NewFunlangInterpreter = NewFunlangInterpreter;
	FunlangInterpreter.ptr.prototype.visitExecution = function(ctx) {
		var _arg, _arg$1, _arg$2, _entry, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, args, argsCtx, ctx, e, f, i, input, n, name, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; args = $f.args; argsCtx = $f.argsCtx; ctx = $f.ctx; e = $f.e; f = $f.f; i = $f.i; input = $f.input; n = $f.n; name = $f.name; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_r = ctx.Name(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.GetText(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		name = _r$1;
		input = new sliceType$1([]);
		_r$2 = ctx.Parameters(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = $assertType(_r$2, ptrType).ParameterList(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		args = _r$3;
		/* while (true) { */ case 5:
			/* if (!(!($interfaceIsEqual(args, $ifaceNil)))) { break; } */ if(!(!($interfaceIsEqual(args, $ifaceNil)))) { $s = 6; continue; }
			argsCtx = $assertType(args, ptrType$1);
			_r$4 = argsCtx.Number(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = _r$4.GetText(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = strconv.Atoi(_r$5); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple = _r$6;
			n = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				$panic(e);
			}
			input = $append(input, n);
			_r$7 = argsCtx.ParameterList(); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			args = _r$7;
		/* } */ $s = 5; continue; case 6:
		_tuple$1 = (_entry = i.functions[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : [ptrType$2.nil, false]);
		f = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (!ok) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (!ok) { */ case 11:
			_r$8 = fmt.Sprintf("Function %v is not defined", new sliceType([new $String(name)])); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			$panic(new $String(_r$8));
		/* } */ case 12:
		_arg = new $String(name);
		_arg$1 = input;
		_r$9 = f.Call(input); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_arg$2 = new $Int(_r$9);
		$r = i.Console.Log("%v%v = %v\n", new sliceType([_arg, _arg$1, _arg$2])); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunlangInterpreter.ptr.prototype.visitExecution }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.args = args; $f.argsCtx = argsCtx; $f.ctx = ctx; $f.e = e; $f.f = f; $f.i = i; $f.input = input; $f.n = n; $f.name = name; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunlangInterpreter.prototype.visitExecution = function(ctx) { return this.$val.visitExecution(ctx); };
	FunlangInterpreter.ptr.prototype.Run = function(ctx) {
		var _i, _r, _r$1, _r$2, _r$3, _ref, ctx, i, stmt, stmtCtx, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; ctx = $f.ctx; i = $f.i; stmt = $f.stmt; stmtCtx = $f.stmtCtx; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_r = ctx.AllStatement(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_ref = _r;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			stmt = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			stmtCtx = $assertType(stmt, ptrType$3);
			_r$1 = stmtCtx.Definition(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(_r$1, $ifaceNil))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!($interfaceIsEqual(_r$1, $ifaceNil))) { */ case 4:
				_r$2 = stmtCtx.Definition(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = i.visitDefinition($assertType(_r$2, ptrType$4)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else { */ case 5:
				_r$3 = stmtCtx.Execution(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$r = i.visitExecution($assertType(_r$3, ptrType$5)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunlangInterpreter.ptr.prototype.Run }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.ctx = ctx; $f.i = i; $f.stmt = stmt; $f.stmtCtx = stmtCtx; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunlangInterpreter.prototype.Run = function(ctx) { return this.$val.Run(ctx); };
	FunlangInterpreter.ptr.prototype.visitDefinition = function(d) {
		var _key, _r, _r$1, _r$2, _r$3, d, function$1, i, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; d = $f.d; function$1 = $f.function$1; i = $f.i; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_r = d.Name(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.GetText(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		name = _r$1;
		_r$2 = d.Function(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = i.visitFunction($assertType(_r$2, ptrType$6)); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		function$1 = _r$3;
		_key = name; (i.functions || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: function$1 };
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunlangInterpreter.ptr.prototype.visitDefinition }; } $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.d = d; $f.function$1 = function$1; $f.i = i; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunlangInterpreter.prototype.visitDefinition = function(d) { return this.$val.visitDefinition(d); };
	FunlangInterpreter.ptr.prototype.visitFunction = function(f) {
		var _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, f, fsctx, funs, funsCtx, i, innerf, left, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; f = $f.f; fsctx = $f.fsctx; funs = $f.funs; funsCtx = $f.funsCtx; i = $f.i; innerf = $f.innerf; left = $f.left; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_r = f.Function(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if ($interfaceIsEqual(_r, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(_r, $ifaceNil)) { */ case 1:
			_r$1 = f.Composition(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = i.visitComposition($assertType(_r$1, ptrType$7)); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } else { */ case 2:
			_r$3 = f.Function(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = i.visitFunction($assertType(_r$3, ptrType$6)); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			left = _r$4;
			funs = new sliceType$2([]);
			_r$5 = f.InnerFunctions(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = $assertType(_r$5, ptrType$8).Function(); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			innerf = _r$6;
			/* */ if (!($interfaceIsEqual(innerf, $ifaceNil))) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (!($interfaceIsEqual(innerf, $ifaceNil))) { */ case 11:
				_r$7 = i.visitFunction($assertType(innerf, ptrType$6)); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				funs = $append(funs, _r$7);
				$s = 13; continue;
			/* } else { */ case 12:
				_r$8 = f.InnerFunctions(); /* */ $s = 15; case 15: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$9 = $assertType(_r$8, ptrType$8).FunctionList(); /* */ $s = 16; case 16: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				funsCtx = _r$9;
				/* while (true) { */ case 17:
					/* if (!(!($interfaceIsEqual(funsCtx, $ifaceNil)))) { break; } */ if(!(!($interfaceIsEqual(funsCtx, $ifaceNil)))) { $s = 18; continue; }
					fsctx = $assertType(funsCtx, ptrType$9);
					_r$10 = fsctx.Function(); /* */ $s = 19; case 19: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_r$11 = i.visitFunction($assertType(_r$10, ptrType$6)); /* */ $s = 20; case 20: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					funs = $append(funs, _r$11);
					_r$12 = fsctx.FunctionList(); /* */ $s = 21; case 21: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					funsCtx = _r$12;
				/* } */ $s = 17; continue; case 18:
			/* } */ case 13:
			_r$13 = left.Compose(funs); /* */ $s = 22; case 22: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			$s = -1; return _r$13;
		/* } */ case 3:
		$s = -1; return ptrType$2.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunlangInterpreter.ptr.prototype.visitFunction }; } $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.f = f; $f.fsctx = fsctx; $f.funs = funs; $f.funsCtx = funsCtx; $f.i = i; $f.innerf = innerf; $f.left = left; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunlangInterpreter.prototype.visitFunction = function(f) { return this.$val.visitFunction(f); };
	FunlangInterpreter.ptr.prototype.visitComposition = function(f) {
		var _r, _r$1, _r$2, _r$3, _r$4, f, i, left, right, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; f = $f.f; i = $f.i; left = $f.left; right = $f.right; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_r = f.PrimitiveRecursion(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = i.visitPrimitiveRecursion($assertType(_r, ptrType$10)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		right = _r$1;
		_r$2 = f.Composition(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if ($interfaceIsEqual(_r$2, $ifaceNil)) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($interfaceIsEqual(_r$2, $ifaceNil)) { */ case 3:
			$s = -1; return right;
		/* } else { */ case 4:
			_r$3 = f.Composition(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = i.visitComposition($assertType(_r$3, ptrType$7)); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			left = _r$4;
			$s = -1; return left.Recurse(right);
		/* } */ case 5:
		$s = -1; return ptrType$2.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunlangInterpreter.ptr.prototype.visitComposition }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.f = f; $f.i = i; $f.left = left; $f.right = right; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunlangInterpreter.prototype.visitComposition = function(f) { return this.$val.visitComposition(f); };
	FunlangInterpreter.ptr.prototype.visitPrimitiveRecursion = function(f) {
		var _arg, _entry, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, f, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; f = $f.f; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_r = f.OpenParam(); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!($interfaceIsEqual(_r, $ifaceNil))) { $s = 1; continue; }
		_r$1 = f.Name(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (!($interfaceIsEqual(_r$1, $ifaceNil))) { $s = 2; continue; }
		_r$2 = f.Zero(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (!($interfaceIsEqual(_r$2, $ifaceNil))) { $s = 3; continue; }
		_r$3 = f.Projection(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!($interfaceIsEqual(_r$3, $ifaceNil))) { $s = 4; continue; }
		_r$4 = f.Successor(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (!($interfaceIsEqual(_r$4, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(_r, $ifaceNil))) { */ case 1:
			_r$5 = f.Function(); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = i.visitFunction($assertType(_r$5, ptrType$6)); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$s = -1; return _r$6;
		/* } else if (!($interfaceIsEqual(_r$1, $ifaceNil))) { */ case 2:
			_r$7 = f.Name(); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$8 = _r$7.GetText(); /* */ $s = 15; case 15: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			$s = -1; return (_entry = i.functions[$String.keyFor(_r$8)], _entry !== undefined ? _entry.v : ptrType$2.nil);
		/* } else if (!($interfaceIsEqual(_r$2, $ifaceNil))) { */ case 3:
			_r$9 = f.Zero(); /* */ $s = 16; case 16: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$10 = i.visitZero($assertType(_r$9, ptrType$11)); /* */ $s = 17; case 17: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			$s = -1; return _r$10;
		/* } else if (!($interfaceIsEqual(_r$3, $ifaceNil))) { */ case 4:
			_r$11 = f.Projection(); /* */ $s = 18; case 18: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$12 = i.visitProjection($assertType(_r$11, ptrType$12)); /* */ $s = 19; case 19: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			$s = -1; return _r$12;
		/* } else if (!($interfaceIsEqual(_r$4, $ifaceNil))) { */ case 5:
			_r$13 = f.Successor(); /* */ $s = 20; case 20: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = i.visitSuccessor($assertType(_r$13, ptrType$13)); /* */ $s = 21; case 21: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			$s = -1; return _r$14;
		/* } */ case 6:
		_r$15 = f.BaseParserRuleContext.GetText(); /* */ $s = 22; case 22: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_arg = new $String(_r$15);
		_r$16 = fmt.Sprintf("invalid primitive recursion node: %v", new sliceType([_arg])); /* */ $s = 23; case 23: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		$panic(new $String(_r$16));
		$s = -1; return ptrType$2.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunlangInterpreter.ptr.prototype.visitPrimitiveRecursion }; } $f._arg = _arg; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.f = f; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunlangInterpreter.prototype.visitPrimitiveRecursion = function(f) { return this.$val.visitPrimitiveRecursion(f); };
	FunlangInterpreter.ptr.prototype.visitZero = function(f) {
		var _r, _r$1, _r$2, _r$3, _tuple, domain, e, f, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; domain = $f.domain; e = $f.e; f = $f.f; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_r = f.Number(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.GetText(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = strconv.Atoi(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		domain = _tuple[0];
		e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$panic(e);
		}
		_r$3 = Zero(domain); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunlangInterpreter.ptr.prototype.visitZero }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.domain = domain; $f.e = e; $f.f = f; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunlangInterpreter.prototype.visitZero = function(f) { return this.$val.visitZero(f); };
	FunlangInterpreter.ptr.prototype.visitSuccessor = function(f) {
		var f, i;
		i = this;
		return Successor();
	};
	FunlangInterpreter.prototype.visitSuccessor = function(f) { return this.$val.visitSuccessor(f); };
	FunlangInterpreter.ptr.prototype.visitProjection = function(f) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, e, f, from, i, which, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; e = $f.e; f = $f.f; from = $f.from; i = $f.i; which = $f.which; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_r = f.Number(0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.GetText(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = strconv.Atoi(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		from = _tuple[0];
		e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$panic(e);
		}
		_r$3 = f.Number(1); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = _r$3.GetText(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = strconv.Atoi(_r$4); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$1 = _r$5;
		which = _tuple$1[0];
		e = _tuple$1[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$panic(e);
		}
		_r$6 = Projection(from, which); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FunlangInterpreter.ptr.prototype.visitProjection }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.e = e; $f.f = f; $f.from = from; $f.i = i; $f.which = which; $f.$s = $s; $f.$r = $r; return $f;
	};
	FunlangInterpreter.prototype.visitProjection = function(f) { return this.$val.visitProjection(f); };
	ptrType$2.methods = [{prop: "Domain", name: "Domain", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$1], [$Int], false)}, {prop: "checkArgs", name: "checkArgs", pkg: "github.com/mgrzeszczak/funlang/interpreter", typ: $funcType([sliceType$1], [], false)}, {prop: "checkArg", name: "checkArg", pkg: "github.com/mgrzeszczak/funlang/interpreter", typ: $funcType([$Int], [], false)}, {prop: "Compose", name: "Compose", pkg: "", typ: $funcType([sliceType$2], [ptrType$2], false)}, {prop: "Recurse", name: "Recurse", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}];
	ptrType$15.methods = [{prop: "visitExecution", name: "visitExecution", pkg: "github.com/mgrzeszczak/funlang/interpreter", typ: $funcType([ptrType$5], [], false)}, {prop: "Run", name: "Run", pkg: "", typ: $funcType([ptrType$14], [], false)}, {prop: "visitDefinition", name: "visitDefinition", pkg: "github.com/mgrzeszczak/funlang/interpreter", typ: $funcType([ptrType$4], [], false)}, {prop: "visitFunction", name: "visitFunction", pkg: "github.com/mgrzeszczak/funlang/interpreter", typ: $funcType([ptrType$6], [ptrType$2], false)}, {prop: "visitComposition", name: "visitComposition", pkg: "github.com/mgrzeszczak/funlang/interpreter", typ: $funcType([ptrType$7], [ptrType$2], false)}, {prop: "visitPrimitiveRecursion", name: "visitPrimitiveRecursion", pkg: "github.com/mgrzeszczak/funlang/interpreter", typ: $funcType([ptrType$10], [ptrType$2], false)}, {prop: "visitZero", name: "visitZero", pkg: "github.com/mgrzeszczak/funlang/interpreter", typ: $funcType([ptrType$11], [ptrType$2], false)}, {prop: "visitSuccessor", name: "visitSuccessor", pkg: "github.com/mgrzeszczak/funlang/interpreter", typ: $funcType([ptrType$13], [ptrType$2], false)}, {prop: "visitProjection", name: "visitProjection", pkg: "github.com/mgrzeszczak/funlang/interpreter", typ: $funcType([ptrType$12], [ptrType$2], false)}];
	Function.init("github.com/mgrzeszczak/funlang/interpreter", [{prop: "domain", name: "domain", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "body", name: "body", anonymous: false, exported: false, typ: funcType, tag: ""}]);
	Console.init([{prop: "Log", name: "Log", pkg: "", typ: $funcType([$String, sliceType], [], true)}]);
	FunlangInterpreter.init("github.com/mgrzeszczak/funlang/interpreter", [{prop: "functions", name: "functions", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "Console", name: "Console", anonymous: true, exported: true, typ: Console, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = generated.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ERR_WRONG_FUNC_COUNT = errors.New("wrong amount of funs passed to compose");
		$pkg.ERR_INVALID_DOMAINS = errors.New("functions to compose have invalid domains");
		$pkg.ERR_WRONG_ARG_COUNT = errors.New("wrong amount of args passed to function");
		$pkg.ERR_NEGATIVE_ARG = errors.New("argument is negative");
		$pkg.ERR_NEGATIVE_DOMAIN = errors.New("domain must be >=0");
		$pkg.ERR_RECURSE_DOMAINS = errors.New("invalid recurse function domains");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/mgrzeszczak/funlang/funlangjs"] = (function() {
	var $pkg = {}, $init, fmt, antlr, js, generated, interpreter, strings, WebConsole, ptrType, funcType, funcType$1, mapType, sliceType, ptrType$1, run, main;
	fmt = $packages["fmt"];
	antlr = $packages["github.com/antlr/antlr4/runtime/Go/antlr"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	generated = $packages["github.com/mgrzeszczak/funlang/generated"];
	interpreter = $packages["github.com/mgrzeszczak/funlang/interpreter"];
	strings = $packages["strings"];
	WebConsole = $pkg.WebConsole = $newType(0, $kindStruct, "main.WebConsole", true, "github.com/mgrzeszczak/funlang/funlangjs", true, function(log_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.log = $throwNilPointerError;
			return;
		}
		this.log = log_;
	});
	ptrType = $ptrType(generated.ProgramContext);
	funcType = $funcType([$String], [], false);
	funcType$1 = $funcType([$String, funcType], [], false);
	mapType = $mapType($String, $emptyInterface);
	sliceType = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(WebConsole);
	WebConsole.ptr.prototype.Log = function(format, args) {
		var _r, _r$1, args, c, format, text, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; args = $f.args; c = $f.c; format = $f.format; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = fmt.Printf(format, args); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		_r$1 = fmt.Sprintf(format, args); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		text = _r$1;
		text = strings.Replace(text, "[", "(", 1);
		text = strings.Replace(text, "]", ")", 1);
		$r = c.log(text); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WebConsole.ptr.prototype.Log }; } $f._r = _r; $f._r$1 = _r$1; $f.args = args; $f.c = c; $f.format = format; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;
	};
	WebConsole.prototype.Log = function(format, args) { return this.$val.Log(format, args); };
	run = function(input, log) {
		var _r, _r$1, in$1, input, lexer, log, parser, program, stream, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; in$1 = $f.in$1; input = $f.input; lexer = $f.lexer; log = $f.log; parser = $f.parser; program = $f.program; stream = $f.stream; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		in$1 = antlr.NewInputStream(input);
		lexer = generated.NewFunlangLexer(in$1);
		stream = antlr.NewCommonTokenStream(lexer, 0);
		_r = generated.NewFunlangParser(stream); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		parser = _r;
		parser.BaseParser.BaseRecognizer.RemoveErrorListeners();
		parser.BaseParser.BuildParseTrees = true;
		_r$1 = parser.Program(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		program = $assertType(_r$1, ptrType);
		$r = interpreter.NewFunlangInterpreter(new WebConsole.ptr(log)).Run(program); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: run }; } $f._r = _r; $f._r$1 = _r$1; $f.in$1 = in$1; $f.input = input; $f.lexer = lexer; $f.log = log; $f.parser = parser; $f.program = program; $f.stream = stream; $f.$s = $s; $f.$r = $r; return $f;
	};
	main = function() {
		$global.funlang = $externalize($makeMap($String.keyFor, [{ k: "runScript", v: new funcType$1(run) }]), mapType);
	};
	ptrType$1.methods = [{prop: "Log", name: "Log", pkg: "", typ: $funcType([$String, sliceType], [], true)}];
	WebConsole.init("github.com/mgrzeszczak/funlang/funlangjs", [{prop: "log", name: "log", anonymous: false, exported: false, typ: funcType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = antlr.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = generated.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = interpreter.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if ($pkg === $mainPkg) {
			main();
			$mainFinished = true;
		}
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$synthesizeMethods();
var $mainPkg = $packages["github.com/mgrzeszczak/funlang/funlangjs"];
$packages["runtime"].$init();
$go($mainPkg.$init, []);
$flushConsole();

}).call(this);
//# sourceMappingURL=funlangjs.js.map
